
Practica2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cfc  08005cfc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cfc  08005cfc  00006cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d04  08005d04  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00006d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08005d18  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08005d18  00007780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199c9  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003754  00000000  00000000  00020a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00024160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001302  00000000  00000000  00025a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296df  00000000  00000000  00026d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c959  00000000  00000000  000503e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa9bc  00000000  00000000  0006cd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001676f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006968  00000000  00000000  0016773c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0016e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c9c 	.word	0x08005c9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005c9c 	.word	0x08005c9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	619a      	str	r2, [r3, #24]
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    // Pulse clock
    LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
 80004f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fc:	f7ff ffdc 	bl	80004b8 <LL_GPIO_SetOutputPin>
    LL_mDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f005 fb77 	bl	8005bf4 <LL_mDelay>
    LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f7ff ffe1 	bl	80004d4 <LL_GPIO_ResetOutputPin>
     //LL_mDelay(1);
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <lcd_reset>:

void lcd_reset(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 800051c:	2104      	movs	r1, #4
 800051e:	4817      	ldr	r0, [pc, #92]	@ (800057c <lcd_reset+0x64>)
 8000520:	f7ff ffd8 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
 8000524:	2110      	movs	r1, #16
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f7ff ffd3 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
 800052e:	2108      	movs	r1, #8
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f7ff ffce 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
 8000538:	2112      	movs	r1, #18
 800053a:	4810      	ldr	r0, [pc, #64]	@ (800057c <lcd_reset+0x64>)
 800053c:	f7ff ffca 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK );
 8000540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f7ff ffc4 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4 );
 800054c:	2108      	movs	r1, #8
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f7ff ffb1 	bl	80004b8 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5 );
 8000556:	2110      	movs	r1, #16
 8000558:	4808      	ldr	r0, [pc, #32]	@ (800057c <lcd_reset+0x64>)
 800055a:	f7ff ffad 	bl	80004b8 <LL_GPIO_SetOutputPin>
    lcd_clock();
 800055e:	f7ff ffc7 	bl	80004f0 <lcd_clock>
    lcd_clock();
 8000562:	f7ff ffc5 	bl	80004f0 <lcd_clock>
    lcd_clock();
 8000566:	f7ff ffc3 	bl	80004f0 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800056a:	2108      	movs	r1, #8
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f7ff ffb0 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    lcd_clock();
 8000574:	f7ff ffbc 	bl	80004f0 <lcd_clock>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000400 	.word	0x48000400

08000580 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	091b      	lsrs	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d005      	beq.n	80005aa <lcd_write+0x2a>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800059e:	2108      	movs	r1, #8
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f7ff ff88 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005a8:	e004      	b.n	80005b4 <lcd_write+0x34>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 80005aa:	2108      	movs	r1, #8
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f7ff ff90 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 5 ) & 1)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	095b      	lsrs	r3, r3, #5
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d004      	beq.n	80005cc <lcd_write+0x4c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 80005c2:	2110      	movs	r1, #16
 80005c4:	483f      	ldr	r0, [pc, #252]	@ (80006c4 <lcd_write+0x144>)
 80005c6:	f7ff ff77 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005ca:	e003      	b.n	80005d4 <lcd_write+0x54>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 80005cc:	2110      	movs	r1, #16
 80005ce:	483d      	ldr	r0, [pc, #244]	@ (80006c4 <lcd_write+0x144>)
 80005d0:	f7ff ff80 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 6 ) & 1)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	099b      	lsrs	r3, r3, #6
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d004      	beq.n	80005ec <lcd_write+0x6c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 80005e2:	2102      	movs	r1, #2
 80005e4:	4837      	ldr	r0, [pc, #220]	@ (80006c4 <lcd_write+0x144>)
 80005e6:	f7ff ff67 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005ea:	e003      	b.n	80005f4 <lcd_write+0x74>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 80005ec:	2102      	movs	r1, #2
 80005ee:	4835      	ldr	r0, [pc, #212]	@ (80006c4 <lcd_write+0x144>)
 80005f0:	f7ff ff70 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 7 ) & 1)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	09db      	lsrs	r3, r3, #7
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <lcd_write+0x8e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 8000602:	2110      	movs	r1, #16
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f7ff ff56 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800060c:	e004      	b.n	8000618 <lcd_write+0x98>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f7ff ff5e 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if(rs)
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d004      	beq.n	8000628 <lcd_write+0xa8>
        LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
 800061e:	2104      	movs	r1, #4
 8000620:	4828      	ldr	r0, [pc, #160]	@ (80006c4 <lcd_write+0x144>)
 8000622:	f7ff ff49 	bl	80004b8 <LL_GPIO_SetOutputPin>
 8000626:	e003      	b.n	8000630 <lcd_write+0xb0>
    else
        LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000628:	2104      	movs	r1, #4
 800062a:	4826      	ldr	r0, [pc, #152]	@ (80006c4 <lcd_write+0x144>)
 800062c:	f7ff ff52 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 8000630:	f7ff ff5e 	bl	80004f0 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <lcd_write+0xca>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800063e:	2108      	movs	r1, #8
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f7ff ff38 	bl	80004b8 <LL_GPIO_SetOutputPin>
 8000648:	e004      	b.n	8000654 <lcd_write+0xd4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800064a:	2108      	movs	r1, #8
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f7ff ff40 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 1 ) & 1)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <lcd_write+0xec>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 8000662:	2110      	movs	r1, #16
 8000664:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <lcd_write+0x144>)
 8000666:	f7ff ff27 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800066a:	e003      	b.n	8000674 <lcd_write+0xf4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 800066c:	2110      	movs	r1, #16
 800066e:	4815      	ldr	r0, [pc, #84]	@ (80006c4 <lcd_write+0x144>)
 8000670:	f7ff ff30 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 2 ) & 1)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <lcd_write+0x10c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 8000682:	2102      	movs	r1, #2
 8000684:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <lcd_write+0x144>)
 8000686:	f7ff ff17 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800068a:	e003      	b.n	8000694 <lcd_write+0x114>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 800068c:	2102      	movs	r1, #2
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <lcd_write+0x144>)
 8000690:	f7ff ff20 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 3 ) & 1)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <lcd_write+0x12e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 80006a2:	2110      	movs	r1, #16
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f7ff ff06 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80006ac:	e004      	b.n	80006b8 <lcd_write+0x138>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f7ff ff0e 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 80006b8:	f7ff ff1a 	bl	80004f0 <lcd_clock>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400

080006c8 <lcd_clear>:

void lcd_clear(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff56 	bl	8000580 <lcd_write>
    _lcd_char = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <lcd_clear+0x1c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <lcd_clear+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	20000029 	.word	0x20000029

080006ec <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b25a      	sxtb	r2, r3
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25a      	sxtb	r2, r3
 8000714:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2d 	bl	8000580 <lcd_write>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff1c 	bl	8000580 <lcd_write>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff0b 	bl	8000580 <lcd_write>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	011a      	lsls	r2, r3, #4
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	dc0a      	bgt.n	80007aa <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feec 	bl	8000580 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80007a8:	e059      	b.n	800085e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	dd17      	ble.n	80007e0 <moveToXY+0x6c>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b1f      	cmp	r3, #31
 80007b4:	dc14      	bgt.n	80007e0 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	425a      	negs	r2, r3
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	f002 020f 	and.w	r2, r2, #15
 80007c2:	bf58      	it	pl
 80007c4:	4253      	negpl	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3340      	adds	r3, #64	@ 0x40
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fed1 	bl	8000580 <lcd_write>
 80007de:	e03e      	b.n	800085e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b28      	cmp	r3, #40	@ 0x28
 80007e4:	dd1b      	ble.n	800081e <moveToXY+0xaa>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80007ea:	dc18      	bgt.n	800081e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <moveToXY+0xf4>)
 80007f0:	fb83 1302 	smull	r1, r3, r3, r2
 80007f4:	1119      	asrs	r1, r3, #4
 80007f6:	17d3      	asrs	r3, r2, #31
 80007f8:	1ac9      	subs	r1, r1, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1ad1      	subs	r1, r2, r3
 8000804:	b2cb      	uxtb	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000810:	b25b      	sxtb	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff feb2 	bl	8000580 <lcd_write>
 800081c:	e01f      	b.n	800085e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b13      	cmp	r3, #19
 8000822:	dd1c      	ble.n	800085e <moveToXY+0xea>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b27      	cmp	r3, #39	@ 0x27
 8000828:	dc19      	bgt.n	800085e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <moveToXY+0xf8>)
 800082e:	fb83 1302 	smull	r1, r3, r3, r2
 8000832:	4413      	add	r3, r2
 8000834:	1159      	asrs	r1, r3, #5
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	b2cb      	uxtb	r3, r1
 8000846:	3354      	adds	r3, #84	@ 0x54
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe92 	bl	8000580 <lcd_write>
}
 800085c:	e7ff      	b.n	800085e <moveToXY+0xea>
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	66666667 	.word	0x66666667
 800086c:	88888889 	.word	0x88888889

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	@ (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	@ (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	@ 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << POSITION_VAL((Line >> LL_EXTI_REGISTER_PINPOS_SHFT)));
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	3302      	adds	r3, #2
 8000998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	43db      	mvns	r3, r3
 80009a2:	ea02 0103 	and.w	r1, r2, r3
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	fa93 f3a3 	rbit	r3, r3
 80009b2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80009be:	2320      	movs	r3, #32
 80009c0:	e003      	b.n	80009ca <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	fa03 f202 	lsl.w	r2, r3, r2
 80009d2:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <LL_SYSCFG_SetEXTISource+0x6c>)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	430a      	orrs	r2, r1
 80009dc:	3302      	adds	r3, #2
 80009de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009e2:	bf00      	nop
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40010000 	.word	0x40010000

080009f4 <LL_GPIO_SetPinMode>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	b08b      	sub	sp, #44	@ 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa93 f3a3 	rbit	r3, r3
 8000a0e:	613b      	str	r3, [r7, #16]
  return result;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	e003      	b.n	8000a26 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2103      	movs	r1, #3
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	401a      	ands	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	e003      	b.n	8000a54 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	fab3 f383 	clz	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	372c      	adds	r7, #44	@ 0x2c
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <LL_GPIO_SetPinPull>:
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b08b      	sub	sp, #44	@ 0x2c
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	fa93 f3a3 	rbit	r3, r3
 8000a88:	613b      	str	r3, [r7, #16]
  return result;
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000a94:	2320      	movs	r3, #32
 8000a96:	e003      	b.n	8000aa0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	fa93 f3a3 	rbit	r3, r3
 8000ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	e003      	b.n	8000ace <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	fab3 f383 	clz	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	60da      	str	r2, [r3, #12]
}
 8000adc:	bf00      	nop
 8000ade:	372c      	adds	r7, #44	@ 0x2c
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_GPIO_EnablePinAnalogControl>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_GPIO_IsInputPinSet>:
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	691a      	ldr	r2, [r3, #16]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d101      	bne.n	8000b26 <LL_GPIO_IsInputPinSet+0x1c>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <LL_GPIO_IsInputPinSet+0x1e>
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_GPIO_SetOutputPin>:
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	619a      	str	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <LL_GPIO_ResetOutputPin>:
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	683a      	ldr	r2, [r7, #0]
 8000b5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b74:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b80:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4013      	ands	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000

08000b9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba2:	f001 f930 	bl	8001e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba6:	f000 f8bd 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000baa:	f000 fa85 	bl	80010b8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000bae:	f000 f91b 	bl	8000de8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000bb2:	f000 f951 	bl	8000e58 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000bb6:	f000 f98d 	bl	8000ed4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000bba:	f000 f9b1 	bl	8000f20 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000bbe:	f000 f9ed 	bl	8000f9c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000bc2:	f000 fa1b 	bl	8000ffc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bc6:	f000 fa49 	bl	800105c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(Led_LCD_GPIO_Port, Led_LCD_Pin);
 8000bca:	2104      	movs	r1, #4
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd0:	f7ff ffb0 	bl	8000b34 <LL_GPIO_SetOutputPin>
  lcd_reset();
 8000bd4:	f7ff fca0 	bl	8000518 <lcd_reset>
  lcd_display_settings(1,0,0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fd85 	bl	80006ec <lcd_display_settings>
  lcd_clear();
 8000be2:	f7ff fd71 	bl	80006c8 <lcd_clear>

  lcd_cgram_address(0); // se selecciona la dirección 0 de la CGRAM, patrón con código 0
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fdb2 	bl	8000750 <lcd_cgram_address>
  lcd_write(0x15, 1); //se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000bec:	2101      	movs	r1, #1
 8000bee:	2015      	movs	r0, #21
 8000bf0:	f7ff fcc6 	bl	8000580 <lcd_write>
  lcd_write(0x15, 1);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2015      	movs	r0, #21
 8000bf8:	f7ff fcc2 	bl	8000580 <lcd_write>
  lcd_write(0xe, 1);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	200e      	movs	r0, #14
 8000c00:	f7ff fcbe 	bl	8000580 <lcd_write>
  lcd_write(0x4, 1);
 8000c04:	2101      	movs	r1, #1
 8000c06:	2004      	movs	r0, #4
 8000c08:	f7ff fcba 	bl	8000580 <lcd_write>
  lcd_write(0x4, 1);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2004      	movs	r0, #4
 8000c10:	f7ff fcb6 	bl	8000580 <lcd_write>
  lcd_write(0xa, 1);
 8000c14:	2101      	movs	r1, #1
 8000c16:	200a      	movs	r0, #10
 8000c18:	f7ff fcb2 	bl	8000580 <lcd_write>
  lcd_write(0x11, 1);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	2011      	movs	r0, #17
 8000c20:	f7ff fcae 	bl	8000580 <lcd_write>
  lcd_write(0x00, 1);
 8000c24:	2101      	movs	r1, #1
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff fcaa 	bl	8000580 <lcd_write>
  lcd_cgram_address(8); //se selecciona la dirección 8 de la CGRAM, patrón con código 1
 8000c2c:	2008      	movs	r0, #8
 8000c2e:	f7ff fd8f 	bl	8000750 <lcd_cgram_address>
  lcd_write(0x4, 1); // se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000c32:	2101      	movs	r1, #1
 8000c34:	2004      	movs	r0, #4
 8000c36:	f7ff fca3 	bl	8000580 <lcd_write>
  lcd_write(0x4, 1);
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2004      	movs	r0, #4
 8000c3e:	f7ff fc9f 	bl	8000580 <lcd_write>
  lcd_write(0xe, 1);
 8000c42:	2101      	movs	r1, #1
 8000c44:	200e      	movs	r0, #14
 8000c46:	f7ff fc9b 	bl	8000580 <lcd_write>
  lcd_write(0x15, 1);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2015      	movs	r0, #21
 8000c4e:	f7ff fc97 	bl	8000580 <lcd_write>
  lcd_write(0x15, 1);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2015      	movs	r0, #21
 8000c56:	f7ff fc93 	bl	8000580 <lcd_write>
  lcd_write(0xa, 1);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f7ff fc8f 	bl	8000580 <lcd_write>
  lcd_write(0xa, 1);
 8000c62:	2101      	movs	r1, #1
 8000c64:	200a      	movs	r0, #10
 8000c66:	f7ff fc8b 	bl	8000580 <lcd_write>
  lcd_write(0x00, 1);
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff fc87 	bl	8000580 <lcd_write>
  lcd_display_address(0); //Vuelve a direccionar la DDRAM para visualizar datos en pantalla
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fd5b 	bl	800072e <lcd_display_address>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int contador=0, estado_mu=0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //TAREA A
	  contador++;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3301      	adds	r3, #1
 8000c84:	607b      	str	r3, [r7, #4]
	  if(contador==10 && estado_mu==0){
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0a      	cmp	r3, #10
 8000c8a:	d116      	bne.n	8000cba <main+0x11e>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d113      	bne.n	8000cba <main+0x11e>
		  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000c92:	2107      	movs	r1, #7
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fd6d 	bl	8000774 <moveToXY>
		  lcd_write(0,1); //escribe el nuevo patrón 0 en la DDRAM
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fc6f 	bl	8000580 <lcd_write>
		  moveToXY(1,8); //sitúa el cursor en la posición fila 1 columna 8, segundo muñeco
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fd65 	bl	8000774 <moveToXY>
		  lcd_write(0,1);
 8000caa:	2101      	movs	r1, #1
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fc67 	bl	8000580 <lcd_write>
		  contador = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
		  estado_mu = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	603b      	str	r3, [r7, #0]
	  }

	  if(contador==10 && estado_mu==1){
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0a      	cmp	r3, #10
 8000cbe:	d116      	bne.n	8000cee <main+0x152>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d113      	bne.n	8000cee <main+0x152>
		  moveToXY(1,7);
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fd53 	bl	8000774 <moveToXY>
		  lcd_write(1,1); //escribe el nuevo patrón 0 en la DDRAM
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f7ff fc55 	bl	8000580 <lcd_write>
		  moveToXY(1,8);
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fd4b 	bl	8000774 <moveToXY>
		  lcd_write(1,1);
 8000cde:	2101      	movs	r1, #1
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff fc4d 	bl	8000580 <lcd_write>
		  contador = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
		  estado_mu = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
	  }

	  if (LL_GPIO_IsInputPinSet(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin))
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <main+0x180>)
 8000cf4:	f7ff ff09 	bl	8000b0a <LL_GPIO_IsInputPinSet>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d005      	beq.n	8000d0a <main+0x16e>
		  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000cfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d02:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <main+0x184>)
 8000d04:	f7ff ff16 	bl	8000b34 <LL_GPIO_SetOutputPin>
 8000d08:	e004      	b.n	8000d14 <main+0x178>
	  else
		  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8000d0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d0e:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <main+0x184>)
 8000d10:	f7ff ff1e 	bl	8000b50 <LL_GPIO_ResetOutputPin>
	  HAL_Delay(100);
 8000d14:	2064      	movs	r0, #100	@ 0x64
 8000d16:	f001 f8eb 	bl	8001ef0 <HAL_Delay>
	  contador++;
 8000d1a:	e7b1      	b.n	8000c80 <main+0xe4>
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000400 	.word	0x48000400

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b096      	sub	sp, #88	@ 0x58
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2244      	movs	r2, #68	@ 0x44
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 ff86 	bl	8005c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d4a:	f001 ff15 	bl	8002b78 <HAL_PWREx_ControlVoltageScaling>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d54:	f000 fcae 	bl	80016b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d58:	f001 fef0 	bl	8002b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <SystemClock_Config+0xc0>)
 8000d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d62:	4a20      	ldr	r2, [pc, #128]	@ (8000de4 <SystemClock_Config+0xc0>)
 8000d64:	f023 0318 	bic.w	r3, r3, #24
 8000d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d7c:	2360      	movs	r3, #96	@ 0x60
 8000d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d80:	2302      	movs	r3, #2
 8000d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d84:	2301      	movs	r3, #1
 8000d86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d8c:	2328      	movs	r3, #40	@ 0x28
 8000d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d90:	2307      	movs	r3, #7
 8000d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 f80b 	bl	8002dbc <HAL_RCC_OscConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dac:	f000 fc82 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db0:	230f      	movs	r3, #15
 8000db2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db4:	2303      	movs	r3, #3
 8000db6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fbd3 	bl	8003574 <HAL_RCC_ClockConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd4:	f000 fc6e 	bl	80016b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dd8:	f003 f8da 	bl	8003f90 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ddc:	bf00      	nop
 8000dde:	3758      	adds	r7, #88	@ 0x58
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000dec:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000dee:	4a19      	ldr	r2, [pc, #100]	@ (8000e54 <MX_DFSDM1_Init+0x6c>)
 8000df0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e00:	2202      	movs	r2, #2
 8000e02:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e16:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <MX_DFSDM1_Init+0x68>)
 8000e3e:	f001 f961 	bl	8002104 <HAL_DFSDM_ChannelInit>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000e48:	f000 fc34 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000002c 	.word	0x2000002c
 8000e54:	40016020 	.word	0x40016020

08000e58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <MX_I2C2_Init+0x78>)
 8000e60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e64:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000e68:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e88:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e94:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000e96:	f001 fbeb 	bl	8002670 <HAL_I2C_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ea0:	f000 fc08 	bl	80016b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000ea8:	f001 fc7d 	bl	80027a6 <HAL_I2CEx_ConfigAnalogFilter>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000eb2:	f000 fbff 	bl	80016b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4804      	ldr	r0, [pc, #16]	@ (8000ecc <MX_I2C2_Init+0x74>)
 8000eba:	f001 fcbf 	bl	800283c <HAL_I2CEx_ConfigDigitalFilter>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000ec4:	f000 fbf6 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000064 	.word	0x20000064
 8000ed0:	40005800 	.word	0x40005800

08000ed4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <MX_QUADSPI_Init+0x48>)
 8000edc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000eec:	2210      	movs	r2, #16
 8000eee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ef2:	2217      	movs	r2, #23
 8000ef4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000f04:	f001 fe9e 	bl	8002c44 <HAL_QSPI_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000f0e:	f000 fbd1 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000b8 	.word	0x200000b8
 8000f1c:	a0001000 	.word	0xa0001000

08000f20 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	@ (8000f98 <MX_SPI3_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f3a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f3e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f52:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f80:	f003 f9e8 	bl	8004354 <HAL_SPI_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fb93 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000fc 	.word	0x200000fc
 8000f98:	40003c00 	.word	0x40003c00

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <MX_USART1_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fe0:	f003 fa5b 	bl	800449a <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 fb63 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000160 	.word	0x20000160
 8000ff8:	40013800 	.word	0x40013800

08000ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001002:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <MX_USART3_UART_Init+0x5c>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001040:	f003 fa2b 	bl	800449a <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800104a:	f000 fb33 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001e8 	.word	0x200001e8
 8001058:	40004800 	.word	0x40004800

0800105c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106a:	2206      	movs	r2, #6
 800106c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001070:	2202      	movs	r2, #2
 8001072:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001076:	2202      	movs	r2, #2
 8001078:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a0:	f001 fc18 	bl	80028d4 <HAL_PCD_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010aa:	f000 fb03 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000270 	.word	0x20000270

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80010da:	2010      	movs	r0, #16
 80010dc:	f7ff fd46 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010e0:	2004      	movs	r0, #4
 80010e2:	f7ff fd43 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fd40 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80010ec:	2002      	movs	r0, #2
 80010ee:	f7ff fd3d 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80010f2:	2008      	movs	r0, #8
 80010f4:	f7ff fd3a 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 80010f8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80010fc:	48cd      	ldr	r0, [pc, #820]	@ (8001434 <MX_GPIO_Init+0x37c>)
 80010fe:	f7ff fd27 	bl	8000b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001102:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110a:	f7ff fd21 	bl	8000b50 <LL_GPIO_ResetOutputPin>
                          |E_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 800110e:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8001112:	48c9      	ldr	r0, [pc, #804]	@ (8001438 <MX_GPIO_Init+0x380>)
 8001114:	f7ff fd1c 	bl	8000b50 <LL_GPIO_ResetOutputPin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8001118:	f241 0181 	movw	r1, #4225	@ 0x1081
 800111c:	48c7      	ldr	r0, [pc, #796]	@ (800143c <MX_GPIO_Init+0x384>)
 800111e:	f7ff fd17 	bl	8000b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8001122:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001126:	48c6      	ldr	r0, [pc, #792]	@ (8001440 <MX_GPIO_Init+0x388>)
 8001128:	f7ff fd12 	bl	8000b50 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	48c2      	ldr	r0, [pc, #776]	@ (800143c <MX_GPIO_Init+0x384>)
 8001132:	f7ff fcff 	bl	8000b34 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8001136:	2120      	movs	r1, #32
 8001138:	48bf      	ldr	r0, [pc, #764]	@ (8001438 <MX_GPIO_Init+0x380>)
 800113a:	f7ff fcfb 	bl	8000b34 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 800113e:	2101      	movs	r1, #1
 8001140:	48bc      	ldr	r0, [pc, #752]	@ (8001434 <MX_GPIO_Init+0x37c>)
 8001142:	f7ff fcf7 	bl	8000b34 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001146:	f240 1315 	movw	r3, #277	@ 0x115
 800114a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	48b4      	ldr	r0, [pc, #720]	@ (8001434 <MX_GPIO_Init+0x37c>)
 8001162:	f004 fa2c 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001166:	233f      	movs	r3, #63	@ 0x3f
 8001168:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	48b2      	ldr	r0, [pc, #712]	@ (8001440 <MX_GPIO_Init+0x388>)
 8001178:	f004 fa21 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800117c:	2303      	movs	r3, #3
 800117e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001190:	2308      	movs	r3, #8
 8001192:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f004 fa0f 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80011a0:	f248 131c 	movw	r3, #33052	@ 0x811c
 80011a4:	607b      	str	r3, [r7, #4]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a6:	2301      	movs	r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011be:	f004 f9fe 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80011c2:	23e0      	movs	r3, #224	@ 0xe0
 80011c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011d6:	2305      	movs	r3, #5
 80011d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f004 f9ec 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 80011e6:	f24f 0336 	movw	r3, #61494	@ 0xf036
 80011ea:	607b      	str	r3, [r7, #4]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	488d      	ldr	r0, [pc, #564]	@ (8001438 <MX_GPIO_Init+0x380>)
 8001202:	f004 f9dc 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001206:	f243 0381 	movw	r3, #12417	@ 0x3081
 800120a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800120c:	2301      	movs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4886      	ldr	r0, [pc, #536]	@ (800143c <MX_GPIO_Init+0x384>)
 8001222:	f004 f9cc 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001226:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800122a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	487f      	ldr	r0, [pc, #508]	@ (8001440 <MX_GPIO_Init+0x388>)
 8001242:	f004 f9bc 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001246:	2302      	movs	r3, #2
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800125a:	2305      	movs	r3, #5
 800125c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4876      	ldr	r0, [pc, #472]	@ (800143c <MX_GPIO_Init+0x384>)
 8001264:	f004 f9ab 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001268:	2378      	movs	r3, #120	@ 0x78
 800126a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800127c:	2307      	movs	r3, #7
 800127e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	486d      	ldr	r0, [pc, #436]	@ (800143c <MX_GPIO_Init+0x384>)
 8001286:	f004 f99a 	bl	80055be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800128a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4863      	ldr	r0, [pc, #396]	@ (8001438 <MX_GPIO_Init+0x380>)
 80012aa:	f004 f988 	bl	80055be <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 80012ae:	f04f 4170 	mov.w	r1, #4026531840	@ 0xf0000000
 80012b2:	2004      	movs	r0, #4
 80012b4:	f7ff fb66 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 80012b8:	4962      	ldr	r1, [pc, #392]	@ (8001444 <MX_GPIO_Init+0x38c>)
 80012ba:	2004      	movs	r0, #4
 80012bc:	f7ff fb62 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 80012c0:	4961      	ldr	r1, [pc, #388]	@ (8001448 <MX_GPIO_Init+0x390>)
 80012c2:	2004      	movs	r0, #4
 80012c4:	f7ff fb5e 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80012c8:	4960      	ldr	r1, [pc, #384]	@ (800144c <MX_GPIO_Init+0x394>)
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff fb5a 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 80012d0:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fb55 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 80012da:	495d      	ldr	r1, [pc, #372]	@ (8001450 <MX_GPIO_Init+0x398>)
 80012dc:	2003      	movs	r0, #3
 80012de:	f7ff fb51 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 80012e2:	495c      	ldr	r1, [pc, #368]	@ (8001454 <MX_GPIO_Init+0x39c>)
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff fb4d 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 80012ea:	495b      	ldr	r1, [pc, #364]	@ (8001458 <MX_GPIO_Init+0x3a0>)
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff fb49 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 80012f2:	495a      	ldr	r1, [pc, #360]	@ (800145c <MX_GPIO_Init+0x3a4>)
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fb45 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 80012fa:	4959      	ldr	r1, [pc, #356]	@ (8001460 <MX_GPIO_Init+0x3a8>)
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7ff fb41 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8001302:	4958      	ldr	r1, [pc, #352]	@ (8001464 <MX_GPIO_Init+0x3ac>)
 8001304:	2002      	movs	r0, #2
 8001306:	f7ff fb3d 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 800130a:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800130e:	2003      	movs	r0, #3
 8001310:	f7ff fb38 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8001314:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8001318:	2004      	movs	r0, #4
 800131a:	f7ff fb33 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800131e:	2308      	movs	r3, #8
 8001320:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4618      	mov	r0, r3
 800133e:	f003 feff 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001342:	2320      	movs	r3, #32
 8001344:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4618      	mov	r0, r3
 8001362:	f003 feed 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8001366:	2340      	movs	r3, #64	@ 0x40
 8001368:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800136e:	2301      	movs	r3, #1
 8001370:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fedb 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fec8 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 feb6 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 80013d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fea3 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 80013fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013fe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4618      	mov	r0, r3
 800141c:	f003 fe90 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001424:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001430:	e01a      	b.n	8001468 <MX_GPIO_Init+0x3b0>
 8001432:	bf00      	nop
 8001434:	48001000 	.word	0x48001000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000c00 	.word	0x48000c00
 8001440:	48000800 	.word	0x48000800
 8001444:	00f00001 	.word	0x00f00001
 8001448:	0f000001 	.word	0x0f000001
 800144c:	00f00003 	.word	0x00f00003
 8001450:	0f000002 	.word	0x0f000002
 8001454:	f0000002 	.word	0xf0000002
 8001458:	0f000003 	.word	0x0f000003
 800145c:	f0000003 	.word	0xf0000003
 8001460:	f0000001 	.word	0xf0000001
 8001464:	000f0002 	.word	0x000f0002
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fe61 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001482:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fe4e 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fe3c 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80014c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014cc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fe29 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80014ee:	2304      	movs	r3, #4
 80014f0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001502:	2301      	movs	r3, #1
 8001504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fe17 	bl	8005140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001512:	2302      	movs	r3, #2
 8001514:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fe05 	bl	8005140 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	485a      	ldr	r0, [pc, #360]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 800153c:	f7ff fa97 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001540:	2200      	movs	r2, #0
 8001542:	2120      	movs	r1, #32
 8001544:	4857      	ldr	r0, [pc, #348]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 8001546:	f7ff fa92 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 800154a:	2200      	movs	r2, #0
 800154c:	2140      	movs	r1, #64	@ 0x40
 800154e:	4855      	ldr	r0, [pc, #340]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 8001550:	f7ff fa8d 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800155a:	4853      	ldr	r0, [pc, #332]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 800155c:	f7ff fa87 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4851      	ldr	r0, [pc, #324]	@ (80016ac <MX_GPIO_Init+0x5f4>)
 8001566:	f7ff fa82 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001570:	484f      	ldr	r0, [pc, #316]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001572:	f7ff fa7c 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800157c:	484c      	ldr	r0, [pc, #304]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 800157e:	f7ff fa76 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001588:	4849      	ldr	r0, [pc, #292]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 800158a:	f7ff fa70 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001594:	4846      	ldr	r0, [pc, #280]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001596:	f7ff fa6a 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	4842      	ldr	r0, [pc, #264]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 80015a0:	f7ff fa65 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015aa:	483f      	ldr	r0, [pc, #252]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 80015ac:	f7ff fa5f 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2104      	movs	r1, #4
 80015b4:	483e      	ldr	r0, [pc, #248]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 80015b6:	f7ff fa5a 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2102      	movs	r1, #2
 80015be:	4839      	ldr	r0, [pc, #228]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015c0:	f7ff fa55 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2108      	movs	r1, #8
 80015c8:	4836      	ldr	r0, [pc, #216]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015ca:	f7ff fa13 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2120      	movs	r1, #32
 80015d2:	4834      	ldr	r0, [pc, #208]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015d4:	f7ff fa0e 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80015d8:	2200      	movs	r2, #0
 80015da:	2140      	movs	r1, #64	@ 0x40
 80015dc:	4831      	ldr	r0, [pc, #196]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015de:	f7ff fa09 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e8:	482f      	ldr	r0, [pc, #188]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 80015ea:	f7ff fa03 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2101      	movs	r1, #1
 80015f2:	482e      	ldr	r0, [pc, #184]	@ (80016ac <MX_GPIO_Init+0x5f4>)
 80015f4:	f7ff f9fe 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015fe:	482c      	ldr	r0, [pc, #176]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001600:	f7ff f9f8 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800160a:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 800160c:	f7ff f9f2 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001616:	4826      	ldr	r0, [pc, #152]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001618:	f7ff f9ec 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001622:	4823      	ldr	r0, [pc, #140]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001624:	f7ff f9e6 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	481e      	ldr	r0, [pc, #120]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 800162e:	f7ff f9e1 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001638:	481b      	ldr	r0, [pc, #108]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 800163a:	f7ff f9db 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 800163e:	2200      	movs	r2, #0
 8001640:	2104      	movs	r1, #4
 8001642:	481b      	ldr	r0, [pc, #108]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001644:	f7ff f9d6 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001648:	2200      	movs	r2, #0
 800164a:	2102      	movs	r1, #2
 800164c:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 800164e:	f7ff f9d1 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001652:	213f      	movs	r1, #63	@ 0x3f
 8001654:	4814      	ldr	r0, [pc, #80]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 8001656:	f7ff fa47 	bl	8000ae8 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800165a:	f7ff f909 	bl	8000870 <__NVIC_GetPriorityGrouping>
 800165e:	4603      	mov	r3, r0
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff f959 	bl	800091c <NVIC_EncodePriority>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	2017      	movs	r0, #23
 8001670:	f7ff f92a 	bl	80008c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001674:	2017      	movs	r0, #23
 8001676:	f7ff f909 	bl	800088c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800167a:	f7ff f8f9 	bl	8000870 <__NVIC_GetPriorityGrouping>
 800167e:	4603      	mov	r3, r0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff f949 	bl	800091c <NVIC_EncodePriority>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	2028      	movs	r0, #40	@ 0x28
 8001690:	f7ff f91a 	bl	80008c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001694:	2028      	movs	r0, #40	@ 0x28
 8001696:	f7ff f8f9 	bl	800088c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	48001000 	.word	0x48001000
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000c00 	.word	0x48000c00

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x44>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_MspInit+0x44>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_MspInit+0x44>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0ac      	sub	sp, #176	@ 0xb0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2288      	movs	r2, #136	@ 0x88
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 fa8b 	bl	8005c44 <memset>
  if(DFSDM1_Init == 0)
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d142      	bne.n	80017bc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4618      	mov	r0, r3
 8001748:	f002 f938 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001752:	f7ff ffaf 	bl	80016b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800175c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001760:	6613      	str	r3, [r2, #96]	@ 0x60
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800176e:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001786:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800178a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017a0:	2306      	movs	r3, #6
 80017a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80017ae:	f000 fdb5 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a02      	ldr	r2, [pc, #8]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017ba:	6013      	str	r3, [r2, #0]
  }

}
 80017bc:	bf00      	nop
 80017be:	37b0      	adds	r7, #176	@ 0xb0
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000754 	.word	0x20000754
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48001000 	.word	0x48001000

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0ac      	sub	sp, #176	@ 0xb0
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2288      	movs	r2, #136	@ 0x88
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fa27 	bl	8005c44 <memset>
  if(hi2c->Instance==I2C2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <HAL_I2C_MspInit+0xb0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d13b      	bne.n	8001878 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001804:	2300      	movs	r3, #0
 8001806:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4618      	mov	r0, r3
 800180e:	f002 f8d5 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001818:	f7ff ff4c 	bl	80016b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001834:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001842:	2301      	movs	r3, #1
 8001844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184e:	2304      	movs	r3, #4
 8001850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001858:	4619      	mov	r1, r3
 800185a:	480b      	ldr	r0, [pc, #44]	@ (8001888 <HAL_I2C_MspInit+0xb8>)
 800185c:	f000 fd5e 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 8001866:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800186a:	6593      	str	r3, [r2, #88]	@ 0x58
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001878:	bf00      	nop
 800187a:	37b0      	adds	r7, #176	@ 0xb0
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	40021000 	.word	0x40021000
 8001888:	48000400 	.word	0x48000400

0800188c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_QSPI_MspInit+0x7c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d128      	bne.n	8001900 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80018de:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80018e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018f0:	230a      	movs	r3, #10
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_QSPI_MspInit+0x84>)
 80018fc:	f000 fd0e 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	a0001000 	.word	0xa0001000
 800190c:	40021000 	.word	0x40021000
 8001910:	48001000 	.word	0x48001000

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_SPI_MspInit+0x7c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d128      	bne.n	8001988 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800193c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001966:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001978:	2306      	movs	r3, #6
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <HAL_SPI_MspInit+0x84>)
 8001984:	f000 fcca 	bl	800231c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40003c00 	.word	0x40003c00
 8001994:	40021000 	.word	0x40021000
 8001998:	48000800 	.word	0x48000800

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0ae      	sub	sp, #184	@ 0xb8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2288      	movs	r2, #136	@ 0x88
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 f941 	bl	8005c44 <memset>
  if(huart->Instance==USART1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a42      	ldr	r2, [pc, #264]	@ (8001ad0 <HAL_UART_MspInit+0x134>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d13b      	bne.n	8001a44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019d0:	2300      	movs	r3, #0
 80019d2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4618      	mov	r0, r3
 80019da:	f001 ffef 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e4:	f7ff fe66 	bl	80016b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ec:	4a39      	ldr	r2, [pc, #228]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f4:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a04:	4a33      	ldr	r2, [pc, #204]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	23c0      	movs	r3, #192	@ 0xc0
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a30:	2307      	movs	r3, #7
 8001a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4826      	ldr	r0, [pc, #152]	@ (8001ad8 <HAL_UART_MspInit+0x13c>)
 8001a3e:	f000 fc6d 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a42:	e040      	b.n	8001ac6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_UART_MspInit+0x140>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d13b      	bne.n	8001ac6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 ffae 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001a66:	f7ff fe25 	bl	80016b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	@ (8001ae0 <HAL_UART_MspInit+0x144>)
 8001ac2:	f000 fc2b 	bl	800231c <HAL_GPIO_Init>
}
 8001ac6:	bf00      	nop
 8001ac8:	37b8      	adds	r7, #184	@ 0xb8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	40004800 	.word	0x40004800
 8001ae0:	48000c00 	.word	0x48000c00

08001ae4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2288      	movs	r2, #136	@ 0x88
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f89d 	bl	8005c44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b12:	d17c      	bne.n	8001c0e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b2a:	2318      	movs	r3, #24
 8001b2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001b3a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 ff39 	bl	80039bc <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001b50:	f7ff fdb0 	bl	80016b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8a:	f000 fbc7 	bl	800231c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b8e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba8:	230a      	movs	r3, #10
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb8:	f000 fbb0 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	4a15      	ldr	r2, [pc, #84]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d114      	bne.n	8001c0a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001bf8:	f001 f814 	bl	8002c24 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001c08:	e001      	b.n	8001c0e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001c0a:	f001 f80b 	bl	8002c24 <HAL_PWREx_EnableVddUSB>
}
 8001c0e:	bf00      	nop
 8001c10:	37b0      	adds	r7, #176	@ 0xb0
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001c24:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001c26:	695a      	ldr	r2, [r3, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d101      	bne.n	8001c36 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40010400 	.word	0x40010400

08001c48 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6153      	str	r3, [r2, #20]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40010400 	.word	0x40010400

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <NMI_Handler+0x4>

08001c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <MemManage_Handler+0x4>

08001c80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbe:	f000 f8f7 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001cca:	2020      	movs	r0, #32
 8001ccc:	f7ff ffa6 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001cd6:	2020      	movs	r0, #32
 8001cd8:	f7ff ffb6 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001cdc:	2040      	movs	r0, #64	@ 0x40
 8001cde:	f7ff ff9d 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001ce8:	2040      	movs	r0, #64	@ 0x40
 8001cea:	f7ff ffad 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001cee:	2080      	movs	r0, #128	@ 0x80
 8001cf0:	f7ff ff94 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001cfa:	2080      	movs	r0, #128	@ 0x80
 8001cfc:	f7ff ffa4 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001d00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d04:	f7ff ff8a 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001d0e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d12:	f7ff ff99 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001d1e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d22:	f7ff ff7b 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001d2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d30:	f7ff ff8a 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001d34:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d38:	f7ff ff70 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001d42:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d46:	f7ff ff7f 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001d4a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d4e:	f7ff ff65 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001d58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d5c:	f7ff ff74 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001d60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d64:	f7ff ff5a 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001d6e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d72:	f7ff ff69 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001d76:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d7a:	f7ff ff4f 	bl	8001c1c <LL_EXTI_IsActiveFlag_0_31>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001d84:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d88:	f7ff ff5e 	bl	8001c48 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db8:	f7ff ffea 	bl	8001d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <LoopForever+0xe>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <LoopForever+0x16>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f003 ff37 	bl	8005c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001de6:	f7fe fed9 	bl	8000b9c <main>

08001dea <LoopForever>:

LoopForever:
    b LoopForever
 8001dea:	e7fe      	b.n	8001dea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001df8:	08005d0c 	.word	0x08005d0c
  ldr r2, =_sbss
 8001dfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e00:	20000780 	.word	0x20000780

08001e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC1_2_IRQHandler>

08001e06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f943 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f80e 	bl	8001e38 <HAL_InitTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
 8001e26:	e001      	b.n	8001e2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e28:	f7ff fc4a 	bl	80016c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <HAL_InitTick+0x6c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d023      	beq.n	8001e94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_InitTick+0x70>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <HAL_InitTick+0x6c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f941 	bl	80020ea <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b0f      	cmp	r3, #15
 8001e72:	d809      	bhi.n	8001e88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e74:	2200      	movs	r2, #0
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f000 f919 	bl	80020b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e80:	4a0a      	ldr	r2, [pc, #40]	@ (8001eac <HAL_InitTick+0x74>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e007      	b.n	8001e98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e004      	b.n	8001e98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e001      	b.n	8001e98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	20000004 	.word	0x20000004

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	20000758 	.word	0x20000758

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000758 	.word	0x20000758

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008

08001f38 <__NVIC_SetPriorityGrouping>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_SetPriority>:
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	@ (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	@ (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	@ 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff47 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff5c 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffb0 	bl	8002058 <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e0ac      	b.n	8002270 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f000 f8b2 	bl	8002284 <DFSDM_GetChannelFromInstance>
 8002120:	4603      	mov	r3, r0
 8002122:	4a55      	ldr	r2, [pc, #340]	@ (8002278 <HAL_DFSDM_ChannelInit+0x174>)
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e09f      	b.n	8002270 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fae9 	bl	8001708 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002136:	4b51      	ldr	r3, [pc, #324]	@ (800227c <HAL_DFSDM_ChannelInit+0x178>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	4a4f      	ldr	r2, [pc, #316]	@ (800227c <HAL_DFSDM_ChannelInit+0x178>)
 800213e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002140:	4b4e      	ldr	r3, [pc, #312]	@ (800227c <HAL_DFSDM_ChannelInit+0x178>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d125      	bne.n	8002194 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002148:	4b4d      	ldr	r3, [pc, #308]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a4c      	ldr	r2, [pc, #304]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 800214e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002152:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002154:	4b4a      	ldr	r3, [pc, #296]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4948      	ldr	r1, [pc, #288]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002162:	4b47      	ldr	r3, [pc, #284]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a46      	ldr	r2, [pc, #280]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 8002168:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800216c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002176:	4b42      	ldr	r3, [pc, #264]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	3b01      	subs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	493f      	ldr	r1, [pc, #252]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002188:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3c      	ldr	r2, [pc, #240]	@ (8002280 <HAL_DFSDM_ChannelInit+0x17c>)
 800218e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002192:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80021a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 020f 	bic.w	r2, r2, #15
 80021d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80021f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f002 0207 	and.w	r2, r2, #7
 8002224:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002250:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f810 	bl	8002284 <DFSDM_GetChannelFromInstance>
 8002264:	4602      	mov	r2, r0
 8002266:	4904      	ldr	r1, [pc, #16]	@ (8002278 <HAL_DFSDM_ChannelInit+0x174>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000760 	.word	0x20000760
 800227c:	2000075c 	.word	0x2000075c
 8002280:	40016000 	.word	0x40016000

08002284 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a1c      	ldr	r2, [pc, #112]	@ (8002300 <DFSDM_GetChannelFromInstance+0x7c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d102      	bne.n	800229a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e02b      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <DFSDM_GetChannelFromInstance+0x80>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d102      	bne.n	80022a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e024      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <DFSDM_GetChannelFromInstance+0x84>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d102      	bne.n	80022b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80022b0:	2302      	movs	r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e01d      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a14      	ldr	r2, [pc, #80]	@ (800230c <DFSDM_GetChannelFromInstance+0x88>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d102      	bne.n	80022c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80022be:	2304      	movs	r3, #4
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e016      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <DFSDM_GetChannelFromInstance+0x8c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d102      	bne.n	80022d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80022cc:	2305      	movs	r3, #5
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e00f      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002314 <DFSDM_GetChannelFromInstance+0x90>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d102      	bne.n	80022e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80022da:	2306      	movs	r3, #6
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	e008      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <DFSDM_GetChannelFromInstance+0x94>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d102      	bne.n	80022ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022e8:	2307      	movs	r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	e001      	b.n	80022f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022ee:	2303      	movs	r3, #3
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40016000 	.word	0x40016000
 8002304:	40016020 	.word	0x40016020
 8002308:	40016040 	.word	0x40016040
 800230c:	40016080 	.word	0x40016080
 8002310:	400160a0 	.word	0x400160a0
 8002314:	400160c0 	.word	0x400160c0
 8002318:	400160e0 	.word	0x400160e0

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e17f      	b.n	800262c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8171 	beq.w	8002626 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x40>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d118      	bne.n	80023fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	6939      	ldr	r1, [r7, #16]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80ac 	beq.w	8002626 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <HAL_GPIO_Init+0x330>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	4a5e      	ldr	r2, [pc, #376]	@ (800264c <HAL_GPIO_Init+0x330>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80024da:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <HAL_GPIO_Init+0x330>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024e6:	4a5a      	ldr	r2, [pc, #360]	@ (8002650 <HAL_GPIO_Init+0x334>)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002510:	d025      	beq.n	800255e <HAL_GPIO_Init+0x242>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4f      	ldr	r2, [pc, #316]	@ (8002654 <HAL_GPIO_Init+0x338>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01f      	beq.n	800255a <HAL_GPIO_Init+0x23e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a4e      	ldr	r2, [pc, #312]	@ (8002658 <HAL_GPIO_Init+0x33c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d019      	beq.n	8002556 <HAL_GPIO_Init+0x23a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a4d      	ldr	r2, [pc, #308]	@ (800265c <HAL_GPIO_Init+0x340>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0x236>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a4c      	ldr	r2, [pc, #304]	@ (8002660 <HAL_GPIO_Init+0x344>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00d      	beq.n	800254e <HAL_GPIO_Init+0x232>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4b      	ldr	r2, [pc, #300]	@ (8002664 <HAL_GPIO_Init+0x348>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <HAL_GPIO_Init+0x22e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a4a      	ldr	r2, [pc, #296]	@ (8002668 <HAL_GPIO_Init+0x34c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_GPIO_Init+0x22a>
 8002542:	2306      	movs	r3, #6
 8002544:	e00c      	b.n	8002560 <HAL_GPIO_Init+0x244>
 8002546:	2307      	movs	r3, #7
 8002548:	e00a      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800254a:	2305      	movs	r3, #5
 800254c:	e008      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800254e:	2304      	movs	r3, #4
 8002550:	e006      	b.n	8002560 <HAL_GPIO_Init+0x244>
 8002552:	2303      	movs	r3, #3
 8002554:	e004      	b.n	8002560 <HAL_GPIO_Init+0x244>
 8002556:	2302      	movs	r3, #2
 8002558:	e002      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_GPIO_Init+0x244>
 800255e:	2300      	movs	r3, #0
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	f002 0203 	and.w	r2, r2, #3
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	4093      	lsls	r3, r2
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002570:	4937      	ldr	r1, [pc, #220]	@ (8002650 <HAL_GPIO_Init+0x334>)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	3302      	adds	r3, #2
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800257e:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <HAL_GPIO_Init+0x350>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025a2:	4a32      	ldr	r2, [pc, #200]	@ (800266c <HAL_GPIO_Init+0x350>)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025a8:	4b30      	ldr	r3, [pc, #192]	@ (800266c <HAL_GPIO_Init+0x350>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_GPIO_Init+0x350>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025d2:	4b26      	ldr	r3, [pc, #152]	@ (800266c <HAL_GPIO_Init+0x350>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f6:	4a1d      	ldr	r2, [pc, #116]	@ (800266c <HAL_GPIO_Init+0x350>)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_GPIO_Init+0x350>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4013      	ands	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002620:	4a12      	ldr	r2, [pc, #72]	@ (800266c <HAL_GPIO_Init+0x350>)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa22 f303 	lsr.w	r3, r2, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f47f ae78 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40010000 	.word	0x40010000
 8002654:	48000400 	.word	0x48000400
 8002658:	48000800 	.word	0x48000800
 800265c:	48000c00 	.word	0x48000c00
 8002660:	48001000 	.word	0x48001000
 8002664:	48001400 	.word	0x48001400
 8002668:	48001800 	.word	0x48001800
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e08d      	b.n	800279e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff f89a 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	@ 0x24
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e006      	b.n	80026f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d108      	bne.n	8002712 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	e007      	b.n	8002722 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002720:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69d9      	ldr	r1, [r3, #28]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d138      	bne.n	800282e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e032      	b.n	8002830 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2224      	movs	r2, #36	@ 0x24
 80027d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d139      	bne.n	80028c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800285c:	2302      	movs	r3, #2
 800285e:	e033      	b.n	80028c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	@ 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800288e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e101      	b.n	8002aea <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff f8f2 	bl	8001ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 feee 	bl	80056f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7c1a      	ldrb	r2, [r3, #16]
 8002920:	f88d 2000 	strb.w	r2, [sp]
 8002924:	3304      	adds	r3, #4
 8002926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002928:	f002 feb7 	bl	800569a <USB_CoreInit>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0d5      	b.n	8002aea <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f002 fee6 	bl	8005716 <USB_SetCurrentMode>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e0c6      	b.n	8002aea <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e04a      	b.n	80029f8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002962:	7bfa      	ldrb	r2, [r7, #15]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3315      	adds	r3, #21
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002976:	7bfa      	ldrb	r2, [r7, #15]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3314      	adds	r3, #20
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	b298      	uxth	r0, r3
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	332e      	adds	r3, #46	@ 0x2e
 800299e:	4602      	mov	r2, r0
 80029a0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3318      	adds	r3, #24
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	331c      	adds	r3, #28
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3320      	adds	r3, #32
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3324      	adds	r3, #36	@ 0x24
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	791b      	ldrb	r3, [r3, #4]
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3af      	bcc.n	8002962 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	e044      	b.n	8002a92 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	791b      	ldrb	r3, [r3, #4]
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d3b5      	bcc.n	8002a08 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7c1a      	ldrb	r2, [r3, #16]
 8002aa4:	f88d 2000 	strb.w	r2, [sp]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aac:	f002 fe80 	bl	80057b0 <USB_DevInit>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e013      	b.n	8002aea <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7b1b      	ldrb	r3, [r3, #12]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d102      	bne.n	8002ade <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f80a 	bl	8002af2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 f825 	bl	8005b32 <USB_DevDisconnect>

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	f043 0303 	orr.w	r3, r3, #3
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a04      	ldr	r2, [pc, #16]	@ (8002b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40007000 	.word	0x40007000

08002b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b60:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40007000 	.word	0x40007000

08002b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b86:	d130      	bne.n	8002bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b88:	4b23      	ldr	r3, [pc, #140]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b94:	d038      	beq.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b96:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ba0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2232      	movs	r2, #50	@ 0x32
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	0c9b      	lsrs	r3, r3, #18
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbc:	e002      	b.n	8002bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc4:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bd0:	d102      	bne.n	8002bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f2      	bne.n	8002bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be4:	d110      	bne.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e00f      	b.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bea:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf6:	d007      	beq.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bf8:	4b07      	ldr	r3, [pc, #28]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c00:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40007000 	.word	0x40007000
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c28:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a04      	ldr	r2, [pc, #16]	@ (8002c40 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c32:	6053      	str	r3, [r2, #4]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40007000 	.word	0x40007000

08002c44 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff f944 	bl	8001ed8 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e063      	b.n	8002d24 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7fe fe0b 	bl	800188c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002c76:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f858 	bl	8002d30 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	021a      	lsls	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f850 	bl	8002d4c <QSPI_WaitFlagStateUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002cb0:	7afb      	ldrb	r3, [r7, #11]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d131      	bne.n	8002d1a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002cc0:	f023 0310 	bic.w	r3, r3, #16
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	0611      	lsls	r1, r2, #24
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <HAL_QSPI_Init+0xe8>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6912      	ldr	r2, [r2, #16]
 8002ce6:	0411      	lsls	r1, r2, #16
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6952      	ldr	r2, [r2, #20]
 8002cec:	4311      	orrs	r1, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6992      	ldr	r2, [r2, #24]
 8002cf2:	4311      	orrs	r1, r2
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002d22:	7afb      	ldrb	r3, [r7, #11]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	ffe0f8fe 	.word	0xffe0f8fe

08002d30 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d5c:	e01a      	b.n	8002d94 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d016      	beq.n	8002d94 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d66:	f7ff f8b7 	bl	8001ed8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d302      	bcc.n	8002d7c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	f043 0201 	orr.w	r2, r3, #1
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e00e      	b.n	8002db2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1d6      	bne.n	8002d5e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e3ca      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dce:	4b97      	ldr	r3, [pc, #604]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd8:	4b94      	ldr	r3, [pc, #592]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80e4 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d007      	beq.n	8002e06 <HAL_RCC_OscConfig+0x4a>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	f040 808b 	bne.w	8002f14 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	f040 8087 	bne.w	8002f14 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e06:	4b89      	ldr	r3, [pc, #548]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_RCC_OscConfig+0x62>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e3a2      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	4b82      	ldr	r3, [pc, #520]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_RCC_OscConfig+0x7c>
 8002e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e36:	e005      	b.n	8002e44 <HAL_RCC_OscConfig+0x88>
 8002e38:	4b7c      	ldr	r3, [pc, #496]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d223      	bcs.n	8002e90 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fd55 	bl	80038fc <RCC_SetFlashLatencyFromMSIRange>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e383      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5c:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a72      	ldr	r2, [pc, #456]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b70      	ldr	r3, [pc, #448]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	496d      	ldr	r1, [pc, #436]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	4968      	ldr	r1, [pc, #416]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	604b      	str	r3, [r1, #4]
 8002e8e:	e025      	b.n	8002edc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e90:	4b66      	ldr	r3, [pc, #408]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a65      	ldr	r2, [pc, #404]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e96:	f043 0308 	orr.w	r3, r3, #8
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b63      	ldr	r3, [pc, #396]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4960      	ldr	r1, [pc, #384]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eae:	4b5f      	ldr	r3, [pc, #380]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	495b      	ldr	r1, [pc, #364]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fd15 	bl	80038fc <RCC_SetFlashLatencyFromMSIRange>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e343      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002edc:	f000 fc4a 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b52      	ldr	r3, [pc, #328]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	4950      	ldr	r1, [pc, #320]	@ (8003030 <HAL_RCC_OscConfig+0x274>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8003034 <HAL_RCC_OscConfig+0x278>)
 8002efa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002efc:	4b4e      	ldr	r3, [pc, #312]	@ (8003038 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe ff99 	bl	8001e38 <HAL_InitTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d052      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	e327      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d032      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f1c:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a42      	ldr	r2, [pc, #264]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f28:	f7fe ffd6 	bl	8001ed8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f30:	f7fe ffd2 	bl	8001ed8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e310      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f42:	4b3a      	ldr	r3, [pc, #232]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f4e:	4b37      	ldr	r3, [pc, #220]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a36      	ldr	r2, [pc, #216]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b34      	ldr	r3, [pc, #208]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4931      	ldr	r1, [pc, #196]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	492c      	ldr	r1, [pc, #176]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e01a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f82:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a29      	ldr	r2, [pc, #164]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe ffa3 	bl	8001ed8 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f96:	f7fe ff9f 	bl	8001ed8 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e2dd      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fa8:	4b20      	ldr	r3, [pc, #128]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x1da>
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d074      	beq.n	80030ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d005      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x21a>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d10e      	bne.n	8002fee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d10b      	bne.n	8002fee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d064      	beq.n	80030ac <HAL_RCC_OscConfig+0x2f0>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d160      	bne.n	80030ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e2ba      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x24a>
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e026      	b.n	8003054 <HAL_RCC_OscConfig+0x298>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300e:	d115      	bne.n	800303c <HAL_RCC_OscConfig+0x280>
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a05      	ldr	r2, [pc, #20]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8003016:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b03      	ldr	r3, [pc, #12]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a02      	ldr	r2, [pc, #8]	@ (800302c <HAL_RCC_OscConfig+0x270>)
 8003022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	e014      	b.n	8003054 <HAL_RCC_OscConfig+0x298>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
 8003030:	08005cb4 	.word	0x08005cb4
 8003034:	20000000 	.word	0x20000000
 8003038:	20000004 	.word	0x20000004
 800303c:	4ba0      	ldr	r3, [pc, #640]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a9f      	ldr	r2, [pc, #636]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b9d      	ldr	r3, [pc, #628]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a9c      	ldr	r2, [pc, #624]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fe ff3c 	bl	8001ed8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe ff38 	bl	8001ed8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	@ 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e276      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003076:	4b92      	ldr	r3, [pc, #584]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x2a8>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe ff28 	bl	8001ed8 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe ff24 	bl	8001ed8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	@ 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e262      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800309e:	4b88      	ldr	r3, [pc, #544]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x2d0>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d060      	beq.n	800317c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d005      	beq.n	80030cc <HAL_RCC_OscConfig+0x310>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d119      	bne.n	80030fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d116      	bne.n	80030fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	4b7c      	ldr	r3, [pc, #496]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x328>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e23f      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b76      	ldr	r3, [pc, #472]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	4973      	ldr	r1, [pc, #460]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f8:	e040      	b.n	800317c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d023      	beq.n	800314a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003102:	4b6f      	ldr	r3, [pc, #444]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6e      	ldr	r2, [pc, #440]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800310c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fee3 	bl	8001ed8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe fedf 	bl	8001ed8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e21d      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003128:	4b65      	ldr	r3, [pc, #404]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b62      	ldr	r3, [pc, #392]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	495f      	ldr	r1, [pc, #380]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
 8003148:	e018      	b.n	800317c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800314a:	4b5d      	ldr	r3, [pc, #372]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a5c      	ldr	r2, [pc, #368]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe febf 	bl	8001ed8 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe febb 	bl	8001ed8 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1f9      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003170:	4b53      	ldr	r3, [pc, #332]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d03c      	beq.n	8003202 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01c      	beq.n	80031ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003190:	4b4b      	ldr	r3, [pc, #300]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003196:	4a4a      	ldr	r2, [pc, #296]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7fe fe9a 	bl	8001ed8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a8:	f7fe fe96 	bl	8001ed8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1d4      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0ef      	beq.n	80031a8 <HAL_RCC_OscConfig+0x3ec>
 80031c8:	e01b      	b.n	8003202 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ca:	4b3d      	ldr	r3, [pc, #244]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80031cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d0:	4a3b      	ldr	r2, [pc, #236]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031da:	f7fe fe7d 	bl	8001ed8 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e2:	f7fe fe79 	bl	8001ed8 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e1b7      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f4:	4b32      	ldr	r3, [pc, #200]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ef      	bne.n	80031e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80a6 	beq.w	800335c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003210:	2300      	movs	r3, #0
 8003212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003214:	4b2a      	ldr	r3, [pc, #168]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10d      	bne.n	800323c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003220:	4b27      	ldr	r3, [pc, #156]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003224:	4a26      	ldr	r2, [pc, #152]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800322a:	6593      	str	r3, [r2, #88]	@ 0x58
 800322c:	4b24      	ldr	r3, [pc, #144]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003238:	2301      	movs	r3, #1
 800323a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323c:	4b21      	ldr	r3, [pc, #132]	@ (80032c4 <HAL_RCC_OscConfig+0x508>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d118      	bne.n	800327a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003248:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <HAL_RCC_OscConfig+0x508>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1d      	ldr	r2, [pc, #116]	@ (80032c4 <HAL_RCC_OscConfig+0x508>)
 800324e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003254:	f7fe fe40 	bl	8001ed8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800325c:	f7fe fe3c 	bl	8001ed8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e17a      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <HAL_RCC_OscConfig+0x508>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d108      	bne.n	8003294 <HAL_RCC_OscConfig+0x4d8>
 8003282:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003288:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003292:	e029      	b.n	80032e8 <HAL_RCC_OscConfig+0x52c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d115      	bne.n	80032c8 <HAL_RCC_OscConfig+0x50c>
 800329c:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	4a07      	ldr	r2, [pc, #28]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ac:	4b04      	ldr	r3, [pc, #16]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	4a03      	ldr	r2, [pc, #12]	@ (80032c0 <HAL_RCC_OscConfig+0x504>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032bc:	e014      	b.n	80032e8 <HAL_RCC_OscConfig+0x52c>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40007000 	.word	0x40007000
 80032c8:	4b9c      	ldr	r3, [pc, #624]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	4a9b      	ldr	r2, [pc, #620]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032d8:	4b98      	ldr	r3, [pc, #608]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	4a97      	ldr	r2, [pc, #604]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d016      	beq.n	800331e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fe fdf2 	bl	8001ed8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	e00a      	b.n	800330e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fdee 	bl	8001ed8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e12a      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800330e:	4b8b      	ldr	r3, [pc, #556]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ed      	beq.n	80032f8 <HAL_RCC_OscConfig+0x53c>
 800331c:	e015      	b.n	800334a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331e:	f7fe fddb 	bl	8001ed8 <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003326:	f7fe fdd7 	bl	8001ed8 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003334:	4293      	cmp	r3, r2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e113      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800333c:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1ed      	bne.n	8003326 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800334a:	7ffb      	ldrb	r3, [r7, #31]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003350:	4b7a      	ldr	r3, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4a79      	ldr	r2, [pc, #484]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80fe 	beq.w	8003562 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	2b02      	cmp	r3, #2
 800336c:	f040 80d0 	bne.w	8003510 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003370:	4b72      	ldr	r3, [pc, #456]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	429a      	cmp	r2, r3
 8003382:	d130      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	3b01      	subs	r3, #1
 8003390:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d127      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d11f      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033b0:	2a07      	cmp	r2, #7
 80033b2:	bf14      	ite	ne
 80033b4:	2201      	movne	r2, #1
 80033b6:	2200      	moveq	r2, #0
 80033b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d113      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d109      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	3b01      	subs	r3, #1
 80033e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d06e      	beq.n	80034c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b0c      	cmp	r3, #12
 80033ea:	d069      	beq.n	80034c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033ec:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033f8:	4b50      	ldr	r3, [pc, #320]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0ad      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003408:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4b      	ldr	r2, [pc, #300]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800340e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003412:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003414:	f7fe fd60 	bl	8001ed8 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe fd5c 	bl	8001ed8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e09a      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343a:	4b40      	ldr	r3, [pc, #256]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	4b40      	ldr	r3, [pc, #256]	@ (8003540 <HAL_RCC_OscConfig+0x784>)
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800344a:	3a01      	subs	r2, #1
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	4311      	orrs	r1, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003454:	0212      	lsls	r2, r2, #8
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800345c:	0852      	lsrs	r2, r2, #1
 800345e:	3a01      	subs	r2, #1
 8003460:	0552      	lsls	r2, r2, #21
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003468:	0852      	lsrs	r2, r2, #1
 800346a:	3a01      	subs	r2, #1
 800346c:	0652      	lsls	r2, r2, #25
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003474:	0912      	lsrs	r2, r2, #4
 8003476:	0452      	lsls	r2, r2, #17
 8003478:	430a      	orrs	r2, r1
 800347a:	4930      	ldr	r1, [pc, #192]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800347c:	4313      	orrs	r3, r2
 800347e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003480:	4b2e      	ldr	r3, [pc, #184]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2d      	ldr	r2, [pc, #180]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800348a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800348c:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4a2a      	ldr	r2, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003496:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003498:	f7fe fd1e 	bl	8001ed8 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe fd1a 	bl	8001ed8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e058      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	4b22      	ldr	r3, [pc, #136]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034be:	e050      	b.n	8003562 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e04f      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c4:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d148      	bne.n	8003562 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034d0:	4b1a      	ldr	r3, [pc, #104]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a19      	ldr	r2, [pc, #100]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034dc:	4b17      	ldr	r3, [pc, #92]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a16      	ldr	r2, [pc, #88]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034e8:	f7fe fcf6 	bl	8001ed8 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe fcf2 	bl	8001ed8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e030      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003502:	4b0e      	ldr	r3, [pc, #56]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x734>
 800350e:	e028      	b.n	8003562 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d023      	beq.n	800355e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a08      	ldr	r2, [pc, #32]	@ (800353c <HAL_RCC_OscConfig+0x780>)
 800351c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe fcd9 	bl	8001ed8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	e00c      	b.n	8003544 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352a:	f7fe fcd5 	bl	8001ed8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d905      	bls.n	8003544 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e013      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
 800353c:	40021000 	.word	0x40021000
 8003540:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003544:	4b09      	ldr	r3, [pc, #36]	@ (800356c <HAL_RCC_OscConfig+0x7b0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ec      	bne.n	800352a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003550:	4b06      	ldr	r3, [pc, #24]	@ (800356c <HAL_RCC_OscConfig+0x7b0>)
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	4905      	ldr	r1, [pc, #20]	@ (800356c <HAL_RCC_OscConfig+0x7b0>)
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_RCC_OscConfig+0x7b4>)
 8003558:	4013      	ands	r3, r2
 800355a:	60cb      	str	r3, [r1, #12]
 800355c:	e001      	b.n	8003562 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	feeefffc 	.word	0xfeeefffc

08003574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e0e7      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b75      	ldr	r3, [pc, #468]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d910      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b72      	ldr	r3, [pc, #456]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 0207 	bic.w	r2, r3, #7
 800359e:	4970      	ldr	r1, [pc, #448]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b6e      	ldr	r3, [pc, #440]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e0cf      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b66      	ldr	r3, [pc, #408]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d908      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b63      	ldr	r3, [pc, #396]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4960      	ldr	r1, [pc, #384]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04c      	beq.n	800368c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d121      	bne.n	800364a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e0a6      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003612:	4b54      	ldr	r3, [pc, #336]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e09a      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800362a:	4b4e      	ldr	r3, [pc, #312]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e08e      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800363a:	4b4a      	ldr	r3, [pc, #296]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e086      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800364a:	4b46      	ldr	r3, [pc, #280]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4943      	ldr	r1, [pc, #268]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fe fc3c 	bl	8001ed8 <HAL_GetTick>
 8003660:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	e00a      	b.n	800367a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003664:	f7fe fc38 	bl	8001ed8 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e06e      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	4b3a      	ldr	r3, [pc, #232]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 020c 	and.w	r2, r3, #12
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	429a      	cmp	r2, r3
 800368a:	d1eb      	bne.n	8003664 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d208      	bcs.n	80036ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	492b      	ldr	r1, [pc, #172]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ba:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d210      	bcs.n	80036ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c8:	4b25      	ldr	r3, [pc, #148]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 0207 	bic.w	r2, r3, #7
 80036d0:	4923      	ldr	r1, [pc, #140]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d8:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <HAL_RCC_ClockConfig+0x1ec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e036      	b.n	8003758 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	4918      	ldr	r1, [pc, #96]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003714:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	4910      	ldr	r1, [pc, #64]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003728:	f000 f824 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	490b      	ldr	r1, [pc, #44]	@ (8003768 <HAL_RCC_ClockConfig+0x1f4>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
 8003744:	4a09      	ldr	r2, [pc, #36]	@ (800376c <HAL_RCC_ClockConfig+0x1f8>)
 8003746:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003748:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <HAL_RCC_ClockConfig+0x1fc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fb73 	bl	8001e38 <HAL_InitTick>
 8003752:	4603      	mov	r3, r0
 8003754:	72fb      	strb	r3, [r7, #11]

  return status;
 8003756:	7afb      	ldrb	r3, [r7, #11]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40022000 	.word	0x40022000
 8003764:	40021000 	.word	0x40021000
 8003768:	08005cb4 	.word	0x08005cb4
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	@ 0x24
 8003778:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003782:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800378c:	4b3b      	ldr	r3, [pc, #236]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x34>
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d121      	bne.n	80037e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d11e      	bne.n	80037e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037b4:	4b31      	ldr	r3, [pc, #196]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ba:	0a1b      	lsrs	r3, r3, #8
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	e005      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037c4:	4b2d      	ldr	r3, [pc, #180]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10d      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037ec:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x110>)
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	e004      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037f8:	4b23      	ldr	r3, [pc, #140]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x114>)
 80037fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d134      	bne.n	800386c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003802:	4b1e      	ldr	r3, [pc, #120]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d003      	beq.n	800381a <HAL_RCC_GetSysClockFreq+0xa6>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d003      	beq.n	8003820 <HAL_RCC_GetSysClockFreq+0xac>
 8003818:	e005      	b.n	8003826 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800381a:	4b1a      	ldr	r3, [pc, #104]	@ (8003884 <HAL_RCC_GetSysClockFreq+0x110>)
 800381c:	617b      	str	r3, [r7, #20]
      break;
 800381e:	e005      	b.n	800382c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003820:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_RCC_GetSysClockFreq+0x114>)
 8003822:	617b      	str	r3, [r7, #20]
      break;
 8003824:	e002      	b.n	800382c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	617b      	str	r3, [r7, #20]
      break;
 800382a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800382c:	4b13      	ldr	r3, [pc, #76]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	3301      	adds	r3, #1
 8003838:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	0a1b      	lsrs	r3, r3, #8
 8003840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <HAL_RCC_GetSysClockFreq+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0e5b      	lsrs	r3, r3, #25
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	3301      	adds	r3, #1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800386c:	69bb      	ldr	r3, [r7, #24]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	@ 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	08005ccc 	.word	0x08005ccc
 8003884:	00f42400 	.word	0x00f42400
 8003888:	007a1200 	.word	0x007a1200

0800388c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b03      	ldr	r3, [pc, #12]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000000 	.word	0x20000000

080038a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038a8:	f7ff fff0 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	4904      	ldr	r1, [pc, #16]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	08005cc4 	.word	0x08005cc4

080038d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038d4:	f7ff ffda 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0adb      	lsrs	r3, r3, #11
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4904      	ldr	r1, [pc, #16]	@ (80038f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	08005cc4 	.word	0x08005cc4

080038fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003908:	4b2a      	ldr	r3, [pc, #168]	@ (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003914:	f7ff f922 	bl	8002b5c <HAL_PWREx_GetVoltageRange>
 8003918:	6178      	str	r0, [r7, #20]
 800391a:	e014      	b.n	8003946 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800391c:	4b25      	ldr	r3, [pc, #148]	@ (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	4a24      	ldr	r2, [pc, #144]	@ (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	@ 0x58
 8003928:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003934:	f7ff f912 	bl	8002b5c <HAL_PWREx_GetVoltageRange>
 8003938:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800393a:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003944:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394c:	d10b      	bne.n	8003966 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d919      	bls.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2ba0      	cmp	r3, #160	@ 0xa0
 8003958:	d902      	bls.n	8003960 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395a:	2302      	movs	r3, #2
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	e013      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003960:	2301      	movs	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e010      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b80      	cmp	r3, #128	@ 0x80
 800396a:	d902      	bls.n	8003972 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800396c:	2303      	movs	r3, #3
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	e00a      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b80      	cmp	r3, #128	@ 0x80
 8003976:	d102      	bne.n	800397e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003978:	2302      	movs	r3, #2
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	e004      	b.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b70      	cmp	r3, #112	@ 0x70
 8003982:	d101      	bne.n	8003988 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003984:	2301      	movs	r3, #1
 8003986:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 0207 	bic.w	r2, r3, #7
 8003990:	4909      	ldr	r1, [pc, #36]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003998:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d001      	beq.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40022000 	.word	0x40022000

080039bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c4:	2300      	movs	r3, #0
 80039c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c8:	2300      	movs	r3, #0
 80039ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d041      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039e0:	d02a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039e6:	d824      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039ec:	d008      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039f2:	d81e      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039fc:	d010      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039fe:	e018      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a00:	4b86      	ldr	r3, [pc, #536]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4a85      	ldr	r2, [pc, #532]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a0c:	e015      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 facb 	bl	8003fb0 <RCCEx_PLLSAI1_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a1e:	e00c      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3320      	adds	r3, #32
 8003a24:	2100      	movs	r1, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fbb6 	bl	8004198 <RCCEx_PLLSAI2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a30:	e003      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	74fb      	strb	r3, [r7, #19]
      break;
 8003a36:	e000      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a40:	4b76      	ldr	r3, [pc, #472]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a4e:	4973      	ldr	r1, [pc, #460]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a56:	e001      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d041      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a70:	d02a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a76:	d824      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a7c:	d008      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a82:	d81e      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a8c:	d010      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a8e:	e018      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a90:	4b62      	ldr	r3, [pc, #392]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4a61      	ldr	r2, [pc, #388]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a9c:	e015      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fa83 	bl	8003fb0 <RCCEx_PLLSAI1_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aae:	e00c      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3320      	adds	r3, #32
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fb6e 	bl	8004198 <RCCEx_PLLSAI2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7cfb      	ldrb	r3, [r7, #19]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ad0:	4b52      	ldr	r3, [pc, #328]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ade:	494f      	ldr	r1, [pc, #316]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ae6:	e001      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a0 	beq.w	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003afe:	4b47      	ldr	r3, [pc, #284]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b14:	4b41      	ldr	r3, [pc, #260]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b18:	4a40      	ldr	r2, [pc, #256]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b20:	4b3e      	ldr	r3, [pc, #248]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b30:	4b3b      	ldr	r3, [pc, #236]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3a      	ldr	r2, [pc, #232]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b3c:	f7fe f9cc 	bl	8001ed8 <HAL_GetTick>
 8003b40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b42:	e009      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fe f9c8 	bl	8001ed8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d902      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	74fb      	strb	r3, [r7, #19]
        break;
 8003b56:	e005      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b58:	4b31      	ldr	r3, [pc, #196]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ef      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d15c      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01f      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d019      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b88:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b94:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9a:	4a20      	ldr	r2, [pc, #128]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	4a1c      	ldr	r2, [pc, #112]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bb4:	4a19      	ldr	r2, [pc, #100]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fe f987 	bl	8001ed8 <HAL_GetTick>
 8003bca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fe f983 	bl	8001ed8 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	74fb      	strb	r3, [r7, #19]
            break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ec      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bfa:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c0a:	4904      	ldr	r1, [pc, #16]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c12:	e009      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	74bb      	strb	r3, [r7, #18]
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c28:	7c7b      	ldrb	r3, [r7, #17]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d105      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	4a9d      	ldr	r2, [pc, #628]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c46:	4b98      	ldr	r3, [pc, #608]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f023 0203 	bic.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	4994      	ldr	r1, [pc, #592]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c68:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f023 020c 	bic.w	r2, r3, #12
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c76:	498c      	ldr	r1, [pc, #560]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c8a:	4b87      	ldr	r3, [pc, #540]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	4983      	ldr	r1, [pc, #524]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cac:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	497b      	ldr	r1, [pc, #492]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cce:	4b76      	ldr	r3, [pc, #472]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cdc:	4972      	ldr	r1, [pc, #456]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cfe:	496a      	ldr	r1, [pc, #424]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d12:	4b65      	ldr	r3, [pc, #404]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d20:	4961      	ldr	r1, [pc, #388]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d34:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	4959      	ldr	r1, [pc, #356]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d56:	4b54      	ldr	r3, [pc, #336]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d64:	4950      	ldr	r1, [pc, #320]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d78:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d86:	4948      	ldr	r1, [pc, #288]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d9a:	4b43      	ldr	r3, [pc, #268]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	493f      	ldr	r1, [pc, #252]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d028      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dca:	4937      	ldr	r1, [pc, #220]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dda:	d106      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ddc:	4b32      	ldr	r3, [pc, #200]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4a31      	ldr	r2, [pc, #196]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003de6:	60d3      	str	r3, [r2, #12]
 8003de8:	e011      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003df2:	d10c      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f8d8 	bl	8003fb0 <RCCEx_PLLSAI1_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e0a:	7cfb      	ldrb	r3, [r7, #19]
 8003e0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d028      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e28:	491f      	ldr	r1, [pc, #124]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e38:	d106      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e44:	60d3      	str	r3, [r2, #12]
 8003e46:	e011      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f8a9 	bl	8003fb0 <RCCEx_PLLSAI1_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e62:	7cfb      	ldrb	r3, [r7, #19]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d02b      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e86:	4908      	ldr	r1, [pc, #32]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e96:	d109      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a02      	ldr	r2, [pc, #8]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f877 	bl	8003fb0 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02f      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003edc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eea:	4928      	ldr	r1, [pc, #160]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f854 	bl	8003fb0 <RCCEx_PLLSAI1_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0c:	7cfb      	ldrb	r3, [r7, #19]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d014      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f12:	7cfb      	ldrb	r3, [r7, #19]
 8003f14:	74bb      	strb	r3, [r7, #18]
 8003f16:	e011      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3320      	adds	r3, #32
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 f935 	bl	8004198 <RCCEx_PLLSAI2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f32:	7cfb      	ldrb	r3, [r7, #19]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f48:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f56:	490d      	ldr	r1, [pc, #52]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f6a:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f7a:	4904      	ldr	r1, [pc, #16]	@ (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000

08003f90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f94:	4b05      	ldr	r3, [pc, #20]	@ (8003fac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a04      	ldr	r2, [pc, #16]	@ (8003fac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	6013      	str	r3, [r2, #0]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000

08003fb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fbe:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003fca:	4b72      	ldr	r3, [pc, #456]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d10d      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d047      	beq.n	8004086 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
 8003ffa:	e044      	b.n	8004086 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d018      	beq.n	8004036 <RCCEx_PLLSAI1_Config+0x86>
 8004004:	2b03      	cmp	r3, #3
 8004006:	d825      	bhi.n	8004054 <RCCEx_PLLSAI1_Config+0xa4>
 8004008:	2b01      	cmp	r3, #1
 800400a:	d002      	beq.n	8004012 <RCCEx_PLLSAI1_Config+0x62>
 800400c:	2b02      	cmp	r3, #2
 800400e:	d009      	beq.n	8004024 <RCCEx_PLLSAI1_Config+0x74>
 8004010:	e020      	b.n	8004054 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004012:	4b60      	ldr	r3, [pc, #384]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d11d      	bne.n	800405a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004022:	e01a      	b.n	800405a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004024:	4b5b      	ldr	r3, [pc, #364]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800402c:	2b00      	cmp	r3, #0
 800402e:	d116      	bne.n	800405e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004034:	e013      	b.n	800405e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004036:	4b57      	ldr	r3, [pc, #348]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004042:	4b54      	ldr	r3, [pc, #336]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004052:	e006      	b.n	8004062 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	73fb      	strb	r3, [r7, #15]
      break;
 8004058:	e004      	b.n	8004064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004062:	bf00      	nop
    }

    if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800406a:	4b4a      	ldr	r3, [pc, #296]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6819      	ldr	r1, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	430b      	orrs	r3, r1
 8004080:	4944      	ldr	r1, [pc, #272]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d17d      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800408c:	4b41      	ldr	r3, [pc, #260]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a40      	ldr	r2, [pc, #256]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004098:	f7fd ff1e 	bl	8001ed8 <HAL_GetTick>
 800409c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800409e:	e009      	b.n	80040b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040a0:	f7fd ff1a 	bl	8001ed8 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d902      	bls.n	80040b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	73fb      	strb	r3, [r7, #15]
        break;
 80040b2:	e005      	b.n	80040c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040b4:	4b37      	ldr	r3, [pc, #220]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1ef      	bne.n	80040a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d160      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d111      	bne.n	80040f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040cc:	4b31      	ldr	r3, [pc, #196]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80040d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	0211      	lsls	r1, r2, #8
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	0912      	lsrs	r2, r2, #4
 80040e4:	0452      	lsls	r2, r2, #17
 80040e6:	430a      	orrs	r2, r1
 80040e8:	492a      	ldr	r1, [pc, #168]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	610b      	str	r3, [r1, #16]
 80040ee:	e027      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d112      	bne.n	800411c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040f6:	4b27      	ldr	r3, [pc, #156]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6892      	ldr	r2, [r2, #8]
 8004106:	0211      	lsls	r1, r2, #8
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6912      	ldr	r2, [r2, #16]
 800410c:	0852      	lsrs	r2, r2, #1
 800410e:	3a01      	subs	r2, #1
 8004110:	0552      	lsls	r2, r2, #21
 8004112:	430a      	orrs	r2, r1
 8004114:	491f      	ldr	r1, [pc, #124]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	4313      	orrs	r3, r2
 8004118:	610b      	str	r3, [r1, #16]
 800411a:	e011      	b.n	8004140 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800411c:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004124:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6892      	ldr	r2, [r2, #8]
 800412c:	0211      	lsls	r1, r2, #8
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6952      	ldr	r2, [r2, #20]
 8004132:	0852      	lsrs	r2, r2, #1
 8004134:	3a01      	subs	r2, #1
 8004136:	0652      	lsls	r2, r2, #25
 8004138:	430a      	orrs	r2, r1
 800413a:	4916      	ldr	r1, [pc, #88]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800413c:	4313      	orrs	r3, r2
 800413e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004140:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a13      	ldr	r2, [pc, #76]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004146:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800414a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd fec4 	bl	8001ed8 <HAL_GetTick>
 8004150:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004152:	e009      	b.n	8004168 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004154:	f7fd fec0 	bl	8001ed8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d902      	bls.n	8004168 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	73fb      	strb	r3, [r7, #15]
          break;
 8004166:	e005      	b.n	8004174 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ef      	beq.n	8004154 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	4904      	ldr	r1, [pc, #16]	@ (8004194 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004188:	7bfb      	ldrb	r3, [r7, #15]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000

08004198 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d018      	beq.n	80041e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041b2:	4b67      	ldr	r3, [pc, #412]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0203 	and.w	r2, r3, #3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d10d      	bne.n	80041de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
       ||
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041ca:	4b61      	ldr	r3, [pc, #388]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
       ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d047      	beq.n	800426e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e044      	b.n	800426e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d018      	beq.n	800421e <RCCEx_PLLSAI2_Config+0x86>
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d825      	bhi.n	800423c <RCCEx_PLLSAI2_Config+0xa4>
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d002      	beq.n	80041fa <RCCEx_PLLSAI2_Config+0x62>
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d009      	beq.n	800420c <RCCEx_PLLSAI2_Config+0x74>
 80041f8:	e020      	b.n	800423c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041fa:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420a:	e01a      	b.n	8004242 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800420c:	4b50      	ldr	r3, [pc, #320]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d116      	bne.n	8004246 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800421c:	e013      	b.n	8004246 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800421e:	4b4c      	ldr	r3, [pc, #304]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800422a:	4b49      	ldr	r3, [pc, #292]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800423a:	e006      	b.n	800424a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      break;
 8004240:	e004      	b.n	800424c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800424a:	bf00      	nop
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004252:	4b3f      	ldr	r3, [pc, #252]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6819      	ldr	r1, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	3b01      	subs	r3, #1
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	430b      	orrs	r3, r1
 8004268:	4939      	ldr	r1, [pc, #228]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d167      	bne.n	8004344 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004274:	4b36      	ldr	r3, [pc, #216]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a35      	ldr	r2, [pc, #212]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800427e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004280:	f7fd fe2a 	bl	8001ed8 <HAL_GetTick>
 8004284:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004286:	e009      	b.n	800429c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004288:	f7fd fe26 	bl	8001ed8 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d902      	bls.n	800429c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	73fb      	strb	r3, [r7, #15]
        break;
 800429a:	e005      	b.n	80042a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800429c:	4b2c      	ldr	r3, [pc, #176]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ef      	bne.n	8004288 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d14a      	bne.n	8004344 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d111      	bne.n	80042d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042b4:	4b26      	ldr	r3, [pc, #152]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80042bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6892      	ldr	r2, [r2, #8]
 80042c4:	0211      	lsls	r1, r2, #8
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	68d2      	ldr	r2, [r2, #12]
 80042ca:	0912      	lsrs	r2, r2, #4
 80042cc:	0452      	lsls	r2, r2, #17
 80042ce:	430a      	orrs	r2, r1
 80042d0:	491f      	ldr	r1, [pc, #124]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	614b      	str	r3, [r1, #20]
 80042d6:	e011      	b.n	80042fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6892      	ldr	r2, [r2, #8]
 80042e8:	0211      	lsls	r1, r2, #8
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6912      	ldr	r2, [r2, #16]
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0652      	lsls	r2, r2, #25
 80042f4:	430a      	orrs	r2, r1
 80042f6:	4916      	ldr	r1, [pc, #88]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042fc:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a13      	ldr	r2, [pc, #76]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004308:	f7fd fde6 	bl	8001ed8 <HAL_GetTick>
 800430c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800430e:	e009      	b.n	8004324 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004310:	f7fd fde2 	bl	8001ed8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d902      	bls.n	8004324 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	73fb      	strb	r3, [r7, #15]
          break;
 8004322:	e005      	b.n	8004330 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004324:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ef      	beq.n	8004310 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	4904      	ldr	r1, [pc, #16]	@ (8004350 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004344:	7bfb      	ldrb	r3, [r7, #15]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000

08004354 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e095      	b.n	8004492 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	2b00      	cmp	r3, #0
 800436c:	d108      	bne.n	8004380 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004376:	d009      	beq.n	800438c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	61da      	str	r2, [r3, #28]
 800437e:	e005      	b.n	800438c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fab4 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043cc:	d902      	bls.n	80043d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043ce:	2300      	movs	r3, #0
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	e002      	b.n	80043da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80043e2:	d007      	beq.n	80043f4 <HAL_SPI_Init+0xa0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043ec:	d002      	beq.n	80043f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004436:	ea42 0103 	orr.w	r1, r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	0c1b      	lsrs	r3, r3, #16
 8004450:	f003 0204 	and.w	r2, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004470:	ea42 0103 	orr.w	r1, r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e040      	b.n	800452e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7fd fa6d 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2224      	movs	r2, #36	@ 0x24
 80044c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fae1 	bl	8004aa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f826 	bl	8004538 <UART_SetConfig>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e01b      	b.n	800452e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004504:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004514:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0201 	orr.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fb60 	bl	8004bec <UART_CheckIdleState>
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800453c:	b08a      	sub	sp, #40	@ 0x28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	431a      	orrs	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4313      	orrs	r3, r2
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4ba4      	ldr	r3, [pc, #656]	@ (80047f8 <UART_SetConfig+0x2c0>)
 8004568:	4013      	ands	r3, r2
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004570:	430b      	orrs	r3, r1
 8004572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a99      	ldr	r2, [pc, #612]	@ (80047fc <UART_SetConfig+0x2c4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a0:	4313      	orrs	r3, r2
 80045a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	430a      	orrs	r2, r1
 80045b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a90      	ldr	r2, [pc, #576]	@ (8004800 <UART_SetConfig+0x2c8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d126      	bne.n	8004610 <UART_SetConfig+0xd8>
 80045c2:	4b90      	ldr	r3, [pc, #576]	@ (8004804 <UART_SetConfig+0x2cc>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d81b      	bhi.n	8004608 <UART_SetConfig+0xd0>
 80045d0:	a201      	add	r2, pc, #4	@ (adr r2, 80045d8 <UART_SetConfig+0xa0>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045f9 	.word	0x080045f9
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	08004601 	.word	0x08004601
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e116      	b.n	800481e <UART_SetConfig+0x2e6>
 80045f0:	2302      	movs	r3, #2
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e112      	b.n	800481e <UART_SetConfig+0x2e6>
 80045f8:	2304      	movs	r3, #4
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e10e      	b.n	800481e <UART_SetConfig+0x2e6>
 8004600:	2308      	movs	r3, #8
 8004602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004606:	e10a      	b.n	800481e <UART_SetConfig+0x2e6>
 8004608:	2310      	movs	r3, #16
 800460a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460e:	e106      	b.n	800481e <UART_SetConfig+0x2e6>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a7c      	ldr	r2, [pc, #496]	@ (8004808 <UART_SetConfig+0x2d0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d138      	bne.n	800468c <UART_SetConfig+0x154>
 800461a:	4b7a      	ldr	r3, [pc, #488]	@ (8004804 <UART_SetConfig+0x2cc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d82d      	bhi.n	8004684 <UART_SetConfig+0x14c>
 8004628:	a201      	add	r2, pc, #4	@ (adr r2, 8004630 <UART_SetConfig+0xf8>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004665 	.word	0x08004665
 8004634:	08004685 	.word	0x08004685
 8004638:	08004685 	.word	0x08004685
 800463c:	08004685 	.word	0x08004685
 8004640:	08004675 	.word	0x08004675
 8004644:	08004685 	.word	0x08004685
 8004648:	08004685 	.word	0x08004685
 800464c:	08004685 	.word	0x08004685
 8004650:	0800466d 	.word	0x0800466d
 8004654:	08004685 	.word	0x08004685
 8004658:	08004685 	.word	0x08004685
 800465c:	08004685 	.word	0x08004685
 8004660:	0800467d 	.word	0x0800467d
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e0d8      	b.n	800481e <UART_SetConfig+0x2e6>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e0d4      	b.n	800481e <UART_SetConfig+0x2e6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e0d0      	b.n	800481e <UART_SetConfig+0x2e6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e0cc      	b.n	800481e <UART_SetConfig+0x2e6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e0c8      	b.n	800481e <UART_SetConfig+0x2e6>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5e      	ldr	r2, [pc, #376]	@ (800480c <UART_SetConfig+0x2d4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d125      	bne.n	80046e2 <UART_SetConfig+0x1aa>
 8004696:	4b5b      	ldr	r3, [pc, #364]	@ (8004804 <UART_SetConfig+0x2cc>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046a0:	2b30      	cmp	r3, #48	@ 0x30
 80046a2:	d016      	beq.n	80046d2 <UART_SetConfig+0x19a>
 80046a4:	2b30      	cmp	r3, #48	@ 0x30
 80046a6:	d818      	bhi.n	80046da <UART_SetConfig+0x1a2>
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d00a      	beq.n	80046c2 <UART_SetConfig+0x18a>
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d814      	bhi.n	80046da <UART_SetConfig+0x1a2>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <UART_SetConfig+0x182>
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d008      	beq.n	80046ca <UART_SetConfig+0x192>
 80046b8:	e00f      	b.n	80046da <UART_SetConfig+0x1a2>
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c0:	e0ad      	b.n	800481e <UART_SetConfig+0x2e6>
 80046c2:	2302      	movs	r3, #2
 80046c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c8:	e0a9      	b.n	800481e <UART_SetConfig+0x2e6>
 80046ca:	2304      	movs	r3, #4
 80046cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d0:	e0a5      	b.n	800481e <UART_SetConfig+0x2e6>
 80046d2:	2308      	movs	r3, #8
 80046d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d8:	e0a1      	b.n	800481e <UART_SetConfig+0x2e6>
 80046da:	2310      	movs	r3, #16
 80046dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e0:	e09d      	b.n	800481e <UART_SetConfig+0x2e6>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004810 <UART_SetConfig+0x2d8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d125      	bne.n	8004738 <UART_SetConfig+0x200>
 80046ec:	4b45      	ldr	r3, [pc, #276]	@ (8004804 <UART_SetConfig+0x2cc>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80046f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80046f8:	d016      	beq.n	8004728 <UART_SetConfig+0x1f0>
 80046fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80046fc:	d818      	bhi.n	8004730 <UART_SetConfig+0x1f8>
 80046fe:	2b80      	cmp	r3, #128	@ 0x80
 8004700:	d00a      	beq.n	8004718 <UART_SetConfig+0x1e0>
 8004702:	2b80      	cmp	r3, #128	@ 0x80
 8004704:	d814      	bhi.n	8004730 <UART_SetConfig+0x1f8>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <UART_SetConfig+0x1d8>
 800470a:	2b40      	cmp	r3, #64	@ 0x40
 800470c:	d008      	beq.n	8004720 <UART_SetConfig+0x1e8>
 800470e:	e00f      	b.n	8004730 <UART_SetConfig+0x1f8>
 8004710:	2300      	movs	r3, #0
 8004712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004716:	e082      	b.n	800481e <UART_SetConfig+0x2e6>
 8004718:	2302      	movs	r3, #2
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e07e      	b.n	800481e <UART_SetConfig+0x2e6>
 8004720:	2304      	movs	r3, #4
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e07a      	b.n	800481e <UART_SetConfig+0x2e6>
 8004728:	2308      	movs	r3, #8
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e076      	b.n	800481e <UART_SetConfig+0x2e6>
 8004730:	2310      	movs	r3, #16
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e072      	b.n	800481e <UART_SetConfig+0x2e6>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a35      	ldr	r2, [pc, #212]	@ (8004814 <UART_SetConfig+0x2dc>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d12a      	bne.n	8004798 <UART_SetConfig+0x260>
 8004742:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <UART_SetConfig+0x2cc>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004750:	d01a      	beq.n	8004788 <UART_SetConfig+0x250>
 8004752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004756:	d81b      	bhi.n	8004790 <UART_SetConfig+0x258>
 8004758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800475c:	d00c      	beq.n	8004778 <UART_SetConfig+0x240>
 800475e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004762:	d815      	bhi.n	8004790 <UART_SetConfig+0x258>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <UART_SetConfig+0x238>
 8004768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800476c:	d008      	beq.n	8004780 <UART_SetConfig+0x248>
 800476e:	e00f      	b.n	8004790 <UART_SetConfig+0x258>
 8004770:	2300      	movs	r3, #0
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004776:	e052      	b.n	800481e <UART_SetConfig+0x2e6>
 8004778:	2302      	movs	r3, #2
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e04e      	b.n	800481e <UART_SetConfig+0x2e6>
 8004780:	2304      	movs	r3, #4
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004786:	e04a      	b.n	800481e <UART_SetConfig+0x2e6>
 8004788:	2308      	movs	r3, #8
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e046      	b.n	800481e <UART_SetConfig+0x2e6>
 8004790:	2310      	movs	r3, #16
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e042      	b.n	800481e <UART_SetConfig+0x2e6>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a17      	ldr	r2, [pc, #92]	@ (80047fc <UART_SetConfig+0x2c4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d13a      	bne.n	8004818 <UART_SetConfig+0x2e0>
 80047a2:	4b18      	ldr	r3, [pc, #96]	@ (8004804 <UART_SetConfig+0x2cc>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047b0:	d01a      	beq.n	80047e8 <UART_SetConfig+0x2b0>
 80047b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047b6:	d81b      	bhi.n	80047f0 <UART_SetConfig+0x2b8>
 80047b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047bc:	d00c      	beq.n	80047d8 <UART_SetConfig+0x2a0>
 80047be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c2:	d815      	bhi.n	80047f0 <UART_SetConfig+0x2b8>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <UART_SetConfig+0x298>
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047cc:	d008      	beq.n	80047e0 <UART_SetConfig+0x2a8>
 80047ce:	e00f      	b.n	80047f0 <UART_SetConfig+0x2b8>
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d6:	e022      	b.n	800481e <UART_SetConfig+0x2e6>
 80047d8:	2302      	movs	r3, #2
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047de:	e01e      	b.n	800481e <UART_SetConfig+0x2e6>
 80047e0:	2304      	movs	r3, #4
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e6:	e01a      	b.n	800481e <UART_SetConfig+0x2e6>
 80047e8:	2308      	movs	r3, #8
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ee:	e016      	b.n	800481e <UART_SetConfig+0x2e6>
 80047f0:	2310      	movs	r3, #16
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f6:	e012      	b.n	800481e <UART_SetConfig+0x2e6>
 80047f8:	efff69f3 	.word	0xefff69f3
 80047fc:	40008000 	.word	0x40008000
 8004800:	40013800 	.word	0x40013800
 8004804:	40021000 	.word	0x40021000
 8004808:	40004400 	.word	0x40004400
 800480c:	40004800 	.word	0x40004800
 8004810:	40004c00 	.word	0x40004c00
 8004814:	40005000 	.word	0x40005000
 8004818:	2310      	movs	r3, #16
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a9f      	ldr	r2, [pc, #636]	@ (8004aa0 <UART_SetConfig+0x568>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d17a      	bne.n	800491e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004828:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800482c:	2b08      	cmp	r3, #8
 800482e:	d824      	bhi.n	800487a <UART_SetConfig+0x342>
 8004830:	a201      	add	r2, pc, #4	@ (adr r2, 8004838 <UART_SetConfig+0x300>)
 8004832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004836:	bf00      	nop
 8004838:	0800485d 	.word	0x0800485d
 800483c:	0800487b 	.word	0x0800487b
 8004840:	08004865 	.word	0x08004865
 8004844:	0800487b 	.word	0x0800487b
 8004848:	0800486b 	.word	0x0800486b
 800484c:	0800487b 	.word	0x0800487b
 8004850:	0800487b 	.word	0x0800487b
 8004854:	0800487b 	.word	0x0800487b
 8004858:	08004873 	.word	0x08004873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800485c:	f7ff f822 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 8004860:	61f8      	str	r0, [r7, #28]
        break;
 8004862:	e010      	b.n	8004886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004864:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa4 <UART_SetConfig+0x56c>)
 8004866:	61fb      	str	r3, [r7, #28]
        break;
 8004868:	e00d      	b.n	8004886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800486a:	f7fe ff83 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 800486e:	61f8      	str	r0, [r7, #28]
        break;
 8004870:	e009      	b.n	8004886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004876:	61fb      	str	r3, [r7, #28]
        break;
 8004878:	e005      	b.n	8004886 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80fb 	beq.w	8004a84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	429a      	cmp	r2, r3
 800489c:	d305      	bcc.n	80048aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d903      	bls.n	80048b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048b0:	e0e8      	b.n	8004a84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2200      	movs	r2, #0
 80048b6:	461c      	mov	r4, r3
 80048b8:	4615      	mov	r5, r2
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	022b      	lsls	r3, r5, #8
 80048c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048c8:	0222      	lsls	r2, r4, #8
 80048ca:	68f9      	ldr	r1, [r7, #12]
 80048cc:	6849      	ldr	r1, [r1, #4]
 80048ce:	0849      	lsrs	r1, r1, #1
 80048d0:	2000      	movs	r0, #0
 80048d2:	4688      	mov	r8, r1
 80048d4:	4681      	mov	r9, r0
 80048d6:	eb12 0a08 	adds.w	sl, r2, r8
 80048da:	eb43 0b09 	adc.w	fp, r3, r9
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ec:	4650      	mov	r0, sl
 80048ee:	4659      	mov	r1, fp
 80048f0:	f7fb fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004902:	d308      	bcc.n	8004916 <UART_SetConfig+0x3de>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490a:	d204      	bcs.n	8004916 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	60da      	str	r2, [r3, #12]
 8004914:	e0b6      	b.n	8004a84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800491c:	e0b2      	b.n	8004a84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004926:	d15e      	bne.n	80049e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004928:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800492c:	2b08      	cmp	r3, #8
 800492e:	d828      	bhi.n	8004982 <UART_SetConfig+0x44a>
 8004930:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <UART_SetConfig+0x400>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004983 	.word	0x08004983
 8004948:	08004973 	.word	0x08004973
 800494c:	08004983 	.word	0x08004983
 8004950:	08004983 	.word	0x08004983
 8004954:	08004983 	.word	0x08004983
 8004958:	0800497b 	.word	0x0800497b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fe ffa2 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 8004960:	61f8      	str	r0, [r7, #28]
        break;
 8004962:	e014      	b.n	800498e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fe ffb4 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8004968:	61f8      	str	r0, [r7, #28]
        break;
 800496a:	e010      	b.n	800498e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa4 <UART_SetConfig+0x56c>)
 800496e:	61fb      	str	r3, [r7, #28]
        break;
 8004970:	e00d      	b.n	800498e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7fe feff 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8004976:	61f8      	str	r0, [r7, #28]
        break;
 8004978:	e009      	b.n	800498e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800497e:	61fb      	str	r3, [r7, #28]
        break;
 8004980:	e005      	b.n	800498e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800498c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d077      	beq.n	8004a84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	005a      	lsls	r2, r3, #1
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	441a      	add	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b0f      	cmp	r3, #15
 80049ae:	d916      	bls.n	80049de <UART_SetConfig+0x4a6>
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b6:	d212      	bcs.n	80049de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f023 030f 	bic.w	r3, r3, #15
 80049c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	085b      	lsrs	r3, r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	8afb      	ldrh	r3, [r7, #22]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	8afa      	ldrh	r2, [r7, #22]
 80049da:	60da      	str	r2, [r3, #12]
 80049dc:	e052      	b.n	8004a84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049e4:	e04e      	b.n	8004a84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d827      	bhi.n	8004a3e <UART_SetConfig+0x506>
 80049ee:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <UART_SetConfig+0x4bc>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a19 	.word	0x08004a19
 80049f8:	08004a21 	.word	0x08004a21
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a3f 	.word	0x08004a3f
 8004a04:	08004a2f 	.word	0x08004a2f
 8004a08:	08004a3f 	.word	0x08004a3f
 8004a0c:	08004a3f 	.word	0x08004a3f
 8004a10:	08004a3f 	.word	0x08004a3f
 8004a14:	08004a37 	.word	0x08004a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a18:	f7fe ff44 	bl	80038a4 <HAL_RCC_GetPCLK1Freq>
 8004a1c:	61f8      	str	r0, [r7, #28]
        break;
 8004a1e:	e014      	b.n	8004a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe ff56 	bl	80038d0 <HAL_RCC_GetPCLK2Freq>
 8004a24:	61f8      	str	r0, [r7, #28]
        break;
 8004a26:	e010      	b.n	8004a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a28:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa4 <UART_SetConfig+0x56c>)
 8004a2a:	61fb      	str	r3, [r7, #28]
        break;
 8004a2c:	e00d      	b.n	8004a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a2e:	f7fe fea1 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8004a32:	61f8      	str	r0, [r7, #28]
        break;
 8004a34:	e009      	b.n	8004a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a3a:	61fb      	str	r3, [r7, #28]
        break;
 8004a3c:	e005      	b.n	8004a4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a48:	bf00      	nop
    }

    if (pclk != 0U)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d019      	beq.n	8004a84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	085a      	lsrs	r2, r3, #1
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	441a      	add	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	d909      	bls.n	8004a7e <UART_SetConfig+0x546>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a70:	d205      	bcs.n	8004a7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	e002      	b.n	8004a84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3728      	adds	r7, #40	@ 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40008000 	.word	0x40008000
 8004aa4:	00f42400 	.word	0x00f42400

08004aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01a      	beq.n	8004bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba6:	d10a      	bne.n	8004bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]
  }
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b098      	sub	sp, #96	@ 0x60
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bfc:	f7fd f96c 	bl	8001ed8 <HAL_GetTick>
 8004c00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d12e      	bne.n	8004c6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f88c 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d021      	beq.n	8004c6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c50:	e841 2300 	strex	r3, r2, [r1]
 8004c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e6      	bne.n	8004c2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e062      	b.n	8004d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d149      	bne.n	8004d10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c80:	9300      	str	r3, [sp, #0]
 8004c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c84:	2200      	movs	r2, #0
 8004c86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f856 	bl	8004d3c <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d03c      	beq.n	8004d10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e6      	bne.n	8004c96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ce8:	61fa      	str	r2, [r7, #28]
 8004cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e011      	b.n	8004d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3758      	adds	r7, #88	@ 0x58
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d4c:	e04f      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d04b      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fd f8bf 	bl	8001ed8 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e04e      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d037      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b80      	cmp	r3, #128	@ 0x80
 8004d82:	d034      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	d031      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d110      	bne.n	8004dba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f838 	bl	8004e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2208      	movs	r2, #8
 8004daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e029      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dc8:	d111      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f81e 	bl	8004e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e00f      	b.n	8004e0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4013      	ands	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d0a0      	beq.n	8004d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b095      	sub	sp, #84	@ 0x54
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3308      	adds	r3, #8
 8004e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e5      	bne.n	8004e50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d118      	bne.n	8004ebe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f023 0310 	bic.w	r3, r3, #16
 8004ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6979      	ldr	r1, [r7, #20]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ed2:	bf00      	nop
 8004ed4:	3754      	adds	r7, #84	@ 0x54
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <LL_EXTI_EnableIT_0_31>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004ee8:	4b05      	ldr	r3, [pc, #20]	@ (8004f00 <LL_EXTI_EnableIT_0_31+0x20>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <LL_EXTI_EnableIT_0_31+0x20>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	40010400 	.word	0x40010400

08004f04 <LL_EXTI_EnableIT_32_63>:
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <LL_EXTI_EnableIT_32_63+0x20>)
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	4904      	ldr	r1, [pc, #16]	@ (8004f24 <LL_EXTI_EnableIT_32_63+0x20>)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	620b      	str	r3, [r1, #32]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40010400 	.word	0x40010400

08004f28 <LL_EXTI_DisableIT_0_31>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <LL_EXTI_DisableIT_0_31+0x24>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	4904      	ldr	r1, [pc, #16]	@ (8004f4c <LL_EXTI_DisableIT_0_31+0x24>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010400 	.word	0x40010400

08004f50 <LL_EXTI_DisableIT_32_63>:
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004f58:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <LL_EXTI_DisableIT_32_63+0x24>)
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	4904      	ldr	r1, [pc, #16]	@ (8004f74 <LL_EXTI_DisableIT_32_63+0x24>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	620b      	str	r3, [r1, #32]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010400 	.word	0x40010400

08004f78 <LL_EXTI_EnableEvent_0_31>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004f80:	4b05      	ldr	r3, [pc, #20]	@ (8004f98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	4904      	ldr	r1, [pc, #16]	@ (8004f98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	40010400 	.word	0x40010400

08004f9c <LL_EXTI_EnableEvent_32_63>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <LL_EXTI_EnableEvent_32_63+0x20>)
 8004fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fa8:	4904      	ldr	r1, [pc, #16]	@ (8004fbc <LL_EXTI_EnableEvent_32_63+0x20>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <LL_EXTI_DisableEvent_0_31>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	4904      	ldr	r1, [pc, #16]	@ (8004fe4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	604b      	str	r3, [r1, #4]
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010400 	.word	0x40010400

08004fe8 <LL_EXTI_DisableEvent_32_63>:
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	4904      	ldr	r1, [pc, #16]	@ (800500c <LL_EXTI_DisableEvent_32_63+0x24>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010400 	.word	0x40010400

08005010 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4904      	ldr	r1, [pc, #16]	@ (8005030 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010400 	.word	0x40010400

08005034 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800503e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005040:	4904      	ldr	r1, [pc, #16]	@ (8005054 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4313      	orrs	r3, r2
 8005046:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40010400 	.word	0x40010400

08005058 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	43db      	mvns	r3, r3
 8005068:	4904      	ldr	r1, [pc, #16]	@ (800507c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800506a:	4013      	ands	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010400 	.word	0x40010400

08005080 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800508a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	43db      	mvns	r3, r3
 8005090:	4904      	ldr	r1, [pc, #16]	@ (80050a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8005092:	4013      	ands	r3, r2
 8005094:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010400 	.word	0x40010400

080050a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60cb      	str	r3, [r1, #12]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010400 	.word	0x40010400

080050cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80050d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d8:	4904      	ldr	r1, [pc, #16]	@ (80050ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40010400 	.word	0x40010400

080050f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	43db      	mvns	r3, r3
 8005100:	4904      	ldr	r1, [pc, #16]	@ (8005114 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005102:	4013      	ands	r3, r2
 8005104:	60cb      	str	r3, [r1, #12]
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40010400 	.word	0x40010400

08005118 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	43db      	mvns	r3, r3
 8005128:	4904      	ldr	r1, [pc, #16]	@ (800513c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800512a:	4013      	ands	r3, r2
 800512c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010400 	.word	0x40010400

08005140 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	7a1b      	ldrb	r3, [r3, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80d0 	beq.w	80052f6 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d063      	beq.n	8005226 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7a5b      	ldrb	r3, [r3, #9]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d01c      	beq.n	80051a0 <LL_EXTI_Init+0x60>
 8005166:	2b02      	cmp	r3, #2
 8005168:	dc25      	bgt.n	80051b6 <LL_EXTI_Init+0x76>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <LL_EXTI_Init+0x34>
 800516e:	2b01      	cmp	r3, #1
 8005170:	d00b      	beq.n	800518a <LL_EXTI_Init+0x4a>
 8005172:	e020      	b.n	80051b6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff ff21 	bl	8004fc0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff feac 	bl	8004ee0 <LL_EXTI_EnableIT_0_31>
          break;
 8005188:	e018      	b.n	80051bc <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff feca 	bl	8004f28 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff feed 	bl	8004f78 <LL_EXTI_EnableEvent_0_31>
          break;
 800519e:	e00d      	b.n	80051bc <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fe9b 	bl	8004ee0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fee2 	bl	8004f78 <LL_EXTI_EnableEvent_0_31>
          break;
 80051b4:	e002      	b.n	80051bc <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80051b6:	2301      	movs	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
          break;
 80051ba:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7a9b      	ldrb	r3, [r3, #10]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d030      	beq.n	8005226 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7a9b      	ldrb	r3, [r3, #10]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d01c      	beq.n	8005206 <LL_EXTI_Init+0xc6>
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	dc25      	bgt.n	800521c <LL_EXTI_Init+0xdc>
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d002      	beq.n	80051da <LL_EXTI_Init+0x9a>
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d00b      	beq.n	80051f0 <LL_EXTI_Init+0xb0>
 80051d8:	e020      	b.n	800521c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ff86 	bl	80050f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ff11 	bl	8005010 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80051ee:	e01a      	b.n	8005226 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff ff2f 	bl	8005058 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff52 	bl	80050a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005204:	e00f      	b.n	8005226 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ff00 	bl	8005010 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff ff47 	bl	80050a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800521a:	e004      	b.n	8005226 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f043 0302 	orr.w	r3, r3, #2
 8005222:	60fb      	str	r3, [r7, #12]
            break;
 8005224:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d077      	beq.n	800531e <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7a5b      	ldrb	r3, [r3, #9]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d01c      	beq.n	8005270 <LL_EXTI_Init+0x130>
 8005236:	2b02      	cmp	r3, #2
 8005238:	dc25      	bgt.n	8005286 <LL_EXTI_Init+0x146>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <LL_EXTI_Init+0x104>
 800523e:	2b01      	cmp	r3, #1
 8005240:	d00b      	beq.n	800525a <LL_EXTI_Init+0x11a>
 8005242:	e020      	b.n	8005286 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fecd 	bl	8004fe8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fe56 	bl	8004f04 <LL_EXTI_EnableIT_32_63>
          break;
 8005258:	e01a      	b.n	8005290 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fe76 	bl	8004f50 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff fe97 	bl	8004f9c <LL_EXTI_EnableEvent_32_63>
          break;
 800526e:	e00f      	b.n	8005290 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fe45 	bl	8004f04 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fe8c 	bl	8004f9c <LL_EXTI_EnableEvent_32_63>
          break;
 8005284:	e004      	b.n	8005290 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f043 0304 	orr.w	r3, r3, #4
 800528c:	60fb      	str	r3, [r7, #12]
          break;
 800528e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	7a9b      	ldrb	r3, [r3, #10]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d042      	beq.n	800531e <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	7a9b      	ldrb	r3, [r3, #10]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d01c      	beq.n	80052da <LL_EXTI_Init+0x19a>
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	dc25      	bgt.n	80052f0 <LL_EXTI_Init+0x1b0>
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d002      	beq.n	80052ae <LL_EXTI_Init+0x16e>
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d00b      	beq.n	80052c4 <LL_EXTI_Init+0x184>
 80052ac:	e020      	b.n	80052f0 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff ff30 	bl	8005118 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff feb9 	bl	8005034 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80052c2:	e02c      	b.n	800531e <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff fed9 	bl	8005080 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fefa 	bl	80050cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80052d8:	e021      	b.n	800531e <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fea8 	bl	8005034 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff feef 	bl	80050cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80052ee:	e016      	b.n	800531e <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
            break;
 80052f4:	e013      	b.n	800531e <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fe14 	bl	8004f28 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fe5b 	bl	8004fc0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fe1e 	bl	8004f50 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fe65 	bl	8004fe8 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 800531e:	68fb      	ldr	r3, [r7, #12]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <LL_GPIO_SetPinMode>:
{
 8005328:	b480      	push	{r7}
 800532a:	b08b      	sub	sp, #44	@ 0x2c
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	613b      	str	r3, [r7, #16]
  return result;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800534e:	2320      	movs	r3, #32
 8005350:	e003      	b.n	800535a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	2103      	movs	r1, #3
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	401a      	ands	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	fa93 f3a3 	rbit	r3, r3
 8005370:	61fb      	str	r3, [r7, #28]
  return result;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800537c:	2320      	movs	r3, #32
 800537e:	e003      	b.n	8005388 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	431a      	orrs	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	bf00      	nop
 8005398:	372c      	adds	r7, #44	@ 0x2c
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_GPIO_SetPinOutputType>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	401a      	ands	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
}
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <LL_GPIO_SetPinSpeed>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	b08b      	sub	sp, #44	@ 0x2c
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	613b      	str	r3, [r7, #16]
  return result;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80053f8:	2320      	movs	r3, #32
 80053fa:	e003      	b.n	8005404 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	2103      	movs	r1, #3
 8005408:	fa01 f303 	lsl.w	r3, r1, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	fa93 f3a3 	rbit	r3, r3
 800541a:	61fb      	str	r3, [r7, #28]
  return result;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005426:	2320      	movs	r3, #32
 8005428:	e003      	b.n	8005432 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	fab3 f383 	clz	r3, r3
 8005430:	b2db      	uxtb	r3, r3
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	fa01 f303 	lsl.w	r3, r1, r3
 800543a:	431a      	orrs	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	609a      	str	r2, [r3, #8]
}
 8005440:	bf00      	nop
 8005442:	372c      	adds	r7, #44	@ 0x2c
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <LL_GPIO_SetPinPull>:
{
 800544c:	b480      	push	{r7}
 800544e:	b08b      	sub	sp, #44	@ 0x2c
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	613b      	str	r3, [r7, #16]
  return result;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005472:	2320      	movs	r3, #32
 8005474:	e003      	b.n	800547e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	fab3 f383 	clz	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	2103      	movs	r1, #3
 8005482:	fa01 f303 	lsl.w	r3, r1, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	401a      	ands	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	fa93 f3a3 	rbit	r3, r3
 8005494:	61fb      	str	r3, [r7, #28]
  return result;
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80054a0:	2320      	movs	r3, #32
 80054a2:	e003      	b.n	80054ac <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	fab3 f383 	clz	r3, r3
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	fa01 f303 	lsl.w	r3, r1, r3
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	60da      	str	r2, [r3, #12]
}
 80054ba:	bf00      	nop
 80054bc:	372c      	adds	r7, #44	@ 0x2c
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <LL_GPIO_SetAFPin_0_7>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	b08b      	sub	sp, #44	@ 0x2c
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1a      	ldr	r2, [r3, #32]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	fa93 f3a3 	rbit	r3, r3
 80054e0:	613b      	str	r3, [r7, #16]
  return result;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80054ec:	2320      	movs	r3, #32
 80054ee:	e003      	b.n	80054f8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	fab3 f383 	clz	r3, r3
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	210f      	movs	r1, #15
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	43db      	mvns	r3, r3
 8005502:	401a      	ands	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	fa93 f3a3 	rbit	r3, r3
 800550e:	61fb      	str	r3, [r7, #28]
  return result;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800551a:	2320      	movs	r3, #32
 800551c:	e003      	b.n	8005526 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800551e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005520:	fab3 f383 	clz	r3, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	431a      	orrs	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	621a      	str	r2, [r3, #32]
}
 8005534:	bf00      	nop
 8005536:	372c      	adds	r7, #44	@ 0x2c
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <LL_GPIO_SetAFPin_8_15>:
{
 8005540:	b480      	push	{r7}
 8005542:	b08b      	sub	sp, #44	@ 0x2c
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa93 f3a3 	rbit	r3, r3
 800555c:	613b      	str	r3, [r7, #16]
  return result;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005568:	2320      	movs	r3, #32
 800556a:	e003      	b.n	8005574 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	210f      	movs	r1, #15
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	401a      	ands	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	0a1b      	lsrs	r3, r3, #8
 8005584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	fa93 f3a3 	rbit	r3, r3
 800558c:	61fb      	str	r3, [r7, #28]
  return result;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005598:	2320      	movs	r3, #32
 800559a:	e003      	b.n	80055a4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	fab3 f383 	clz	r3, r3
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80055b2:	bf00      	nop
 80055b4:	372c      	adds	r7, #44	@ 0x2c
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	60fb      	str	r3, [r7, #12]
  return result;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <LL_GPIO_Init+0x26>
    return 32U;
 80055e0:	2320      	movs	r3, #32
 80055e2:	e003      	b.n	80055ec <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	fab3 f383 	clz	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80055ee:	e048      	b.n	8005682 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2101      	movs	r1, #1
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	fa01 f303 	lsl.w	r3, r1, r3
 80055fc:	4013      	ands	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d03a      	beq.n	800567c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d003      	beq.n	8005616 <LL_GPIO_Init+0x58>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d10e      	bne.n	8005634 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	461a      	mov	r2, r3
 800561c:	69b9      	ldr	r1, [r7, #24]
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fed7 	bl	80053d2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6819      	ldr	r1, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	461a      	mov	r2, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff feb7 	bl	80053a2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	461a      	mov	r2, r3
 800563a:	69b9      	ldr	r1, [r7, #24]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7ff ff05 	bl	800544c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d111      	bne.n	800566e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2bff      	cmp	r3, #255	@ 0xff
 800564e:	d807      	bhi.n	8005660 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	461a      	mov	r2, r3
 8005656:	69b9      	ldr	r1, [r7, #24]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff34 	bl	80054c6 <LL_GPIO_SetAFPin_0_7>
 800565e:	e006      	b.n	800566e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	461a      	mov	r2, r3
 8005666:	69b9      	ldr	r1, [r7, #24]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff69 	bl	8005540 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	461a      	mov	r2, r3
 8005674:	69b9      	ldr	r1, [r7, #24]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fe56 	bl	8005328 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3301      	adds	r3, #1
 8005680:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	fa22 f303 	lsr.w	r3, r2, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1af      	bne.n	80055f0 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800569a:	b084      	sub	sp, #16
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	f107 001c 	add.w	r0, r7, #28
 80056a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fa69 	bl	8005b90 <USB_CoreReset>
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80056c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80056d6:	e005      	b.n	80056e4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056f0:	b004      	add	sp, #16
 80056f2:	4770      	bx	lr

080056f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f023 0201 	bic.w	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d115      	bne.n	8005764 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005744:	200a      	movs	r0, #10
 8005746:	f7fc fbd3 	bl	8001ef0 <HAL_Delay>
      ms += 10U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	330a      	adds	r3, #10
 800574e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fa0f 	bl	8005b74 <USB_GetMode>
 8005756:	4603      	mov	r3, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	d01e      	beq.n	800579a <USB_SetCurrentMode+0x84>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005760:	d9f0      	bls.n	8005744 <USB_SetCurrentMode+0x2e>
 8005762:	e01a      	b.n	800579a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005764:	78fb      	ldrb	r3, [r7, #3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d115      	bne.n	8005796 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005776:	200a      	movs	r0, #10
 8005778:	f7fc fbba 	bl	8001ef0 <HAL_Delay>
      ms += 10U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	330a      	adds	r3, #10
 8005780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f9f6 	bl	8005b74 <USB_GetMode>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <USB_SetCurrentMode+0x84>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2bc7      	cmp	r3, #199	@ 0xc7
 8005792:	d9f0      	bls.n	8005776 <USB_SetCurrentMode+0x60>
 8005794:	e001      	b.n	800579a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e005      	b.n	80057a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2bc8      	cmp	r3, #200	@ 0xc8
 800579e:	d101      	bne.n	80057a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b0:	b084      	sub	sp, #16
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80057be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e009      	b.n	80057e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3340      	adds	r3, #64	@ 0x40
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	2200      	movs	r2, #0
 80057dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3301      	adds	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b0e      	cmp	r3, #14
 80057e8:	d9f2      	bls.n	80057d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11c      	bne.n	800582c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	e005      	b.n	8005838 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005844:	2103      	movs	r1, #3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f95a 	bl	8005b00 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800584c:	2110      	movs	r1, #16
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f8f6 	bl	8005a40 <USB_FlushTxFifo>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f920 	bl	8005aa4 <USB_FlushRxFifo>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588c:	461a      	mov	r2, r3
 800588e:	2300      	movs	r3, #0
 8005890:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e043      	b.n	8005920 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058ae:	d118      	bne.n	80058e2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c2:	461a      	mov	r2, r3
 80058c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e013      	b.n	80058f4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d8:	461a      	mov	r2, r3
 80058da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e008      	b.n	80058f4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ee:	461a      	mov	r2, r3
 80058f0:	2300      	movs	r3, #0
 80058f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005900:	461a      	mov	r2, r3
 8005902:	2300      	movs	r3, #0
 8005904:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	461a      	mov	r2, r3
 8005914:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005918:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	3301      	adds	r3, #1
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005924:	461a      	mov	r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4293      	cmp	r3, r2
 800592a:	d3b5      	bcc.n	8005898 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e043      	b.n	80059ba <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005948:	d118      	bne.n	800597c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595c:	461a      	mov	r2, r3
 800595e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e013      	b.n	800598e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005972:	461a      	mov	r2, r3
 8005974:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e008      	b.n	800598e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	461a      	mov	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ac:	461a      	mov	r2, r3
 80059ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	3301      	adds	r3, #1
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059be:	461a      	mov	r2, r3
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d3b5      	bcc.n	8005932 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	f043 0210 	orr.w	r2, r3, #16
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <USB_DevInit+0x28c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f043 0208 	orr.w	r2, r3, #8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d107      	bne.n	8005a2c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a24:	f043 0304 	orr.w	r3, r3, #4
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a38:	b004      	add	sp, #16
 8005a3a:	4770      	bx	lr
 8005a3c:	803c3800 	.word	0x803c3800

08005a40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a5a:	d901      	bls.n	8005a60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e01b      	b.n	8005a98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	daf2      	bge.n	8005a4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	019b      	lsls	r3, r3, #6
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a84:	d901      	bls.n	8005a8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e006      	b.n	8005a98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d0f0      	beq.n	8005a78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005abc:	d901      	bls.n	8005ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e018      	b.n	8005af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	daf2      	bge.n	8005ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ae0:	d901      	bls.n	8005ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e006      	b.n	8005af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d0f0      	beq.n	8005ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b20:	4313      	orrs	r3, r2
 8005b22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b60:	f043 0302 	orr.w	r3, r3, #2
 8005b64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0301 	and.w	r3, r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ba8:	d901      	bls.n	8005bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01b      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	daf2      	bge.n	8005b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bd2:	d901      	bls.n	8005bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e006      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d0f0      	beq.n	8005bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
	...

08005bf4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005bfc:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <LL_mDelay+0x4c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005c06:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d00c      	beq.n	8005c2a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005c16:	e008      	b.n	8005c2a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005c18:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <LL_mDelay+0x4c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f3      	bne.n	8005c18 <LL_mDelay+0x24>
    }
  }
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e010 	.word	0xe000e010

08005c44 <memset>:
 8005c44:	4402      	add	r2, r0
 8005c46:	4603      	mov	r3, r0
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d100      	bne.n	8005c4e <memset+0xa>
 8005c4c:	4770      	bx	lr
 8005c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c52:	e7f9      	b.n	8005c48 <memset+0x4>

08005c54 <__libc_init_array>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	4d0d      	ldr	r5, [pc, #52]	@ (8005c8c <__libc_init_array+0x38>)
 8005c58:	4c0d      	ldr	r4, [pc, #52]	@ (8005c90 <__libc_init_array+0x3c>)
 8005c5a:	1b64      	subs	r4, r4, r5
 8005c5c:	10a4      	asrs	r4, r4, #2
 8005c5e:	2600      	movs	r6, #0
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	d109      	bne.n	8005c78 <__libc_init_array+0x24>
 8005c64:	4d0b      	ldr	r5, [pc, #44]	@ (8005c94 <__libc_init_array+0x40>)
 8005c66:	4c0c      	ldr	r4, [pc, #48]	@ (8005c98 <__libc_init_array+0x44>)
 8005c68:	f000 f818 	bl	8005c9c <_init>
 8005c6c:	1b64      	subs	r4, r4, r5
 8005c6e:	10a4      	asrs	r4, r4, #2
 8005c70:	2600      	movs	r6, #0
 8005c72:	42a6      	cmp	r6, r4
 8005c74:	d105      	bne.n	8005c82 <__libc_init_array+0x2e>
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7c:	4798      	blx	r3
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7ee      	b.n	8005c60 <__libc_init_array+0xc>
 8005c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c86:	4798      	blx	r3
 8005c88:	3601      	adds	r6, #1
 8005c8a:	e7f2      	b.n	8005c72 <__libc_init_array+0x1e>
 8005c8c:	08005d04 	.word	0x08005d04
 8005c90:	08005d04 	.word	0x08005d04
 8005c94:	08005d04 	.word	0x08005d04
 8005c98:	08005d08 	.word	0x08005d08

08005c9c <_init>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr

08005ca8 <_fini>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	bf00      	nop
 8005cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cae:	bc08      	pop	{r3}
 8005cb0:	469e      	mov	lr, r3
 8005cb2:	4770      	bx	lr
