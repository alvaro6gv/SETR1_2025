
NanoEdge_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800a068  0800a068  0000b068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a460  0800a460  0000d1c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a460  0800a460  0000b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a468  0800a468  0000d1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a468  0800a468  0000b468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a46c  0800a46c  0000b46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a470  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         00000fe8  200001d8  0800a648  0000c1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000b40  200011c0  0800b630  0000d1c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d00  0800b630  0000dd00  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141b1  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b37  00000000  00000000  000213a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  00023ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edc  00000000  00000000  000251d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028497  00000000  00000000  000260ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b61  00000000  00000000  0004e543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f68a6  00000000  00000000  000660a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000087  00000000  00000000  0015c94a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006300  00000000  00000000  0015c9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  00162cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200011c0 	.word	0x200011c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a04c 	.word	0x0800a04c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200011c4 	.word	0x200011c4
 80001cc:	0800a04c 	.word	0x0800a04c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <LSM6DSL_Init>:
#include "stm32l4xx_hal.h"
#include "LSM6DSL.h"

extern I2C_HandleTypeDef hi2c2;

void LSM6DSL_Init(){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
	buffer[0] = ODR_XL_104Hz;
 8000f3e:	2340      	movs	r3, #64	@ 0x40
 8000f40:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, LSM6DSL_ADDR, REG_CTRL1_XL, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8000f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	2210      	movs	r2, #16
 8000f54:	21d4      	movs	r1, #212	@ 0xd4
 8000f56:	4803      	ldr	r0, [pc, #12]	@ (8000f64 <LSM6DSL_Init+0x2c>)
 8000f58:	f001 fc48 	bl	80027ec <HAL_I2C_Mem_Write>

}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20001504 	.word	0x20001504

08000f68 <LSM6DSL_DataReady>:

uint8_t LSM6DSL_DataReady(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af04      	add	r7, sp, #16

	uint8_t buffer[1];
    HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDR, REG_STATUS, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	221e      	movs	r2, #30
 8000f80:	21d4      	movs	r1, #212	@ 0xd4
 8000f82:	4807      	ldr	r0, [pc, #28]	@ (8000fa0 <LSM6DSL_DataReady+0x38>)
 8000f84:	f001 fd46 	bl	8002a14 <HAL_I2C_Mem_Read>
    return ((buffer[0] & 0x01) != 0);
 8000f88:	793b      	ldrb	r3, [r7, #4]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3

}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20001504 	.word	0x20001504

08000fa4 <LSM6DSL_ReadAccel>:

void LSM6DSL_ReadAccel(float accel[]){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af04      	add	r7, sp, #16
 8000faa:	6078      	str	r0, [r7, #4]

	uint8_t buffer[6];

	HAL_I2C_Mem_Read(&hi2c2, LSM6DSL_ADDR, REG_OUTX_L_XL, I2C_MEMADD_SIZE_8BIT, buffer, 6, 1000);
 8000fac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	2306      	movs	r3, #6
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2228      	movs	r2, #40	@ 0x28
 8000fc0:	21d4      	movs	r1, #212	@ 0xd4
 8000fc2:	4818      	ldr	r0, [pc, #96]	@ (8001024 <LSM6DSL_ReadAccel+0x80>)
 8000fc4:	f001 fd26 	bl	8002a14 <HAL_I2C_Mem_Read>

	for(uint8_t i = 0; i < 3; i++){
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e021      	b.n	8001012 <LSM6DSL_ReadAccel+0x6e>
		accel[i] = ((int16_t)(buffer[2*i+1]<<8) | buffer[2*i])*0.061f;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	443b      	add	r3, r7
 8000fd8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	3310      	adds	r3, #16
 8000fe8:	443b      	add	r3, r7
 8000fea:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4413      	add	r3, r2
 8001000:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001028 <LSM6DSL_ReadAccel+0x84>
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; i++){
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	3301      	adds	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d9da      	bls.n	8000fce <LSM6DSL_ReadAccel+0x2a>
	}

}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20001504 	.word	0x20001504
 8001028:	3d79db23 	.word	0x3d79db23

0800102c <WS2812_Set_LED>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];

void WS2812_Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
 8001038:	603b      	str	r3, [r7, #0]
	if(LEDnum < MAX_LED){
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b05      	cmp	r3, #5
 800103e:	dc1d      	bgt.n	800107c <WS2812_Set_LED+0x50>
		LED_Data[LEDnum][0] = LEDnum;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	b2d9      	uxtb	r1, r3
 8001044:	4a10      	ldr	r2, [pc, #64]	@ (8001088 <WS2812_Set_LED+0x5c>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[LEDnum][1] = Green;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	b2d9      	uxtb	r1, r3
 8001050:	4a0d      	ldr	r2, [pc, #52]	@ (8001088 <WS2812_Set_LED+0x5c>)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	460a      	mov	r2, r1
 800105a:	705a      	strb	r2, [r3, #1]
		LED_Data[LEDnum][2] = Red;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	b2d9      	uxtb	r1, r3
 8001060:	4a09      	ldr	r2, [pc, #36]	@ (8001088 <WS2812_Set_LED+0x5c>)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	460a      	mov	r2, r1
 800106a:	709a      	strb	r2, [r3, #2]
		LED_Data[LEDnum][3] = Blue;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2d9      	uxtb	r1, r3
 8001070:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <WS2812_Set_LED+0x5c>)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	460a      	mov	r2, r1
 800107a:	70da      	strb	r2, [r3, #3]
	}
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200011dc 	.word	0x200011dc

0800108c <WS2812_Clear_LED>:

void WS2812_Clear_LED(){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < MAX_LED; i++){
 8001092:	2300      	movs	r3, #0
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e008      	b.n	80010aa <WS2812_Clear_LED+0x1e>
		WS2812_Set_LED(i, 0, 0, 0);
 8001098:	79f8      	ldrb	r0, [r7, #7]
 800109a:	2300      	movs	r3, #0
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	f7ff ffc4 	bl	800102c <WS2812_Set_LED>
	for(uint8_t i = 0; i < MAX_LED; i++){
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3301      	adds	r3, #1
 80010a8:	71fb      	strb	r3, [r7, #7]
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d9f3      	bls.n	8001098 <WS2812_Clear_LED+0xc>
	}
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <WS2812_Set_All_LED>:

void WS2812_Set_All_LED( int Red, int Green, int Blue){
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
	for(uint8_t i = 0; i < MAX_LED; i++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
 80010ca:	e008      	b.n	80010de <WS2812_Set_All_LED+0x24>
		WS2812_Set_LED(i, Red, Green, Blue);
 80010cc:	7df8      	ldrb	r0, [r7, #23]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	68f9      	ldr	r1, [r7, #12]
 80010d4:	f7ff ffaa 	bl	800102c <WS2812_Set_LED>
	for(uint8_t i = 0; i < MAX_LED; i++){
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	3301      	adds	r3, #1
 80010dc:	75fb      	strb	r3, [r7, #23]
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d9f3      	bls.n	80010cc <WS2812_Set_All_LED+0x12>
	}
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <WS2812_Update>:
uint16_t pwmIdx = 0;
uint32_t pwmData[(24*MAX_LED)+50];
uint8_t datasentflag = 0;

void WS2812_Update (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	e036      	b.n	800116e <WS2812_Update+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8001100:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <WS2812_Update+0xd0>)
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	041a      	lsls	r2, r3, #16
 800110c:	492c      	ldr	r1, [pc, #176]	@ (80011c0 <WS2812_Update+0xd0>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	789b      	ldrb	r3, [r3, #2]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	431a      	orrs	r2, r3
 800111a:	4929      	ldr	r1, [pc, #164]	@ (80011c0 <WS2812_Update+0xd0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	78db      	ldrb	r3, [r3, #3]
 8001124:	4313      	orrs	r3, r2
 8001126:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8001128:	2317      	movs	r3, #23
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e019      	b.n	8001162 <WS2812_Update+0x72>
		{
			if (color&(1<<i))
 800112e:	2201      	movs	r2, #1
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	461a      	mov	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4013      	ands	r3, r2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <WS2812_Update+0x5c>
			{
				pwmData[indx] = 67;  // 2/3 of 100
 8001140:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <WS2812_Update+0xd4>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2143      	movs	r1, #67	@ 0x43
 8001146:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800114a:	e004      	b.n	8001156 <WS2812_Update+0x66>
			}

			else pwmData[indx] = 33;  // 1/3 of 100
 800114c:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <WS2812_Update+0xd4>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2121      	movs	r1, #33	@ 0x21
 8001152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			indx++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3b01      	subs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	dae2      	bge.n	800112e <WS2812_Update+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b05      	cmp	r3, #5
 8001172:	ddc5      	ble.n	8001100 <WS2812_Update+0x10>
		}
	}

	for (int i=0; i<50; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	e00a      	b.n	8001190 <WS2812_Update+0xa0>
	{
		pwmData[indx] = 0;
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <WS2812_Update+0xd4>)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2100      	movs	r1, #0
 8001180:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		indx++;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3301      	adds	r3, #1
 8001188:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	3301      	adds	r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	2b31      	cmp	r3, #49	@ 0x31
 8001194:	ddf1      	ble.n	800117a <WS2812_Update+0x8a>
	}
	pwmIdx = 0;
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <WS2812_Update+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]

	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, pwmData, (24*MAX_LED)+50);
 800119c:	23c2      	movs	r3, #194	@ 0xc2
 800119e:	4a09      	ldr	r2, [pc, #36]	@ (80011c4 <WS2812_Update+0xd4>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	480a      	ldr	r0, [pc, #40]	@ (80011cc <WS2812_Update+0xdc>)
 80011a4:	f003 fc22 	bl	80049ec <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 80011a8:	bf00      	nop
 80011aa:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <WS2812_Update+0xe0>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0fb      	beq.n	80011aa <WS2812_Update+0xba>
	datasentflag = 0;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <WS2812_Update+0xe0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200011dc 	.word	0x200011dc
 80011c4:	200011f8 	.word	0x200011f8
 80011c8:	200011f4 	.word	0x200011f4
 80011cc:	20001558 	.word	0x20001558
 80011d0:	20001500 	.word	0x20001500

080011d4 <HAL_TIM_PWM_PulseFinishedCallback>:



void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80011e0:	f003 fe24 	bl	8004e2c <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20001558 	.word	0x20001558
 80011f8:	20001500 	.word	0x20001500

080011fc <fill_buffer>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define LEARNING_ITERATIONS 20
float input_user_buffer[DATA_INPUT_USER * AXIS_NUMBER];

void fill_buffer(float input_buffer[]) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	uint16_t i;
	for (i = 0; i < DATA_INPUT_USER; i++) {
 8001204:	2300      	movs	r3, #0
 8001206:	81fb      	strh	r3, [r7, #14]
 8001208:	e012      	b.n	8001230 <fill_buffer+0x34>
		while (!LSM6DSL_DataReady());
 800120a:	bf00      	nop
 800120c:	f7ff feac 	bl	8000f68 <LSM6DSL_DataReady>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0fa      	beq.n	800120c <fill_buffer+0x10>
		LSM6DSL_ReadAccel(&input_user_buffer[AXIS_NUMBER * i]);
 8001216:	89fa      	ldrh	r2, [r7, #14]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <fill_buffer+0x44>)
 8001222:	4413      	add	r3, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff febd 	bl	8000fa4 <LSM6DSL_ReadAccel>
	for (i = 0; i < DATA_INPUT_USER; i++) {
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	3301      	adds	r3, #1
 800122e:	81fb      	strh	r3, [r7, #14]
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	2b3f      	cmp	r3, #63	@ 0x3f
 8001234:	d9e9      	bls.n	800120a <fill_buffer+0xe>
	}
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20001674 	.word	0x20001674

08001244 <__io_putchar>:

int __io_putchar(int ch)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, &*c, 1, 10);
 8001252:	f107 010c 	add.w	r1, r7, #12
 8001256:	230a      	movs	r3, #10
 8001258:	2201      	movs	r2, #1
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <__io_putchar+0x28>)
 800125c:	f004 fd50 	bl	8005d00 <HAL_UART_Transmit>
	return ch;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200015ec 	.word	0x200015ec

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001276:	f000 fc9c 	bl	8001bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127a:	f000 f86b 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127e:	f000 f9a1 	bl	80015c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001282:	f000 f981 	bl	8001588 <MX_DMA_Init>
  MX_I2C2_Init();
 8001286:	f000 f8b7 	bl	80013f8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800128a:	f000 f94d 	bl	8001528 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800128e:	f000 f8f3 	bl	8001478 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LSM6DSL_Init();
 8001292:	f7ff fe51 	bl	8000f38 <LSM6DSL_Init>

  enum neai_state error_code = neai_anomalydetection_init();
 8001296:	f005 fe7d 	bl	8006f94 <neai_anomalydetection_init>
 800129a:	4603      	mov	r3, r0
 800129c:	717b      	strb	r3, [r7, #5]
  uint8_t similarity = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	713b      	strb	r3, [r7, #4]
  if (error_code != NEAI_OK) {
	/* This happens if the library works into a not supported board. */
  }


  WS2812_Clear_LED();
 80012a2:	f7ff fef3 	bl	800108c <WS2812_Clear_LED>
  WS2812_Update();
 80012a6:	f7ff ff23 	bl	80010f0 <WS2812_Update>

	for (uint16_t iteration = 0; iteration < LEARNING_ITERATIONS; iteration++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	80fb      	strh	r3, [r7, #6]
 80012ae:	e01d      	b.n	80012ec <main+0x7c>
		fill_buffer(input_user_buffer);
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <main+0xd4>)
 80012b2:	f7ff ffa3 	bl	80011fc <fill_buffer>
		neai_anomalydetection_learn(input_user_buffer);
 80012b6:	4823      	ldr	r0, [pc, #140]	@ (8001344 <main+0xd4>)
 80012b8:	f005 fac6 	bl	8006848 <neai_anomalydetection_learn>

		WS2812_Clear_LED();
 80012bc:	f7ff fee6 	bl	800108c <WS2812_Clear_LED>
		WS2812_Set_LED(iteration%6, 0, 0, 255);
 80012c0:	88fa      	ldrh	r2, [r7, #6]
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <main+0xd8>)
 80012c4:	fba3 1302 	umull	r1, r3, r3, r2
 80012c8:	0899      	lsrs	r1, r3, #2
 80012ca:	460b      	mov	r3, r1
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	440b      	add	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	23ff      	movs	r3, #255	@ 0xff
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	f7ff fea5 	bl	800102c <WS2812_Set_LED>
		WS2812_Update();
 80012e2:	f7ff ff05 	bl	80010f0 <WS2812_Update>
	for (uint16_t iteration = 0; iteration < LEARNING_ITERATIONS; iteration++) {
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	3301      	adds	r3, #1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	2b13      	cmp	r3, #19
 80012f0:	d9de      	bls.n	80012b0 <main+0x40>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		fill_buffer(input_user_buffer);
 80012f2:	4814      	ldr	r0, [pc, #80]	@ (8001344 <main+0xd4>)
 80012f4:	f7ff ff82 	bl	80011fc <fill_buffer>
		neai_anomalydetection_detect(input_user_buffer, &similarity);
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4811      	ldr	r0, [pc, #68]	@ (8001344 <main+0xd4>)
 80012fe:	f005 fc7b 	bl	8006bf8 <neai_anomalydetection_detect>
		if (similarity < 90) {
 8001302:	793b      	ldrb	r3, [r7, #4]
 8001304:	2b59      	cmp	r3, #89	@ 0x59
 8001306:	d80e      	bhi.n	8001326 <main+0xb6>
			printf("----> Abnormal: %d\r\n", similarity);
 8001308:	793b      	ldrb	r3, [r7, #4]
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <main+0xdc>)
 800130e:	f006 fb95 	bl	8007a3c <iprintf>
			WS2812_Clear_LED();
 8001312:	f7ff febb 	bl	800108c <WS2812_Clear_LED>
			WS2812_Set_All_LED(255, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	f7ff fecd 	bl	80010ba <WS2812_Set_All_LED>
			WS2812_Update();
 8001320:	f7ff fee6 	bl	80010f0 <WS2812_Update>
 8001324:	e7e5      	b.n	80012f2 <main+0x82>
		} else {
			printf("Regular: %d\r\n", similarity);
 8001326:	793b      	ldrb	r3, [r7, #4]
 8001328:	4619      	mov	r1, r3
 800132a:	4809      	ldr	r0, [pc, #36]	@ (8001350 <main+0xe0>)
 800132c:	f006 fb86 	bl	8007a3c <iprintf>
			WS2812_Clear_LED();
 8001330:	f7ff feac 	bl	800108c <WS2812_Clear_LED>
			WS2812_Set_All_LED(0, 255, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	21ff      	movs	r1, #255	@ 0xff
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff febe 	bl	80010ba <WS2812_Set_All_LED>
			WS2812_Update();
 800133e:	f7ff fed7 	bl	80010f0 <WS2812_Update>
		fill_buffer(input_user_buffer);
 8001342:	e7d6      	b.n	80012f2 <main+0x82>
 8001344:	20001674 	.word	0x20001674
 8001348:	aaaaaaab 	.word	0xaaaaaaab
 800134c:	0800a068 	.word	0x0800a068
 8001350:	0800a080 	.word	0x0800a080

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b096      	sub	sp, #88	@ 0x58
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2244      	movs	r2, #68	@ 0x44
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f006 fbbf 	bl	8007ae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800137a:	f001 ffcd 	bl	8003318 <HAL_PWREx_ControlVoltageScaling>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001384:	f000 f974 	bl	8001670 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001388:	2310      	movs	r3, #16
 800138a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001394:	2360      	movs	r3, #96	@ 0x60
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001398:	2302      	movs	r3, #2
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800139c:	2301      	movs	r3, #1
 800139e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013a4:	2328      	movs	r3, #40	@ 0x28
 80013a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013a8:	2307      	movs	r3, #7
 80013aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f803 	bl	80033c4 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013c4:	f000 f954 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2303      	movs	r3, #3
 80013ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	2104      	movs	r1, #4
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 fbcb 	bl	8003b7c <HAL_RCC_ClockConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013ec:	f000 f940 	bl	8001670 <Error_Handler>
  }
}
 80013f0:	bf00      	nop
 80013f2:	3758      	adds	r7, #88	@ 0x58
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_I2C2_Init+0x74>)
 80013fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001470 <MX_I2C2_Init+0x78>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001402:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <MX_I2C2_Init+0x74>)
 8001404:	4a1b      	ldr	r2, [pc, #108]	@ (8001474 <MX_I2C2_Init+0x7c>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_I2C2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_I2C2_Init+0x74>)
 8001410:	2201      	movs	r2, #1
 8001412:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_I2C2_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_I2C2_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_I2C2_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_I2C2_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_I2C2_Init+0x74>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001432:	480e      	ldr	r0, [pc, #56]	@ (800146c <MX_I2C2_Init+0x74>)
 8001434:	f001 f93e 	bl	80026b4 <HAL_I2C_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800143e:	f000 f917 	bl	8001670 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <MX_I2C2_Init+0x74>)
 8001446:	f001 fec1 	bl	80031cc <HAL_I2CEx_ConfigAnalogFilter>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001450:	f000 f90e 	bl	8001670 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001454:	2100      	movs	r1, #0
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_I2C2_Init+0x74>)
 8001458:	f001 ff03 	bl	8003262 <HAL_I2CEx_ConfigDigitalFilter>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001462:	f000 f905 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20001504 	.word	0x20001504
 8001470:	40005800 	.word	0x40005800
 8001474:	10d19ce4 	.word	0x10d19ce4

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <MX_TIM2_Init+0xac>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80014b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014b2:	2264      	movs	r2, #100	@ 0x64
 80014b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c2:	4818      	ldr	r0, [pc, #96]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014c4:	f003 fa3a 	bl	800493c <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80014ce:	f000 f8cf 	bl	8001670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4810      	ldr	r0, [pc, #64]	@ (8001524 <MX_TIM2_Init+0xac>)
 80014e2:	f004 fb37 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014ec:	f000 f8c0 	bl	8001670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f0:	2360      	movs	r3, #96	@ 0x60
 80014f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001500:	463b      	mov	r3, r7
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	@ (8001524 <MX_TIM2_Init+0xac>)
 8001508:	f003 fd88 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001512:	f000 f8ad 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001516:	4803      	ldr	r0, [pc, #12]	@ (8001524 <MX_TIM2_Init+0xac>)
 8001518:	f000 f97c 	bl	8001814 <HAL_TIM_MspPostInit>

}
 800151c:	bf00      	nop
 800151e:	3728      	adds	r7, #40	@ 0x28
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20001558 	.word	0x20001558

08001528 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800152c:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 800152e:	4a15      	ldr	r2, [pc, #84]	@ (8001584 <MX_USART1_UART_Init+0x5c>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_USART1_UART_Init+0x58>)
 800156c:	f004 fb7a 	bl	8005c64 <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001576:	f000 f87b 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200015ec 	.word	0x200015ec
 8001584:	40013800 	.word	0x40013800

08001588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800158e:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_DMA_Init+0x38>)
 8001590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <MX_DMA_Init+0x38>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6493      	str	r3, [r2, #72]	@ 0x48
 800159a:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_DMA_Init+0x38>)
 800159c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 fc51 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015b0:	200f      	movs	r0, #15
 80015b2:	f000 fc6a 	bl	8001e8a <HAL_NVIC_EnableIRQ>

}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000

080015c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
 80015d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <MX_GPIO_Init+0xa4>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4a22      	ldr	r2, [pc, #136]	@ (8001668 <MX_GPIO_Init+0xa4>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <MX_GPIO_Init+0xa4>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <MX_GPIO_Init+0xa4>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <MX_GPIO_Init+0xa4>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <MX_GPIO_Init+0xa4>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2120      	movs	r1, #32
 800160e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001612:	f001 f837 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800161c:	4813      	ldr	r0, [pc, #76]	@ (800166c <MX_GPIO_Init+0xa8>)
 800161e:	f001 f831 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001622:	2320      	movs	r3, #32
 8001624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163c:	f000 fe78 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001640:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001646:	2301      	movs	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <MX_GPIO_Init+0xa8>)
 800165a:	f000 fe69 	bl	8002330 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165e:	bf00      	nop
 8001660:	3720      	adds	r7, #32
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	48000400 	.word	0x48000400

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <Error_Handler+0x8>

0800167c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_MspInit+0x44>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_MspInit+0x44>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6613      	str	r3, [r2, #96]	@ 0x60
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_MspInit+0x44>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <HAL_MspInit+0x44>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <HAL_MspInit+0x44>)
 80016a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_MspInit+0x44>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b0ac      	sub	sp, #176	@ 0xb0
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2288      	movs	r2, #136	@ 0x88
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f006 f9fe 	bl	8007ae6 <memset>
  if(hi2c->Instance==I2C2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a21      	ldr	r2, [pc, #132]	@ (8001774 <HAL_I2C_MspInit+0xb0>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d13b      	bne.n	800176c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016f4:	2380      	movs	r3, #128	@ 0x80
 80016f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fc5f 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800170c:	f7ff ffb0 	bl	8001670 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_I2C_MspInit+0xb4>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_I2C_MspInit+0xb4>)
 8001716:	f043 0302 	orr.w	r3, r3, #2
 800171a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_I2C_MspInit+0xb4>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001728:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800172c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001742:	2304      	movs	r3, #4
 8001744:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800174c:	4619      	mov	r1, r3
 800174e:	480b      	ldr	r0, [pc, #44]	@ (800177c <HAL_I2C_MspInit+0xb8>)
 8001750:	f000 fdee 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_I2C_MspInit+0xb4>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001758:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_I2C_MspInit+0xb4>)
 800175a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800175e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001760:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_I2C_MspInit+0xb4>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800176c:	bf00      	nop
 800176e:	37b0      	adds	r7, #176	@ 0xb0
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40005800 	.word	0x40005800
 8001778:	40021000 	.word	0x40021000
 800177c:	48000400 	.word	0x48000400

08001780 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001790:	d136      	bne.n	8001800 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <HAL_TIM_PWM_MspInit+0x88>)
 8001794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <HAL_TIM_PWM_MspInit+0x88>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6593      	str	r3, [r2, #88]	@ 0x58
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_TIM_PWM_MspInit+0x88>)
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017ac:	4a18      	ldr	r2, [pc, #96]	@ (8001810 <HAL_TIM_PWM_MspInit+0x90>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017b2:	2204      	movs	r2, #4
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017b8:	2210      	movs	r2, #16
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017c4:	2280      	movs	r2, #128	@ 0x80
 80017c6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017c8:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017ce:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017e6:	f000 fb6b 	bl	8001ec0 <HAL_DMA_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 80017f0:	f7ff ff3e 	bl	8001670 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80017fa:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_TIM_PWM_MspInit+0x8c>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	200015a4 	.word	0x200015a4
 8001810:	40020058 	.word	0x40020058

08001814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001834:	d11d      	bne.n	8001872 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_TIM_MspPostInit+0x68>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <HAL_TIM_MspPostInit+0x68>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_TIM_MspPostInit+0x68>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800184e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001852:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001860:	2301      	movs	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4619      	mov	r1, r3
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f000 fd5f 	bl	8002330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0ac      	sub	sp, #176	@ 0xb0
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2288      	movs	r2, #136	@ 0x88
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f006 f920 	bl	8007ae6 <memset>
  if(huart->Instance==USART1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a21      	ldr	r2, [pc, #132]	@ (8001930 <HAL_UART_MspInit+0xb0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d13a      	bne.n	8001926 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fb81 	bl	8003fc4 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018c8:	f7ff fed2 	bl	8001670 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_UART_MspInit+0xb4>)
 80018ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d0:	4a18      	ldr	r2, [pc, #96]	@ (8001934 <HAL_UART_MspInit+0xb4>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_UART_MspInit+0xb4>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <HAL_UART_MspInit+0xb4>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <HAL_UART_MspInit+0xb4>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_UART_MspInit+0xb4>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fc:	23c0      	movs	r3, #192	@ 0xc0
 80018fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001914:	2307      	movs	r3, #7
 8001916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <HAL_UART_MspInit+0xb8>)
 8001922:	f000 fd05 	bl	8002330 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001926:	bf00      	nop
 8001928:	37b0      	adds	r7, #176	@ 0xb0
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40013800 	.word	0x40013800
 8001934:	40021000 	.word	0x40021000
 8001938:	48000400 	.word	0x48000400

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <NMI_Handler+0x4>

08001944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <MemManage_Handler+0x4>

08001954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <UsageFault_Handler+0x4>

08001964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001992:	f000 f963 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <DMA1_Channel5_IRQHandler+0x10>)
 80019a2:	f000 fbe6 	bl	8002172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200015a4 	.word	0x200015a4

080019b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return 1;
 80019b4:	2301      	movs	r3, #1
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_kill>:

int _kill(int pid, int sig)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ca:	f006 f8df 	bl	8007b8c <__errno>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2216      	movs	r2, #22
 80019d2:	601a      	str	r2, [r3, #0]
  return -1;
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_exit>:

void _exit (int status)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ffe7 	bl	80019c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <_exit+0x12>

080019f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e00a      	b.n	8001a1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a08:	f3af 8000 	nop.w
 8001a0c:	4601      	mov	r1, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	b2ca      	uxtb	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbf0      	blt.n	8001a08 <_read+0x12>
  }

  return len;
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e009      	b.n	8001a56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	60ba      	str	r2, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fbfa 	bl	8001244 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbf1      	blt.n	8001a42 <_write+0x12>
  }
  return len;
 8001a5e:	687b      	ldr	r3, [r7, #4]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <_close>:

int _close(int file)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a90:	605a      	str	r2, [r3, #4]
  return 0;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_isatty>:

int _isatty(int file)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f006 f844 	bl	8007b8c <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20018000 	.word	0x20018000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20001974 	.word	0x20001974
 8001b38:	20001d00 	.word	0x20001d00

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff ffea 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <LoopForever+0xe>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	@ (8001bac <LoopForever+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f006 f803 	bl	8007b98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7ff fb6d 	bl	8001270 <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ba4:	0800a470 	.word	0x0800a470
  ldr r2, =_sbss
 8001ba8:	200011c0 	.word	0x200011c0
  ldr r4, =_ebss
 8001bac:	20001d00 	.word	0x20001d00

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>

08001bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f93d 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f80e 	bl	8001be4 <HAL_InitTick>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	71fb      	strb	r3, [r7, #7]
 8001bd2:	e001      	b.n	8001bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd4:	f7ff fd52 	bl	800167c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf0:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <HAL_InitTick+0x6c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_InitTick+0x70>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_InitTick+0x6c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f949 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d809      	bhi.n	8001c34 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 f913 	bl	8001e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_InitTick+0x74>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e007      	b.n	8001c44 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e004      	b.n	8001c44 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e001      	b.n	8001c44 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20001978 	.word	0x20001978

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20001978 	.word	0x20001978

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	@ (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff3e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff31 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e098      	b.n	8002004 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8002010 <HAL_DMA_Init+0x150>)
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d80f      	bhi.n	8001efe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8002014 <HAL_DMA_Init+0x154>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8002018 <HAL_DMA_Init+0x158>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	009a      	lsls	r2, r3, #2
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a48      	ldr	r2, [pc, #288]	@ (800201c <HAL_DMA_Init+0x15c>)
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40
 8001efc:	e00e      	b.n	8001f1c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b46      	ldr	r3, [pc, #280]	@ (8002020 <HAL_DMA_Init+0x160>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4a43      	ldr	r2, [pc, #268]	@ (8002018 <HAL_DMA_Init+0x158>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a42      	ldr	r2, [pc, #264]	@ (8002024 <HAL_DMA_Init+0x164>)
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f76:	d039      	beq.n	8001fec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4a27      	ldr	r2, [pc, #156]	@ (800201c <HAL_DMA_Init+0x15c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d11a      	bne.n	8001fb8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f82:	4b29      	ldr	r3, [pc, #164]	@ (8002028 <HAL_DMA_Init+0x168>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f003 031c 	and.w	r3, r3, #28
 8001f8e:	210f      	movs	r1, #15
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	4924      	ldr	r1, [pc, #144]	@ (8002028 <HAL_DMA_Init+0x168>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <HAL_DMA_Init+0x168>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa8:	f003 031c 	and.w	r3, r3, #28
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	491d      	ldr	r1, [pc, #116]	@ (8002028 <HAL_DMA_Init+0x168>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
 8001fb6:	e019      	b.n	8001fec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <HAL_DMA_Init+0x16c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	f003 031c 	and.w	r3, r3, #28
 8001fc4:	210f      	movs	r1, #15
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	4917      	ldr	r1, [pc, #92]	@ (800202c <HAL_DMA_Init+0x16c>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001fd2:	4b16      	ldr	r3, [pc, #88]	@ (800202c <HAL_DMA_Init+0x16c>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6859      	ldr	r1, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f003 031c 	and.w	r3, r3, #28
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	4911      	ldr	r1, [pc, #68]	@ (800202c <HAL_DMA_Init+0x16c>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	40020407 	.word	0x40020407
 8002014:	bffdfff8 	.word	0xbffdfff8
 8002018:	cccccccd 	.word	0xcccccccd
 800201c:	40020000 	.word	0x40020000
 8002020:	bffdfbf8 	.word	0xbffdfbf8
 8002024:	40020400 	.word	0x40020400
 8002028:	400200a8 	.word	0x400200a8
 800202c:	400204a8 	.word	0x400204a8

08002030 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_DMA_Start_IT+0x20>
 800204c:	2302      	movs	r3, #2
 800204e:	e04b      	b.n	80020e8 <HAL_DMA_Start_IT+0xb8>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d13a      	bne.n	80020da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f921 	bl	80022d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 020e 	orr.w	r2, r2, #14
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00f      	b.n	80020c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 020a 	orr.w	r2, r2, #10
 80020c6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e005      	b.n	80020e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
 80020e4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d005      	beq.n	8002114 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2204      	movs	r2, #4
 800210c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	e029      	b.n	8002168 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 020e 	bic.w	r2, r2, #14
 8002122:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002138:	f003 021c 	and.w	r2, r3, #28
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
    }
  }
  return status;
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218e:	f003 031c 	and.w	r3, r3, #28
 8002192:	2204      	movs	r2, #4
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d026      	beq.n	80021ec <HAL_DMA_IRQHandler+0x7a>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d021      	beq.n	80021ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0204 	bic.w	r2, r2, #4
 80021c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f003 021c 	and.w	r2, r3, #28
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	2104      	movs	r1, #4
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d071      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021ea:	e06c      	b.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f0:	f003 031c 	and.w	r3, r3, #28
 80021f4:	2202      	movs	r2, #2
 80021f6:	409a      	lsls	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d02e      	beq.n	800225e <HAL_DMA_IRQHandler+0xec>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d029      	beq.n	800225e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 020a 	bic.w	r2, r2, #10
 8002226:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	f003 021c 	and.w	r2, r3, #28
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	2102      	movs	r1, #2
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d038      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800225c:	e033      	b.n	80022c6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002262:	f003 031c 	and.w	r3, r3, #28
 8002266:	2208      	movs	r2, #8
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d02a      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x156>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d025      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 020e 	bic.w	r2, r2, #14
 800228a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	f003 021c 	and.w	r2, r3, #28
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d004      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
}
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f003 021c 	and.w	r2, r3, #28
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2101      	movs	r1, #1
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d108      	bne.n	8002314 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002312:	e007      	b.n	8002324 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e17f      	b.n	8002640 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8171 	beq.w	800263a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d005      	beq.n	8002370 <HAL_GPIO_Init+0x40>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d130      	bne.n	80023d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a6:	2201      	movs	r2, #1
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0201 	and.w	r2, r3, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d118      	bne.n	8002410 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023e4:	2201      	movs	r2, #1
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f003 0201 	and.w	r2, r3, #1
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b03      	cmp	r3, #3
 800241a:	d017      	beq.n	800244c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d123      	bne.n	80024a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	6939      	ldr	r1, [r7, #16]
 800249c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80ac 	beq.w	800263a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002660 <HAL_GPIO_Init+0x330>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002660 <HAL_GPIO_Init+0x330>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80024ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <HAL_GPIO_Init+0x330>)
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002664 <HAL_GPIO_Init+0x334>)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002524:	d025      	beq.n	8002572 <HAL_GPIO_Init+0x242>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4f      	ldr	r2, [pc, #316]	@ (8002668 <HAL_GPIO_Init+0x338>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01f      	beq.n	800256e <HAL_GPIO_Init+0x23e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4e      	ldr	r2, [pc, #312]	@ (800266c <HAL_GPIO_Init+0x33c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x23a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4d      	ldr	r2, [pc, #308]	@ (8002670 <HAL_GPIO_Init+0x340>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x236>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4c      	ldr	r2, [pc, #304]	@ (8002674 <HAL_GPIO_Init+0x344>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x232>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4b      	ldr	r2, [pc, #300]	@ (8002678 <HAL_GPIO_Init+0x348>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x22e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4a      	ldr	r2, [pc, #296]	@ (800267c <HAL_GPIO_Init+0x34c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x22a>
 8002556:	2306      	movs	r3, #6
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x244>
 800255a:	2307      	movs	r3, #7
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x244>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x244>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x244>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x244>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x244>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x244>
 8002572:	2300      	movs	r3, #0
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002584:	4937      	ldr	r1, [pc, #220]	@ (8002664 <HAL_GPIO_Init+0x334>)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002592:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_GPIO_Init+0x350>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025b6:	4a32      	ldr	r2, [pc, #200]	@ (8002680 <HAL_GPIO_Init+0x350>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025bc:	4b30      	ldr	r3, [pc, #192]	@ (8002680 <HAL_GPIO_Init+0x350>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025e0:	4a27      	ldr	r2, [pc, #156]	@ (8002680 <HAL_GPIO_Init+0x350>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025e6:	4b26      	ldr	r3, [pc, #152]	@ (8002680 <HAL_GPIO_Init+0x350>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <HAL_GPIO_Init+0x350>)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_GPIO_Init+0x350>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002634:	4a12      	ldr	r2, [pc, #72]	@ (8002680 <HAL_GPIO_Init+0x350>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	f47f ae78 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	48000c00 	.word	0x48000c00
 8002674:	48001000 	.word	0x48001000
 8002678:	48001400 	.word	0x48001400
 800267c:	48001800 	.word	0x48001800
 8002680:	40010400 	.word	0x40010400

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08d      	b.n	80027e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fff2 	bl	80016c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	@ 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e006      	b.n	800273c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800273a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d108      	bne.n	8002756 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	e007      	b.n	8002766 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	817b      	strh	r3, [r7, #10]
 80027fe:	460b      	mov	r3, r1
 8002800:	813b      	strh	r3, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 80f9 	bne.w	8002a06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_I2C_Mem_Write+0x34>
 800281a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0ed      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_I2C_Mem_Write+0x4e>
 8002836:	2302      	movs	r3, #2
 8002838:	e0e6      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002842:	f7ff fa1f 	bl	8001c84 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2319      	movs	r3, #25
 800284e:	2201      	movs	r2, #1
 8002850:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fac3 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0d1      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2221      	movs	r2, #33	@ 0x21
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288c:	88f8      	ldrh	r0, [r7, #6]
 800288e:	893a      	ldrh	r2, [r7, #8]
 8002890:	8979      	ldrh	r1, [r7, #10]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4603      	mov	r3, r0
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f9d3 	bl	8002c48 <I2C_RequestMemoryWrite>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0a9      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2bff      	cmp	r3, #255	@ 0xff
 80028bc:	d90e      	bls.n	80028dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22ff      	movs	r2, #255	@ 0xff
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8979      	ldrh	r1, [r7, #10]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fc47 	bl	8003168 <I2C_TransferConfig>
 80028da:	e00f      	b.n	80028fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fc36 	bl	8003168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fac6 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e07b      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d034      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x1c8>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d130      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	2200      	movs	r2, #0
 800295a:	2180      	movs	r1, #128	@ 0x80
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fa3f 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04d      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2bff      	cmp	r3, #255	@ 0xff
 8002974:	d90e      	bls.n	8002994 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	22ff      	movs	r2, #255	@ 0xff
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	b2da      	uxtb	r2, r3
 8002982:	8979      	ldrh	r1, [r7, #10]
 8002984:	2300      	movs	r3, #0
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fbeb 	bl	8003168 <I2C_TransferConfig>
 8002992:	e00f      	b.n	80029b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	8979      	ldrh	r1, [r7, #10]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fbda 	bl	8003168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d19e      	bne.n	80028fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 faac 	bl	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01a      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_I2C_Mem_Write+0x224>)
 80029e6:	400b      	ands	r3, r1
 80029e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	fe00e800 	.word	0xfe00e800

08002a14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	460b      	mov	r3, r1
 8002a28:	813b      	strh	r3, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f040 80fd 	bne.w	8002c36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x34>
 8002a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0f1      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Mem_Read+0x4e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e0ea      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a6a:	f7ff f90b 	bl	8001c84 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2319      	movs	r3, #25
 8002a76:	2201      	movs	r2, #1
 8002a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f9af 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0d5      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2222      	movs	r2, #34	@ 0x22
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab4:	88f8      	ldrh	r0, [r7, #6]
 8002ab6:	893a      	ldrh	r2, [r7, #8]
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f913 	bl	8002cf0 <I2C_RequestMemoryRead>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0ad      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2bff      	cmp	r3, #255	@ 0xff
 8002ae4:	d90e      	bls.n	8002b04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <HAL_I2C_Mem_Read+0x22c>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fb33 	bl	8003168 <I2C_TransferConfig>
 8002b02:	e00f      	b.n	8002b24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	8979      	ldrh	r1, [r7, #10]
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_I2C_Mem_Read+0x22c>)
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fb22 	bl	8003168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f956 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07c      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d034      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x1d0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d130      	bne.n	8002be4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	@ 0x80
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f927 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04d      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2bff      	cmp	r3, #255	@ 0xff
 8002ba4:	d90e      	bls.n	8002bc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fad3 	bl	8003168 <I2C_TransferConfig>
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fac2 	bl	8003168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d19a      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f994 	bl	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e01a      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_I2C_Mem_Read+0x230>)
 8002c16:	400b      	ands	r3, r1
 8002c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	80002400 	.word	0x80002400
 8002c44:	fe00e800 	.word	0xfe00e800

08002c48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	8979      	ldrh	r1, [r7, #10]
 8002c68:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <I2C_RequestMemoryWrite+0xa4>)
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fa79 	bl	8003168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	69b9      	ldr	r1, [r7, #24]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f909 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02c      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c9a:	e015      	b.n	8002cc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8ef 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e012      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbe:	893b      	ldrh	r3, [r7, #8]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	@ 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f884 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	80002000 	.word	0x80002000

08002cf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	817b      	strh	r3, [r7, #10]
 8002d02:	460b      	mov	r3, r1
 8002d04:	813b      	strh	r3, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	4b20      	ldr	r3, [pc, #128]	@ (8002d94 <I2C_RequestMemoryRead+0xa4>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa26 	bl	8003168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8b6 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e02c      	b.n	8002d8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d40:	e015      	b.n	8002d6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f89c 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e012      	b.n	8002d8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d64:	893b      	ldrh	r3, [r7, #8]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2140      	movs	r1, #64	@ 0x40
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f831 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	80002000 	.word	0x80002000

08002d98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d103      	bne.n	8002db6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d007      	beq.n	8002dd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	619a      	str	r2, [r3, #24]
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df0:	e03b      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8d6 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d02d      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fe ff39 	bl	8001c84 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d122      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d113      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d0b4      	beq.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e9e:	e033      	b.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f87f 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e031      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d025      	beq.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fe fee2 	bl	8001c84 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11a      	bne.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d013      	beq.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e007      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d1c4      	bne.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2c:	e02f      	b.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f838 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02d      	b.n	8002f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fe fe9f 	bl	8001c84 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11a      	bne.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d013      	beq.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d1c8      	bne.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d068      	beq.n	80030a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fdc:	e049      	b.n	8003072 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d045      	beq.n	8003072 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fe4d 	bl	8001c84 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_IsErrorOccurred+0x54>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d13a      	bne.n	8003072 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003006:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800300e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301e:	d121      	bne.n	8003064 <I2C_IsErrorOccurred+0xbc>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003026:	d01d      	beq.n	8003064 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d01a      	beq.n	8003064 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800303c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800303e:	f7fe fe21 	bl	8001c84 <HAL_GetTick>
 8003042:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003044:	e00e      	b.n	8003064 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003046:	f7fe fe1d 	bl	8001c84 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b19      	cmp	r3, #25
 8003052:	d907      	bls.n	8003064 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003062:	e006      	b.n	8003072 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	d1e9      	bne.n	8003046 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d003      	beq.n	8003088 <I2C_IsErrorOccurred+0xe0>
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0aa      	beq.n	8002fde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01c      	beq.n	8003156 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fe3b 	bl	8002d98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <I2C_IsErrorOccurred+0x1bc>)
 800312e:	400b      	ands	r3, r1
 8003130:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800315a:	4618      	mov	r0, r3
 800315c:	3728      	adds	r7, #40	@ 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	fe00e800 	.word	0xfe00e800

08003168 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	4613      	mov	r3, r2
 8003178:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003188:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	4313      	orrs	r3, r2
 8003192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003196:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	0d5b      	lsrs	r3, r3, #21
 80031a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <I2C_TransferConfig+0x60>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	43db      	mvns	r3, r3
 80031ac:	ea02 0103 	and.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	03ff63ff 	.word	0x03ff63ff

080031cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d138      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e032      	b.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	@ 0x24
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800321e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d139      	bne.n	80032ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003282:	2302      	movs	r3, #2
 8003284:	e033      	b.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2224      	movs	r2, #36	@ 0x24
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <HAL_PWREx_GetVoltageRange+0x18>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40007000 	.word	0x40007000

08003318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003326:	d130      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003328:	4b23      	ldr	r3, [pc, #140]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003334:	d038      	beq.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003336:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800333e:	4a1e      	ldr	r2, [pc, #120]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003340:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003346:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2232      	movs	r2, #50	@ 0x32
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	4a1b      	ldr	r2, [pc, #108]	@ (80033c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0c9b      	lsrs	r3, r3, #18
 8003358:	3301      	adds	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800335c:	e002      	b.n	8003364 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b01      	subs	r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003364:	4b14      	ldr	r3, [pc, #80]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003370:	d102      	bne.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f2      	bne.n	800335e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003378:	4b0f      	ldr	r3, [pc, #60]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003384:	d110      	bne.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e00f      	b.n	80033aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800338a:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003396:	d007      	beq.n	80033a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003398:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033a0:	4a05      	ldr	r2, [pc, #20]	@ (80033b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40007000 	.word	0x40007000
 80033bc:	20000000 	.word	0x20000000
 80033c0:	431bde83 	.word	0x431bde83

080033c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e3ca      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d6:	4b97      	ldr	r3, [pc, #604]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e0:	4b94      	ldr	r3, [pc, #592]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 80e4 	beq.w	80035c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d007      	beq.n	800340e <HAL_RCC_OscConfig+0x4a>
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	f040 808b 	bne.w	800351c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b01      	cmp	r3, #1
 800340a:	f040 8087 	bne.w	800351c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800340e:	4b89      	ldr	r3, [pc, #548]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e3a2      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <HAL_RCC_OscConfig+0x7c>
 8003436:	4b7f      	ldr	r3, [pc, #508]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800343e:	e005      	b.n	800344c <HAL_RCC_OscConfig+0x88>
 8003440:	4b7c      	ldr	r3, [pc, #496]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800344c:	4293      	cmp	r3, r2
 800344e:	d223      	bcs.n	8003498 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fd55 	bl	8003f04 <RCC_SetFlashLatencyFromMSIRange>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e383      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003464:	4b73      	ldr	r3, [pc, #460]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a72      	ldr	r2, [pc, #456]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	496d      	ldr	r1, [pc, #436]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003482:	4b6c      	ldr	r3, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	4968      	ldr	r1, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
 8003496:	e025      	b.n	80034e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003498:	4b66      	ldr	r3, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800349e:	f043 0308 	orr.w	r3, r3, #8
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b63      	ldr	r3, [pc, #396]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	4960      	ldr	r1, [pc, #384]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	495b      	ldr	r1, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fd15 	bl	8003f04 <RCC_SetFlashLatencyFromMSIRange>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e343      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034e4:	f000 fc4a 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b52      	ldr	r3, [pc, #328]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4950      	ldr	r1, [pc, #320]	@ (8003638 <HAL_RCC_OscConfig+0x274>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003500:	4a4e      	ldr	r2, [pc, #312]	@ (800363c <HAL_RCC_OscConfig+0x278>)
 8003502:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003504:	4b4e      	ldr	r3, [pc, #312]	@ (8003640 <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fb6b 	bl	8001be4 <HAL_InitTick>
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d052      	beq.n	80035be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	e327      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d032      	beq.n	800358a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003524:	4b43      	ldr	r3, [pc, #268]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a42      	ldr	r2, [pc, #264]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003530:	f7fe fba8 	bl	8001c84 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003538:	f7fe fba4 	bl	8001c84 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e310      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800354a:	4b3a      	ldr	r3, [pc, #232]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003556:	4b37      	ldr	r3, [pc, #220]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a36      	ldr	r2, [pc, #216]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b34      	ldr	r3, [pc, #208]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4931      	ldr	r1, [pc, #196]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003574:	4b2f      	ldr	r3, [pc, #188]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	492c      	ldr	r1, [pc, #176]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	e01a      	b.n	80035c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800358a:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a29      	ldr	r2, [pc, #164]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003596:	f7fe fb75 	bl	8001c84 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800359e:	f7fe fb71 	bl	8001c84 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e2dd      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b0:	4b20      	ldr	r3, [pc, #128]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x1da>
 80035bc:	e000      	b.n	80035c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d074      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x21a>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b0c      	cmp	r3, #12
 80035d6:	d10e      	bne.n	80035f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d10b      	bne.n	80035f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d064      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2f0>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d160      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e2ba      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x24a>
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a0b      	ldr	r2, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	e026      	b.n	800365c <HAL_RCC_OscConfig+0x298>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003616:	d115      	bne.n	8003644 <HAL_RCC_OscConfig+0x280>
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a05      	ldr	r2, [pc, #20]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800361e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a02      	ldr	r2, [pc, #8]	@ (8003634 <HAL_RCC_OscConfig+0x270>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	e014      	b.n	800365c <HAL_RCC_OscConfig+0x298>
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	0800a090 	.word	0x0800a090
 800363c:	20000000 	.word	0x20000000
 8003640:	20000004 	.word	0x20000004
 8003644:	4ba0      	ldr	r3, [pc, #640]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a9f      	ldr	r2, [pc, #636]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800364a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b9d      	ldr	r3, [pc, #628]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a9c      	ldr	r2, [pc, #624]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800365a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d013      	beq.n	800368c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fb0e 	bl	8001c84 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800366c:	f7fe fb0a 	bl	8001c84 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b64      	cmp	r3, #100	@ 0x64
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e276      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	4b92      	ldr	r3, [pc, #584]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0f0      	beq.n	800366c <HAL_RCC_OscConfig+0x2a8>
 800368a:	e014      	b.n	80036b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe fafa 	bl	8001c84 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe faf6 	bl	8001c84 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	@ 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e262      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a6:	4b88      	ldr	r3, [pc, #544]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x2d0>
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d060      	beq.n	8003784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d005      	beq.n	80036d4 <HAL_RCC_OscConfig+0x310>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b0c      	cmp	r3, #12
 80036cc:	d119      	bne.n	8003702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d116      	bne.n	8003702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036d4:	4b7c      	ldr	r3, [pc, #496]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_OscConfig+0x328>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e23f      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b76      	ldr	r3, [pc, #472]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	4973      	ldr	r1, [pc, #460]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003700:	e040      	b.n	8003784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d023      	beq.n	8003752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370a:	4b6f      	ldr	r3, [pc, #444]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a6e      	ldr	r2, [pc, #440]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fe fab5 	bl	8001c84 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7fe fab1 	bl	8001c84 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e21d      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003730:	4b65      	ldr	r3, [pc, #404]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b62      	ldr	r3, [pc, #392]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	495f      	ldr	r1, [pc, #380]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
 8003750:	e018      	b.n	8003784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b5d      	ldr	r3, [pc, #372]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a5c      	ldr	r2, [pc, #368]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800375c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fe fa91 	bl	8001c84 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003766:	f7fe fa8d 	bl	8001c84 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1f9      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003778:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d03c      	beq.n	800380a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01c      	beq.n	80037d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003798:	4b4b      	ldr	r3, [pc, #300]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800379e:	4a4a      	ldr	r2, [pc, #296]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fe fa6c 	bl	8001c84 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b0:	f7fe fa68 	bl	8001c84 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1d4      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c2:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ef      	beq.n	80037b0 <HAL_RCC_OscConfig+0x3ec>
 80037d0:	e01b      	b.n	800380a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d2:	4b3d      	ldr	r3, [pc, #244]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80037d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037d8:	4a3b      	ldr	r2, [pc, #236]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fe fa4f 	bl	8001c84 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ea:	f7fe fa4b 	bl	8001c84 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1b7      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fc:	4b32      	ldr	r3, [pc, #200]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80037fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ef      	bne.n	80037ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80a6 	beq.w	8003964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003818:	2300      	movs	r3, #0
 800381a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800381c:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003828:	4b27      	ldr	r3, [pc, #156]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382c:	4a26      	ldr	r2, [pc, #152]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800382e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003832:	6593      	str	r3, [r2, #88]	@ 0x58
 8003834:	4b24      	ldr	r3, [pc, #144]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003840:	2301      	movs	r3, #1
 8003842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003844:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <HAL_RCC_OscConfig+0x508>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d118      	bne.n	8003882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003850:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <HAL_RCC_OscConfig+0x508>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1d      	ldr	r2, [pc, #116]	@ (80038cc <HAL_RCC_OscConfig+0x508>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800385c:	f7fe fa12 	bl	8001c84 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003864:	f7fe fa0e 	bl	8001c84 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e17a      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_RCC_OscConfig+0x508>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d108      	bne.n	800389c <HAL_RCC_OscConfig+0x4d8>
 800388a:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003890:	4a0d      	ldr	r2, [pc, #52]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800389a:	e029      	b.n	80038f0 <HAL_RCC_OscConfig+0x52c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b05      	cmp	r3, #5
 80038a2:	d115      	bne.n	80038d0 <HAL_RCC_OscConfig+0x50c>
 80038a4:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038aa:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ba:	4a03      	ldr	r2, [pc, #12]	@ (80038c8 <HAL_RCC_OscConfig+0x504>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c4:	e014      	b.n	80038f0 <HAL_RCC_OscConfig+0x52c>
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40007000 	.word	0x40007000
 80038d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d6:	4a9b      	ldr	r2, [pc, #620]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038e0:	4b98      	ldr	r3, [pc, #608]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	4a97      	ldr	r2, [pc, #604]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 80038e8:	f023 0304 	bic.w	r3, r3, #4
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d016      	beq.n	8003926 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe f9c4 	bl	8001c84 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fe f9c0 	bl	8001c84 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e12a      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	4b8b      	ldr	r3, [pc, #556]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ed      	beq.n	8003900 <HAL_RCC_OscConfig+0x53c>
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003926:	f7fe f9ad 	bl	8001c84 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800392c:	e00a      	b.n	8003944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392e:	f7fe f9a9 	bl	8001c84 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393c:	4293      	cmp	r3, r2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e113      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003944:	4b7f      	ldr	r3, [pc, #508]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ed      	bne.n	800392e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b7a      	ldr	r3, [pc, #488]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	4a79      	ldr	r2, [pc, #484]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003962:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80fe 	beq.w	8003b6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	2b02      	cmp	r3, #2
 8003974:	f040 80d0 	bne.w	8003b18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003978:	4b72      	ldr	r3, [pc, #456]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0203 	and.w	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	429a      	cmp	r2, r3
 800398a:	d130      	bne.n	80039ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	3b01      	subs	r3, #1
 8003998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d127      	bne.n	80039ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d11f      	bne.n	80039ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039b8:	2a07      	cmp	r2, #7
 80039ba:	bf14      	ite	ne
 80039bc:	2201      	movne	r2, #1
 80039be:	2200      	moveq	r2, #0
 80039c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d113      	bne.n	80039ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	3b01      	subs	r3, #1
 80039d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d06e      	beq.n	8003acc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	d069      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039f4:	4b53      	ldr	r3, [pc, #332]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d105      	bne.n	8003a0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a00:	4b50      	ldr	r3, [pc, #320]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0ad      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a10:	4b4c      	ldr	r3, [pc, #304]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a4b      	ldr	r2, [pc, #300]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a1c:	f7fe f932 	bl	8001c84 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe f92e 	bl	8001c84 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e09a      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	4b43      	ldr	r3, [pc, #268]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a42:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	4b40      	ldr	r3, [pc, #256]	@ (8003b48 <HAL_RCC_OscConfig+0x784>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a52:	3a01      	subs	r2, #1
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	4311      	orrs	r1, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a5c:	0212      	lsls	r2, r2, #8
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a64:	0852      	lsrs	r2, r2, #1
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0552      	lsls	r2, r2, #21
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a70:	0852      	lsrs	r2, r2, #1
 8003a72:	3a01      	subs	r2, #1
 8003a74:	0652      	lsls	r2, r2, #25
 8003a76:	4311      	orrs	r1, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a7c:	0912      	lsrs	r2, r2, #4
 8003a7e:	0452      	lsls	r2, r2, #17
 8003a80:	430a      	orrs	r2, r1
 8003a82:	4930      	ldr	r1, [pc, #192]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a88:	4b2e      	ldr	r3, [pc, #184]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a94:	4b2b      	ldr	r3, [pc, #172]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a2a      	ldr	r2, [pc, #168]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003aa0:	f7fe f8f0 	bl	8001c84 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe f8ec 	bl	8001c84 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e058      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f0      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ac6:	e050      	b.n	8003b6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e04f      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003acc:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d148      	bne.n	8003b6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ae2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae4:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a16      	ldr	r2, [pc, #88]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003af0:	f7fe f8c8 	bl	8001c84 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe f8c4 	bl	8001c84 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e030      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x734>
 8003b16:	e028      	b.n	8003b6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b0c      	cmp	r3, #12
 8003b1c:	d023      	beq.n	8003b66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a08      	ldr	r2, [pc, #32]	@ (8003b44 <HAL_RCC_OscConfig+0x780>)
 8003b24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe f8ab 	bl	8001c84 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	e00c      	b.n	8003b4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b32:	f7fe f8a7 	bl	8001c84 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d905      	bls.n	8003b4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e013      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
 8003b44:	40021000 	.word	0x40021000
 8003b48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4c:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCC_OscConfig+0x7b0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1ec      	bne.n	8003b32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_RCC_OscConfig+0x7b0>)
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	4905      	ldr	r1, [pc, #20]	@ (8003b74 <HAL_RCC_OscConfig+0x7b0>)
 8003b5e:	4b06      	ldr	r3, [pc, #24]	@ (8003b78 <HAL_RCC_OscConfig+0x7b4>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
 8003b64:	e001      	b.n	8003b6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40021000 	.word	0x40021000
 8003b78:	feeefffc 	.word	0xfeeefffc

08003b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0e7      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b75      	ldr	r3, [pc, #468]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b72      	ldr	r3, [pc, #456]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4970      	ldr	r1, [pc, #448]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b6e      	ldr	r3, [pc, #440]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0cf      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b66      	ldr	r3, [pc, #408]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d908      	bls.n	8003bee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b63      	ldr	r3, [pc, #396]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4960      	ldr	r1, [pc, #384]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04c      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	4b5a      	ldr	r3, [pc, #360]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d121      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0a6      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d107      	bne.n	8003c2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1a:	4b54      	ldr	r3, [pc, #336]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d115      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e09a      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c32:	4b4e      	ldr	r3, [pc, #312]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e08e      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c42:	4b4a      	ldr	r3, [pc, #296]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e086      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b46      	ldr	r3, [pc, #280]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4943      	ldr	r1, [pc, #268]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c64:	f7fe f80e 	bl	8001c84 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe f80a 	bl	8001c84 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e06e      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b3a      	ldr	r3, [pc, #232]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d010      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	4b31      	ldr	r3, [pc, #196]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d208      	bcs.n	8003cc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	492b      	ldr	r1, [pc, #172]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc2:	4b29      	ldr	r3, [pc, #164]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d210      	bcs.n	8003cf2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd0:	4b25      	ldr	r3, [pc, #148]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f023 0207 	bic.w	r2, r3, #7
 8003cd8:	4923      	ldr	r1, [pc, #140]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce0:	4b21      	ldr	r3, [pc, #132]	@ (8003d68 <HAL_RCC_ClockConfig+0x1ec>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d001      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e036      	b.n	8003d60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0304 	and.w	r3, r3, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4918      	ldr	r1, [pc, #96]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d009      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1c:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4910      	ldr	r1, [pc, #64]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d30:	f000 f824 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	490b      	ldr	r1, [pc, #44]	@ (8003d70 <HAL_RCC_ClockConfig+0x1f4>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4c:	4a09      	ldr	r2, [pc, #36]	@ (8003d74 <HAL_RCC_ClockConfig+0x1f8>)
 8003d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <HAL_RCC_ClockConfig+0x1fc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd ff45 	bl	8001be4 <HAL_InitTick>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	0800a090 	.word	0x0800a090
 8003d74:	20000000 	.word	0x20000000
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	@ 0x24
 8003d80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d94:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_GetSysClockFreq+0x34>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d121      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d11e      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003db0:	4b34      	ldr	r3, [pc, #208]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dbc:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e005      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10d      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d102      	bne.n	8003dfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003df4:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e004      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d101      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e00:	4b23      	ldr	r3, [pc, #140]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d134      	bne.n	8003e74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d003      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0xac>
 8003e20:	e005      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e22:	4b1a      	ldr	r3, [pc, #104]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x110>)
 8003e24:	617b      	str	r3, [r7, #20]
      break;
 8003e26:	e005      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e2a:	617b      	str	r3, [r7, #20]
      break;
 8003e2c:	e002      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	617b      	str	r3, [r7, #20]
      break;
 8003e32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e34:	4b13      	ldr	r3, [pc, #76]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	3301      	adds	r3, #1
 8003e40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	fb03 f202 	mul.w	r2, r3, r2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	0e5b      	lsrs	r3, r3, #25
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	3301      	adds	r3, #1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e74:	69bb      	ldr	r3, [r7, #24]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3724      	adds	r7, #36	@ 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	0800a0a8 	.word	0x0800a0a8
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200

08003e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4904      	ldr	r1, [pc, #16]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800a0a0 	.word	0x0800a0a0

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003edc:	f7ff ffda 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	@ (8003f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	0800a0a0 	.word	0x0800a0a0

08003f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f10:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f1c:	f7ff f9ee 	bl	80032fc <HAL_PWREx_GetVoltageRange>
 8003f20:	6178      	str	r0, [r7, #20]
 8003f22:	e014      	b.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	4b25      	ldr	r3, [pc, #148]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f30:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f3c:	f7ff f9de 	bl	80032fc <HAL_PWREx_GetVoltageRange>
 8003f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	4b1e      	ldr	r3, [pc, #120]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f46:	4a1d      	ldr	r2, [pc, #116]	@ (8003fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f54:	d10b      	bne.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b80      	cmp	r3, #128	@ 0x80
 8003f5a:	d919      	bls.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f60:	d902      	bls.n	8003f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f62:	2302      	movs	r3, #2
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e013      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e010      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b80      	cmp	r3, #128	@ 0x80
 8003f72:	d902      	bls.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f74:	2303      	movs	r3, #3
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	e00a      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d102      	bne.n	8003f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f80:	2302      	movs	r3, #2
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	e004      	b.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b70      	cmp	r3, #112	@ 0x70
 8003f8a:	d101      	bne.n	8003f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 0207 	bic.w	r2, r3, #7
 8003f98:	4909      	ldr	r1, [pc, #36]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d001      	beq.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40022000 	.word	0x40022000

08003fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fcc:	2300      	movs	r3, #0
 8003fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d041      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fe8:	d02a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003fea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003fee:	d824      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ff0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ff4:	d008      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ffa:	d81e      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004004:	d010      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004006:	e018      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004008:	4b86      	ldr	r3, [pc, #536]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4a85      	ldr	r2, [pc, #532]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004012:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004014:	e015      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fabb 	bl	8004598 <RCCEx_PLLSAI1_Config>
 8004022:	4603      	mov	r3, r0
 8004024:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004026:	e00c      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3320      	adds	r3, #32
 800402c:	2100      	movs	r1, #0
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fba6 	bl	8004780 <RCCEx_PLLSAI2_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004038:	e003      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	74fb      	strb	r3, [r7, #19]
      break;
 800403e:	e000      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10b      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004048:	4b76      	ldr	r3, [pc, #472]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004056:	4973      	ldr	r1, [pc, #460]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800405e:	e001      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d041      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004078:	d02a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800407a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800407e:	d824      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004080:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004084:	d008      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004086:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800408a:	d81e      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004094:	d010      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004096:	e018      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004098:	4b62      	ldr	r3, [pc, #392]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a61      	ldr	r2, [pc, #388]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040a4:	e015      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fa73 	bl	8004598 <RCCEx_PLLSAI1_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b6:	e00c      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3320      	adds	r3, #32
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fb5e 	bl	8004780 <RCCEx_PLLSAI2_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040c8:	e003      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	74fb      	strb	r3, [r7, #19]
      break;
 80040ce:	e000      	b.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10b      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040d8:	4b52      	ldr	r3, [pc, #328]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040e6:	494f      	ldr	r1, [pc, #316]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040ee:	e001      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80a0 	beq.w	8004242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004106:	4b47      	ldr	r3, [pc, #284]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004116:	2300      	movs	r3, #0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411c:	4b41      	ldr	r3, [pc, #260]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004120:	4a40      	ldr	r2, [pc, #256]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004126:	6593      	str	r3, [r2, #88]	@ 0x58
 8004128:	4b3e      	ldr	r3, [pc, #248]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004134:	2301      	movs	r3, #1
 8004136:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004138:	4b3b      	ldr	r3, [pc, #236]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3a      	ldr	r2, [pc, #232]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004144:	f7fd fd9e 	bl	8001c84 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800414a:	e009      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414c:	f7fd fd9a 	bl	8001c84 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	74fb      	strb	r3, [r7, #19]
        break;
 800415e:	e005      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004160:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d15c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004172:	4b2c      	ldr	r3, [pc, #176]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800417c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01f      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	429a      	cmp	r2, r3
 800418e:	d019      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004190:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800419c:	4b21      	ldr	r3, [pc, #132]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	4a20      	ldr	r2, [pc, #128]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041bc:	4a19      	ldr	r2, [pc, #100]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fd fd59 	bl	8001c84 <HAL_GetTick>
 80041d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d4:	e00b      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fd fd55 	bl	8001c84 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d902      	bls.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	74fb      	strb	r3, [r7, #19]
            break;
 80041ec:	e006      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ec      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004202:	4b08      	ldr	r3, [pc, #32]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004208:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004212:	4904      	ldr	r1, [pc, #16]	@ (8004224 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800421a:	e009      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800422c:	7cfb      	ldrb	r3, [r7, #19]
 800422e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004230:	7c7b      	ldrb	r3, [r7, #17]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004236:	4b9e      	ldr	r3, [pc, #632]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423a:	4a9d      	ldr	r2, [pc, #628]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800424e:	4b98      	ldr	r3, [pc, #608]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	f023 0203 	bic.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	4994      	ldr	r1, [pc, #592]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	4313      	orrs	r3, r2
 8004260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004270:	4b8f      	ldr	r3, [pc, #572]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004276:	f023 020c 	bic.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427e:	498c      	ldr	r1, [pc, #560]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004292:	4b87      	ldr	r3, [pc, #540]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	4983      	ldr	r1, [pc, #524]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042b4:	4b7e      	ldr	r3, [pc, #504]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	497b      	ldr	r1, [pc, #492]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042d6:	4b76      	ldr	r3, [pc, #472]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042e4:	4972      	ldr	r1, [pc, #456]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042f8:	4b6d      	ldr	r3, [pc, #436]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	496a      	ldr	r1, [pc, #424]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431a:	4b65      	ldr	r3, [pc, #404]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004320:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004328:	4961      	ldr	r1, [pc, #388]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800433c:	4b5c      	ldr	r3, [pc, #368]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004342:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	4959      	ldr	r1, [pc, #356]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800435e:	4b54      	ldr	r3, [pc, #336]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004364:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	4950      	ldr	r1, [pc, #320]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004380:	4b4b      	ldr	r3, [pc, #300]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004386:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	4948      	ldr	r1, [pc, #288]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043a2:	4b43      	ldr	r3, [pc, #268]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b0:	493f      	ldr	r1, [pc, #252]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d028      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c4:	4b3a      	ldr	r3, [pc, #232]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d2:	4937      	ldr	r1, [pc, #220]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e4:	4b32      	ldr	r3, [pc, #200]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4a31      	ldr	r2, [pc, #196]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043ee:	60d3      	str	r3, [r2, #12]
 80043f0:	e011      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043fa:	d10c      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	2101      	movs	r1, #1
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f8c8 	bl	8004598 <RCCEx_PLLSAI1_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d028      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004422:	4b23      	ldr	r3, [pc, #140]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004428:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004430:	491f      	ldr	r1, [pc, #124]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004440:	d106      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004442:	4b1b      	ldr	r3, [pc, #108]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4a1a      	ldr	r2, [pc, #104]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004448:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800444c:	60d3      	str	r3, [r2, #12]
 800444e:	e011      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f899 	bl	8004598 <RCCEx_PLLSAI1_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448e:	4908      	ldr	r1, [pc, #32]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800449e:	d109      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a0:	4b03      	ldr	r3, [pc, #12]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a02      	ldr	r2, [pc, #8]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044aa:	60d3      	str	r3, [r2, #12]
 80044ac:	e014      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 f867 	bl	8004598 <RCCEx_PLLSAI1_Config>
 80044ca:	4603      	mov	r3, r0
 80044cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ce:	7cfb      	ldrb	r3, [r7, #19]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044d4:	7cfb      	ldrb	r3, [r7, #19]
 80044d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02f      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044f2:	4928      	ldr	r1, [pc, #160]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004502:	d10d      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	2102      	movs	r1, #2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f844 	bl	8004598 <RCCEx_PLLSAI1_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d014      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	74bb      	strb	r3, [r7, #18]
 800451e:	e011      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004528:	d10c      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3320      	adds	r3, #32
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f925 	bl	8004780 <RCCEx_PLLSAI2_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800453a:	7cfb      	ldrb	r3, [r7, #19]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004550:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800455e:	490d      	ldr	r1, [pc, #52]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004582:	4904      	ldr	r1, [pc, #16]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800458a:	7cbb      	ldrb	r3, [r7, #18]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000

08004598 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045a6:	4b75      	ldr	r3, [pc, #468]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045b2:	4b72      	ldr	r3, [pc, #456]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d10d      	bne.n	80045de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
       ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d009      	beq.n	80045de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045ca:	4b6c      	ldr	r3, [pc, #432]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
       ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d047      	beq.n	800466e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
 80045e2:	e044      	b.n	800466e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d018      	beq.n	800461e <RCCEx_PLLSAI1_Config+0x86>
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d825      	bhi.n	800463c <RCCEx_PLLSAI1_Config+0xa4>
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d002      	beq.n	80045fa <RCCEx_PLLSAI1_Config+0x62>
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d009      	beq.n	800460c <RCCEx_PLLSAI1_Config+0x74>
 80045f8:	e020      	b.n	800463c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045fa:	4b60      	ldr	r3, [pc, #384]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11d      	bne.n	8004642 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460a:	e01a      	b.n	8004642 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800460c:	4b5b      	ldr	r3, [pc, #364]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d116      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e013      	b.n	8004646 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800461e:	4b57      	ldr	r3, [pc, #348]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10f      	bne.n	800464a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800462a:	4b54      	ldr	r3, [pc, #336]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800463a:	e006      	b.n	800464a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e004      	b.n	800464c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004642:	bf00      	nop
 8004644:	e002      	b.n	800464c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004646:	bf00      	nop
 8004648:	e000      	b.n	800464c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800464a:	bf00      	nop
    }

    if(status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10d      	bne.n	800466e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004652:	4b4a      	ldr	r3, [pc, #296]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	3b01      	subs	r3, #1
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	430b      	orrs	r3, r1
 8004668:	4944      	ldr	r1, [pc, #272]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d17d      	bne.n	8004770 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004674:	4b41      	ldr	r3, [pc, #260]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a40      	ldr	r2, [pc, #256]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800467a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800467e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004680:	f7fd fb00 	bl	8001c84 <HAL_GetTick>
 8004684:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004686:	e009      	b.n	800469c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004688:	f7fd fafc 	bl	8001c84 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d902      	bls.n	800469c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	73fb      	strb	r3, [r7, #15]
        break;
 800469a:	e005      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800469c:	4b37      	ldr	r3, [pc, #220]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ef      	bne.n	8004688 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d160      	bne.n	8004770 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d111      	bne.n	80046d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b4:	4b31      	ldr	r3, [pc, #196]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80046bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6892      	ldr	r2, [r2, #8]
 80046c4:	0211      	lsls	r1, r2, #8
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	0912      	lsrs	r2, r2, #4
 80046cc:	0452      	lsls	r2, r2, #17
 80046ce:	430a      	orrs	r2, r1
 80046d0:	492a      	ldr	r1, [pc, #168]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	610b      	str	r3, [r1, #16]
 80046d6:	e027      	b.n	8004728 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d112      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046de:	4b27      	ldr	r3, [pc, #156]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6892      	ldr	r2, [r2, #8]
 80046ee:	0211      	lsls	r1, r2, #8
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6912      	ldr	r2, [r2, #16]
 80046f4:	0852      	lsrs	r2, r2, #1
 80046f6:	3a01      	subs	r2, #1
 80046f8:	0552      	lsls	r2, r2, #21
 80046fa:	430a      	orrs	r2, r1
 80046fc:	491f      	ldr	r1, [pc, #124]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]
 8004702:	e011      	b.n	8004728 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800470c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6892      	ldr	r2, [r2, #8]
 8004714:	0211      	lsls	r1, r2, #8
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6952      	ldr	r2, [r2, #20]
 800471a:	0852      	lsrs	r2, r2, #1
 800471c:	3a01      	subs	r2, #1
 800471e:	0652      	lsls	r2, r2, #25
 8004720:	430a      	orrs	r2, r1
 8004722:	4916      	ldr	r1, [pc, #88]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004728:	4b14      	ldr	r3, [pc, #80]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a13      	ldr	r2, [pc, #76]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800472e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fd faa6 	bl	8001c84 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800473a:	e009      	b.n	8004750 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800473c:	f7fd faa2 	bl	8001c84 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d902      	bls.n	8004750 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	73fb      	strb	r3, [r7, #15]
          break;
 800474e:	e005      	b.n	800475c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0ef      	beq.n	800473c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004762:	4b06      	ldr	r3, [pc, #24]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	4904      	ldr	r1, [pc, #16]	@ (800477c <RCCEx_PLLSAI1_Config+0x1e4>)
 800476c:	4313      	orrs	r3, r2
 800476e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000

08004780 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800478e:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d018      	beq.n	80047cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800479a:	4b67      	ldr	r3, [pc, #412]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0203 	and.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d10d      	bne.n	80047c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
       ||
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047b2:	4b61      	ldr	r3, [pc, #388]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
       ||
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d047      	beq.n	8004856 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
 80047ca:	e044      	b.n	8004856 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d018      	beq.n	8004806 <RCCEx_PLLSAI2_Config+0x86>
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d825      	bhi.n	8004824 <RCCEx_PLLSAI2_Config+0xa4>
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d002      	beq.n	80047e2 <RCCEx_PLLSAI2_Config+0x62>
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d009      	beq.n	80047f4 <RCCEx_PLLSAI2_Config+0x74>
 80047e0:	e020      	b.n	8004824 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047e2:	4b55      	ldr	r3, [pc, #340]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11d      	bne.n	800482a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f2:	e01a      	b.n	800482a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047f4:	4b50      	ldr	r3, [pc, #320]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d116      	bne.n	800482e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004804:	e013      	b.n	800482e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004806:	4b4c      	ldr	r3, [pc, #304]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004812:	4b49      	ldr	r3, [pc, #292]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004822:	e006      	b.n	8004832 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	73fb      	strb	r3, [r7, #15]
      break;
 8004828:	e004      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004832:	bf00      	nop
    }

    if(status == HAL_OK)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800483a:	4b3f      	ldr	r3, [pc, #252]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	430b      	orrs	r3, r1
 8004850:	4939      	ldr	r1, [pc, #228]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d167      	bne.n	800492c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800485c:	4b36      	ldr	r3, [pc, #216]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a35      	ldr	r2, [pc, #212]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004868:	f7fd fa0c 	bl	8001c84 <HAL_GetTick>
 800486c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800486e:	e009      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004870:	f7fd fa08 	bl	8001c84 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d902      	bls.n	8004884 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	73fb      	strb	r3, [r7, #15]
        break;
 8004882:	e005      	b.n	8004890 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004884:	4b2c      	ldr	r3, [pc, #176]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1ef      	bne.n	8004870 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d14a      	bne.n	800492c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d111      	bne.n	80048c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800489c:	4b26      	ldr	r3, [pc, #152]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
 80048ac:	0211      	lsls	r1, r2, #8
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	0912      	lsrs	r2, r2, #4
 80048b4:	0452      	lsls	r2, r2, #17
 80048b6:	430a      	orrs	r2, r1
 80048b8:	491f      	ldr	r1, [pc, #124]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	614b      	str	r3, [r1, #20]
 80048be:	e011      	b.n	80048e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6892      	ldr	r2, [r2, #8]
 80048d0:	0211      	lsls	r1, r2, #8
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6912      	ldr	r2, [r2, #16]
 80048d6:	0852      	lsrs	r2, r2, #1
 80048d8:	3a01      	subs	r2, #1
 80048da:	0652      	lsls	r2, r2, #25
 80048dc:	430a      	orrs	r2, r1
 80048de:	4916      	ldr	r1, [pc, #88]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048e4:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a13      	ldr	r2, [pc, #76]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd f9c8 	bl	8001c84 <HAL_GetTick>
 80048f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048f6:	e009      	b.n	800490c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048f8:	f7fd f9c4 	bl	8001c84 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d902      	bls.n	800490c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	73fb      	strb	r3, [r7, #15]
          break;
 800490a:	e005      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ef      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800491e:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	4904      	ldr	r1, [pc, #16]	@ (8004938 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000

0800493c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e049      	b.n	80049e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc ff0c 	bl	8001780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 fd48 	bl	8005410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e03c      	b.n	8004a92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d109      	bne.n	8004a32 <HAL_TIM_PWM_Start_DMA+0x46>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e02f      	b.n	8004a92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d109      	bne.n	8004a4c <HAL_TIM_PWM_Start_DMA+0x60>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	e022      	b.n	8004a92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b0c      	cmp	r3, #12
 8004a50:	d109      	bne.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x7a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e015      	b.n	8004a92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start_DMA+0x94>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e008      	b.n	8004a92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
 8004a98:	e1ab      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e03c      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0x142>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d109      	bne.n	8004ace <HAL_TIM_PWM_Start_DMA+0xe2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e02f      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0x142>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e022      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0x142>
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d109      	bne.n	8004b02 <HAL_TIM_PWM_Start_DMA+0x116>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	e015      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0x142>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d109      	bne.n	8004b1c <HAL_TIM_PWM_Start_DMA+0x130>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	bf0c      	ite	eq
 8004b14:	2301      	moveq	r3, #1
 8004b16:	2300      	movne	r3, #0
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	e008      	b.n	8004b2e <HAL_TIM_PWM_Start_DMA+0x142>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d034      	beq.n	8004b9c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_TIM_PWM_Start_DMA+0x152>
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e157      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start_DMA+0x166>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b50:	e026      	b.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_PWM_Start_DMA+0x176>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b60:	e01e      	b.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start_DMA+0x186>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b70:	e016      	b.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b0c      	cmp	r3, #12
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start_DMA+0x196>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b80:	e00e      	b.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b90:	e006      	b.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b9a:	e001      	b.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e128      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	f200 80ae 	bhi.w	8004d04 <HAL_TIM_PWM_Start_DMA+0x318>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004d05 	.word	0x08004d05
 8004bb8:	08004d05 	.word	0x08004d05
 8004bbc:	08004d05 	.word	0x08004d05
 8004bc0:	08004c2d 	.word	0x08004c2d
 8004bc4:	08004d05 	.word	0x08004d05
 8004bc8:	08004d05 	.word	0x08004d05
 8004bcc:	08004d05 	.word	0x08004d05
 8004bd0:	08004c75 	.word	0x08004c75
 8004bd4:	08004d05 	.word	0x08004d05
 8004bd8:	08004d05 	.word	0x08004d05
 8004bdc:	08004d05 	.word	0x08004d05
 8004be0:	08004cbd 	.word	0x08004cbd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	4a84      	ldr	r2, [pc, #528]	@ (8004dfc <HAL_TIM_PWM_Start_DMA+0x410>)
 8004bea:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	4a83      	ldr	r2, [pc, #524]	@ (8004e00 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf8:	4a82      	ldr	r2, [pc, #520]	@ (8004e04 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004bfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3334      	adds	r3, #52	@ 0x34
 8004c08:	461a      	mov	r2, r3
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	f7fd fa10 	bl	8002030 <HAL_DMA_Start_IT>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0eb      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c28:	60da      	str	r2, [r3, #12]
      break;
 8004c2a:	e06e      	b.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	4a72      	ldr	r2, [pc, #456]	@ (8004dfc <HAL_TIM_PWM_Start_DMA+0x410>)
 8004c32:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	4a71      	ldr	r2, [pc, #452]	@ (8004e00 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	4a70      	ldr	r2, [pc, #448]	@ (8004e04 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004c42:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3338      	adds	r3, #56	@ 0x38
 8004c50:	461a      	mov	r2, r3
 8004c52:	887b      	ldrh	r3, [r7, #2]
 8004c54:	f7fd f9ec 	bl	8002030 <HAL_DMA_Start_IT>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0c7      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c70:	60da      	str	r2, [r3, #12]
      break;
 8004c72:	e04a      	b.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c78:	4a60      	ldr	r2, [pc, #384]	@ (8004dfc <HAL_TIM_PWM_Start_DMA+0x410>)
 8004c7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	4a5f      	ldr	r2, [pc, #380]	@ (8004e00 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	4a5e      	ldr	r2, [pc, #376]	@ (8004e04 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004c8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	333c      	adds	r3, #60	@ 0x3c
 8004c98:	461a      	mov	r2, r3
 8004c9a:	887b      	ldrh	r3, [r7, #2]
 8004c9c:	f7fd f9c8 	bl	8002030 <HAL_DMA_Start_IT>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e0a3      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cb8:	60da      	str	r2, [r3, #12]
      break;
 8004cba:	e026      	b.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8004dfc <HAL_TIM_PWM_Start_DMA+0x410>)
 8004cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8004e00 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8004e04 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004cd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3340      	adds	r3, #64	@ 0x40
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	887b      	ldrh	r3, [r7, #2]
 8004ce4:	f7fd f9a4 	bl	8002030 <HAL_DMA_Start_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e07f      	b.n	8004df2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d00:	60da      	str	r2, [r3, #12]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	75fb      	strb	r3, [r7, #23]
      break;
 8004d08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d16f      	bne.n	8004df0 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2201      	movs	r2, #1
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fef5 	bl	8005b08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a39      	ldr	r2, [pc, #228]	@ (8004e08 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a37      	ldr	r2, [pc, #220]	@ (8004e0c <HAL_TIM_PWM_Start_DMA+0x420>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a36      	ldr	r2, [pc, #216]	@ (8004e10 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a34      	ldr	r2, [pc, #208]	@ (8004e14 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_TIM_PWM_Start_DMA+0x364>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a33      	ldr	r2, [pc, #204]	@ (8004e18 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_PWM_Start_DMA+0x368>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <HAL_TIM_PWM_Start_DMA+0x36a>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a26      	ldr	r2, [pc, #152]	@ (8004e08 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d01d      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7c:	d018      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a26      	ldr	r2, [pc, #152]	@ (8004e1c <HAL_TIM_PWM_Start_DMA+0x430>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a24      	ldr	r2, [pc, #144]	@ (8004e20 <HAL_TIM_PWM_Start_DMA+0x434>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00e      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a23      	ldr	r2, [pc, #140]	@ (8004e24 <HAL_TIM_PWM_Start_DMA+0x438>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d009      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1a      	ldr	r2, [pc, #104]	@ (8004e0c <HAL_TIM_PWM_Start_DMA+0x420>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a19      	ldr	r2, [pc, #100]	@ (8004e10 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d115      	bne.n	8004ddc <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	4b1c      	ldr	r3, [pc, #112]	@ (8004e28 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b06      	cmp	r3, #6
 8004dc0:	d015      	beq.n	8004dee <HAL_TIM_PWM_Start_DMA+0x402>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc8:	d011      	beq.n	8004dee <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0201 	orr.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dda:	e008      	b.n	8004dee <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e000      	b.n	8004df0 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	080052ff 	.word	0x080052ff
 8004e00:	080053a7 	.word	0x080053a7
 8004e04:	0800526d 	.word	0x0800526d
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40013400 	.word	0x40013400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	00010007 	.word	0x00010007

08004e2c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d855      	bhi.n	8004eec <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004e40:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e7d 	.word	0x08004e7d
 8004e4c:	08004eed 	.word	0x08004eed
 8004e50:	08004eed 	.word	0x08004eed
 8004e54:	08004eed 	.word	0x08004eed
 8004e58:	08004e99 	.word	0x08004e99
 8004e5c:	08004eed 	.word	0x08004eed
 8004e60:	08004eed 	.word	0x08004eed
 8004e64:	08004eed 	.word	0x08004eed
 8004e68:	08004eb5 	.word	0x08004eb5
 8004e6c:	08004eed 	.word	0x08004eed
 8004e70:	08004eed 	.word	0x08004eed
 8004e74:	08004eed 	.word	0x08004eed
 8004e78:	08004ed1 	.word	0x08004ed1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fd f92d 	bl	80020f0 <HAL_DMA_Abort_IT>
      break;
 8004e96:	e02c      	b.n	8004ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd f91f 	bl	80020f0 <HAL_DMA_Abort_IT>
      break;
 8004eb2:	e01e      	b.n	8004ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ec2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fd f911 	bl	80020f0 <HAL_DMA_Abort_IT>
      break;
 8004ece:	e010      	b.n	8004ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ede:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd f903 	bl	80020f0 <HAL_DMA_Abort_IT>
      break;
 8004eea:	e002      	b.n	8004ef2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 8081 	bne.w	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fe00 	bl	8005b08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a3e      	ldr	r2, [pc, #248]	@ (8005008 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a3d      	ldr	r2, [pc, #244]	@ (800500c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3b      	ldr	r2, [pc, #236]	@ (8005010 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8005014 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a38      	ldr	r2, [pc, #224]	@ (8005018 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_Stop_DMA+0x112>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <HAL_TIM_PWM_Stop_DMA+0x114>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10f      	bne.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d107      	bne.n	8004f74 <HAL_TIM_PWM_Stop_DMA+0x148>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a1a      	ldr	r2, [r3, #32]
 8004f7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10f      	bne.n	8004fa4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a1a      	ldr	r2, [r3, #32]
 8004f8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f8e:	4013      	ands	r3, r2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d107      	bne.n	8004fa4 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb2:	e023      	b.n	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d104      	bne.n	8004fc4 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc2:	e01b      	b.n	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d104      	bne.n	8004fd4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd2:	e013      	b.n	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d104      	bne.n	8004fe4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fe2:	e00b      	b.n	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d104      	bne.n	8004ff4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff2:	e003      	b.n	8004ffc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40013400 	.word	0x40013400
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800

0800501c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0ff      	b.n	800523a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b14      	cmp	r3, #20
 8005046:	f200 80f0 	bhi.w	800522a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	080050a5 	.word	0x080050a5
 8005054:	0800522b 	.word	0x0800522b
 8005058:	0800522b 	.word	0x0800522b
 800505c:	0800522b 	.word	0x0800522b
 8005060:	080050e5 	.word	0x080050e5
 8005064:	0800522b 	.word	0x0800522b
 8005068:	0800522b 	.word	0x0800522b
 800506c:	0800522b 	.word	0x0800522b
 8005070:	08005127 	.word	0x08005127
 8005074:	0800522b 	.word	0x0800522b
 8005078:	0800522b 	.word	0x0800522b
 800507c:	0800522b 	.word	0x0800522b
 8005080:	08005167 	.word	0x08005167
 8005084:	0800522b 	.word	0x0800522b
 8005088:	0800522b 	.word	0x0800522b
 800508c:	0800522b 	.word	0x0800522b
 8005090:	080051a9 	.word	0x080051a9
 8005094:	0800522b 	.word	0x0800522b
 8005098:	0800522b 	.word	0x0800522b
 800509c:	0800522b 	.word	0x0800522b
 80050a0:	080051e9 	.word	0x080051e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fa56 	bl	800555c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	619a      	str	r2, [r3, #24]
      break;
 80050e2:	e0a5      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fac6 	bl	800567c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	619a      	str	r2, [r3, #24]
      break;
 8005124:	e084      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fb2f 	bl	8005790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0204 	bic.w	r2, r2, #4
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
      break;
 8005164:	e064      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fb97 	bl	80058a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	021a      	lsls	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	61da      	str	r2, [r3, #28]
      break;
 80051a6:	e043      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fbe0 	bl	8005974 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051e6:	e023      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fc24 	bl	8005a3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005202:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005228:	e002      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d107      	bne.n	8005294 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005292:	e02a      	b.n	80052ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d107      	bne.n	80052ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2202      	movs	r2, #2
 80052a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052ac:	e01d      	b.n	80052ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d107      	bne.n	80052c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2204      	movs	r2, #4
 80052bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052c6:	e010      	b.n	80052ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d107      	bne.n	80052e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2208      	movs	r2, #8
 80052d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052e0:	e003      	b.n	80052ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ffb4 	bl	8005258 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	771a      	strb	r2, [r3, #28]
}
 80052f6:	bf00      	nop
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d10b      	bne.n	800532e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d136      	bne.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800532c:	e031      	b.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d10b      	bne.n	8005350 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2202      	movs	r2, #2
 800533c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d125      	bne.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800534e:	e020      	b.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d10b      	bne.n	8005372 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2204      	movs	r2, #4
 800535e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d114      	bne.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005370:	e00f      	b.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d10a      	bne.n	8005392 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2208      	movs	r2, #8
 8005380:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d103      	bne.n	8005392 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7fb ff1e 	bl	80011d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	771a      	strb	r2, [r3, #28]
}
 800539e:	bf00      	nop
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b084      	sub	sp, #16
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d103      	bne.n	80053c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	771a      	strb	r2, [r3, #28]
 80053c4:	e019      	b.n	80053fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d103      	bne.n	80053d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2202      	movs	r2, #2
 80053d4:	771a      	strb	r2, [r3, #28]
 80053d6:	e010      	b.n	80053fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d103      	bne.n	80053ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2204      	movs	r2, #4
 80053e6:	771a      	strb	r2, [r3, #28]
 80053e8:	e007      	b.n	80053fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d102      	bne.n	80053fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2208      	movs	r2, #8
 80053f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff ff22 	bl	8005244 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	771a      	strb	r2, [r3, #28]
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a46      	ldr	r2, [pc, #280]	@ (800553c <TIM_Base_SetConfig+0x12c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542e:	d00f      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a43      	ldr	r2, [pc, #268]	@ (8005540 <TIM_Base_SetConfig+0x130>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a42      	ldr	r2, [pc, #264]	@ (8005544 <TIM_Base_SetConfig+0x134>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a41      	ldr	r2, [pc, #260]	@ (8005548 <TIM_Base_SetConfig+0x138>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a40      	ldr	r2, [pc, #256]	@ (800554c <TIM_Base_SetConfig+0x13c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d108      	bne.n	8005462 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a35      	ldr	r2, [pc, #212]	@ (800553c <TIM_Base_SetConfig+0x12c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01f      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005470:	d01b      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a32      	ldr	r2, [pc, #200]	@ (8005540 <TIM_Base_SetConfig+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d017      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a31      	ldr	r2, [pc, #196]	@ (8005544 <TIM_Base_SetConfig+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a30      	ldr	r2, [pc, #192]	@ (8005548 <TIM_Base_SetConfig+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00f      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2f      	ldr	r2, [pc, #188]	@ (800554c <TIM_Base_SetConfig+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2e      	ldr	r2, [pc, #184]	@ (8005550 <TIM_Base_SetConfig+0x140>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2d      	ldr	r2, [pc, #180]	@ (8005554 <TIM_Base_SetConfig+0x144>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0x9a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005558 <TIM_Base_SetConfig+0x148>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d108      	bne.n	80054bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a16      	ldr	r2, [pc, #88]	@ (800553c <TIM_Base_SetConfig+0x12c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a18      	ldr	r2, [pc, #96]	@ (800554c <TIM_Base_SetConfig+0x13c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a17      	ldr	r2, [pc, #92]	@ (8005550 <TIM_Base_SetConfig+0x140>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a16      	ldr	r2, [pc, #88]	@ (8005554 <TIM_Base_SetConfig+0x144>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0xf8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <TIM_Base_SetConfig+0x148>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d103      	bne.n	8005510 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d105      	bne.n	800552e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f023 0201 	bic.w	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]
  }
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40000c00 	.word	0x40000c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f023 0201 	bic.w	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f023 0302 	bic.w	r3, r3, #2
 80055a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005668 <TIM_OC1_SetConfig+0x10c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00f      	beq.n	80055dc <TIM_OC1_SetConfig+0x80>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a2b      	ldr	r2, [pc, #172]	@ (800566c <TIM_OC1_SetConfig+0x110>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00b      	beq.n	80055dc <TIM_OC1_SetConfig+0x80>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <TIM_OC1_SetConfig+0x114>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <TIM_OC1_SetConfig+0x80>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a29      	ldr	r2, [pc, #164]	@ (8005674 <TIM_OC1_SetConfig+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_OC1_SetConfig+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <TIM_OC1_SetConfig+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10c      	bne.n	80055f6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0308 	bic.w	r3, r3, #8
 80055e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005668 <TIM_OC1_SetConfig+0x10c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <TIM_OC1_SetConfig+0xc2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1a      	ldr	r2, [pc, #104]	@ (800566c <TIM_OC1_SetConfig+0x110>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_OC1_SetConfig+0xc2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a19      	ldr	r2, [pc, #100]	@ (8005670 <TIM_OC1_SetConfig+0x114>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_OC1_SetConfig+0xc2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <TIM_OC1_SetConfig+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC1_SetConfig+0xc2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a17      	ldr	r2, [pc, #92]	@ (8005678 <TIM_OC1_SetConfig+0x11c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d111      	bne.n	8005642 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	4313      	orrs	r3, r2
 8005636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40013400 	.word	0x40013400
 8005670:	40014000 	.word	0x40014000
 8005674:	40014400 	.word	0x40014400
 8005678:	40014800 	.word	0x40014800

0800567c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f023 0210 	bic.w	r2, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0320 	bic.w	r3, r3, #32
 80056ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a28      	ldr	r2, [pc, #160]	@ (800577c <TIM_OC2_SetConfig+0x100>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_OC2_SetConfig+0x6c>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <TIM_OC2_SetConfig+0x104>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10d      	bne.n	8005704 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a1d      	ldr	r2, [pc, #116]	@ (800577c <TIM_OC2_SetConfig+0x100>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <TIM_OC2_SetConfig+0xb0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a1c      	ldr	r2, [pc, #112]	@ (8005780 <TIM_OC2_SetConfig+0x104>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00b      	beq.n	800572c <TIM_OC2_SetConfig+0xb0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1b      	ldr	r2, [pc, #108]	@ (8005784 <TIM_OC2_SetConfig+0x108>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d007      	beq.n	800572c <TIM_OC2_SetConfig+0xb0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <TIM_OC2_SetConfig+0x10c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC2_SetConfig+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a19      	ldr	r2, [pc, #100]	@ (800578c <TIM_OC2_SetConfig+0x110>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d113      	bne.n	8005754 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40013400 	.word	0x40013400
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800

08005790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a27      	ldr	r2, [pc, #156]	@ (800588c <TIM_OC3_SetConfig+0xfc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_OC3_SetConfig+0x6a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <TIM_OC3_SetConfig+0x100>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10d      	bne.n	8005816 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1c      	ldr	r2, [pc, #112]	@ (800588c <TIM_OC3_SetConfig+0xfc>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00f      	beq.n	800583e <TIM_OC3_SetConfig+0xae>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1b      	ldr	r2, [pc, #108]	@ (8005890 <TIM_OC3_SetConfig+0x100>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00b      	beq.n	800583e <TIM_OC3_SetConfig+0xae>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1a      	ldr	r2, [pc, #104]	@ (8005894 <TIM_OC3_SetConfig+0x104>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d007      	beq.n	800583e <TIM_OC3_SetConfig+0xae>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a19      	ldr	r2, [pc, #100]	@ (8005898 <TIM_OC3_SetConfig+0x108>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_OC3_SetConfig+0xae>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a18      	ldr	r2, [pc, #96]	@ (800589c <TIM_OC3_SetConfig+0x10c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d113      	bne.n	8005866 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40014000 	.word	0x40014000
 8005898:	40014400 	.word	0x40014400
 800589c:	40014800 	.word	0x40014800

080058a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	031b      	lsls	r3, r3, #12
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a18      	ldr	r2, [pc, #96]	@ (8005960 <TIM_OC4_SetConfig+0xc0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00f      	beq.n	8005924 <TIM_OC4_SetConfig+0x84>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a17      	ldr	r2, [pc, #92]	@ (8005964 <TIM_OC4_SetConfig+0xc4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00b      	beq.n	8005924 <TIM_OC4_SetConfig+0x84>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <TIM_OC4_SetConfig+0xc8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d007      	beq.n	8005924 <TIM_OC4_SetConfig+0x84>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a15      	ldr	r2, [pc, #84]	@ (800596c <TIM_OC4_SetConfig+0xcc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC4_SetConfig+0x84>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a14      	ldr	r2, [pc, #80]	@ (8005970 <TIM_OC4_SetConfig+0xd0>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d109      	bne.n	8005938 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800592a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	019b      	lsls	r3, r3, #6
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40012c00 	.word	0x40012c00
 8005964:	40013400 	.word	0x40013400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800

08005974 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	041b      	lsls	r3, r3, #16
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a17      	ldr	r2, [pc, #92]	@ (8005a28 <TIM_OC5_SetConfig+0xb4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00f      	beq.n	80059ee <TIM_OC5_SetConfig+0x7a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <TIM_OC5_SetConfig+0xb8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00b      	beq.n	80059ee <TIM_OC5_SetConfig+0x7a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <TIM_OC5_SetConfig+0xbc>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d007      	beq.n	80059ee <TIM_OC5_SetConfig+0x7a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <TIM_OC5_SetConfig+0xc0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC5_SetConfig+0x7a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a13      	ldr	r2, [pc, #76]	@ (8005a38 <TIM_OC5_SetConfig+0xc4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d109      	bne.n	8005a02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40013400 	.word	0x40013400
 8005a30:	40014000 	.word	0x40014000
 8005a34:	40014400 	.word	0x40014400
 8005a38:	40014800 	.word	0x40014800

08005a3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	051b      	lsls	r3, r3, #20
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a18      	ldr	r2, [pc, #96]	@ (8005af4 <TIM_OC6_SetConfig+0xb8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00f      	beq.n	8005ab8 <TIM_OC6_SetConfig+0x7c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a17      	ldr	r2, [pc, #92]	@ (8005af8 <TIM_OC6_SetConfig+0xbc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <TIM_OC6_SetConfig+0x7c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a16      	ldr	r2, [pc, #88]	@ (8005afc <TIM_OC6_SetConfig+0xc0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_OC6_SetConfig+0x7c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a15      	ldr	r2, [pc, #84]	@ (8005b00 <TIM_OC6_SetConfig+0xc4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_OC6_SetConfig+0x7c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a14      	ldr	r2, [pc, #80]	@ (8005b04 <TIM_OC6_SetConfig+0xc8>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d109      	bne.n	8005acc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	029b      	lsls	r3, r3, #10
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40013400 	.word	0x40013400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e068      	b.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d004      	beq.n	8005ba0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d108      	bne.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005ba6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01d      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bde:	d018      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1a      	ldr	r2, [pc, #104]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00e      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	@ (8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a13      	ldr	r2, [pc, #76]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d004      	beq.n	8005c12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a14      	ldr	r2, [pc, #80]	@ (8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10c      	bne.n	8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40013400 	.word	0x40013400
 8005c54:	40000400 	.word	0x40000400
 8005c58:	40000800 	.word	0x40000800
 8005c5c:	40000c00 	.word	0x40000c00
 8005c60:	40014000 	.word	0x40014000

08005c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e040      	b.n	8005cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fb fdfa 	bl	8001880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	@ 0x24
 8005c90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fb6a 	bl	8006384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8af 	bl	8005e14 <UART_SetConfig>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e01b      	b.n	8005cf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fbe9 	bl	80064c8 <UART_CheckIdleState>
 8005cf6:	4603      	mov	r3, r0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d177      	bne.n	8005e08 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_UART_Transmit+0x24>
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e070      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2221      	movs	r2, #33	@ 0x21
 8005d34:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d36:	f7fb ffa5 	bl	8001c84 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Transmit+0x68>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d70:	e02f      	b.n	8005dd2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	@ 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fc4b 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e03b      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	881a      	ldrh	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da4:	b292      	uxth	r2, r2
 8005da6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	3302      	adds	r3, #2
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	e007      	b.n	8005dc0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1c9      	bne.n	8005d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2140      	movs	r1, #64	@ 0x40
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fc15 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d004      	beq.n	8005dfe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e005      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	e000      	b.n	8005e0a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005e08:	2302      	movs	r3, #2
  }
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e18:	b08a      	sub	sp, #40	@ 0x28
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4ba4      	ldr	r3, [pc, #656]	@ (80060d4 <UART_SetConfig+0x2c0>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a99      	ldr	r2, [pc, #612]	@ (80060d8 <UART_SetConfig+0x2c4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d004      	beq.n	8005e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	430a      	orrs	r2, r1
 8005e92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a90      	ldr	r2, [pc, #576]	@ (80060dc <UART_SetConfig+0x2c8>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d126      	bne.n	8005eec <UART_SetConfig+0xd8>
 8005e9e:	4b90      	ldr	r3, [pc, #576]	@ (80060e0 <UART_SetConfig+0x2cc>)
 8005ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d81b      	bhi.n	8005ee4 <UART_SetConfig+0xd0>
 8005eac:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0xa0>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005edd 	.word	0x08005edd
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eca:	e116      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ed2:	e112      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eda:	e10e      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ee2:	e10a      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eea:	e106      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a7c      	ldr	r2, [pc, #496]	@ (80060e4 <UART_SetConfig+0x2d0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d138      	bne.n	8005f68 <UART_SetConfig+0x154>
 8005ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80060e0 <UART_SetConfig+0x2cc>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	f003 030c 	and.w	r3, r3, #12
 8005f00:	2b0c      	cmp	r3, #12
 8005f02:	d82d      	bhi.n	8005f60 <UART_SetConfig+0x14c>
 8005f04:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0xf8>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005f41 	.word	0x08005f41
 8005f10:	08005f61 	.word	0x08005f61
 8005f14:	08005f61 	.word	0x08005f61
 8005f18:	08005f61 	.word	0x08005f61
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f61 	.word	0x08005f61
 8005f24:	08005f61 	.word	0x08005f61
 8005f28:	08005f61 	.word	0x08005f61
 8005f2c:	08005f49 	.word	0x08005f49
 8005f30:	08005f61 	.word	0x08005f61
 8005f34:	08005f61 	.word	0x08005f61
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f59 	.word	0x08005f59
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f46:	e0d8      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f4e:	e0d4      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f56:	e0d0      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f5e:	e0cc      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f66:	e0c8      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5e      	ldr	r2, [pc, #376]	@ (80060e8 <UART_SetConfig+0x2d4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d125      	bne.n	8005fbe <UART_SetConfig+0x1aa>
 8005f72:	4b5b      	ldr	r3, [pc, #364]	@ (80060e0 <UART_SetConfig+0x2cc>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f7c:	2b30      	cmp	r3, #48	@ 0x30
 8005f7e:	d016      	beq.n	8005fae <UART_SetConfig+0x19a>
 8005f80:	2b30      	cmp	r3, #48	@ 0x30
 8005f82:	d818      	bhi.n	8005fb6 <UART_SetConfig+0x1a2>
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d00a      	beq.n	8005f9e <UART_SetConfig+0x18a>
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d814      	bhi.n	8005fb6 <UART_SetConfig+0x1a2>
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <UART_SetConfig+0x182>
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d008      	beq.n	8005fa6 <UART_SetConfig+0x192>
 8005f94:	e00f      	b.n	8005fb6 <UART_SetConfig+0x1a2>
 8005f96:	2300      	movs	r3, #0
 8005f98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9c:	e0ad      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa4:	e0a9      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005fa6:	2304      	movs	r3, #4
 8005fa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fac:	e0a5      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb4:	e0a1      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fbc:	e09d      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80060ec <UART_SetConfig+0x2d8>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d125      	bne.n	8006014 <UART_SetConfig+0x200>
 8005fc8:	4b45      	ldr	r3, [pc, #276]	@ (80060e0 <UART_SetConfig+0x2cc>)
 8005fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005fd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fd4:	d016      	beq.n	8006004 <UART_SetConfig+0x1f0>
 8005fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fd8:	d818      	bhi.n	800600c <UART_SetConfig+0x1f8>
 8005fda:	2b80      	cmp	r3, #128	@ 0x80
 8005fdc:	d00a      	beq.n	8005ff4 <UART_SetConfig+0x1e0>
 8005fde:	2b80      	cmp	r3, #128	@ 0x80
 8005fe0:	d814      	bhi.n	800600c <UART_SetConfig+0x1f8>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <UART_SetConfig+0x1d8>
 8005fe6:	2b40      	cmp	r3, #64	@ 0x40
 8005fe8:	d008      	beq.n	8005ffc <UART_SetConfig+0x1e8>
 8005fea:	e00f      	b.n	800600c <UART_SetConfig+0x1f8>
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ff2:	e082      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffa:	e07e      	b.n	80060fa <UART_SetConfig+0x2e6>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006002:	e07a      	b.n	80060fa <UART_SetConfig+0x2e6>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600a:	e076      	b.n	80060fa <UART_SetConfig+0x2e6>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006012:	e072      	b.n	80060fa <UART_SetConfig+0x2e6>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a35      	ldr	r2, [pc, #212]	@ (80060f0 <UART_SetConfig+0x2dc>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d12a      	bne.n	8006074 <UART_SetConfig+0x260>
 800601e:	4b30      	ldr	r3, [pc, #192]	@ (80060e0 <UART_SetConfig+0x2cc>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602c:	d01a      	beq.n	8006064 <UART_SetConfig+0x250>
 800602e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006032:	d81b      	bhi.n	800606c <UART_SetConfig+0x258>
 8006034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006038:	d00c      	beq.n	8006054 <UART_SetConfig+0x240>
 800603a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800603e:	d815      	bhi.n	800606c <UART_SetConfig+0x258>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <UART_SetConfig+0x238>
 8006044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006048:	d008      	beq.n	800605c <UART_SetConfig+0x248>
 800604a:	e00f      	b.n	800606c <UART_SetConfig+0x258>
 800604c:	2300      	movs	r3, #0
 800604e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006052:	e052      	b.n	80060fa <UART_SetConfig+0x2e6>
 8006054:	2302      	movs	r3, #2
 8006056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605a:	e04e      	b.n	80060fa <UART_SetConfig+0x2e6>
 800605c:	2304      	movs	r3, #4
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006062:	e04a      	b.n	80060fa <UART_SetConfig+0x2e6>
 8006064:	2308      	movs	r3, #8
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e046      	b.n	80060fa <UART_SetConfig+0x2e6>
 800606c:	2310      	movs	r3, #16
 800606e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006072:	e042      	b.n	80060fa <UART_SetConfig+0x2e6>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a17      	ldr	r2, [pc, #92]	@ (80060d8 <UART_SetConfig+0x2c4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d13a      	bne.n	80060f4 <UART_SetConfig+0x2e0>
 800607e:	4b18      	ldr	r3, [pc, #96]	@ (80060e0 <UART_SetConfig+0x2cc>)
 8006080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006084:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006088:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800608c:	d01a      	beq.n	80060c4 <UART_SetConfig+0x2b0>
 800608e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006092:	d81b      	bhi.n	80060cc <UART_SetConfig+0x2b8>
 8006094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006098:	d00c      	beq.n	80060b4 <UART_SetConfig+0x2a0>
 800609a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800609e:	d815      	bhi.n	80060cc <UART_SetConfig+0x2b8>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <UART_SetConfig+0x298>
 80060a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060a8:	d008      	beq.n	80060bc <UART_SetConfig+0x2a8>
 80060aa:	e00f      	b.n	80060cc <UART_SetConfig+0x2b8>
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b2:	e022      	b.n	80060fa <UART_SetConfig+0x2e6>
 80060b4:	2302      	movs	r3, #2
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ba:	e01e      	b.n	80060fa <UART_SetConfig+0x2e6>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e01a      	b.n	80060fa <UART_SetConfig+0x2e6>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e016      	b.n	80060fa <UART_SetConfig+0x2e6>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e012      	b.n	80060fa <UART_SetConfig+0x2e6>
 80060d4:	efff69f3 	.word	0xefff69f3
 80060d8:	40008000 	.word	0x40008000
 80060dc:	40013800 	.word	0x40013800
 80060e0:	40021000 	.word	0x40021000
 80060e4:	40004400 	.word	0x40004400
 80060e8:	40004800 	.word	0x40004800
 80060ec:	40004c00 	.word	0x40004c00
 80060f0:	40005000 	.word	0x40005000
 80060f4:	2310      	movs	r3, #16
 80060f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a9f      	ldr	r2, [pc, #636]	@ (800637c <UART_SetConfig+0x568>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d17a      	bne.n	80061fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006108:	2b08      	cmp	r3, #8
 800610a:	d824      	bhi.n	8006156 <UART_SetConfig+0x342>
 800610c:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <UART_SetConfig+0x300>)
 800610e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006112:	bf00      	nop
 8006114:	08006139 	.word	0x08006139
 8006118:	08006157 	.word	0x08006157
 800611c:	08006141 	.word	0x08006141
 8006120:	08006157 	.word	0x08006157
 8006124:	08006147 	.word	0x08006147
 8006128:	08006157 	.word	0x08006157
 800612c:	08006157 	.word	0x08006157
 8006130:	08006157 	.word	0x08006157
 8006134:	0800614f 	.word	0x0800614f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fd feb8 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 800613c:	61f8      	str	r0, [r7, #28]
        break;
 800613e:	e010      	b.n	8006162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006140:	4b8f      	ldr	r3, [pc, #572]	@ (8006380 <UART_SetConfig+0x56c>)
 8006142:	61fb      	str	r3, [r7, #28]
        break;
 8006144:	e00d      	b.n	8006162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006146:	f7fd fe19 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 800614a:	61f8      	str	r0, [r7, #28]
        break;
 800614c:	e009      	b.n	8006162 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006152:	61fb      	str	r3, [r7, #28]
        break;
 8006154:	e005      	b.n	8006162 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006160:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80fb 	beq.w	8006360 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	69fa      	ldr	r2, [r7, #28]
 8006176:	429a      	cmp	r2, r3
 8006178:	d305      	bcc.n	8006186 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	429a      	cmp	r2, r3
 8006184:	d903      	bls.n	800618e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800618c:	e0e8      	b.n	8006360 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2200      	movs	r2, #0
 8006192:	461c      	mov	r4, r3
 8006194:	4615      	mov	r5, r2
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	022b      	lsls	r3, r5, #8
 80061a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80061a4:	0222      	lsls	r2, r4, #8
 80061a6:	68f9      	ldr	r1, [r7, #12]
 80061a8:	6849      	ldr	r1, [r1, #4]
 80061aa:	0849      	lsrs	r1, r1, #1
 80061ac:	2000      	movs	r0, #0
 80061ae:	4688      	mov	r8, r1
 80061b0:	4681      	mov	r9, r0
 80061b2:	eb12 0a08 	adds.w	sl, r2, r8
 80061b6:	eb43 0b09 	adc.w	fp, r3, r9
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c8:	4650      	mov	r0, sl
 80061ca:	4659      	mov	r1, fp
 80061cc:	f7fa fd3c 	bl	8000c48 <__aeabi_uldivmod>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4613      	mov	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061de:	d308      	bcc.n	80061f2 <UART_SetConfig+0x3de>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061e6:	d204      	bcs.n	80061f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	60da      	str	r2, [r3, #12]
 80061f0:	e0b6      	b.n	8006360 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061f8:	e0b2      	b.n	8006360 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006202:	d15e      	bne.n	80062c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006204:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006208:	2b08      	cmp	r3, #8
 800620a:	d828      	bhi.n	800625e <UART_SetConfig+0x44a>
 800620c:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <UART_SetConfig+0x400>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006239 	.word	0x08006239
 8006218:	08006241 	.word	0x08006241
 800621c:	08006249 	.word	0x08006249
 8006220:	0800625f 	.word	0x0800625f
 8006224:	0800624f 	.word	0x0800624f
 8006228:	0800625f 	.word	0x0800625f
 800622c:	0800625f 	.word	0x0800625f
 8006230:	0800625f 	.word	0x0800625f
 8006234:	08006257 	.word	0x08006257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006238:	f7fd fe38 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 800623c:	61f8      	str	r0, [r7, #28]
        break;
 800623e:	e014      	b.n	800626a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006240:	f7fd fe4a 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8006244:	61f8      	str	r0, [r7, #28]
        break;
 8006246:	e010      	b.n	800626a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006248:	4b4d      	ldr	r3, [pc, #308]	@ (8006380 <UART_SetConfig+0x56c>)
 800624a:	61fb      	str	r3, [r7, #28]
        break;
 800624c:	e00d      	b.n	800626a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800624e:	f7fd fd95 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 8006252:	61f8      	str	r0, [r7, #28]
        break;
 8006254:	e009      	b.n	800626a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800625a:	61fb      	str	r3, [r7, #28]
        break;
 800625c:	e005      	b.n	800626a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006268:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d077      	beq.n	8006360 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	005a      	lsls	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	085b      	lsrs	r3, r3, #1
 800627a:	441a      	add	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d916      	bls.n	80062ba <UART_SetConfig+0x4a6>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006292:	d212      	bcs.n	80062ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f023 030f 	bic.w	r3, r3, #15
 800629c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	8afb      	ldrh	r3, [r7, #22]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	8afa      	ldrh	r2, [r7, #22]
 80062b6:	60da      	str	r2, [r3, #12]
 80062b8:	e052      	b.n	8006360 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062c0:	e04e      	b.n	8006360 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d827      	bhi.n	800631a <UART_SetConfig+0x506>
 80062ca:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0x4bc>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	08006305 	.word	0x08006305
 80062dc:	0800631b 	.word	0x0800631b
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	0800631b 	.word	0x0800631b
 80062e8:	0800631b 	.word	0x0800631b
 80062ec:	0800631b 	.word	0x0800631b
 80062f0:	08006313 	.word	0x08006313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f4:	f7fd fdda 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 80062f8:	61f8      	str	r0, [r7, #28]
        break;
 80062fa:	e014      	b.n	8006326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062fc:	f7fd fdec 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8006300:	61f8      	str	r0, [r7, #28]
        break;
 8006302:	e010      	b.n	8006326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006304:	4b1e      	ldr	r3, [pc, #120]	@ (8006380 <UART_SetConfig+0x56c>)
 8006306:	61fb      	str	r3, [r7, #28]
        break;
 8006308:	e00d      	b.n	8006326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630a:	f7fd fd37 	bl	8003d7c <HAL_RCC_GetSysClockFreq>
 800630e:	61f8      	str	r0, [r7, #28]
        break;
 8006310:	e009      	b.n	8006326 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006316:	61fb      	str	r3, [r7, #28]
        break;
 8006318:	e005      	b.n	8006326 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006324:	bf00      	nop
    }

    if (pclk != 0U)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d019      	beq.n	8006360 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	085a      	lsrs	r2, r3, #1
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	fbb2 f3f3 	udiv	r3, r2, r3
 800633e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b0f      	cmp	r3, #15
 8006344:	d909      	bls.n	800635a <UART_SetConfig+0x546>
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800634c:	d205      	bcs.n	800635a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60da      	str	r2, [r3, #12]
 8006358:	e002      	b.n	8006360 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800636c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006370:	4618      	mov	r0, r3
 8006372:	3728      	adds	r7, #40	@ 0x28
 8006374:	46bd      	mov	sp, r7
 8006376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637a:	bf00      	nop
 800637c:	40008000 	.word	0x40008000
 8006380:	00f42400 	.word	0x00f42400

08006384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00a      	beq.n	80063ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00a      	beq.n	80063d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00a      	beq.n	80063f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	430a      	orrs	r2, r1
 8006412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	430a      	orrs	r2, r1
 8006434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01a      	beq.n	800649a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006482:	d10a      	bne.n	800649a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	605a      	str	r2, [r3, #4]
  }
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b098      	sub	sp, #96	@ 0x60
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d8:	f7fb fbd4 	bl	8001c84 <HAL_GetTick>
 80064dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d12e      	bne.n	800654a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f4:	2200      	movs	r2, #0
 80064f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f88c 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d021      	beq.n	800654a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800651a:	653b      	str	r3, [r7, #80]	@ 0x50
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	461a      	mov	r2, r3
 8006522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006524:	647b      	str	r3, [r7, #68]	@ 0x44
 8006526:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800652a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800652c:	e841 2300 	strex	r3, r2, [r1]
 8006530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e6      	bne.n	8006506 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e062      	b.n	8006610 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b04      	cmp	r3, #4
 8006556:	d149      	bne.n	80065ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800655c:	9300      	str	r3, [sp, #0]
 800655e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006560:	2200      	movs	r2, #0
 8006562:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f856 	bl	8006618 <UART_WaitOnFlagUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03c      	beq.n	80065ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	623b      	str	r3, [r7, #32]
   return(result);
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006590:	633b      	str	r3, [r7, #48]	@ 0x30
 8006592:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e6      	bne.n	8006572 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3308      	adds	r3, #8
 80065c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c4:	61fa      	str	r2, [r7, #28]
 80065c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c8:	69b9      	ldr	r1, [r7, #24]
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	e841 2300 	strex	r3, r2, [r1]
 80065d0:	617b      	str	r3, [r7, #20]
   return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1e5      	bne.n	80065a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e011      	b.n	8006610 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2220      	movs	r2, #32
 80065f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3758      	adds	r7, #88	@ 0x58
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	603b      	str	r3, [r7, #0]
 8006624:	4613      	mov	r3, r2
 8006626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006628:	e04f      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d04b      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006632:	f7fb fb27 	bl	8001c84 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	429a      	cmp	r2, r3
 8006640:	d302      	bcc.n	8006648 <UART_WaitOnFlagUntilTimeout+0x30>
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e04e      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d037      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b80      	cmp	r3, #128	@ 0x80
 800665e:	d034      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b40      	cmp	r3, #64	@ 0x40
 8006664:	d031      	beq.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b08      	cmp	r3, #8
 8006672:	d110      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2208      	movs	r2, #8
 800667a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f838 	bl	80066f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2208      	movs	r2, #8
 8006686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e029      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a4:	d111      	bne.n	80066ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f81e 	bl	80066f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e00f      	b.n	80066ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4013      	ands	r3, r2
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	bf0c      	ite	eq
 80066da:	2301      	moveq	r3, #1
 80066dc:	2300      	movne	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	461a      	mov	r2, r3
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d0a0      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b095      	sub	sp, #84	@ 0x54
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800670e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	461a      	mov	r2, r3
 8006716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006718:	643b      	str	r3, [r7, #64]	@ 0x40
 800671a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800671e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006720:	e841 2300 	strex	r3, r2, [r1]
 8006724:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1e6      	bne.n	80066fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3308      	adds	r3, #8
 8006732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	61fb      	str	r3, [r7, #28]
   return(result);
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f023 0301 	bic.w	r3, r3, #1
 8006742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3308      	adds	r3, #8
 800674a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800674c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e5      	bne.n	800672c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	2b01      	cmp	r3, #1
 8006766:	d118      	bne.n	800679a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	60bb      	str	r3, [r7, #8]
   return(result);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 0310 	bic.w	r3, r3, #16
 800677c:	647b      	str	r3, [r7, #68]	@ 0x44
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006786:	61bb      	str	r3, [r7, #24]
 8006788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	6979      	ldr	r1, [r7, #20]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	e841 2300 	strex	r3, r2, [r1]
 8006792:	613b      	str	r3, [r7, #16]
   return(result);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1e6      	bne.n	8006768 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80067ae:	bf00      	nop
 80067b0:	3754      	adds	r7, #84	@ 0x54
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <funchad24.constprop.0>:
 80067bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c0:	4c1c      	ldr	r4, [pc, #112]	@ (8006834 <funchad24.constprop.0+0x78>)
 80067c2:	4e1d      	ldr	r6, [pc, #116]	@ (8006838 <funchad24.constprop.0+0x7c>)
 80067c4:	4607      	mov	r7, r0
 80067c6:	2500      	movs	r5, #0
 80067c8:	f1a4 0868 	sub.w	r8, r4, #104	@ 0x68
 80067cc:	4b1b      	ldr	r3, [pc, #108]	@ (800683c <funchad24.constprop.0+0x80>)
 80067ce:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 80067d2:	f852 1b0c 	ldr.w	r1, [r2], #12
 80067d6:	f843 1b04 	str.w	r1, [r3], #4
 80067da:	429c      	cmp	r4, r3
 80067dc:	d1f9      	bne.n	80067d2 <funchad24.constprop.0+0x16>
 80067de:	4630      	mov	r0, r6
 80067e0:	2268      	movs	r2, #104	@ 0x68
 80067e2:	4641      	mov	r1, r8
 80067e4:	3501      	adds	r5, #1
 80067e6:	f001 f9fe 	bl	8007be6 <memcpy>
 80067ea:	2d03      	cmp	r5, #3
 80067ec:	f106 0668 	add.w	r6, r6, #104	@ 0x68
 80067f0:	d1ec      	bne.n	80067cc <funchad24.constprop.0+0x10>
 80067f2:	4913      	ldr	r1, [pc, #76]	@ (8006840 <funchad24.constprop.0+0x84>)
 80067f4:	2000      	movs	r0, #0
 80067f6:	eef3 6a0a 	vmov.f32	s13, #58	@ 0x41d00000  26.0
 80067fa:	f1a1 0368 	sub.w	r3, r1, #104	@ 0x68
 80067fe:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006844 <funchad24.constprop.0+0x88>
 8006802:	461a      	mov	r2, r3
 8006804:	ecb2 7a01 	vldmia	r2!, {s14}
 8006808:	4291      	cmp	r1, r2
 800680a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800680e:	d1f9      	bne.n	8006804 <funchad24.constprop.0+0x48>
 8006810:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006814:	edd3 7a00 	vldr	s15, [r3]
 8006818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800681c:	ece3 7a01 	vstmia	r3!, {s15}
 8006820:	4299      	cmp	r1, r3
 8006822:	d1f7      	bne.n	8006814 <funchad24.constprop.0+0x58>
 8006824:	301a      	adds	r0, #26
 8006826:	284e      	cmp	r0, #78	@ 0x4e
 8006828:	f101 0168 	add.w	r1, r1, #104	@ 0x68
 800682c:	d1e5      	bne.n	80067fa <funchad24.constprop.0+0x3e>
 800682e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006832:	bf00      	nop
 8006834:	20001a7c 	.word	0x20001a7c
 8006838:	20001a7c 	.word	0x20001a7c
 800683c:	2000197c 	.word	0x2000197c
 8006840:	20001ae4 	.word	0x20001ae4
 8006844:	00000000 	.word	0x00000000

08006848 <neai_anomalydetection_learn>:
 8006848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	ed2d 8b04 	vpush	{d8-d9}
 8006850:	4bd0      	ldr	r3, [pc, #832]	@ (8006b94 <neai_anomalydetection_learn+0x34c>)
 8006852:	781c      	ldrb	r4, [r3, #0]
 8006854:	2c01      	cmp	r4, #1
 8006856:	d006      	beq.n	8006866 <neai_anomalydetection_learn+0x1e>
 8006858:	4bcf      	ldr	r3, [pc, #828]	@ (8006b98 <neai_anomalydetection_learn+0x350>)
 800685a:	207b      	movs	r0, #123	@ 0x7b
 800685c:	7018      	strb	r0, [r3, #0]
 800685e:	ecbd 8b04 	vpop	{d8-d9}
 8006862:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	f7ff ffa9 	bl	80067bc <funchad24.constprop.0>
 800686a:	4acc      	ldr	r2, [pc, #816]	@ (8006b9c <neai_anomalydetection_learn+0x354>)
 800686c:	4bcc      	ldr	r3, [pc, #816]	@ (8006ba0 <neai_anomalydetection_learn+0x358>)
 800686e:	6816      	ldr	r6, [r2, #0]
 8006870:	7819      	ldrb	r1, [r3, #0]
 8006872:	3601      	adds	r6, #1
 8006874:	ee07 6a90 	vmov	s15, r6
 8006878:	2901      	cmp	r1, #1
 800687a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800687e:	6016      	str	r6, [r2, #0]
 8006880:	d915      	bls.n	80068ae <neai_anomalydetection_learn+0x66>
 8006882:	48c8      	ldr	r0, [pc, #800]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 8006884:	4ac8      	ldr	r2, [pc, #800]	@ (8006ba8 <neai_anomalydetection_learn+0x360>)
 8006886:	701c      	strb	r4, [r3, #0]
 8006888:	2100      	movs	r1, #0
 800688a:	ecb0 7a01 	vldmia	r0!, {s14}
 800688e:	f5a2 739c 	sub.w	r3, r2, #312	@ 0x138
 8006892:	edd3 7a00 	vldr	s15, [r3]
 8006896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800689a:	ece3 7a01 	vstmia	r3!, {s15}
 800689e:	429a      	cmp	r2, r3
 80068a0:	d1f7      	bne.n	8006892 <neai_anomalydetection_learn+0x4a>
 80068a2:	314e      	adds	r1, #78	@ 0x4e
 80068a4:	f5b1 7f6a 	cmp.w	r1, #936	@ 0x3a8
 80068a8:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 80068ac:	d1ed      	bne.n	800688a <neai_anomalydetection_learn+0x42>
 80068ae:	f8df a30c 	ldr.w	sl, [pc, #780]	@ 8006bbc <neai_anomalydetection_learn+0x374>
 80068b2:	49be      	ldr	r1, [pc, #760]	@ (8006bac <neai_anomalydetection_learn+0x364>)
 80068b4:	48bb      	ldr	r0, [pc, #748]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 80068b6:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80068ba:	f001 f994 	bl	8007be6 <memcpy>
 80068be:	f8ba 8000 	ldrh.w	r8, [sl]
 80068c2:	f1b8 0f0b 	cmp.w	r8, #11
 80068c6:	f200 80cc 	bhi.w	8006a62 <neai_anomalydetection_learn+0x21a>
 80068ca:	f8df 92ec 	ldr.w	r9, [pc, #748]	@ 8006bb8 <neai_anomalydetection_learn+0x370>
 80068ce:	eddf 9ab8 	vldr	s19, [pc, #736]	@ 8006bb0 <neai_anomalydetection_learn+0x368>
 80068d2:	464f      	mov	r7, r9
 80068d4:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80068d8:	eef0 8a08 	vmov.f32	s17, #8	@ 0x40400000  3.0
 80068dc:	f509 749c 	add.w	r4, r9, #312	@ 0x138
 80068e0:	f108 0b01 	add.w	fp, r8, #1
 80068e4:	2500      	movs	r5, #0
 80068e6:	45a8      	cmp	r8, r5
 80068e8:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 80068ec:	d03e      	beq.n	800696c <neai_anomalydetection_learn+0x124>
 80068ee:	463b      	mov	r3, r7
 80068f0:	ecf3 7a01 	vldmia	r3!, {s15}
 80068f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80068f8:	429c      	cmp	r4, r3
 80068fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80068fe:	d1f7      	bne.n	80068f0 <neai_anomalydetection_learn+0xa8>
 8006900:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	f100 8169 	bmi.w	8006bde <neai_anomalydetection_learn+0x396>
 800690c:	eeb1 6ac0 	vsqrt.f32	s12, s0
 8006910:	eeb4 6ae9 	vcmpe.f32	s12, s19
 8006914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006918:	dc74      	bgt.n	8006a04 <neai_anomalydetection_learn+0x1bc>
 800691a:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 800691e:	463b      	mov	r3, r7
 8006920:	ecf3 7a01 	vldmia	r3!, {s15}
 8006924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006928:	429c      	cmp	r4, r3
 800692a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800692e:	d1f7      	bne.n	8006920 <neai_anomalydetection_learn+0xd8>
 8006930:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006938:	f100 8156 	bmi.w	8006be8 <neai_anomalydetection_learn+0x3a0>
 800693c:	eeb1 6ac0 	vsqrt.f32	s12, s0
 8006940:	eeb4 6ae9 	vcmpe.f32	s12, s19
 8006944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006948:	dc39      	bgt.n	80069be <neai_anomalydetection_learn+0x176>
 800694a:	3501      	adds	r5, #1
 800694c:	455d      	cmp	r5, fp
 800694e:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006952:	f504 749c 	add.w	r4, r4, #312	@ 0x138
 8006956:	d1c6      	bne.n	80068e6 <neai_anomalydetection_learn+0x9e>
 8006958:	2e09      	cmp	r6, #9
 800695a:	bf8c      	ite	hi
 800695c:	207f      	movhi	r0, #127	@ 0x7f
 800695e:	207e      	movls	r0, #126	@ 0x7e
 8006960:	4b8d      	ldr	r3, [pc, #564]	@ (8006b98 <neai_anomalydetection_learn+0x350>)
 8006962:	7018      	strb	r0, [r3, #0]
 8006964:	ecbd 8b04 	vpop	{d8-d9}
 8006968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4b8d      	ldr	r3, [pc, #564]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 800696e:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 8006972:	ecf3 7a01 	vldmia	r3!, {s15}
 8006976:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800697a:	4293      	cmp	r3, r2
 800697c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006980:	d1f7      	bne.n	8006972 <neai_anomalydetection_learn+0x12a>
 8006982:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698a:	f100 8119 	bmi.w	8006bc0 <neai_anomalydetection_learn+0x378>
 800698e:	eef1 7ac0 	vsqrt.f32	s15, s0
 8006992:	eef4 7ae9 	vcmpe.f32	s15, s19
 8006996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800699a:	ddd6      	ble.n	800694a <neai_anomalydetection_learn+0x102>
 800699c:	204e      	movs	r0, #78	@ 0x4e
 800699e:	fb00 f008 	mul.w	r0, r0, r8
 80069a2:	f108 0801 	add.w	r8, r8, #1
 80069a6:	497f      	ldr	r1, [pc, #508]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 80069a8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80069ac:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80069b0:	fa1f f888 	uxth.w	r8, r8
 80069b4:	f001 f917 	bl	8007be6 <memcpy>
 80069b8:	f8aa 8000 	strh.w	r8, [sl]
 80069bc:	e7c5      	b.n	800694a <neai_anomalydetection_learn+0x102>
 80069be:	4b79      	ldr	r3, [pc, #484]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 80069c0:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 80069c4:	4638      	mov	r0, r7
 80069c6:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80069ca:	461a      	mov	r2, r3
 80069cc:	ecf2 7a01 	vldmia	r2!, {s15}
 80069d0:	ecf0 6a01 	vldmia	r0!, {s13}
 80069d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069d8:	4291      	cmp	r1, r2
 80069da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069de:	d1f5      	bne.n	80069cc <neai_anomalydetection_learn+0x184>
 80069e0:	eec7 5a06 	vdiv.f32	s11, s14, s12
 80069e4:	463a      	mov	r2, r7
 80069e6:	ecf2 6a01 	vldmia	r2!, {s13}
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80069f2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80069f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069fa:	ece3 7a01 	vstmia	r3!, {s15}
 80069fe:	428b      	cmp	r3, r1
 8006a00:	d1f1      	bne.n	80069e6 <neai_anomalydetection_learn+0x19e>
 8006a02:	e7a2      	b.n	800694a <neai_anomalydetection_learn+0x102>
 8006a04:	4b67      	ldr	r3, [pc, #412]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 8006a06:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8006a10:	461a      	mov	r2, r3
 8006a12:	ecf2 7a01 	vldmia	r2!, {s15}
 8006a16:	ecf0 6a01 	vldmia	r0!, {s13}
 8006a1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a1e:	4291      	cmp	r1, r2
 8006a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a24:	d1f5      	bne.n	8006a12 <neai_anomalydetection_learn+0x1ca>
 8006a26:	ee78 7a49 	vsub.f32	s15, s16, s18
 8006a2a:	eeb1 5a00 	vmov.f32	s10, #16	@ 0x40800000  4.0
 8006a2e:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006a32:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8006a36:	463a      	mov	r2, r7
 8006a38:	ee87 6a88 	vdiv.f32	s12, s15, s16
 8006a3c:	eec5 6a08 	vdiv.f32	s13, s10, s16
 8006a40:	ecf3 7a01 	vldmia	r3!, {s15}
 8006a44:	ed92 7a00 	vldr	s14, [r2]
 8006a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a4c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006a50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006a54:	4299      	cmp	r1, r3
 8006a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a5a:	ece2 7a01 	vstmia	r2!, {s15}
 8006a5e:	d1ef      	bne.n	8006a40 <neai_anomalydetection_learn+0x1f8>
 8006a60:	e75b      	b.n	800691a <neai_anomalydetection_learn+0xd2>
 8006a62:	4d55      	ldr	r5, [pc, #340]	@ (8006bb8 <neai_anomalydetection_learn+0x370>)
 8006a64:	eddf 9a52 	vldr	s19, [pc, #328]	@ 8006bb0 <neai_anomalydetection_learn+0x368>
 8006a68:	f505 749c 	add.w	r4, r5, #312	@ 0x138
 8006a6c:	2700      	movs	r7, #0
 8006a6e:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8006a72:	eef0 8a08 	vmov.f32	s17, #8	@ 0x40400000  3.0
 8006a76:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 8006a7a:	462b      	mov	r3, r5
 8006a7c:	ecf3 7a01 	vldmia	r3!, {s15}
 8006a80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006a84:	429c      	cmp	r4, r3
 8006a86:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006a8a:	d1f7      	bne.n	8006a7c <neai_anomalydetection_learn+0x234>
 8006a8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a94:	f100 8099 	bmi.w	8006bca <neai_anomalydetection_learn+0x382>
 8006a98:	eeb1 6ac0 	vsqrt.f32	s12, s0
 8006a9c:	eeb4 6ae9 	vcmpe.f32	s12, s19
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	dc24      	bgt.n	8006af0 <neai_anomalydetection_learn+0x2a8>
 8006aa6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 8006aaa:	462b      	mov	r3, r5
 8006aac:	ecf3 7a01 	vldmia	r3!, {s15}
 8006ab0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006aba:	d1f7      	bne.n	8006aac <neai_anomalydetection_learn+0x264>
 8006abc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac4:	f100 8086 	bmi.w	8006bd4 <neai_anomalydetection_learn+0x38c>
 8006ac8:	eeb1 6ac0 	vsqrt.f32	s12, s0
 8006acc:	eeb4 6ae9 	vcmpe.f32	s12, s19
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	dc3b      	bgt.n	8006b4e <neai_anomalydetection_learn+0x306>
 8006ad6:	374e      	adds	r7, #78	@ 0x4e
 8006ad8:	f5b7 7f6a 	cmp.w	r7, #936	@ 0x3a8
 8006adc:	f505 759c 	add.w	r5, r5, #312	@ 0x138
 8006ae0:	f504 749c 	add.w	r4, r4, #312	@ 0x138
 8006ae4:	d1c7      	bne.n	8006a76 <neai_anomalydetection_learn+0x22e>
 8006ae6:	2e09      	cmp	r6, #9
 8006ae8:	bf8c      	ite	hi
 8006aea:	207f      	movhi	r0, #127	@ 0x7f
 8006aec:	207e      	movls	r0, #126	@ 0x7e
 8006aee:	e737      	b.n	8006960 <neai_anomalydetection_learn+0x118>
 8006af0:	4b2c      	ldr	r3, [pc, #176]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 8006af2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 8006af6:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8006afa:	4628      	mov	r0, r5
 8006afc:	461a      	mov	r2, r3
 8006afe:	ecf2 7a01 	vldmia	r2!, {s15}
 8006b02:	ecf0 6a01 	vldmia	r0!, {s13}
 8006b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b0a:	4291      	cmp	r1, r2
 8006b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b10:	d1f5      	bne.n	8006afe <neai_anomalydetection_learn+0x2b6>
 8006b12:	ee78 7a49 	vsub.f32	s15, s16, s18
 8006b16:	eeb1 5a00 	vmov.f32	s10, #16	@ 0x40800000  4.0
 8006b1a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006b1e:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8006b22:	462a      	mov	r2, r5
 8006b24:	ee87 6a88 	vdiv.f32	s12, s15, s16
 8006b28:	eec5 6a08 	vdiv.f32	s13, s10, s16
 8006b2c:	ecf3 7a01 	vldmia	r3!, {s15}
 8006b30:	ed92 7a00 	vldr	s14, [r2]
 8006b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b38:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006b3c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b40:	4299      	cmp	r1, r3
 8006b42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b46:	ece2 7a01 	vstmia	r2!, {s15}
 8006b4a:	d1ef      	bne.n	8006b2c <neai_anomalydetection_learn+0x2e4>
 8006b4c:	e7ab      	b.n	8006aa6 <neai_anomalydetection_learn+0x25e>
 8006b4e:	4b15      	ldr	r3, [pc, #84]	@ (8006ba4 <neai_anomalydetection_learn+0x35c>)
 8006b50:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006bb4 <neai_anomalydetection_learn+0x36c>
 8006b54:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8006b58:	4628      	mov	r0, r5
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	ecf2 7a01 	vldmia	r2!, {s15}
 8006b60:	ecf0 6a01 	vldmia	r0!, {s13}
 8006b64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b68:	4291      	cmp	r1, r2
 8006b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b6e:	d1f5      	bne.n	8006b5c <neai_anomalydetection_learn+0x314>
 8006b70:	eec7 5a06 	vdiv.f32	s11, s14, s12
 8006b74:	462a      	mov	r2, r5
 8006b76:	ecf2 6a01 	vldmia	r2!, {s13}
 8006b7a:	edd3 7a00 	vldr	s15, [r3]
 8006b7e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8006b82:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006b86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b8a:	ece3 7a01 	vstmia	r3!, {s15}
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d1f1      	bne.n	8006b76 <neai_anomalydetection_learn+0x32e>
 8006b92:	e7a0      	b.n	8006ad6 <neai_anomalydetection_learn+0x28e>
 8006b94:	200001e0 	.word	0x200001e0
 8006b98:	200001d8 	.word	0x200001d8
 8006b9c:	200001dc 	.word	0x200001dc
 8006ba0:	200001e4 	.word	0x200001e4
 8006ba4:	200001e8 	.word	0x200001e8
 8006ba8:	20000458 	.word	0x20000458
 8006bac:	20001a7c 	.word	0x20001a7c
 8006bb0:	3089705f 	.word	0x3089705f
 8006bb4:	00000000 	.word	0x00000000
 8006bb8:	20000320 	.word	0x20000320
 8006bbc:	200001e2 	.word	0x200001e2
 8006bc0:	f002 ff2a 	bl	8009a18 <sqrtf>
 8006bc4:	eef0 7a40 	vmov.f32	s15, s0
 8006bc8:	e6e3      	b.n	8006992 <neai_anomalydetection_learn+0x14a>
 8006bca:	f002 ff25 	bl	8009a18 <sqrtf>
 8006bce:	eeb0 6a40 	vmov.f32	s12, s0
 8006bd2:	e763      	b.n	8006a9c <neai_anomalydetection_learn+0x254>
 8006bd4:	f002 ff20 	bl	8009a18 <sqrtf>
 8006bd8:	eeb0 6a40 	vmov.f32	s12, s0
 8006bdc:	e776      	b.n	8006acc <neai_anomalydetection_learn+0x284>
 8006bde:	f002 ff1b 	bl	8009a18 <sqrtf>
 8006be2:	eeb0 6a40 	vmov.f32	s12, s0
 8006be6:	e693      	b.n	8006910 <neai_anomalydetection_learn+0xc8>
 8006be8:	f002 ff16 	bl	8009a18 <sqrtf>
 8006bec:	eeb0 6a40 	vmov.f32	s12, s0
 8006bf0:	e6a6      	b.n	8006940 <neai_anomalydetection_learn+0xf8>
 8006bf2:	bf00      	nop
 8006bf4:	0000      	movs	r0, r0
	...

08006bf8 <neai_anomalydetection_detect>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	ed2d 8b04 	vpush	{d8-d9}
 8006c00:	4ad3      	ldr	r2, [pc, #844]	@ (8006f50 <neai_anomalydetection_detect+0x358>)
 8006c02:	460e      	mov	r6, r1
 8006c04:	7813      	ldrb	r3, [r2, #0]
 8006c06:	21ff      	movs	r1, #255	@ 0xff
 8006c08:	7031      	strb	r1, [r6, #0]
 8006c0a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8006c0e:	2901      	cmp	r1, #1
 8006c10:	b082      	sub	sp, #8
 8006c12:	d947      	bls.n	8006ca4 <neai_anomalydetection_detect+0xac>
 8006c14:	2b80      	cmp	r3, #128	@ 0x80
 8006c16:	d045      	beq.n	8006ca4 <neai_anomalydetection_detect+0xac>
 8006c18:	4bce      	ldr	r3, [pc, #824]	@ (8006f54 <neai_anomalydetection_detect+0x35c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	d947      	bls.n	8006cb0 <neai_anomalydetection_detect+0xb8>
 8006c20:	f7ff fdcc 	bl	80067bc <funchad24.constprop.0>
 8006c24:	4bcc      	ldr	r3, [pc, #816]	@ (8006f58 <neai_anomalydetection_detect+0x360>)
 8006c26:	49cd      	ldr	r1, [pc, #820]	@ (8006f5c <neai_anomalydetection_detect+0x364>)
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	680f      	ldr	r7, [r1, #0]
 8006c2c:	2a01      	cmp	r2, #1
 8006c2e:	f000 80a1 	beq.w	8006d74 <neai_anomalydetection_detect+0x17c>
 8006c32:	4ccb      	ldr	r4, [pc, #812]	@ (8006f60 <neai_anomalydetection_detect+0x368>)
 8006c34:	eddf 8acb 	vldr	s17, [pc, #812]	@ 8006f64 <neai_anomalydetection_detect+0x36c>
 8006c38:	48cb      	ldr	r0, [pc, #812]	@ (8006f68 <neai_anomalydetection_detect+0x370>)
 8006c3a:	f504 656a 	add.w	r5, r4, #3744	@ 0xea0
 8006c3e:	4acb      	ldr	r2, [pc, #812]	@ (8006f6c <neai_anomalydetection_detect+0x374>)
 8006c40:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8006f64 <neai_anomalydetection_detect+0x36c>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4613      	mov	r3, r2
 8006c48:	ecf3 7a01 	vldmia	r3!, {s15}
 8006c4c:	ecf1 6a01 	vldmia	r1!, {s13}
 8006c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006c54:	4283      	cmp	r3, r0
 8006c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c5a:	d1f5      	bne.n	8006c48 <neai_anomalydetection_detect+0x50>
 8006c5c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8006c60:	f504 749c 	add.w	r4, r4, #312	@ 0x138
 8006c64:	42ac      	cmp	r4, r5
 8006c66:	ee78 8a87 	vadd.f32	s17, s17, s14
 8006c6a:	d1e8      	bne.n	8006c3e <neai_anomalydetection_detect+0x46>
 8006c6c:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 8006f64 <neai_anomalydetection_detect+0x36c>
 8006c70:	ecf2 7a01 	vldmia	r2!, {s15}
 8006c74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c78:	4282      	cmp	r2, r0
 8006c7a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8006c7e:	d1f7      	bne.n	8006c70 <neai_anomalydetection_detect+0x78>
 8006c80:	eddf 7abb 	vldr	s15, [pc, #748]	@ 8006f70 <neai_anomalydetection_detect+0x378>
 8006c84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8c:	d518      	bpl.n	8006cc0 <neai_anomalydetection_detect+0xc8>
 8006c8e:	4bb9      	ldr	r3, [pc, #740]	@ (8006f74 <neai_anomalydetection_detect+0x37c>)
 8006c90:	ed93 7a00 	vldr	s14, [r3]
 8006c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9c:	d468      	bmi.n	8006d70 <neai_anomalydetection_detect+0x178>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	7033      	strb	r3, [r6, #0]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	b002      	add	sp, #8
 8006ca8:	ecbd 8b04 	vpop	{d8-d9}
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cb0:	237e      	movs	r3, #126	@ 0x7e
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	7013      	strb	r3, [r2, #0]
 8006cb6:	b002      	add	sp, #8
 8006cb8:	ecbd 8b04 	vpop	{d8-d9}
 8006cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f7f9 fc41 	bl	8000548 <__aeabi_f2d>
 8006cc6:	a39c      	add	r3, pc, #624	@ (adr r3, 8006f38 <neai_anomalydetection_detect+0x340>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f7f9 fc94 	bl	80005f8 <__aeabi_dmul>
 8006cd0:	f7f9 ff6a 	bl	8000ba8 <__aeabi_d2f>
 8006cd4:	f7f9 fc38 	bl	8000548 <__aeabi_f2d>
 8006cd8:	ec41 0b10 	vmov	d0, r0, r1
 8006cdc:	f002 fe28 	bl	8009930 <log>
 8006ce0:	a397      	add	r3, pc, #604	@ (adr r3, 8006f40 <neai_anomalydetection_detect+0x348>)
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	ec51 0b10 	vmov	r0, r1, d0
 8006cea:	f7f9 fc85 	bl	80005f8 <__aeabi_dmul>
 8006cee:	a396      	add	r3, pc, #600	@ (adr r3, 8006f48 <neai_anomalydetection_detect+0x350>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 faca 	bl	800028c <__adddf3>
 8006cf8:	f7f9 ff56 	bl	8000ba8 <__aeabi_d2f>
 8006cfc:	eec8 7a88 	vdiv.f32	s15, s17, s16
 8006d00:	ee07 0a10 	vmov	s14, r0
 8006d04:	ee37 8ac7 	vsub.f32	s16, s15, s14
 8006d08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d0c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8006f78 <neai_anomalydetection_detect+0x380>
 8006d10:	eddf 7a9a 	vldr	s15, [pc, #616]	@ 8006f7c <neai_anomalydetection_detect+0x384>
 8006d14:	ee38 8a07 	vadd.f32	s16, s16, s14
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006d20:	eeb0 0a48 	vmov.f32	s0, s16
 8006d24:	f140 808d 	bpl.w	8006e42 <neai_anomalydetection_detect+0x24a>
 8006d28:	f002 fe40 	bl	80099ac <expf>
 8006d2c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006d30:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006d34:	ed9f 9a92 	vldr	s18, [pc, #584]	@ 8006f80 <neai_anomalydetection_detect+0x388>
 8006d38:	eddf 6a92 	vldr	s13, [pc, #584]	@ 8006f84 <neai_anomalydetection_detect+0x38c>
 8006d3c:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006d40:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8006d44:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	f340 80a3 	ble.w	8006e96 <neai_anomalydetection_detect+0x29e>
 8006d50:	eeb0 0a48 	vmov.f32	s0, s16
 8006d54:	f002 fe2a 	bl	80099ac <expf>
 8006d58:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006d5c:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006d60:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8006d64:	eef4 7ac9 	vcmpe.f32	s15, s18
 8006d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6c:	f340 8093 	ble.w	8006e96 <neai_anomalydetection_detect+0x29e>
 8006d70:	2364      	movs	r3, #100	@ 0x64
 8006d72:	e795      	b.n	8006ca0 <neai_anomalydetection_detect+0xa8>
 8006d74:	2202      	movs	r2, #2
 8006d76:	f04f 0900 	mov.w	r9, #0
 8006d7a:	4c79      	ldr	r4, [pc, #484]	@ (8006f60 <neai_anomalydetection_detect+0x368>)
 8006d7c:	ed9f 8a82 	vldr	s16, [pc, #520]	@ 8006f88 <neai_anomalydetection_detect+0x390>
 8006d80:	f8df a1f0 	ldr.w	sl, [pc, #496]	@ 8006f74 <neai_anomalydetection_detect+0x37c>
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	46c8      	mov	r8, r9
 8006d88:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8006f64 <neai_anomalydetection_detect+0x36c>
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	f504 759c 	add.w	r5, r4, #312	@ 0x138
 8006d92:	ecf3 7a01 	vldmia	r3!, {s15}
 8006d96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006da0:	d1f7      	bne.n	8006d92 <neai_anomalydetection_detect+0x19a>
 8006da2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006daa:	f100 80bd 	bmi.w	8006f28 <neai_anomalydetection_detect+0x330>
 8006dae:	eef1 6ac0 	vsqrt.f32	s13, s0
 8006db2:	eef4 6ac8 	vcmpe.f32	s13, s16
 8006db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dba:	ecea 6a01 	vstmia	sl!, {s13}
 8006dbe:	dc36      	bgt.n	8006e2e <neai_anomalydetection_detect+0x236>
 8006dc0:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fe8d 	bl	8007ae6 <memset>
 8006dcc:	f108 0801 	add.w	r8, r8, #1
 8006dd0:	f1b8 0f0c 	cmp.w	r8, #12
 8006dd4:	f43f af2d 	beq.w	8006c32 <neai_anomalydetection_detect+0x3a>
 8006dd8:	f109 094e 	add.w	r9, r9, #78	@ 0x4e
 8006ddc:	f504 711c 	add.w	r1, r4, #624	@ 0x270
 8006de0:	46cc      	mov	ip, r9
 8006de2:	f5a1 739c 	sub.w	r3, r1, #312	@ 0x138
 8006de6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f64 <neai_anomalydetection_detect+0x36c>
 8006dea:	4620      	mov	r0, r4
 8006dec:	461a      	mov	r2, r3
 8006dee:	ecf2 7a01 	vldmia	r2!, {s15}
 8006df2:	ecb0 7a01 	vldmia	r0!, {s14}
 8006df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dfa:	4291      	cmp	r1, r2
 8006dfc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006e00:	d1f5      	bne.n	8006dee <neai_anomalydetection_detect+0x1f6>
 8006e02:	4622      	mov	r2, r4
 8006e04:	ecb2 7a01 	vldmia	r2!, {s14}
 8006e08:	edd3 7a00 	vldr	s15, [r3]
 8006e0c:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e14:	ece3 7a01 	vstmia	r3!, {s15}
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	d1f3      	bne.n	8006e04 <neai_anomalydetection_detect+0x20c>
 8006e1c:	f10c 0c4e 	add.w	ip, ip, #78	@ 0x4e
 8006e20:	f5bc 7f6a 	cmp.w	ip, #936	@ 0x3a8
 8006e24:	f501 719c 	add.w	r1, r1, #312	@ 0x138
 8006e28:	d1db      	bne.n	8006de2 <neai_anomalydetection_detect+0x1ea>
 8006e2a:	462c      	mov	r4, r5
 8006e2c:	e7ac      	b.n	8006d88 <neai_anomalydetection_detect+0x190>
 8006e2e:	4623      	mov	r3, r4
 8006e30:	ed93 7a00 	vldr	s14, [r3]
 8006e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e38:	ece3 7a01 	vstmia	r3!, {s15}
 8006e3c:	429d      	cmp	r5, r3
 8006e3e:	d1f7      	bne.n	8006e30 <neai_anomalydetection_detect+0x238>
 8006e40:	e7c4      	b.n	8006dcc <neai_anomalydetection_detect+0x1d4>
 8006e42:	f002 fdb3 	bl	80099ac <expf>
 8006e46:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006e4a:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006e4e:	ed9f 9a4c 	vldr	s18, [pc, #304]	@ 8006f80 <neai_anomalydetection_detect+0x388>
 8006e52:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006f8c <neai_anomalydetection_detect+0x394>
 8006e56:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006e5a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006e5e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e66:	d42d      	bmi.n	8006ec4 <neai_anomalydetection_detect+0x2cc>
 8006e68:	eeb0 0a48 	vmov.f32	s0, s16
 8006e6c:	f002 fd9e 	bl	80099ac <expf>
 8006e70:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006e74:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006e78:	ed9f 9a41 	vldr	s18, [pc, #260]	@ 8006f80 <neai_anomalydetection_detect+0x388>
 8006e7c:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006f8c <neai_anomalydetection_detect+0x394>
 8006e80:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006e84:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006e88:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e90:	d428      	bmi.n	8006ee4 <neai_anomalydetection_detect+0x2ec>
 8006e92:	2359      	movs	r3, #89	@ 0x59
 8006e94:	e704      	b.n	8006ca0 <neai_anomalydetection_detect+0xa8>
 8006e96:	eeb0 0a48 	vmov.f32	s0, s16
 8006e9a:	f002 fd87 	bl	80099ac <expf>
 8006e9e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8006ea2:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006ea6:	ed9f 9a36 	vldr	s18, [pc, #216]	@ 8006f80 <neai_anomalydetection_detect+0x388>
 8006eaa:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006f84 <neai_anomalydetection_detect+0x38c>
 8006eae:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006eb2:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8006eb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebe:	dc22      	bgt.n	8006f06 <neai_anomalydetection_detect+0x30e>
 8006ec0:	235b      	movs	r3, #91	@ 0x5b
 8006ec2:	e6ed      	b.n	8006ca0 <neai_anomalydetection_detect+0xa8>
 8006ec4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ec8:	f002 fd70 	bl	80099ac <expf>
 8006ecc:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006ed0:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006ed4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	d5c2      	bpl.n	8006e68 <neai_anomalydetection_detect+0x270>
 8006ee2:	e6dc      	b.n	8006c9e <neai_anomalydetection_detect+0xa6>
 8006ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8006ee8:	f002 fd60 	bl	80099ac <expf>
 8006eec:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006ef0:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006ef4:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8006ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efc:	edcd 7a01 	vstr	s15, [sp, #4]
 8006f00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f04:	e6cc      	b.n	8006ca0 <neai_anomalydetection_detect+0xa8>
 8006f06:	eeb0 0a48 	vmov.f32	s0, s16
 8006f0a:	f002 fd4f 	bl	80099ac <expf>
 8006f0e:	ee30 7a28 	vadd.f32	s14, s0, s17
 8006f12:	eec9 7a07 	vdiv.f32	s15, s18, s14
 8006f16:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8006f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1e:	edcd 7a01 	vstr	s15, [sp, #4]
 8006f22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f26:	e6bb      	b.n	8006ca0 <neai_anomalydetection_detect+0xa8>
 8006f28:	f002 fd76 	bl	8009a18 <sqrtf>
 8006f2c:	eef0 6a40 	vmov.f32	s13, s0
 8006f30:	e73f      	b.n	8006db2 <neai_anomalydetection_detect+0x1ba>
 8006f32:	bf00      	nop
 8006f34:	f3af 8000 	nop.w
 8006f38:	0a3d70a4 	.word	0x0a3d70a4
 8006f3c:	3ff4a3d7 	.word	0x3ff4a3d7
 8006f40:	a0000000 	.word	0xa0000000
 8006f44:	3fb99999 	.word	0x3fb99999
 8006f48:	147ae148 	.word	0x147ae148
 8006f4c:	3fe147ae 	.word	0x3fe147ae
 8006f50:	200001d8 	.word	0x200001d8
 8006f54:	200001dc 	.word	0x200001dc
 8006f58:	200001e4 	.word	0x200001e4
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	20000320 	.word	0x20000320
 8006f64:	00000000 	.word	0x00000000
 8006f68:	20001bb4 	.word	0x20001bb4
 8006f6c:	20001a7c 	.word	0x20001a7c
 8006f70:	3089705f 	.word	0x3089705f
 8006f74:	200001e8 	.word	0x200001e8
 8006f78:	3d60ff54 	.word	0x3d60ff54
 8006f7c:	c2200000 	.word	0xc2200000
 8006f80:	42c80000 	.word	0x42c80000
 8006f84:	42b60000 	.word	0x42b60000
 8006f88:	322bcc77 	.word	0x322bcc77
 8006f8c:	42b20000 	.word	0x42b20000

08006f90 <_fminf>:
 8006f90:	f002 bd74 	b.w	8009a7c <fminf>

08006f94 <neai_anomalydetection_init>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	f44f 626a 	mov.w	r2, #3744	@ 0xea0
 8006f9a:	ed2d 8b02 	vpush	{d8}
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4811      	ldr	r0, [pc, #68]	@ (8006fe8 <neai_anomalydetection_init+0x54>)
 8006fa2:	ed9f 8a12 	vldr	s16, [pc, #72]	@ 8006fec <neai_anomalydetection_init+0x58>
 8006fa6:	4c12      	ldr	r4, [pc, #72]	@ (8006ff0 <neai_anomalydetection_init+0x5c>)
 8006fa8:	f000 fd9d 	bl	8007ae6 <memset>
 8006fac:	4a11      	ldr	r2, [pc, #68]	@ (8006ff4 <neai_anomalydetection_init+0x60>)
 8006fae:	4812      	ldr	r0, [pc, #72]	@ (8006ff8 <neai_anomalydetection_init+0x64>)
 8006fb0:	4912      	ldr	r1, [pc, #72]	@ (8006ffc <neai_anomalydetection_init+0x68>)
 8006fb2:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8007000 <neai_anomalydetection_init+0x6c>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	8013      	strh	r3, [r2, #0]
 8006fba:	eeb0 0a48 	vmov.f32	s0, s16
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	7002      	strb	r2, [r0, #0]
 8006fc2:	700a      	strb	r2, [r1, #0]
 8006fc4:	7023      	strb	r3, [r4, #0]
 8006fc6:	f7ff ffe3 	bl	8006f90 <_fminf>
 8006fca:	eeb4 0a48 	vcmp.f32	s0, s16
 8006fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd2:	bf1c      	itt	ne
 8006fd4:	2081      	movne	r0, #129	@ 0x81
 8006fd6:	7020      	strbne	r0, [r4, #0]
 8006fd8:	ecbd 8b02 	vpop	{d8}
 8006fdc:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <neai_anomalydetection_init+0x70>)
 8006fde:	bf08      	it	eq
 8006fe0:	7820      	ldrbeq	r0, [r4, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	bd10      	pop	{r4, pc}
 8006fe8:	20000320 	.word	0x20000320
 8006fec:	3f8ccccd 	.word	0x3f8ccccd
 8006ff0:	200001d8 	.word	0x200001d8
 8006ff4:	200001e2 	.word	0x200001e2
 8006ff8:	200001e4 	.word	0x200001e4
 8006ffc:	200001e0 	.word	0x200001e0
 8007000:	40066666 	.word	0x40066666
 8007004:	200001dc 	.word	0x200001dc

08007008 <__cvt>:
 8007008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	ec57 6b10 	vmov	r6, r7, d0
 8007010:	2f00      	cmp	r7, #0
 8007012:	460c      	mov	r4, r1
 8007014:	4619      	mov	r1, r3
 8007016:	463b      	mov	r3, r7
 8007018:	bfbb      	ittet	lt
 800701a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800701e:	461f      	movlt	r7, r3
 8007020:	2300      	movge	r3, #0
 8007022:	232d      	movlt	r3, #45	@ 0x2d
 8007024:	700b      	strb	r3, [r1, #0]
 8007026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800702c:	4691      	mov	r9, r2
 800702e:	f023 0820 	bic.w	r8, r3, #32
 8007032:	bfbc      	itt	lt
 8007034:	4632      	movlt	r2, r6
 8007036:	4616      	movlt	r6, r2
 8007038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800703c:	d005      	beq.n	800704a <__cvt+0x42>
 800703e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007042:	d100      	bne.n	8007046 <__cvt+0x3e>
 8007044:	3401      	adds	r4, #1
 8007046:	2102      	movs	r1, #2
 8007048:	e000      	b.n	800704c <__cvt+0x44>
 800704a:	2103      	movs	r1, #3
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	ab02      	add	r3, sp, #8
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	ec47 6b10 	vmov	d0, r6, r7
 8007058:	4653      	mov	r3, sl
 800705a:	4622      	mov	r2, r4
 800705c:	f000 fe5c 	bl	8007d18 <_dtoa_r>
 8007060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007064:	4605      	mov	r5, r0
 8007066:	d119      	bne.n	800709c <__cvt+0x94>
 8007068:	f019 0f01 	tst.w	r9, #1
 800706c:	d00e      	beq.n	800708c <__cvt+0x84>
 800706e:	eb00 0904 	add.w	r9, r0, r4
 8007072:	2200      	movs	r2, #0
 8007074:	2300      	movs	r3, #0
 8007076:	4630      	mov	r0, r6
 8007078:	4639      	mov	r1, r7
 800707a:	f7f9 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800707e:	b108      	cbz	r0, 8007084 <__cvt+0x7c>
 8007080:	f8cd 900c 	str.w	r9, [sp, #12]
 8007084:	2230      	movs	r2, #48	@ 0x30
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	454b      	cmp	r3, r9
 800708a:	d31e      	bcc.n	80070ca <__cvt+0xc2>
 800708c:	9b03      	ldr	r3, [sp, #12]
 800708e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007090:	1b5b      	subs	r3, r3, r5
 8007092:	4628      	mov	r0, r5
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	b004      	add	sp, #16
 8007098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070a0:	eb00 0904 	add.w	r9, r0, r4
 80070a4:	d1e5      	bne.n	8007072 <__cvt+0x6a>
 80070a6:	7803      	ldrb	r3, [r0, #0]
 80070a8:	2b30      	cmp	r3, #48	@ 0x30
 80070aa:	d10a      	bne.n	80070c2 <__cvt+0xba>
 80070ac:	2200      	movs	r2, #0
 80070ae:	2300      	movs	r3, #0
 80070b0:	4630      	mov	r0, r6
 80070b2:	4639      	mov	r1, r7
 80070b4:	f7f9 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80070b8:	b918      	cbnz	r0, 80070c2 <__cvt+0xba>
 80070ba:	f1c4 0401 	rsb	r4, r4, #1
 80070be:	f8ca 4000 	str.w	r4, [sl]
 80070c2:	f8da 3000 	ldr.w	r3, [sl]
 80070c6:	4499      	add	r9, r3
 80070c8:	e7d3      	b.n	8007072 <__cvt+0x6a>
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	9103      	str	r1, [sp, #12]
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	e7d9      	b.n	8007086 <__cvt+0x7e>

080070d2 <__exponent>:
 80070d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d4:	2900      	cmp	r1, #0
 80070d6:	bfba      	itte	lt
 80070d8:	4249      	neglt	r1, r1
 80070da:	232d      	movlt	r3, #45	@ 0x2d
 80070dc:	232b      	movge	r3, #43	@ 0x2b
 80070de:	2909      	cmp	r1, #9
 80070e0:	7002      	strb	r2, [r0, #0]
 80070e2:	7043      	strb	r3, [r0, #1]
 80070e4:	dd29      	ble.n	800713a <__exponent+0x68>
 80070e6:	f10d 0307 	add.w	r3, sp, #7
 80070ea:	461d      	mov	r5, r3
 80070ec:	270a      	movs	r7, #10
 80070ee:	461a      	mov	r2, r3
 80070f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80070f4:	fb07 1416 	mls	r4, r7, r6, r1
 80070f8:	3430      	adds	r4, #48	@ 0x30
 80070fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80070fe:	460c      	mov	r4, r1
 8007100:	2c63      	cmp	r4, #99	@ 0x63
 8007102:	f103 33ff 	add.w	r3, r3, #4294967295
 8007106:	4631      	mov	r1, r6
 8007108:	dcf1      	bgt.n	80070ee <__exponent+0x1c>
 800710a:	3130      	adds	r1, #48	@ 0x30
 800710c:	1e94      	subs	r4, r2, #2
 800710e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007112:	1c41      	adds	r1, r0, #1
 8007114:	4623      	mov	r3, r4
 8007116:	42ab      	cmp	r3, r5
 8007118:	d30a      	bcc.n	8007130 <__exponent+0x5e>
 800711a:	f10d 0309 	add.w	r3, sp, #9
 800711e:	1a9b      	subs	r3, r3, r2
 8007120:	42ac      	cmp	r4, r5
 8007122:	bf88      	it	hi
 8007124:	2300      	movhi	r3, #0
 8007126:	3302      	adds	r3, #2
 8007128:	4403      	add	r3, r0
 800712a:	1a18      	subs	r0, r3, r0
 800712c:	b003      	add	sp, #12
 800712e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007130:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007134:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007138:	e7ed      	b.n	8007116 <__exponent+0x44>
 800713a:	2330      	movs	r3, #48	@ 0x30
 800713c:	3130      	adds	r1, #48	@ 0x30
 800713e:	7083      	strb	r3, [r0, #2]
 8007140:	70c1      	strb	r1, [r0, #3]
 8007142:	1d03      	adds	r3, r0, #4
 8007144:	e7f1      	b.n	800712a <__exponent+0x58>
	...

08007148 <_printf_float>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	b08d      	sub	sp, #52	@ 0x34
 800714e:	460c      	mov	r4, r1
 8007150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007154:	4616      	mov	r6, r2
 8007156:	461f      	mov	r7, r3
 8007158:	4605      	mov	r5, r0
 800715a:	f000 fccd 	bl	8007af8 <_localeconv_r>
 800715e:	6803      	ldr	r3, [r0, #0]
 8007160:	9304      	str	r3, [sp, #16]
 8007162:	4618      	mov	r0, r3
 8007164:	f7f9 f884 	bl	8000270 <strlen>
 8007168:	2300      	movs	r3, #0
 800716a:	930a      	str	r3, [sp, #40]	@ 0x28
 800716c:	f8d8 3000 	ldr.w	r3, [r8]
 8007170:	9005      	str	r0, [sp, #20]
 8007172:	3307      	adds	r3, #7
 8007174:	f023 0307 	bic.w	r3, r3, #7
 8007178:	f103 0208 	add.w	r2, r3, #8
 800717c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007180:	f8d4 b000 	ldr.w	fp, [r4]
 8007184:	f8c8 2000 	str.w	r2, [r8]
 8007188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800718c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007190:	9307      	str	r3, [sp, #28]
 8007192:	f8cd 8018 	str.w	r8, [sp, #24]
 8007196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800719a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719e:	4b9c      	ldr	r3, [pc, #624]	@ (8007410 <_printf_float+0x2c8>)
 80071a0:	f04f 32ff 	mov.w	r2, #4294967295
 80071a4:	f7f9 fcc2 	bl	8000b2c <__aeabi_dcmpun>
 80071a8:	bb70      	cbnz	r0, 8007208 <_printf_float+0xc0>
 80071aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ae:	4b98      	ldr	r3, [pc, #608]	@ (8007410 <_printf_float+0x2c8>)
 80071b0:	f04f 32ff 	mov.w	r2, #4294967295
 80071b4:	f7f9 fc9c 	bl	8000af0 <__aeabi_dcmple>
 80071b8:	bb30      	cbnz	r0, 8007208 <_printf_float+0xc0>
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f9 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80071c6:	b110      	cbz	r0, 80071ce <_printf_float+0x86>
 80071c8:	232d      	movs	r3, #45	@ 0x2d
 80071ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ce:	4a91      	ldr	r2, [pc, #580]	@ (8007414 <_printf_float+0x2cc>)
 80071d0:	4b91      	ldr	r3, [pc, #580]	@ (8007418 <_printf_float+0x2d0>)
 80071d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80071d6:	bf94      	ite	ls
 80071d8:	4690      	movls	r8, r2
 80071da:	4698      	movhi	r8, r3
 80071dc:	2303      	movs	r3, #3
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	f02b 0304 	bic.w	r3, fp, #4
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	f04f 0900 	mov.w	r9, #0
 80071ea:	9700      	str	r7, [sp, #0]
 80071ec:	4633      	mov	r3, r6
 80071ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 f9d2 	bl	800759c <_printf_common>
 80071f8:	3001      	adds	r0, #1
 80071fa:	f040 808d 	bne.w	8007318 <_printf_float+0x1d0>
 80071fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007202:	b00d      	add	sp, #52	@ 0x34
 8007204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	4640      	mov	r0, r8
 800720e:	4649      	mov	r1, r9
 8007210:	f7f9 fc8c 	bl	8000b2c <__aeabi_dcmpun>
 8007214:	b140      	cbz	r0, 8007228 <_printf_float+0xe0>
 8007216:	464b      	mov	r3, r9
 8007218:	2b00      	cmp	r3, #0
 800721a:	bfbc      	itt	lt
 800721c:	232d      	movlt	r3, #45	@ 0x2d
 800721e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007222:	4a7e      	ldr	r2, [pc, #504]	@ (800741c <_printf_float+0x2d4>)
 8007224:	4b7e      	ldr	r3, [pc, #504]	@ (8007420 <_printf_float+0x2d8>)
 8007226:	e7d4      	b.n	80071d2 <_printf_float+0x8a>
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800722e:	9206      	str	r2, [sp, #24]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	d13b      	bne.n	80072ac <_printf_float+0x164>
 8007234:	2306      	movs	r3, #6
 8007236:	6063      	str	r3, [r4, #4]
 8007238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800723c:	2300      	movs	r3, #0
 800723e:	6022      	str	r2, [r4, #0]
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	ab0a      	add	r3, sp, #40	@ 0x28
 8007244:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007248:	ab09      	add	r3, sp, #36	@ 0x24
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	6861      	ldr	r1, [r4, #4]
 800724e:	ec49 8b10 	vmov	d0, r8, r9
 8007252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007256:	4628      	mov	r0, r5
 8007258:	f7ff fed6 	bl	8007008 <__cvt>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007260:	2b47      	cmp	r3, #71	@ 0x47
 8007262:	4680      	mov	r8, r0
 8007264:	d129      	bne.n	80072ba <_printf_float+0x172>
 8007266:	1cc8      	adds	r0, r1, #3
 8007268:	db02      	blt.n	8007270 <_printf_float+0x128>
 800726a:	6863      	ldr	r3, [r4, #4]
 800726c:	4299      	cmp	r1, r3
 800726e:	dd41      	ble.n	80072f4 <_printf_float+0x1ac>
 8007270:	f1aa 0a02 	sub.w	sl, sl, #2
 8007274:	fa5f fa8a 	uxtb.w	sl, sl
 8007278:	3901      	subs	r1, #1
 800727a:	4652      	mov	r2, sl
 800727c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007280:	9109      	str	r1, [sp, #36]	@ 0x24
 8007282:	f7ff ff26 	bl	80070d2 <__exponent>
 8007286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007288:	1813      	adds	r3, r2, r0
 800728a:	2a01      	cmp	r2, #1
 800728c:	4681      	mov	r9, r0
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	dc02      	bgt.n	8007298 <_printf_float+0x150>
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	07d2      	lsls	r2, r2, #31
 8007296:	d501      	bpl.n	800729c <_printf_float+0x154>
 8007298:	3301      	adds	r3, #1
 800729a:	6123      	str	r3, [r4, #16]
 800729c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0a2      	beq.n	80071ea <_printf_float+0xa2>
 80072a4:	232d      	movs	r3, #45	@ 0x2d
 80072a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072aa:	e79e      	b.n	80071ea <_printf_float+0xa2>
 80072ac:	9a06      	ldr	r2, [sp, #24]
 80072ae:	2a47      	cmp	r2, #71	@ 0x47
 80072b0:	d1c2      	bne.n	8007238 <_printf_float+0xf0>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1c0      	bne.n	8007238 <_printf_float+0xf0>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7bd      	b.n	8007236 <_printf_float+0xee>
 80072ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80072be:	d9db      	bls.n	8007278 <_printf_float+0x130>
 80072c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80072c4:	d118      	bne.n	80072f8 <_printf_float+0x1b0>
 80072c6:	2900      	cmp	r1, #0
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	dd0b      	ble.n	80072e4 <_printf_float+0x19c>
 80072cc:	6121      	str	r1, [r4, #16]
 80072ce:	b913      	cbnz	r3, 80072d6 <_printf_float+0x18e>
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	07d0      	lsls	r0, r2, #31
 80072d4:	d502      	bpl.n	80072dc <_printf_float+0x194>
 80072d6:	3301      	adds	r3, #1
 80072d8:	440b      	add	r3, r1
 80072da:	6123      	str	r3, [r4, #16]
 80072dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80072de:	f04f 0900 	mov.w	r9, #0
 80072e2:	e7db      	b.n	800729c <_printf_float+0x154>
 80072e4:	b913      	cbnz	r3, 80072ec <_printf_float+0x1a4>
 80072e6:	6822      	ldr	r2, [r4, #0]
 80072e8:	07d2      	lsls	r2, r2, #31
 80072ea:	d501      	bpl.n	80072f0 <_printf_float+0x1a8>
 80072ec:	3302      	adds	r3, #2
 80072ee:	e7f4      	b.n	80072da <_printf_float+0x192>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7f2      	b.n	80072da <_printf_float+0x192>
 80072f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80072f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072fa:	4299      	cmp	r1, r3
 80072fc:	db05      	blt.n	800730a <_printf_float+0x1c2>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	6121      	str	r1, [r4, #16]
 8007302:	07d8      	lsls	r0, r3, #31
 8007304:	d5ea      	bpl.n	80072dc <_printf_float+0x194>
 8007306:	1c4b      	adds	r3, r1, #1
 8007308:	e7e7      	b.n	80072da <_printf_float+0x192>
 800730a:	2900      	cmp	r1, #0
 800730c:	bfd4      	ite	le
 800730e:	f1c1 0202 	rsble	r2, r1, #2
 8007312:	2201      	movgt	r2, #1
 8007314:	4413      	add	r3, r2
 8007316:	e7e0      	b.n	80072da <_printf_float+0x192>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	055a      	lsls	r2, r3, #21
 800731c:	d407      	bmi.n	800732e <_printf_float+0x1e6>
 800731e:	6923      	ldr	r3, [r4, #16]
 8007320:	4642      	mov	r2, r8
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	d12b      	bne.n	8007384 <_printf_float+0x23c>
 800732c:	e767      	b.n	80071fe <_printf_float+0xb6>
 800732e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007332:	f240 80dd 	bls.w	80074f0 <_printf_float+0x3a8>
 8007336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	f7f9 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007342:	2800      	cmp	r0, #0
 8007344:	d033      	beq.n	80073ae <_printf_float+0x266>
 8007346:	4a37      	ldr	r2, [pc, #220]	@ (8007424 <_printf_float+0x2dc>)
 8007348:	2301      	movs	r3, #1
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	f43f af54 	beq.w	80071fe <_printf_float+0xb6>
 8007356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800735a:	4543      	cmp	r3, r8
 800735c:	db02      	blt.n	8007364 <_printf_float+0x21c>
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	07d8      	lsls	r0, r3, #31
 8007362:	d50f      	bpl.n	8007384 <_printf_float+0x23c>
 8007364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	47b8      	blx	r7
 800736e:	3001      	adds	r0, #1
 8007370:	f43f af45 	beq.w	80071fe <_printf_float+0xb6>
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	f108 38ff 	add.w	r8, r8, #4294967295
 800737c:	f104 0a1a 	add.w	sl, r4, #26
 8007380:	45c8      	cmp	r8, r9
 8007382:	dc09      	bgt.n	8007398 <_printf_float+0x250>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	079b      	lsls	r3, r3, #30
 8007388:	f100 8103 	bmi.w	8007592 <_printf_float+0x44a>
 800738c:	68e0      	ldr	r0, [r4, #12]
 800738e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007390:	4298      	cmp	r0, r3
 8007392:	bfb8      	it	lt
 8007394:	4618      	movlt	r0, r3
 8007396:	e734      	b.n	8007202 <_printf_float+0xba>
 8007398:	2301      	movs	r3, #1
 800739a:	4652      	mov	r2, sl
 800739c:	4631      	mov	r1, r6
 800739e:	4628      	mov	r0, r5
 80073a0:	47b8      	blx	r7
 80073a2:	3001      	adds	r0, #1
 80073a4:	f43f af2b 	beq.w	80071fe <_printf_float+0xb6>
 80073a8:	f109 0901 	add.w	r9, r9, #1
 80073ac:	e7e8      	b.n	8007380 <_printf_float+0x238>
 80073ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dc39      	bgt.n	8007428 <_printf_float+0x2e0>
 80073b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007424 <_printf_float+0x2dc>)
 80073b6:	2301      	movs	r3, #1
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f af1d 	beq.w	80071fe <_printf_float+0xb6>
 80073c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80073c8:	ea59 0303 	orrs.w	r3, r9, r3
 80073cc:	d102      	bne.n	80073d4 <_printf_float+0x28c>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	07d9      	lsls	r1, r3, #31
 80073d2:	d5d7      	bpl.n	8007384 <_printf_float+0x23c>
 80073d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	47b8      	blx	r7
 80073de:	3001      	adds	r0, #1
 80073e0:	f43f af0d 	beq.w	80071fe <_printf_float+0xb6>
 80073e4:	f04f 0a00 	mov.w	sl, #0
 80073e8:	f104 0b1a 	add.w	fp, r4, #26
 80073ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ee:	425b      	negs	r3, r3
 80073f0:	4553      	cmp	r3, sl
 80073f2:	dc01      	bgt.n	80073f8 <_printf_float+0x2b0>
 80073f4:	464b      	mov	r3, r9
 80073f6:	e793      	b.n	8007320 <_printf_float+0x1d8>
 80073f8:	2301      	movs	r3, #1
 80073fa:	465a      	mov	r2, fp
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f aefb 	beq.w	80071fe <_printf_float+0xb6>
 8007408:	f10a 0a01 	add.w	sl, sl, #1
 800740c:	e7ee      	b.n	80073ec <_printf_float+0x2a4>
 800740e:	bf00      	nop
 8007410:	7fefffff 	.word	0x7fefffff
 8007414:	0800a0d8 	.word	0x0800a0d8
 8007418:	0800a0dc 	.word	0x0800a0dc
 800741c:	0800a0e0 	.word	0x0800a0e0
 8007420:	0800a0e4 	.word	0x0800a0e4
 8007424:	0800a0e8 	.word	0x0800a0e8
 8007428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800742a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800742e:	4553      	cmp	r3, sl
 8007430:	bfa8      	it	ge
 8007432:	4653      	movge	r3, sl
 8007434:	2b00      	cmp	r3, #0
 8007436:	4699      	mov	r9, r3
 8007438:	dc36      	bgt.n	80074a8 <_printf_float+0x360>
 800743a:	f04f 0b00 	mov.w	fp, #0
 800743e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007442:	f104 021a 	add.w	r2, r4, #26
 8007446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007448:	9306      	str	r3, [sp, #24]
 800744a:	eba3 0309 	sub.w	r3, r3, r9
 800744e:	455b      	cmp	r3, fp
 8007450:	dc31      	bgt.n	80074b6 <_printf_float+0x36e>
 8007452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007454:	459a      	cmp	sl, r3
 8007456:	dc3a      	bgt.n	80074ce <_printf_float+0x386>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07da      	lsls	r2, r3, #31
 800745c:	d437      	bmi.n	80074ce <_printf_float+0x386>
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	ebaa 0903 	sub.w	r9, sl, r3
 8007464:	9b06      	ldr	r3, [sp, #24]
 8007466:	ebaa 0303 	sub.w	r3, sl, r3
 800746a:	4599      	cmp	r9, r3
 800746c:	bfa8      	it	ge
 800746e:	4699      	movge	r9, r3
 8007470:	f1b9 0f00 	cmp.w	r9, #0
 8007474:	dc33      	bgt.n	80074de <_printf_float+0x396>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800747e:	f104 0b1a 	add.w	fp, r4, #26
 8007482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007484:	ebaa 0303 	sub.w	r3, sl, r3
 8007488:	eba3 0309 	sub.w	r3, r3, r9
 800748c:	4543      	cmp	r3, r8
 800748e:	f77f af79 	ble.w	8007384 <_printf_float+0x23c>
 8007492:	2301      	movs	r3, #1
 8007494:	465a      	mov	r2, fp
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f aeae 	beq.w	80071fe <_printf_float+0xb6>
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	e7ec      	b.n	8007482 <_printf_float+0x33a>
 80074a8:	4642      	mov	r2, r8
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	d1c2      	bne.n	800743a <_printf_float+0x2f2>
 80074b4:	e6a3      	b.n	80071fe <_printf_float+0xb6>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	9206      	str	r2, [sp, #24]
 80074be:	47b8      	blx	r7
 80074c0:	3001      	adds	r0, #1
 80074c2:	f43f ae9c 	beq.w	80071fe <_printf_float+0xb6>
 80074c6:	9a06      	ldr	r2, [sp, #24]
 80074c8:	f10b 0b01 	add.w	fp, fp, #1
 80074cc:	e7bb      	b.n	8007446 <_printf_float+0x2fe>
 80074ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	d1c0      	bne.n	800745e <_printf_float+0x316>
 80074dc:	e68f      	b.n	80071fe <_printf_float+0xb6>
 80074de:	9a06      	ldr	r2, [sp, #24]
 80074e0:	464b      	mov	r3, r9
 80074e2:	4442      	add	r2, r8
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	d1c3      	bne.n	8007476 <_printf_float+0x32e>
 80074ee:	e686      	b.n	80071fe <_printf_float+0xb6>
 80074f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074f4:	f1ba 0f01 	cmp.w	sl, #1
 80074f8:	dc01      	bgt.n	80074fe <_printf_float+0x3b6>
 80074fa:	07db      	lsls	r3, r3, #31
 80074fc:	d536      	bpl.n	800756c <_printf_float+0x424>
 80074fe:	2301      	movs	r3, #1
 8007500:	4642      	mov	r2, r8
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f ae78 	beq.w	80071fe <_printf_float+0xb6>
 800750e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007512:	4631      	mov	r1, r6
 8007514:	4628      	mov	r0, r5
 8007516:	47b8      	blx	r7
 8007518:	3001      	adds	r0, #1
 800751a:	f43f ae70 	beq.w	80071fe <_printf_float+0xb6>
 800751e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007522:	2200      	movs	r2, #0
 8007524:	2300      	movs	r3, #0
 8007526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800752a:	f7f9 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800752e:	b9c0      	cbnz	r0, 8007562 <_printf_float+0x41a>
 8007530:	4653      	mov	r3, sl
 8007532:	f108 0201 	add.w	r2, r8, #1
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	d10c      	bne.n	800755a <_printf_float+0x412>
 8007540:	e65d      	b.n	80071fe <_printf_float+0xb6>
 8007542:	2301      	movs	r3, #1
 8007544:	465a      	mov	r2, fp
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	f43f ae56 	beq.w	80071fe <_printf_float+0xb6>
 8007552:	f108 0801 	add.w	r8, r8, #1
 8007556:	45d0      	cmp	r8, sl
 8007558:	dbf3      	blt.n	8007542 <_printf_float+0x3fa>
 800755a:	464b      	mov	r3, r9
 800755c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007560:	e6df      	b.n	8007322 <_printf_float+0x1da>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	f104 0b1a 	add.w	fp, r4, #26
 800756a:	e7f4      	b.n	8007556 <_printf_float+0x40e>
 800756c:	2301      	movs	r3, #1
 800756e:	4642      	mov	r2, r8
 8007570:	e7e1      	b.n	8007536 <_printf_float+0x3ee>
 8007572:	2301      	movs	r3, #1
 8007574:	464a      	mov	r2, r9
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f ae3e 	beq.w	80071fe <_printf_float+0xb6>
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800758a:	1a5b      	subs	r3, r3, r1
 800758c:	4543      	cmp	r3, r8
 800758e:	dcf0      	bgt.n	8007572 <_printf_float+0x42a>
 8007590:	e6fc      	b.n	800738c <_printf_float+0x244>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	f104 0919 	add.w	r9, r4, #25
 800759a:	e7f4      	b.n	8007586 <_printf_float+0x43e>

0800759c <_printf_common>:
 800759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a0:	4616      	mov	r6, r2
 80075a2:	4698      	mov	r8, r3
 80075a4:	688a      	ldr	r2, [r1, #8]
 80075a6:	690b      	ldr	r3, [r1, #16]
 80075a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075ac:	4293      	cmp	r3, r2
 80075ae:	bfb8      	it	lt
 80075b0:	4613      	movlt	r3, r2
 80075b2:	6033      	str	r3, [r6, #0]
 80075b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075b8:	4607      	mov	r7, r0
 80075ba:	460c      	mov	r4, r1
 80075bc:	b10a      	cbz	r2, 80075c2 <_printf_common+0x26>
 80075be:	3301      	adds	r3, #1
 80075c0:	6033      	str	r3, [r6, #0]
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	0699      	lsls	r1, r3, #26
 80075c6:	bf42      	ittt	mi
 80075c8:	6833      	ldrmi	r3, [r6, #0]
 80075ca:	3302      	addmi	r3, #2
 80075cc:	6033      	strmi	r3, [r6, #0]
 80075ce:	6825      	ldr	r5, [r4, #0]
 80075d0:	f015 0506 	ands.w	r5, r5, #6
 80075d4:	d106      	bne.n	80075e4 <_printf_common+0x48>
 80075d6:	f104 0a19 	add.w	sl, r4, #25
 80075da:	68e3      	ldr	r3, [r4, #12]
 80075dc:	6832      	ldr	r2, [r6, #0]
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	42ab      	cmp	r3, r5
 80075e2:	dc26      	bgt.n	8007632 <_printf_common+0x96>
 80075e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	3b00      	subs	r3, #0
 80075ec:	bf18      	it	ne
 80075ee:	2301      	movne	r3, #1
 80075f0:	0692      	lsls	r2, r2, #26
 80075f2:	d42b      	bmi.n	800764c <_printf_common+0xb0>
 80075f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075f8:	4641      	mov	r1, r8
 80075fa:	4638      	mov	r0, r7
 80075fc:	47c8      	blx	r9
 80075fe:	3001      	adds	r0, #1
 8007600:	d01e      	beq.n	8007640 <_printf_common+0xa4>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	6922      	ldr	r2, [r4, #16]
 8007606:	f003 0306 	and.w	r3, r3, #6
 800760a:	2b04      	cmp	r3, #4
 800760c:	bf02      	ittt	eq
 800760e:	68e5      	ldreq	r5, [r4, #12]
 8007610:	6833      	ldreq	r3, [r6, #0]
 8007612:	1aed      	subeq	r5, r5, r3
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	bf0c      	ite	eq
 8007618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800761c:	2500      	movne	r5, #0
 800761e:	4293      	cmp	r3, r2
 8007620:	bfc4      	itt	gt
 8007622:	1a9b      	subgt	r3, r3, r2
 8007624:	18ed      	addgt	r5, r5, r3
 8007626:	2600      	movs	r6, #0
 8007628:	341a      	adds	r4, #26
 800762a:	42b5      	cmp	r5, r6
 800762c:	d11a      	bne.n	8007664 <_printf_common+0xc8>
 800762e:	2000      	movs	r0, #0
 8007630:	e008      	b.n	8007644 <_printf_common+0xa8>
 8007632:	2301      	movs	r3, #1
 8007634:	4652      	mov	r2, sl
 8007636:	4641      	mov	r1, r8
 8007638:	4638      	mov	r0, r7
 800763a:	47c8      	blx	r9
 800763c:	3001      	adds	r0, #1
 800763e:	d103      	bne.n	8007648 <_printf_common+0xac>
 8007640:	f04f 30ff 	mov.w	r0, #4294967295
 8007644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007648:	3501      	adds	r5, #1
 800764a:	e7c6      	b.n	80075da <_printf_common+0x3e>
 800764c:	18e1      	adds	r1, r4, r3
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	2030      	movs	r0, #48	@ 0x30
 8007652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007656:	4422      	add	r2, r4
 8007658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800765c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007660:	3302      	adds	r3, #2
 8007662:	e7c7      	b.n	80075f4 <_printf_common+0x58>
 8007664:	2301      	movs	r3, #1
 8007666:	4622      	mov	r2, r4
 8007668:	4641      	mov	r1, r8
 800766a:	4638      	mov	r0, r7
 800766c:	47c8      	blx	r9
 800766e:	3001      	adds	r0, #1
 8007670:	d0e6      	beq.n	8007640 <_printf_common+0xa4>
 8007672:	3601      	adds	r6, #1
 8007674:	e7d9      	b.n	800762a <_printf_common+0x8e>
	...

08007678 <_printf_i>:
 8007678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	7e0f      	ldrb	r7, [r1, #24]
 800767e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007680:	2f78      	cmp	r7, #120	@ 0x78
 8007682:	4691      	mov	r9, r2
 8007684:	4680      	mov	r8, r0
 8007686:	460c      	mov	r4, r1
 8007688:	469a      	mov	sl, r3
 800768a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800768e:	d807      	bhi.n	80076a0 <_printf_i+0x28>
 8007690:	2f62      	cmp	r7, #98	@ 0x62
 8007692:	d80a      	bhi.n	80076aa <_printf_i+0x32>
 8007694:	2f00      	cmp	r7, #0
 8007696:	f000 80d2 	beq.w	800783e <_printf_i+0x1c6>
 800769a:	2f58      	cmp	r7, #88	@ 0x58
 800769c:	f000 80b9 	beq.w	8007812 <_printf_i+0x19a>
 80076a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076a8:	e03a      	b.n	8007720 <_printf_i+0xa8>
 80076aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076ae:	2b15      	cmp	r3, #21
 80076b0:	d8f6      	bhi.n	80076a0 <_printf_i+0x28>
 80076b2:	a101      	add	r1, pc, #4	@ (adr r1, 80076b8 <_printf_i+0x40>)
 80076b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007725 	.word	0x08007725
 80076c0:	080076a1 	.word	0x080076a1
 80076c4:	080076a1 	.word	0x080076a1
 80076c8:	080076a1 	.word	0x080076a1
 80076cc:	080076a1 	.word	0x080076a1
 80076d0:	08007725 	.word	0x08007725
 80076d4:	080076a1 	.word	0x080076a1
 80076d8:	080076a1 	.word	0x080076a1
 80076dc:	080076a1 	.word	0x080076a1
 80076e0:	080076a1 	.word	0x080076a1
 80076e4:	08007825 	.word	0x08007825
 80076e8:	0800774f 	.word	0x0800774f
 80076ec:	080077df 	.word	0x080077df
 80076f0:	080076a1 	.word	0x080076a1
 80076f4:	080076a1 	.word	0x080076a1
 80076f8:	08007847 	.word	0x08007847
 80076fc:	080076a1 	.word	0x080076a1
 8007700:	0800774f 	.word	0x0800774f
 8007704:	080076a1 	.word	0x080076a1
 8007708:	080076a1 	.word	0x080076a1
 800770c:	080077e7 	.word	0x080077e7
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	1d1a      	adds	r2, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6032      	str	r2, [r6, #0]
 8007718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800771c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007720:	2301      	movs	r3, #1
 8007722:	e09d      	b.n	8007860 <_printf_i+0x1e8>
 8007724:	6833      	ldr	r3, [r6, #0]
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	6031      	str	r1, [r6, #0]
 800772c:	0606      	lsls	r6, r0, #24
 800772e:	d501      	bpl.n	8007734 <_printf_i+0xbc>
 8007730:	681d      	ldr	r5, [r3, #0]
 8007732:	e003      	b.n	800773c <_printf_i+0xc4>
 8007734:	0645      	lsls	r5, r0, #25
 8007736:	d5fb      	bpl.n	8007730 <_printf_i+0xb8>
 8007738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800773c:	2d00      	cmp	r5, #0
 800773e:	da03      	bge.n	8007748 <_printf_i+0xd0>
 8007740:	232d      	movs	r3, #45	@ 0x2d
 8007742:	426d      	negs	r5, r5
 8007744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007748:	4859      	ldr	r0, [pc, #356]	@ (80078b0 <_printf_i+0x238>)
 800774a:	230a      	movs	r3, #10
 800774c:	e011      	b.n	8007772 <_printf_i+0xfa>
 800774e:	6821      	ldr	r1, [r4, #0]
 8007750:	6833      	ldr	r3, [r6, #0]
 8007752:	0608      	lsls	r0, r1, #24
 8007754:	f853 5b04 	ldr.w	r5, [r3], #4
 8007758:	d402      	bmi.n	8007760 <_printf_i+0xe8>
 800775a:	0649      	lsls	r1, r1, #25
 800775c:	bf48      	it	mi
 800775e:	b2ad      	uxthmi	r5, r5
 8007760:	2f6f      	cmp	r7, #111	@ 0x6f
 8007762:	4853      	ldr	r0, [pc, #332]	@ (80078b0 <_printf_i+0x238>)
 8007764:	6033      	str	r3, [r6, #0]
 8007766:	bf14      	ite	ne
 8007768:	230a      	movne	r3, #10
 800776a:	2308      	moveq	r3, #8
 800776c:	2100      	movs	r1, #0
 800776e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007772:	6866      	ldr	r6, [r4, #4]
 8007774:	60a6      	str	r6, [r4, #8]
 8007776:	2e00      	cmp	r6, #0
 8007778:	bfa2      	ittt	ge
 800777a:	6821      	ldrge	r1, [r4, #0]
 800777c:	f021 0104 	bicge.w	r1, r1, #4
 8007780:	6021      	strge	r1, [r4, #0]
 8007782:	b90d      	cbnz	r5, 8007788 <_printf_i+0x110>
 8007784:	2e00      	cmp	r6, #0
 8007786:	d04b      	beq.n	8007820 <_printf_i+0x1a8>
 8007788:	4616      	mov	r6, r2
 800778a:	fbb5 f1f3 	udiv	r1, r5, r3
 800778e:	fb03 5711 	mls	r7, r3, r1, r5
 8007792:	5dc7      	ldrb	r7, [r0, r7]
 8007794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007798:	462f      	mov	r7, r5
 800779a:	42bb      	cmp	r3, r7
 800779c:	460d      	mov	r5, r1
 800779e:	d9f4      	bls.n	800778a <_printf_i+0x112>
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d10b      	bne.n	80077bc <_printf_i+0x144>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	07df      	lsls	r7, r3, #31
 80077a8:	d508      	bpl.n	80077bc <_printf_i+0x144>
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	4299      	cmp	r1, r3
 80077b0:	bfde      	ittt	le
 80077b2:	2330      	movle	r3, #48	@ 0x30
 80077b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077bc:	1b92      	subs	r2, r2, r6
 80077be:	6122      	str	r2, [r4, #16]
 80077c0:	f8cd a000 	str.w	sl, [sp]
 80077c4:	464b      	mov	r3, r9
 80077c6:	aa03      	add	r2, sp, #12
 80077c8:	4621      	mov	r1, r4
 80077ca:	4640      	mov	r0, r8
 80077cc:	f7ff fee6 	bl	800759c <_printf_common>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d14a      	bne.n	800786a <_printf_i+0x1f2>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	b004      	add	sp, #16
 80077da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	f043 0320 	orr.w	r3, r3, #32
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	4833      	ldr	r0, [pc, #204]	@ (80078b4 <_printf_i+0x23c>)
 80077e8:	2778      	movs	r7, #120	@ 0x78
 80077ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6831      	ldr	r1, [r6, #0]
 80077f2:	061f      	lsls	r7, r3, #24
 80077f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80077f8:	d402      	bmi.n	8007800 <_printf_i+0x188>
 80077fa:	065f      	lsls	r7, r3, #25
 80077fc:	bf48      	it	mi
 80077fe:	b2ad      	uxthmi	r5, r5
 8007800:	6031      	str	r1, [r6, #0]
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	bf44      	itt	mi
 8007806:	f043 0320 	orrmi.w	r3, r3, #32
 800780a:	6023      	strmi	r3, [r4, #0]
 800780c:	b11d      	cbz	r5, 8007816 <_printf_i+0x19e>
 800780e:	2310      	movs	r3, #16
 8007810:	e7ac      	b.n	800776c <_printf_i+0xf4>
 8007812:	4827      	ldr	r0, [pc, #156]	@ (80078b0 <_printf_i+0x238>)
 8007814:	e7e9      	b.n	80077ea <_printf_i+0x172>
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	f023 0320 	bic.w	r3, r3, #32
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	e7f6      	b.n	800780e <_printf_i+0x196>
 8007820:	4616      	mov	r6, r2
 8007822:	e7bd      	b.n	80077a0 <_printf_i+0x128>
 8007824:	6833      	ldr	r3, [r6, #0]
 8007826:	6825      	ldr	r5, [r4, #0]
 8007828:	6961      	ldr	r1, [r4, #20]
 800782a:	1d18      	adds	r0, r3, #4
 800782c:	6030      	str	r0, [r6, #0]
 800782e:	062e      	lsls	r6, r5, #24
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	d501      	bpl.n	8007838 <_printf_i+0x1c0>
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	e002      	b.n	800783e <_printf_i+0x1c6>
 8007838:	0668      	lsls	r0, r5, #25
 800783a:	d5fb      	bpl.n	8007834 <_printf_i+0x1bc>
 800783c:	8019      	strh	r1, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	6123      	str	r3, [r4, #16]
 8007842:	4616      	mov	r6, r2
 8007844:	e7bc      	b.n	80077c0 <_printf_i+0x148>
 8007846:	6833      	ldr	r3, [r6, #0]
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	6032      	str	r2, [r6, #0]
 800784c:	681e      	ldr	r6, [r3, #0]
 800784e:	6862      	ldr	r2, [r4, #4]
 8007850:	2100      	movs	r1, #0
 8007852:	4630      	mov	r0, r6
 8007854:	f7f8 fcbc 	bl	80001d0 <memchr>
 8007858:	b108      	cbz	r0, 800785e <_printf_i+0x1e6>
 800785a:	1b80      	subs	r0, r0, r6
 800785c:	6060      	str	r0, [r4, #4]
 800785e:	6863      	ldr	r3, [r4, #4]
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	2300      	movs	r3, #0
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007868:	e7aa      	b.n	80077c0 <_printf_i+0x148>
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	4632      	mov	r2, r6
 800786e:	4649      	mov	r1, r9
 8007870:	4640      	mov	r0, r8
 8007872:	47d0      	blx	sl
 8007874:	3001      	adds	r0, #1
 8007876:	d0ad      	beq.n	80077d4 <_printf_i+0x15c>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	d413      	bmi.n	80078a6 <_printf_i+0x22e>
 800787e:	68e0      	ldr	r0, [r4, #12]
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	4298      	cmp	r0, r3
 8007884:	bfb8      	it	lt
 8007886:	4618      	movlt	r0, r3
 8007888:	e7a6      	b.n	80077d8 <_printf_i+0x160>
 800788a:	2301      	movs	r3, #1
 800788c:	4632      	mov	r2, r6
 800788e:	4649      	mov	r1, r9
 8007890:	4640      	mov	r0, r8
 8007892:	47d0      	blx	sl
 8007894:	3001      	adds	r0, #1
 8007896:	d09d      	beq.n	80077d4 <_printf_i+0x15c>
 8007898:	3501      	adds	r5, #1
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	9903      	ldr	r1, [sp, #12]
 800789e:	1a5b      	subs	r3, r3, r1
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dcf2      	bgt.n	800788a <_printf_i+0x212>
 80078a4:	e7eb      	b.n	800787e <_printf_i+0x206>
 80078a6:	2500      	movs	r5, #0
 80078a8:	f104 0619 	add.w	r6, r4, #25
 80078ac:	e7f5      	b.n	800789a <_printf_i+0x222>
 80078ae:	bf00      	nop
 80078b0:	0800a0ea 	.word	0x0800a0ea
 80078b4:	0800a0fb 	.word	0x0800a0fb

080078b8 <std>:
 80078b8:	2300      	movs	r3, #0
 80078ba:	b510      	push	{r4, lr}
 80078bc:	4604      	mov	r4, r0
 80078be:	e9c0 3300 	strd	r3, r3, [r0]
 80078c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078c6:	6083      	str	r3, [r0, #8]
 80078c8:	8181      	strh	r1, [r0, #12]
 80078ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80078cc:	81c2      	strh	r2, [r0, #14]
 80078ce:	6183      	str	r3, [r0, #24]
 80078d0:	4619      	mov	r1, r3
 80078d2:	2208      	movs	r2, #8
 80078d4:	305c      	adds	r0, #92	@ 0x5c
 80078d6:	f000 f906 	bl	8007ae6 <memset>
 80078da:	4b0d      	ldr	r3, [pc, #52]	@ (8007910 <std+0x58>)
 80078dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80078de:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <std+0x5c>)
 80078e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007918 <std+0x60>)
 80078e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078e6:	4b0d      	ldr	r3, [pc, #52]	@ (800791c <std+0x64>)
 80078e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80078ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <std+0x68>)
 80078ec:	6224      	str	r4, [r4, #32]
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d006      	beq.n	8007900 <std+0x48>
 80078f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078f6:	4294      	cmp	r4, r2
 80078f8:	d002      	beq.n	8007900 <std+0x48>
 80078fa:	33d0      	adds	r3, #208	@ 0xd0
 80078fc:	429c      	cmp	r4, r3
 80078fe:	d105      	bne.n	800790c <std+0x54>
 8007900:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007908:	f000 b96a 	b.w	8007be0 <__retarget_lock_init_recursive>
 800790c:	bd10      	pop	{r4, pc}
 800790e:	bf00      	nop
 8007910:	08007a61 	.word	0x08007a61
 8007914:	08007a83 	.word	0x08007a83
 8007918:	08007abb 	.word	0x08007abb
 800791c:	08007adf 	.word	0x08007adf
 8007920:	20001bb4 	.word	0x20001bb4

08007924 <stdio_exit_handler>:
 8007924:	4a02      	ldr	r2, [pc, #8]	@ (8007930 <stdio_exit_handler+0xc>)
 8007926:	4903      	ldr	r1, [pc, #12]	@ (8007934 <stdio_exit_handler+0x10>)
 8007928:	4803      	ldr	r0, [pc, #12]	@ (8007938 <stdio_exit_handler+0x14>)
 800792a:	f000 b869 	b.w	8007a00 <_fwalk_sglue>
 800792e:	bf00      	nop
 8007930:	20000010 	.word	0x20000010
 8007934:	08009531 	.word	0x08009531
 8007938:	20000020 	.word	0x20000020

0800793c <cleanup_stdio>:
 800793c:	6841      	ldr	r1, [r0, #4]
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <cleanup_stdio+0x34>)
 8007940:	4299      	cmp	r1, r3
 8007942:	b510      	push	{r4, lr}
 8007944:	4604      	mov	r4, r0
 8007946:	d001      	beq.n	800794c <cleanup_stdio+0x10>
 8007948:	f001 fdf2 	bl	8009530 <_fflush_r>
 800794c:	68a1      	ldr	r1, [r4, #8]
 800794e:	4b09      	ldr	r3, [pc, #36]	@ (8007974 <cleanup_stdio+0x38>)
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <cleanup_stdio+0x1e>
 8007954:	4620      	mov	r0, r4
 8007956:	f001 fdeb 	bl	8009530 <_fflush_r>
 800795a:	68e1      	ldr	r1, [r4, #12]
 800795c:	4b06      	ldr	r3, [pc, #24]	@ (8007978 <cleanup_stdio+0x3c>)
 800795e:	4299      	cmp	r1, r3
 8007960:	d004      	beq.n	800796c <cleanup_stdio+0x30>
 8007962:	4620      	mov	r0, r4
 8007964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007968:	f001 bde2 	b.w	8009530 <_fflush_r>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	20001bb4 	.word	0x20001bb4
 8007974:	20001c1c 	.word	0x20001c1c
 8007978:	20001c84 	.word	0x20001c84

0800797c <global_stdio_init.part.0>:
 800797c:	b510      	push	{r4, lr}
 800797e:	4b0b      	ldr	r3, [pc, #44]	@ (80079ac <global_stdio_init.part.0+0x30>)
 8007980:	4c0b      	ldr	r4, [pc, #44]	@ (80079b0 <global_stdio_init.part.0+0x34>)
 8007982:	4a0c      	ldr	r2, [pc, #48]	@ (80079b4 <global_stdio_init.part.0+0x38>)
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	4620      	mov	r0, r4
 8007988:	2200      	movs	r2, #0
 800798a:	2104      	movs	r1, #4
 800798c:	f7ff ff94 	bl	80078b8 <std>
 8007990:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007994:	2201      	movs	r2, #1
 8007996:	2109      	movs	r1, #9
 8007998:	f7ff ff8e 	bl	80078b8 <std>
 800799c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079a0:	2202      	movs	r2, #2
 80079a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a6:	2112      	movs	r1, #18
 80079a8:	f7ff bf86 	b.w	80078b8 <std>
 80079ac:	20001cec 	.word	0x20001cec
 80079b0:	20001bb4 	.word	0x20001bb4
 80079b4:	08007925 	.word	0x08007925

080079b8 <__sfp_lock_acquire>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__sfp_lock_acquire+0x8>)
 80079ba:	f000 b912 	b.w	8007be2 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	20001cf5 	.word	0x20001cf5

080079c4 <__sfp_lock_release>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__sfp_lock_release+0x8>)
 80079c6:	f000 b90d 	b.w	8007be4 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	20001cf5 	.word	0x20001cf5

080079d0 <__sinit>:
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4604      	mov	r4, r0
 80079d4:	f7ff fff0 	bl	80079b8 <__sfp_lock_acquire>
 80079d8:	6a23      	ldr	r3, [r4, #32]
 80079da:	b11b      	cbz	r3, 80079e4 <__sinit+0x14>
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	f7ff bff0 	b.w	80079c4 <__sfp_lock_release>
 80079e4:	4b04      	ldr	r3, [pc, #16]	@ (80079f8 <__sinit+0x28>)
 80079e6:	6223      	str	r3, [r4, #32]
 80079e8:	4b04      	ldr	r3, [pc, #16]	@ (80079fc <__sinit+0x2c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1f5      	bne.n	80079dc <__sinit+0xc>
 80079f0:	f7ff ffc4 	bl	800797c <global_stdio_init.part.0>
 80079f4:	e7f2      	b.n	80079dc <__sinit+0xc>
 80079f6:	bf00      	nop
 80079f8:	0800793d 	.word	0x0800793d
 80079fc:	20001cec 	.word	0x20001cec

08007a00 <_fwalk_sglue>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	4607      	mov	r7, r0
 8007a06:	4688      	mov	r8, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a10:	f1b9 0901 	subs.w	r9, r9, #1
 8007a14:	d505      	bpl.n	8007a22 <_fwalk_sglue+0x22>
 8007a16:	6824      	ldr	r4, [r4, #0]
 8007a18:	2c00      	cmp	r4, #0
 8007a1a:	d1f7      	bne.n	8007a0c <_fwalk_sglue+0xc>
 8007a1c:	4630      	mov	r0, r6
 8007a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a22:	89ab      	ldrh	r3, [r5, #12]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d907      	bls.n	8007a38 <_fwalk_sglue+0x38>
 8007a28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	d003      	beq.n	8007a38 <_fwalk_sglue+0x38>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4638      	mov	r0, r7
 8007a34:	47c0      	blx	r8
 8007a36:	4306      	orrs	r6, r0
 8007a38:	3568      	adds	r5, #104	@ 0x68
 8007a3a:	e7e9      	b.n	8007a10 <_fwalk_sglue+0x10>

08007a3c <iprintf>:
 8007a3c:	b40f      	push	{r0, r1, r2, r3}
 8007a3e:	b507      	push	{r0, r1, r2, lr}
 8007a40:	4906      	ldr	r1, [pc, #24]	@ (8007a5c <iprintf+0x20>)
 8007a42:	ab04      	add	r3, sp, #16
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a4a:	6881      	ldr	r1, [r0, #8]
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	f001 fbd3 	bl	80091f8 <_vfiprintf_r>
 8007a52:	b003      	add	sp, #12
 8007a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a58:	b004      	add	sp, #16
 8007a5a:	4770      	bx	lr
 8007a5c:	2000001c 	.word	0x2000001c

08007a60 <__sread>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	460c      	mov	r4, r1
 8007a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a68:	f000 f86c 	bl	8007b44 <_read_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	bfab      	itete	ge
 8007a70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a72:	89a3      	ldrhlt	r3, [r4, #12]
 8007a74:	181b      	addge	r3, r3, r0
 8007a76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a7a:	bfac      	ite	ge
 8007a7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a7e:	81a3      	strhlt	r3, [r4, #12]
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <__swrite>:
 8007a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a86:	461f      	mov	r7, r3
 8007a88:	898b      	ldrh	r3, [r1, #12]
 8007a8a:	05db      	lsls	r3, r3, #23
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4616      	mov	r6, r2
 8007a92:	d505      	bpl.n	8007aa0 <__swrite+0x1e>
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f000 f840 	bl	8007b20 <_lseek_r>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	f000 b857 	b.w	8007b68 <_write_r>

08007aba <__sseek>:
 8007aba:	b510      	push	{r4, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac2:	f000 f82d 	bl	8007b20 <_lseek_r>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	bf15      	itete	ne
 8007acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ad6:	81a3      	strheq	r3, [r4, #12]
 8007ad8:	bf18      	it	ne
 8007ada:	81a3      	strhne	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__sclose>:
 8007ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae2:	f000 b80d 	b.w	8007b00 <_close_r>

08007ae6 <memset>:
 8007ae6:	4402      	add	r2, r0
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d100      	bne.n	8007af0 <memset+0xa>
 8007aee:	4770      	bx	lr
 8007af0:	f803 1b01 	strb.w	r1, [r3], #1
 8007af4:	e7f9      	b.n	8007aea <memset+0x4>
	...

08007af8 <_localeconv_r>:
 8007af8:	4800      	ldr	r0, [pc, #0]	@ (8007afc <_localeconv_r+0x4>)
 8007afa:	4770      	bx	lr
 8007afc:	2000015c 	.word	0x2000015c

08007b00 <_close_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d06      	ldr	r5, [pc, #24]	@ (8007b1c <_close_r+0x1c>)
 8007b04:	2300      	movs	r3, #0
 8007b06:	4604      	mov	r4, r0
 8007b08:	4608      	mov	r0, r1
 8007b0a:	602b      	str	r3, [r5, #0]
 8007b0c:	f7f9 ffac 	bl	8001a68 <_close>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_close_r+0x1a>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_close_r+0x1a>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20001cf0 	.word	0x20001cf0

08007b20 <_lseek_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d07      	ldr	r5, [pc, #28]	@ (8007b40 <_lseek_r+0x20>)
 8007b24:	4604      	mov	r4, r0
 8007b26:	4608      	mov	r0, r1
 8007b28:	4611      	mov	r1, r2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	602a      	str	r2, [r5, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f7f9 ffc1 	bl	8001ab6 <_lseek>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_lseek_r+0x1e>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_lseek_r+0x1e>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20001cf0 	.word	0x20001cf0

08007b44 <_read_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	@ (8007b64 <_read_r+0x20>)
 8007b48:	4604      	mov	r4, r0
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	602a      	str	r2, [r5, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7f9 ff4f 	bl	80019f6 <_read>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_read_r+0x1e>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_read_r+0x1e>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	20001cf0 	.word	0x20001cf0

08007b68 <_write_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	@ (8007b88 <_write_r+0x20>)
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4611      	mov	r1, r2
 8007b72:	2200      	movs	r2, #0
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7f9 ff5a 	bl	8001a30 <_write>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_write_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_write_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	20001cf0 	.word	0x20001cf0

08007b8c <__errno>:
 8007b8c:	4b01      	ldr	r3, [pc, #4]	@ (8007b94 <__errno+0x8>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	2000001c 	.word	0x2000001c

08007b98 <__libc_init_array>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007bd0 <__libc_init_array+0x38>)
 8007b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007bd4 <__libc_init_array+0x3c>)
 8007b9e:	1b64      	subs	r4, r4, r5
 8007ba0:	10a4      	asrs	r4, r4, #2
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	42a6      	cmp	r6, r4
 8007ba6:	d109      	bne.n	8007bbc <__libc_init_array+0x24>
 8007ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8007bd8 <__libc_init_array+0x40>)
 8007baa:	4c0c      	ldr	r4, [pc, #48]	@ (8007bdc <__libc_init_array+0x44>)
 8007bac:	f002 fa4e 	bl	800a04c <_init>
 8007bb0:	1b64      	subs	r4, r4, r5
 8007bb2:	10a4      	asrs	r4, r4, #2
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	42a6      	cmp	r6, r4
 8007bb8:	d105      	bne.n	8007bc6 <__libc_init_array+0x2e>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc0:	4798      	blx	r3
 8007bc2:	3601      	adds	r6, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__libc_init_array+0xc>
 8007bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bca:	4798      	blx	r3
 8007bcc:	3601      	adds	r6, #1
 8007bce:	e7f2      	b.n	8007bb6 <__libc_init_array+0x1e>
 8007bd0:	0800a468 	.word	0x0800a468
 8007bd4:	0800a468 	.word	0x0800a468
 8007bd8:	0800a468 	.word	0x0800a468
 8007bdc:	0800a46c 	.word	0x0800a46c

08007be0 <__retarget_lock_init_recursive>:
 8007be0:	4770      	bx	lr

08007be2 <__retarget_lock_acquire_recursive>:
 8007be2:	4770      	bx	lr

08007be4 <__retarget_lock_release_recursive>:
 8007be4:	4770      	bx	lr

08007be6 <memcpy>:
 8007be6:	440a      	add	r2, r1
 8007be8:	4291      	cmp	r1, r2
 8007bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bee:	d100      	bne.n	8007bf2 <memcpy+0xc>
 8007bf0:	4770      	bx	lr
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfc:	4291      	cmp	r1, r2
 8007bfe:	d1f9      	bne.n	8007bf4 <memcpy+0xe>
 8007c00:	bd10      	pop	{r4, pc}

08007c02 <quorem>:
 8007c02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c06:	6903      	ldr	r3, [r0, #16]
 8007c08:	690c      	ldr	r4, [r1, #16]
 8007c0a:	42a3      	cmp	r3, r4
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	db7e      	blt.n	8007d0e <quorem+0x10c>
 8007c10:	3c01      	subs	r4, #1
 8007c12:	f101 0814 	add.w	r8, r1, #20
 8007c16:	00a3      	lsls	r3, r4, #2
 8007c18:	f100 0514 	add.w	r5, r0, #20
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c34:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c38:	d32e      	bcc.n	8007c98 <quorem+0x96>
 8007c3a:	f04f 0a00 	mov.w	sl, #0
 8007c3e:	46c4      	mov	ip, r8
 8007c40:	46ae      	mov	lr, r5
 8007c42:	46d3      	mov	fp, sl
 8007c44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c48:	b298      	uxth	r0, r3
 8007c4a:	fb06 a000 	mla	r0, r6, r0, sl
 8007c4e:	0c02      	lsrs	r2, r0, #16
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	fb06 2303 	mla	r3, r6, r3, r2
 8007c56:	f8de 2000 	ldr.w	r2, [lr]
 8007c5a:	b280      	uxth	r0, r0
 8007c5c:	b292      	uxth	r2, r2
 8007c5e:	1a12      	subs	r2, r2, r0
 8007c60:	445a      	add	r2, fp
 8007c62:	f8de 0000 	ldr.w	r0, [lr]
 8007c66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c74:	b292      	uxth	r2, r2
 8007c76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c7a:	45e1      	cmp	r9, ip
 8007c7c:	f84e 2b04 	str.w	r2, [lr], #4
 8007c80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c84:	d2de      	bcs.n	8007c44 <quorem+0x42>
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	58eb      	ldr	r3, [r5, r3]
 8007c8a:	b92b      	cbnz	r3, 8007c98 <quorem+0x96>
 8007c8c:	9b01      	ldr	r3, [sp, #4]
 8007c8e:	3b04      	subs	r3, #4
 8007c90:	429d      	cmp	r5, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	d32f      	bcc.n	8007cf6 <quorem+0xf4>
 8007c96:	613c      	str	r4, [r7, #16]
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f001 f97b 	bl	8008f94 <__mcmp>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	db25      	blt.n	8007cee <quorem+0xec>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007caa:	f8d1 c000 	ldr.w	ip, [r1]
 8007cae:	fa1f fe82 	uxth.w	lr, r2
 8007cb2:	fa1f f38c 	uxth.w	r3, ip
 8007cb6:	eba3 030e 	sub.w	r3, r3, lr
 8007cba:	4403      	add	r3, r0
 8007cbc:	0c12      	lsrs	r2, r2, #16
 8007cbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ccc:	45c1      	cmp	r9, r8
 8007cce:	f841 3b04 	str.w	r3, [r1], #4
 8007cd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cd6:	d2e6      	bcs.n	8007ca6 <quorem+0xa4>
 8007cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ce0:	b922      	cbnz	r2, 8007cec <quorem+0xea>
 8007ce2:	3b04      	subs	r3, #4
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	d30b      	bcc.n	8007d02 <quorem+0x100>
 8007cea:	613c      	str	r4, [r7, #16]
 8007cec:	3601      	adds	r6, #1
 8007cee:	4630      	mov	r0, r6
 8007cf0:	b003      	add	sp, #12
 8007cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	3b04      	subs	r3, #4
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d1cb      	bne.n	8007c96 <quorem+0x94>
 8007cfe:	3c01      	subs	r4, #1
 8007d00:	e7c6      	b.n	8007c90 <quorem+0x8e>
 8007d02:	6812      	ldr	r2, [r2, #0]
 8007d04:	3b04      	subs	r3, #4
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d1ef      	bne.n	8007cea <quorem+0xe8>
 8007d0a:	3c01      	subs	r4, #1
 8007d0c:	e7ea      	b.n	8007ce4 <quorem+0xe2>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e7ee      	b.n	8007cf0 <quorem+0xee>
 8007d12:	0000      	movs	r0, r0
 8007d14:	0000      	movs	r0, r0
	...

08007d18 <_dtoa_r>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	69c7      	ldr	r7, [r0, #28]
 8007d1e:	b099      	sub	sp, #100	@ 0x64
 8007d20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d24:	ec55 4b10 	vmov	r4, r5, d0
 8007d28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007d2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d2c:	4683      	mov	fp, r0
 8007d2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d32:	b97f      	cbnz	r7, 8007d54 <_dtoa_r+0x3c>
 8007d34:	2010      	movs	r0, #16
 8007d36:	f000 fdfd 	bl	8008934 <malloc>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d40:	b920      	cbnz	r0, 8007d4c <_dtoa_r+0x34>
 8007d42:	4ba7      	ldr	r3, [pc, #668]	@ (8007fe0 <_dtoa_r+0x2c8>)
 8007d44:	21ef      	movs	r1, #239	@ 0xef
 8007d46:	48a7      	ldr	r0, [pc, #668]	@ (8007fe4 <_dtoa_r+0x2cc>)
 8007d48:	f001 fcbe 	bl	80096c8 <__assert_func>
 8007d4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d50:	6007      	str	r7, [r0, #0]
 8007d52:	60c7      	str	r7, [r0, #12]
 8007d54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d58:	6819      	ldr	r1, [r3, #0]
 8007d5a:	b159      	cbz	r1, 8007d74 <_dtoa_r+0x5c>
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	604a      	str	r2, [r1, #4]
 8007d60:	2301      	movs	r3, #1
 8007d62:	4093      	lsls	r3, r2
 8007d64:	608b      	str	r3, [r1, #8]
 8007d66:	4658      	mov	r0, fp
 8007d68:	f000 feda 	bl	8008b20 <_Bfree>
 8007d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	1e2b      	subs	r3, r5, #0
 8007d76:	bfb9      	ittee	lt
 8007d78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d7c:	9303      	strlt	r3, [sp, #12]
 8007d7e:	2300      	movge	r3, #0
 8007d80:	6033      	strge	r3, [r6, #0]
 8007d82:	9f03      	ldr	r7, [sp, #12]
 8007d84:	4b98      	ldr	r3, [pc, #608]	@ (8007fe8 <_dtoa_r+0x2d0>)
 8007d86:	bfbc      	itt	lt
 8007d88:	2201      	movlt	r2, #1
 8007d8a:	6032      	strlt	r2, [r6, #0]
 8007d8c:	43bb      	bics	r3, r7
 8007d8e:	d112      	bne.n	8007db6 <_dtoa_r+0x9e>
 8007d90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d9c:	4323      	orrs	r3, r4
 8007d9e:	f000 854d 	beq.w	800883c <_dtoa_r+0xb24>
 8007da2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007da4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007ffc <_dtoa_r+0x2e4>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 854f 	beq.w	800884c <_dtoa_r+0xb34>
 8007dae:	f10a 0303 	add.w	r3, sl, #3
 8007db2:	f000 bd49 	b.w	8008848 <_dtoa_r+0xb30>
 8007db6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	ec51 0b17 	vmov	r0, r1, d7
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007dc6:	f7f8 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	b158      	cbz	r0, 8007de6 <_dtoa_r+0xce>
 8007dce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dd6:	b113      	cbz	r3, 8007dde <_dtoa_r+0xc6>
 8007dd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dda:	4b84      	ldr	r3, [pc, #528]	@ (8007fec <_dtoa_r+0x2d4>)
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008000 <_dtoa_r+0x2e8>
 8007de2:	f000 bd33 	b.w	800884c <_dtoa_r+0xb34>
 8007de6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007dea:	aa16      	add	r2, sp, #88	@ 0x58
 8007dec:	a917      	add	r1, sp, #92	@ 0x5c
 8007dee:	4658      	mov	r0, fp
 8007df0:	f001 f980 	bl	80090f4 <__d2b>
 8007df4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007df8:	4681      	mov	r9, r0
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	d077      	beq.n	8007eee <_dtoa_r+0x1d6>
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e18:	4619      	mov	r1, r3
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4b74      	ldr	r3, [pc, #464]	@ (8007ff0 <_dtoa_r+0x2d8>)
 8007e1e:	f7f8 fa33 	bl	8000288 <__aeabi_dsub>
 8007e22:	a369      	add	r3, pc, #420	@ (adr r3, 8007fc8 <_dtoa_r+0x2b0>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fbe6 	bl	80005f8 <__aeabi_dmul>
 8007e2c:	a368      	add	r3, pc, #416	@ (adr r3, 8007fd0 <_dtoa_r+0x2b8>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f7f8 fa2b 	bl	800028c <__adddf3>
 8007e36:	4604      	mov	r4, r0
 8007e38:	4630      	mov	r0, r6
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	f7f8 fb72 	bl	8000524 <__aeabi_i2d>
 8007e40:	a365      	add	r3, pc, #404	@ (adr r3, 8007fd8 <_dtoa_r+0x2c0>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 fbd7 	bl	80005f8 <__aeabi_dmul>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4620      	mov	r0, r4
 8007e50:	4629      	mov	r1, r5
 8007e52:	f7f8 fa1b 	bl	800028c <__adddf3>
 8007e56:	4604      	mov	r4, r0
 8007e58:	460d      	mov	r5, r1
 8007e5a:	f7f8 fe7d 	bl	8000b58 <__aeabi_d2iz>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4607      	mov	r7, r0
 8007e62:	2300      	movs	r3, #0
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fe38 	bl	8000adc <__aeabi_dcmplt>
 8007e6c:	b140      	cbz	r0, 8007e80 <_dtoa_r+0x168>
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7f8 fb58 	bl	8000524 <__aeabi_i2d>
 8007e74:	4622      	mov	r2, r4
 8007e76:	462b      	mov	r3, r5
 8007e78:	f7f8 fe26 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e7c:	b900      	cbnz	r0, 8007e80 <_dtoa_r+0x168>
 8007e7e:	3f01      	subs	r7, #1
 8007e80:	2f16      	cmp	r7, #22
 8007e82:	d851      	bhi.n	8007f28 <_dtoa_r+0x210>
 8007e84:	4b5b      	ldr	r3, [pc, #364]	@ (8007ff4 <_dtoa_r+0x2dc>)
 8007e86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e92:	f7f8 fe23 	bl	8000adc <__aeabi_dcmplt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	d048      	beq.n	8007f2c <_dtoa_r+0x214>
 8007e9a:	3f01      	subs	r7, #1
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007ea0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ea2:	1b9b      	subs	r3, r3, r6
 8007ea4:	1e5a      	subs	r2, r3, #1
 8007ea6:	bf44      	itt	mi
 8007ea8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007eac:	2300      	movmi	r3, #0
 8007eae:	9208      	str	r2, [sp, #32]
 8007eb0:	bf54      	ite	pl
 8007eb2:	f04f 0800 	movpl.w	r8, #0
 8007eb6:	9308      	strmi	r3, [sp, #32]
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	db39      	blt.n	8007f30 <_dtoa_r+0x218>
 8007ebc:	9b08      	ldr	r3, [sp, #32]
 8007ebe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ec0:	443b      	add	r3, r7
 8007ec2:	9308      	str	r3, [sp, #32]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eca:	2b09      	cmp	r3, #9
 8007ecc:	d864      	bhi.n	8007f98 <_dtoa_r+0x280>
 8007ece:	2b05      	cmp	r3, #5
 8007ed0:	bfc4      	itt	gt
 8007ed2:	3b04      	subgt	r3, #4
 8007ed4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed8:	f1a3 0302 	sub.w	r3, r3, #2
 8007edc:	bfcc      	ite	gt
 8007ede:	2400      	movgt	r4, #0
 8007ee0:	2401      	movle	r4, #1
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d863      	bhi.n	8007fae <_dtoa_r+0x296>
 8007ee6:	e8df f003 	tbb	[pc, r3]
 8007eea:	372a      	.short	0x372a
 8007eec:	5535      	.short	0x5535
 8007eee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007ef2:	441e      	add	r6, r3
 8007ef4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	bfc1      	itttt	gt
 8007efc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f00:	409f      	lslgt	r7, r3
 8007f02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f0a:	bfd6      	itet	le
 8007f0c:	f1c3 0320 	rsble	r3, r3, #32
 8007f10:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f14:	fa04 f003 	lslle.w	r0, r4, r3
 8007f18:	f7f8 faf4 	bl	8000504 <__aeabi_ui2d>
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f22:	3e01      	subs	r6, #1
 8007f24:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f26:	e777      	b.n	8007e18 <_dtoa_r+0x100>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e7b8      	b.n	8007e9e <_dtoa_r+0x186>
 8007f2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f2e:	e7b7      	b.n	8007ea0 <_dtoa_r+0x188>
 8007f30:	427b      	negs	r3, r7
 8007f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f34:	2300      	movs	r3, #0
 8007f36:	eba8 0807 	sub.w	r8, r8, r7
 8007f3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f3c:	e7c4      	b.n	8007ec8 <_dtoa_r+0x1b0>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dc35      	bgt.n	8007fb4 <_dtoa_r+0x29c>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f52:	e00b      	b.n	8007f6c <_dtoa_r+0x254>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7f3      	b.n	8007f40 <_dtoa_r+0x228>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	bfb8      	it	lt
 8007f6a:	2301      	movlt	r3, #1
 8007f6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f70:	2100      	movs	r1, #0
 8007f72:	2204      	movs	r2, #4
 8007f74:	f102 0514 	add.w	r5, r2, #20
 8007f78:	429d      	cmp	r5, r3
 8007f7a:	d91f      	bls.n	8007fbc <_dtoa_r+0x2a4>
 8007f7c:	6041      	str	r1, [r0, #4]
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f000 fd8e 	bl	8008aa0 <_Balloc>
 8007f84:	4682      	mov	sl, r0
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d13c      	bne.n	8008004 <_dtoa_r+0x2ec>
 8007f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff8 <_dtoa_r+0x2e0>)
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f92:	e6d8      	b.n	8007d46 <_dtoa_r+0x2e>
 8007f94:	2301      	movs	r3, #1
 8007f96:	e7e0      	b.n	8007f5a <_dtoa_r+0x242>
 8007f98:	2401      	movs	r4, #1
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2312      	movs	r3, #18
 8007fac:	e7d0      	b.n	8007f50 <_dtoa_r+0x238>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fb2:	e7f5      	b.n	8007fa0 <_dtoa_r+0x288>
 8007fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	9307      	str	r3, [sp, #28]
 8007fba:	e7d7      	b.n	8007f6c <_dtoa_r+0x254>
 8007fbc:	3101      	adds	r1, #1
 8007fbe:	0052      	lsls	r2, r2, #1
 8007fc0:	e7d8      	b.n	8007f74 <_dtoa_r+0x25c>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	636f4361 	.word	0x636f4361
 8007fcc:	3fd287a7 	.word	0x3fd287a7
 8007fd0:	8b60c8b3 	.word	0x8b60c8b3
 8007fd4:	3fc68a28 	.word	0x3fc68a28
 8007fd8:	509f79fb 	.word	0x509f79fb
 8007fdc:	3fd34413 	.word	0x3fd34413
 8007fe0:	0800a119 	.word	0x0800a119
 8007fe4:	0800a130 	.word	0x0800a130
 8007fe8:	7ff00000 	.word	0x7ff00000
 8007fec:	0800a0e9 	.word	0x0800a0e9
 8007ff0:	3ff80000 	.word	0x3ff80000
 8007ff4:	0800a228 	.word	0x0800a228
 8007ff8:	0800a188 	.word	0x0800a188
 8007ffc:	0800a115 	.word	0x0800a115
 8008000:	0800a0e8 	.word	0x0800a0e8
 8008004:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008008:	6018      	str	r0, [r3, #0]
 800800a:	9b07      	ldr	r3, [sp, #28]
 800800c:	2b0e      	cmp	r3, #14
 800800e:	f200 80a4 	bhi.w	800815a <_dtoa_r+0x442>
 8008012:	2c00      	cmp	r4, #0
 8008014:	f000 80a1 	beq.w	800815a <_dtoa_r+0x442>
 8008018:	2f00      	cmp	r7, #0
 800801a:	dd33      	ble.n	8008084 <_dtoa_r+0x36c>
 800801c:	4bad      	ldr	r3, [pc, #692]	@ (80082d4 <_dtoa_r+0x5bc>)
 800801e:	f007 020f 	and.w	r2, r7, #15
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	ed93 7b00 	vldr	d7, [r3]
 800802a:	05f8      	lsls	r0, r7, #23
 800802c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008030:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008034:	d516      	bpl.n	8008064 <_dtoa_r+0x34c>
 8008036:	4ba8      	ldr	r3, [pc, #672]	@ (80082d8 <_dtoa_r+0x5c0>)
 8008038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800803c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008040:	f7f8 fc04 	bl	800084c <__aeabi_ddiv>
 8008044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008048:	f004 040f 	and.w	r4, r4, #15
 800804c:	2603      	movs	r6, #3
 800804e:	4da2      	ldr	r5, [pc, #648]	@ (80082d8 <_dtoa_r+0x5c0>)
 8008050:	b954      	cbnz	r4, 8008068 <_dtoa_r+0x350>
 8008052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800805a:	f7f8 fbf7 	bl	800084c <__aeabi_ddiv>
 800805e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008062:	e028      	b.n	80080b6 <_dtoa_r+0x39e>
 8008064:	2602      	movs	r6, #2
 8008066:	e7f2      	b.n	800804e <_dtoa_r+0x336>
 8008068:	07e1      	lsls	r1, r4, #31
 800806a:	d508      	bpl.n	800807e <_dtoa_r+0x366>
 800806c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008070:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008074:	f7f8 fac0 	bl	80005f8 <__aeabi_dmul>
 8008078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800807c:	3601      	adds	r6, #1
 800807e:	1064      	asrs	r4, r4, #1
 8008080:	3508      	adds	r5, #8
 8008082:	e7e5      	b.n	8008050 <_dtoa_r+0x338>
 8008084:	f000 80d2 	beq.w	800822c <_dtoa_r+0x514>
 8008088:	427c      	negs	r4, r7
 800808a:	4b92      	ldr	r3, [pc, #584]	@ (80082d4 <_dtoa_r+0x5bc>)
 800808c:	4d92      	ldr	r5, [pc, #584]	@ (80082d8 <_dtoa_r+0x5c0>)
 800808e:	f004 020f 	and.w	r2, r4, #15
 8008092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800809e:	f7f8 faab 	bl	80005f8 <__aeabi_dmul>
 80080a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080a6:	1124      	asrs	r4, r4, #4
 80080a8:	2300      	movs	r3, #0
 80080aa:	2602      	movs	r6, #2
 80080ac:	2c00      	cmp	r4, #0
 80080ae:	f040 80b2 	bne.w	8008216 <_dtoa_r+0x4fe>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1d3      	bne.n	800805e <_dtoa_r+0x346>
 80080b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80b7 	beq.w	8008230 <_dtoa_r+0x518>
 80080c2:	4b86      	ldr	r3, [pc, #536]	@ (80082dc <_dtoa_r+0x5c4>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	4620      	mov	r0, r4
 80080c8:	4629      	mov	r1, r5
 80080ca:	f7f8 fd07 	bl	8000adc <__aeabi_dcmplt>
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f000 80ae 	beq.w	8008230 <_dtoa_r+0x518>
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80aa 	beq.w	8008230 <_dtoa_r+0x518>
 80080dc:	9b00      	ldr	r3, [sp, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dd37      	ble.n	8008152 <_dtoa_r+0x43a>
 80080e2:	1e7b      	subs	r3, r7, #1
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4620      	mov	r0, r4
 80080e8:	4b7d      	ldr	r3, [pc, #500]	@ (80082e0 <_dtoa_r+0x5c8>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 fa83 	bl	80005f8 <__aeabi_dmul>
 80080f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f6:	9c00      	ldr	r4, [sp, #0]
 80080f8:	3601      	adds	r6, #1
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7f8 fa12 	bl	8000524 <__aeabi_i2d>
 8008100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008104:	f7f8 fa78 	bl	80005f8 <__aeabi_dmul>
 8008108:	4b76      	ldr	r3, [pc, #472]	@ (80082e4 <_dtoa_r+0x5cc>)
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 f8be 	bl	800028c <__adddf3>
 8008110:	4605      	mov	r5, r0
 8008112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008116:	2c00      	cmp	r4, #0
 8008118:	f040 808d 	bne.w	8008236 <_dtoa_r+0x51e>
 800811c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008120:	4b71      	ldr	r3, [pc, #452]	@ (80082e8 <_dtoa_r+0x5d0>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 f8b0 	bl	8000288 <__aeabi_dsub>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008130:	462a      	mov	r2, r5
 8008132:	4633      	mov	r3, r6
 8008134:	f7f8 fcf0 	bl	8000b18 <__aeabi_dcmpgt>
 8008138:	2800      	cmp	r0, #0
 800813a:	f040 828b 	bne.w	8008654 <_dtoa_r+0x93c>
 800813e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008142:	462a      	mov	r2, r5
 8008144:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008148:	f7f8 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800814c:	2800      	cmp	r0, #0
 800814e:	f040 8128 	bne.w	80083a2 <_dtoa_r+0x68a>
 8008152:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008156:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800815a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800815c:	2b00      	cmp	r3, #0
 800815e:	f2c0 815a 	blt.w	8008416 <_dtoa_r+0x6fe>
 8008162:	2f0e      	cmp	r7, #14
 8008164:	f300 8157 	bgt.w	8008416 <_dtoa_r+0x6fe>
 8008168:	4b5a      	ldr	r3, [pc, #360]	@ (80082d4 <_dtoa_r+0x5bc>)
 800816a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800816e:	ed93 7b00 	vldr	d7, [r3]
 8008172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008174:	2b00      	cmp	r3, #0
 8008176:	ed8d 7b00 	vstr	d7, [sp]
 800817a:	da03      	bge.n	8008184 <_dtoa_r+0x46c>
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f340 8101 	ble.w	8008386 <_dtoa_r+0x66e>
 8008184:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008188:	4656      	mov	r6, sl
 800818a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800818e:	4620      	mov	r0, r4
 8008190:	4629      	mov	r1, r5
 8008192:	f7f8 fb5b 	bl	800084c <__aeabi_ddiv>
 8008196:	f7f8 fcdf 	bl	8000b58 <__aeabi_d2iz>
 800819a:	4680      	mov	r8, r0
 800819c:	f7f8 f9c2 	bl	8000524 <__aeabi_i2d>
 80081a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a4:	f7f8 fa28 	bl	80005f8 <__aeabi_dmul>
 80081a8:	4602      	mov	r2, r0
 80081aa:	460b      	mov	r3, r1
 80081ac:	4620      	mov	r0, r4
 80081ae:	4629      	mov	r1, r5
 80081b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081b4:	f7f8 f868 	bl	8000288 <__aeabi_dsub>
 80081b8:	f806 4b01 	strb.w	r4, [r6], #1
 80081bc:	9d07      	ldr	r5, [sp, #28]
 80081be:	eba6 040a 	sub.w	r4, r6, sl
 80081c2:	42a5      	cmp	r5, r4
 80081c4:	4602      	mov	r2, r0
 80081c6:	460b      	mov	r3, r1
 80081c8:	f040 8117 	bne.w	80083fa <_dtoa_r+0x6e2>
 80081cc:	f7f8 f85e 	bl	800028c <__adddf3>
 80081d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081d4:	4604      	mov	r4, r0
 80081d6:	460d      	mov	r5, r1
 80081d8:	f7f8 fc9e 	bl	8000b18 <__aeabi_dcmpgt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f040 80f9 	bne.w	80083d4 <_dtoa_r+0x6bc>
 80081e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80081ee:	b118      	cbz	r0, 80081f8 <_dtoa_r+0x4e0>
 80081f0:	f018 0f01 	tst.w	r8, #1
 80081f4:	f040 80ee 	bne.w	80083d4 <_dtoa_r+0x6bc>
 80081f8:	4649      	mov	r1, r9
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fc90 	bl	8008b20 <_Bfree>
 8008200:	2300      	movs	r3, #0
 8008202:	7033      	strb	r3, [r6, #0]
 8008204:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008206:	3701      	adds	r7, #1
 8008208:	601f      	str	r7, [r3, #0]
 800820a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 831d 	beq.w	800884c <_dtoa_r+0xb34>
 8008212:	601e      	str	r6, [r3, #0]
 8008214:	e31a      	b.n	800884c <_dtoa_r+0xb34>
 8008216:	07e2      	lsls	r2, r4, #31
 8008218:	d505      	bpl.n	8008226 <_dtoa_r+0x50e>
 800821a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800821e:	f7f8 f9eb 	bl	80005f8 <__aeabi_dmul>
 8008222:	3601      	adds	r6, #1
 8008224:	2301      	movs	r3, #1
 8008226:	1064      	asrs	r4, r4, #1
 8008228:	3508      	adds	r5, #8
 800822a:	e73f      	b.n	80080ac <_dtoa_r+0x394>
 800822c:	2602      	movs	r6, #2
 800822e:	e742      	b.n	80080b6 <_dtoa_r+0x39e>
 8008230:	9c07      	ldr	r4, [sp, #28]
 8008232:	9704      	str	r7, [sp, #16]
 8008234:	e761      	b.n	80080fa <_dtoa_r+0x3e2>
 8008236:	4b27      	ldr	r3, [pc, #156]	@ (80082d4 <_dtoa_r+0x5bc>)
 8008238:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800823a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800823e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008242:	4454      	add	r4, sl
 8008244:	2900      	cmp	r1, #0
 8008246:	d053      	beq.n	80082f0 <_dtoa_r+0x5d8>
 8008248:	4928      	ldr	r1, [pc, #160]	@ (80082ec <_dtoa_r+0x5d4>)
 800824a:	2000      	movs	r0, #0
 800824c:	f7f8 fafe 	bl	800084c <__aeabi_ddiv>
 8008250:	4633      	mov	r3, r6
 8008252:	462a      	mov	r2, r5
 8008254:	f7f8 f818 	bl	8000288 <__aeabi_dsub>
 8008258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800825c:	4656      	mov	r6, sl
 800825e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008262:	f7f8 fc79 	bl	8000b58 <__aeabi_d2iz>
 8008266:	4605      	mov	r5, r0
 8008268:	f7f8 f95c 	bl	8000524 <__aeabi_i2d>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008274:	f7f8 f808 	bl	8000288 <__aeabi_dsub>
 8008278:	3530      	adds	r5, #48	@ 0x30
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008282:	f806 5b01 	strb.w	r5, [r6], #1
 8008286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800828a:	f7f8 fc27 	bl	8000adc <__aeabi_dcmplt>
 800828e:	2800      	cmp	r0, #0
 8008290:	d171      	bne.n	8008376 <_dtoa_r+0x65e>
 8008292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008296:	4911      	ldr	r1, [pc, #68]	@ (80082dc <_dtoa_r+0x5c4>)
 8008298:	2000      	movs	r0, #0
 800829a:	f7f7 fff5 	bl	8000288 <__aeabi_dsub>
 800829e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082a2:	f7f8 fc1b 	bl	8000adc <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f040 8095 	bne.w	80083d6 <_dtoa_r+0x6be>
 80082ac:	42a6      	cmp	r6, r4
 80082ae:	f43f af50 	beq.w	8008152 <_dtoa_r+0x43a>
 80082b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082b6:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <_dtoa_r+0x5c8>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f8 f99d 	bl	80005f8 <__aeabi_dmul>
 80082be:	4b08      	ldr	r3, [pc, #32]	@ (80082e0 <_dtoa_r+0x5c8>)
 80082c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082c4:	2200      	movs	r2, #0
 80082c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ca:	f7f8 f995 	bl	80005f8 <__aeabi_dmul>
 80082ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d2:	e7c4      	b.n	800825e <_dtoa_r+0x546>
 80082d4:	0800a228 	.word	0x0800a228
 80082d8:	0800a200 	.word	0x0800a200
 80082dc:	3ff00000 	.word	0x3ff00000
 80082e0:	40240000 	.word	0x40240000
 80082e4:	401c0000 	.word	0x401c0000
 80082e8:	40140000 	.word	0x40140000
 80082ec:	3fe00000 	.word	0x3fe00000
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	f7f8 f980 	bl	80005f8 <__aeabi_dmul>
 80082f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80082fe:	4656      	mov	r6, sl
 8008300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008304:	f7f8 fc28 	bl	8000b58 <__aeabi_d2iz>
 8008308:	4605      	mov	r5, r0
 800830a:	f7f8 f90b 	bl	8000524 <__aeabi_i2d>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008316:	f7f7 ffb7 	bl	8000288 <__aeabi_dsub>
 800831a:	3530      	adds	r5, #48	@ 0x30
 800831c:	f806 5b01 	strb.w	r5, [r6], #1
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	42a6      	cmp	r6, r4
 8008326:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800832a:	f04f 0200 	mov.w	r2, #0
 800832e:	d124      	bne.n	800837a <_dtoa_r+0x662>
 8008330:	4bac      	ldr	r3, [pc, #688]	@ (80085e4 <_dtoa_r+0x8cc>)
 8008332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008336:	f7f7 ffa9 	bl	800028c <__adddf3>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f8 fbe9 	bl	8000b18 <__aeabi_dcmpgt>
 8008346:	2800      	cmp	r0, #0
 8008348:	d145      	bne.n	80083d6 <_dtoa_r+0x6be>
 800834a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800834e:	49a5      	ldr	r1, [pc, #660]	@ (80085e4 <_dtoa_r+0x8cc>)
 8008350:	2000      	movs	r0, #0
 8008352:	f7f7 ff99 	bl	8000288 <__aeabi_dsub>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800835e:	f7f8 fbbd 	bl	8000adc <__aeabi_dcmplt>
 8008362:	2800      	cmp	r0, #0
 8008364:	f43f aef5 	beq.w	8008152 <_dtoa_r+0x43a>
 8008368:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800836a:	1e73      	subs	r3, r6, #1
 800836c:	9315      	str	r3, [sp, #84]	@ 0x54
 800836e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008372:	2b30      	cmp	r3, #48	@ 0x30
 8008374:	d0f8      	beq.n	8008368 <_dtoa_r+0x650>
 8008376:	9f04      	ldr	r7, [sp, #16]
 8008378:	e73e      	b.n	80081f8 <_dtoa_r+0x4e0>
 800837a:	4b9b      	ldr	r3, [pc, #620]	@ (80085e8 <_dtoa_r+0x8d0>)
 800837c:	f7f8 f93c 	bl	80005f8 <__aeabi_dmul>
 8008380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008384:	e7bc      	b.n	8008300 <_dtoa_r+0x5e8>
 8008386:	d10c      	bne.n	80083a2 <_dtoa_r+0x68a>
 8008388:	4b98      	ldr	r3, [pc, #608]	@ (80085ec <_dtoa_r+0x8d4>)
 800838a:	2200      	movs	r2, #0
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f8 f932 	bl	80005f8 <__aeabi_dmul>
 8008394:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008398:	f7f8 fbb4 	bl	8000b04 <__aeabi_dcmpge>
 800839c:	2800      	cmp	r0, #0
 800839e:	f000 8157 	beq.w	8008650 <_dtoa_r+0x938>
 80083a2:	2400      	movs	r4, #0
 80083a4:	4625      	mov	r5, r4
 80083a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083a8:	43db      	mvns	r3, r3
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	4656      	mov	r6, sl
 80083ae:	2700      	movs	r7, #0
 80083b0:	4621      	mov	r1, r4
 80083b2:	4658      	mov	r0, fp
 80083b4:	f000 fbb4 	bl	8008b20 <_Bfree>
 80083b8:	2d00      	cmp	r5, #0
 80083ba:	d0dc      	beq.n	8008376 <_dtoa_r+0x65e>
 80083bc:	b12f      	cbz	r7, 80083ca <_dtoa_r+0x6b2>
 80083be:	42af      	cmp	r7, r5
 80083c0:	d003      	beq.n	80083ca <_dtoa_r+0x6b2>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 fbab 	bl	8008b20 <_Bfree>
 80083ca:	4629      	mov	r1, r5
 80083cc:	4658      	mov	r0, fp
 80083ce:	f000 fba7 	bl	8008b20 <_Bfree>
 80083d2:	e7d0      	b.n	8008376 <_dtoa_r+0x65e>
 80083d4:	9704      	str	r7, [sp, #16]
 80083d6:	4633      	mov	r3, r6
 80083d8:	461e      	mov	r6, r3
 80083da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083de:	2a39      	cmp	r2, #57	@ 0x39
 80083e0:	d107      	bne.n	80083f2 <_dtoa_r+0x6da>
 80083e2:	459a      	cmp	sl, r3
 80083e4:	d1f8      	bne.n	80083d8 <_dtoa_r+0x6c0>
 80083e6:	9a04      	ldr	r2, [sp, #16]
 80083e8:	3201      	adds	r2, #1
 80083ea:	9204      	str	r2, [sp, #16]
 80083ec:	2230      	movs	r2, #48	@ 0x30
 80083ee:	f88a 2000 	strb.w	r2, [sl]
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	3201      	adds	r2, #1
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e7bd      	b.n	8008376 <_dtoa_r+0x65e>
 80083fa:	4b7b      	ldr	r3, [pc, #492]	@ (80085e8 <_dtoa_r+0x8d0>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	f7f8 f8fb 	bl	80005f8 <__aeabi_dmul>
 8008402:	2200      	movs	r2, #0
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	f7f8 fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800840e:	2800      	cmp	r0, #0
 8008410:	f43f aebb 	beq.w	800818a <_dtoa_r+0x472>
 8008414:	e6f0      	b.n	80081f8 <_dtoa_r+0x4e0>
 8008416:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008418:	2a00      	cmp	r2, #0
 800841a:	f000 80db 	beq.w	80085d4 <_dtoa_r+0x8bc>
 800841e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008420:	2a01      	cmp	r2, #1
 8008422:	f300 80bf 	bgt.w	80085a4 <_dtoa_r+0x88c>
 8008426:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008428:	2a00      	cmp	r2, #0
 800842a:	f000 80b7 	beq.w	800859c <_dtoa_r+0x884>
 800842e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008432:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008434:	4646      	mov	r6, r8
 8008436:	9a08      	ldr	r2, [sp, #32]
 8008438:	2101      	movs	r1, #1
 800843a:	441a      	add	r2, r3
 800843c:	4658      	mov	r0, fp
 800843e:	4498      	add	r8, r3
 8008440:	9208      	str	r2, [sp, #32]
 8008442:	f000 fc21 	bl	8008c88 <__i2b>
 8008446:	4605      	mov	r5, r0
 8008448:	b15e      	cbz	r6, 8008462 <_dtoa_r+0x74a>
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	2b00      	cmp	r3, #0
 800844e:	dd08      	ble.n	8008462 <_dtoa_r+0x74a>
 8008450:	42b3      	cmp	r3, r6
 8008452:	9a08      	ldr	r2, [sp, #32]
 8008454:	bfa8      	it	ge
 8008456:	4633      	movge	r3, r6
 8008458:	eba8 0803 	sub.w	r8, r8, r3
 800845c:	1af6      	subs	r6, r6, r3
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008464:	b1f3      	cbz	r3, 80084a4 <_dtoa_r+0x78c>
 8008466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 80b7 	beq.w	80085dc <_dtoa_r+0x8c4>
 800846e:	b18c      	cbz	r4, 8008494 <_dtoa_r+0x77c>
 8008470:	4629      	mov	r1, r5
 8008472:	4622      	mov	r2, r4
 8008474:	4658      	mov	r0, fp
 8008476:	f000 fcc7 	bl	8008e08 <__pow5mult>
 800847a:	464a      	mov	r2, r9
 800847c:	4601      	mov	r1, r0
 800847e:	4605      	mov	r5, r0
 8008480:	4658      	mov	r0, fp
 8008482:	f000 fc17 	bl	8008cb4 <__multiply>
 8008486:	4649      	mov	r1, r9
 8008488:	9004      	str	r0, [sp, #16]
 800848a:	4658      	mov	r0, fp
 800848c:	f000 fb48 	bl	8008b20 <_Bfree>
 8008490:	9b04      	ldr	r3, [sp, #16]
 8008492:	4699      	mov	r9, r3
 8008494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008496:	1b1a      	subs	r2, r3, r4
 8008498:	d004      	beq.n	80084a4 <_dtoa_r+0x78c>
 800849a:	4649      	mov	r1, r9
 800849c:	4658      	mov	r0, fp
 800849e:	f000 fcb3 	bl	8008e08 <__pow5mult>
 80084a2:	4681      	mov	r9, r0
 80084a4:	2101      	movs	r1, #1
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 fbee 	bl	8008c88 <__i2b>
 80084ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ae:	4604      	mov	r4, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 81cf 	beq.w	8008854 <_dtoa_r+0xb3c>
 80084b6:	461a      	mov	r2, r3
 80084b8:	4601      	mov	r1, r0
 80084ba:	4658      	mov	r0, fp
 80084bc:	f000 fca4 	bl	8008e08 <__pow5mult>
 80084c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	4604      	mov	r4, r0
 80084c6:	f300 8095 	bgt.w	80085f4 <_dtoa_r+0x8dc>
 80084ca:	9b02      	ldr	r3, [sp, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 8087 	bne.w	80085e0 <_dtoa_r+0x8c8>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 8089 	bne.w	80085f0 <_dtoa_r+0x8d8>
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084e4:	0d1b      	lsrs	r3, r3, #20
 80084e6:	051b      	lsls	r3, r3, #20
 80084e8:	b12b      	cbz	r3, 80084f6 <_dtoa_r+0x7de>
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	3301      	adds	r3, #1
 80084ee:	9308      	str	r3, [sp, #32]
 80084f0:	f108 0801 	add.w	r8, r8, #1
 80084f4:	2301      	movs	r3, #1
 80084f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 81b0 	beq.w	8008860 <_dtoa_r+0xb48>
 8008500:	6923      	ldr	r3, [r4, #16]
 8008502:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008506:	6918      	ldr	r0, [r3, #16]
 8008508:	f000 fb72 	bl	8008bf0 <__hi0bits>
 800850c:	f1c0 0020 	rsb	r0, r0, #32
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	4418      	add	r0, r3
 8008514:	f010 001f 	ands.w	r0, r0, #31
 8008518:	d077      	beq.n	800860a <_dtoa_r+0x8f2>
 800851a:	f1c0 0320 	rsb	r3, r0, #32
 800851e:	2b04      	cmp	r3, #4
 8008520:	dd6b      	ble.n	80085fa <_dtoa_r+0x8e2>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	f1c0 001c 	rsb	r0, r0, #28
 8008528:	4403      	add	r3, r0
 800852a:	4480      	add	r8, r0
 800852c:	4406      	add	r6, r0
 800852e:	9308      	str	r3, [sp, #32]
 8008530:	f1b8 0f00 	cmp.w	r8, #0
 8008534:	dd05      	ble.n	8008542 <_dtoa_r+0x82a>
 8008536:	4649      	mov	r1, r9
 8008538:	4642      	mov	r2, r8
 800853a:	4658      	mov	r0, fp
 800853c:	f000 fcbe 	bl	8008ebc <__lshift>
 8008540:	4681      	mov	r9, r0
 8008542:	9b08      	ldr	r3, [sp, #32]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dd05      	ble.n	8008554 <_dtoa_r+0x83c>
 8008548:	4621      	mov	r1, r4
 800854a:	461a      	mov	r2, r3
 800854c:	4658      	mov	r0, fp
 800854e:	f000 fcb5 	bl	8008ebc <__lshift>
 8008552:	4604      	mov	r4, r0
 8008554:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008556:	2b00      	cmp	r3, #0
 8008558:	d059      	beq.n	800860e <_dtoa_r+0x8f6>
 800855a:	4621      	mov	r1, r4
 800855c:	4648      	mov	r0, r9
 800855e:	f000 fd19 	bl	8008f94 <__mcmp>
 8008562:	2800      	cmp	r0, #0
 8008564:	da53      	bge.n	800860e <_dtoa_r+0x8f6>
 8008566:	1e7b      	subs	r3, r7, #1
 8008568:	9304      	str	r3, [sp, #16]
 800856a:	4649      	mov	r1, r9
 800856c:	2300      	movs	r3, #0
 800856e:	220a      	movs	r2, #10
 8008570:	4658      	mov	r0, fp
 8008572:	f000 faf7 	bl	8008b64 <__multadd>
 8008576:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008578:	4681      	mov	r9, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8172 	beq.w	8008864 <_dtoa_r+0xb4c>
 8008580:	2300      	movs	r3, #0
 8008582:	4629      	mov	r1, r5
 8008584:	220a      	movs	r2, #10
 8008586:	4658      	mov	r0, fp
 8008588:	f000 faec 	bl	8008b64 <__multadd>
 800858c:	9b00      	ldr	r3, [sp, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	4605      	mov	r5, r0
 8008592:	dc67      	bgt.n	8008664 <_dtoa_r+0x94c>
 8008594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008596:	2b02      	cmp	r3, #2
 8008598:	dc41      	bgt.n	800861e <_dtoa_r+0x906>
 800859a:	e063      	b.n	8008664 <_dtoa_r+0x94c>
 800859c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800859e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80085a2:	e746      	b.n	8008432 <_dtoa_r+0x71a>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	1e5c      	subs	r4, r3, #1
 80085a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	bfbf      	itttt	lt
 80085ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80085b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80085b4:	1ae3      	sublt	r3, r4, r3
 80085b6:	bfb4      	ite	lt
 80085b8:	18d2      	addlt	r2, r2, r3
 80085ba:	1b1c      	subge	r4, r3, r4
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	bfbc      	itt	lt
 80085c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80085c2:	2400      	movlt	r4, #0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bfb5      	itete	lt
 80085c8:	eba8 0603 	sublt.w	r6, r8, r3
 80085cc:	9b07      	ldrge	r3, [sp, #28]
 80085ce:	2300      	movlt	r3, #0
 80085d0:	4646      	movge	r6, r8
 80085d2:	e730      	b.n	8008436 <_dtoa_r+0x71e>
 80085d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80085d8:	4646      	mov	r6, r8
 80085da:	e735      	b.n	8008448 <_dtoa_r+0x730>
 80085dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085de:	e75c      	b.n	800849a <_dtoa_r+0x782>
 80085e0:	2300      	movs	r3, #0
 80085e2:	e788      	b.n	80084f6 <_dtoa_r+0x7de>
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	40240000 	.word	0x40240000
 80085ec:	40140000 	.word	0x40140000
 80085f0:	9b02      	ldr	r3, [sp, #8]
 80085f2:	e780      	b.n	80084f6 <_dtoa_r+0x7de>
 80085f4:	2300      	movs	r3, #0
 80085f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f8:	e782      	b.n	8008500 <_dtoa_r+0x7e8>
 80085fa:	d099      	beq.n	8008530 <_dtoa_r+0x818>
 80085fc:	9a08      	ldr	r2, [sp, #32]
 80085fe:	331c      	adds	r3, #28
 8008600:	441a      	add	r2, r3
 8008602:	4498      	add	r8, r3
 8008604:	441e      	add	r6, r3
 8008606:	9208      	str	r2, [sp, #32]
 8008608:	e792      	b.n	8008530 <_dtoa_r+0x818>
 800860a:	4603      	mov	r3, r0
 800860c:	e7f6      	b.n	80085fc <_dtoa_r+0x8e4>
 800860e:	9b07      	ldr	r3, [sp, #28]
 8008610:	9704      	str	r7, [sp, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	dc20      	bgt.n	8008658 <_dtoa_r+0x940>
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861a:	2b02      	cmp	r3, #2
 800861c:	dd1e      	ble.n	800865c <_dtoa_r+0x944>
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f aec0 	bne.w	80083a6 <_dtoa_r+0x68e>
 8008626:	4621      	mov	r1, r4
 8008628:	2205      	movs	r2, #5
 800862a:	4658      	mov	r0, fp
 800862c:	f000 fa9a 	bl	8008b64 <__multadd>
 8008630:	4601      	mov	r1, r0
 8008632:	4604      	mov	r4, r0
 8008634:	4648      	mov	r0, r9
 8008636:	f000 fcad 	bl	8008f94 <__mcmp>
 800863a:	2800      	cmp	r0, #0
 800863c:	f77f aeb3 	ble.w	80083a6 <_dtoa_r+0x68e>
 8008640:	4656      	mov	r6, sl
 8008642:	2331      	movs	r3, #49	@ 0x31
 8008644:	f806 3b01 	strb.w	r3, [r6], #1
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	3301      	adds	r3, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	e6ae      	b.n	80083ae <_dtoa_r+0x696>
 8008650:	9c07      	ldr	r4, [sp, #28]
 8008652:	9704      	str	r7, [sp, #16]
 8008654:	4625      	mov	r5, r4
 8008656:	e7f3      	b.n	8008640 <_dtoa_r+0x928>
 8008658:	9b07      	ldr	r3, [sp, #28]
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 8104 	beq.w	800886c <_dtoa_r+0xb54>
 8008664:	2e00      	cmp	r6, #0
 8008666:	dd05      	ble.n	8008674 <_dtoa_r+0x95c>
 8008668:	4629      	mov	r1, r5
 800866a:	4632      	mov	r2, r6
 800866c:	4658      	mov	r0, fp
 800866e:	f000 fc25 	bl	8008ebc <__lshift>
 8008672:	4605      	mov	r5, r0
 8008674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008676:	2b00      	cmp	r3, #0
 8008678:	d05a      	beq.n	8008730 <_dtoa_r+0xa18>
 800867a:	6869      	ldr	r1, [r5, #4]
 800867c:	4658      	mov	r0, fp
 800867e:	f000 fa0f 	bl	8008aa0 <_Balloc>
 8008682:	4606      	mov	r6, r0
 8008684:	b928      	cbnz	r0, 8008692 <_dtoa_r+0x97a>
 8008686:	4b84      	ldr	r3, [pc, #528]	@ (8008898 <_dtoa_r+0xb80>)
 8008688:	4602      	mov	r2, r0
 800868a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800868e:	f7ff bb5a 	b.w	8007d46 <_dtoa_r+0x2e>
 8008692:	692a      	ldr	r2, [r5, #16]
 8008694:	3202      	adds	r2, #2
 8008696:	0092      	lsls	r2, r2, #2
 8008698:	f105 010c 	add.w	r1, r5, #12
 800869c:	300c      	adds	r0, #12
 800869e:	f7ff faa2 	bl	8007be6 <memcpy>
 80086a2:	2201      	movs	r2, #1
 80086a4:	4631      	mov	r1, r6
 80086a6:	4658      	mov	r0, fp
 80086a8:	f000 fc08 	bl	8008ebc <__lshift>
 80086ac:	f10a 0301 	add.w	r3, sl, #1
 80086b0:	9307      	str	r3, [sp, #28]
 80086b2:	9b00      	ldr	r3, [sp, #0]
 80086b4:	4453      	add	r3, sl
 80086b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	462f      	mov	r7, r5
 80086c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c2:	4605      	mov	r5, r0
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	4621      	mov	r1, r4
 80086c8:	3b01      	subs	r3, #1
 80086ca:	4648      	mov	r0, r9
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	f7ff fa98 	bl	8007c02 <quorem>
 80086d2:	4639      	mov	r1, r7
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086da:	4648      	mov	r0, r9
 80086dc:	f000 fc5a 	bl	8008f94 <__mcmp>
 80086e0:	462a      	mov	r2, r5
 80086e2:	9008      	str	r0, [sp, #32]
 80086e4:	4621      	mov	r1, r4
 80086e6:	4658      	mov	r0, fp
 80086e8:	f000 fc70 	bl	8008fcc <__mdiff>
 80086ec:	68c2      	ldr	r2, [r0, #12]
 80086ee:	4606      	mov	r6, r0
 80086f0:	bb02      	cbnz	r2, 8008734 <_dtoa_r+0xa1c>
 80086f2:	4601      	mov	r1, r0
 80086f4:	4648      	mov	r0, r9
 80086f6:	f000 fc4d 	bl	8008f94 <__mcmp>
 80086fa:	4602      	mov	r2, r0
 80086fc:	4631      	mov	r1, r6
 80086fe:	4658      	mov	r0, fp
 8008700:	920e      	str	r2, [sp, #56]	@ 0x38
 8008702:	f000 fa0d 	bl	8008b20 <_Bfree>
 8008706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800870a:	9e07      	ldr	r6, [sp, #28]
 800870c:	ea43 0102 	orr.w	r1, r3, r2
 8008710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008712:	4319      	orrs	r1, r3
 8008714:	d110      	bne.n	8008738 <_dtoa_r+0xa20>
 8008716:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800871a:	d029      	beq.n	8008770 <_dtoa_r+0xa58>
 800871c:	9b08      	ldr	r3, [sp, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dd02      	ble.n	8008728 <_dtoa_r+0xa10>
 8008722:	9b02      	ldr	r3, [sp, #8]
 8008724:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008728:	9b00      	ldr	r3, [sp, #0]
 800872a:	f883 8000 	strb.w	r8, [r3]
 800872e:	e63f      	b.n	80083b0 <_dtoa_r+0x698>
 8008730:	4628      	mov	r0, r5
 8008732:	e7bb      	b.n	80086ac <_dtoa_r+0x994>
 8008734:	2201      	movs	r2, #1
 8008736:	e7e1      	b.n	80086fc <_dtoa_r+0x9e4>
 8008738:	9b08      	ldr	r3, [sp, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	db04      	blt.n	8008748 <_dtoa_r+0xa30>
 800873e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008740:	430b      	orrs	r3, r1
 8008742:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008744:	430b      	orrs	r3, r1
 8008746:	d120      	bne.n	800878a <_dtoa_r+0xa72>
 8008748:	2a00      	cmp	r2, #0
 800874a:	dded      	ble.n	8008728 <_dtoa_r+0xa10>
 800874c:	4649      	mov	r1, r9
 800874e:	2201      	movs	r2, #1
 8008750:	4658      	mov	r0, fp
 8008752:	f000 fbb3 	bl	8008ebc <__lshift>
 8008756:	4621      	mov	r1, r4
 8008758:	4681      	mov	r9, r0
 800875a:	f000 fc1b 	bl	8008f94 <__mcmp>
 800875e:	2800      	cmp	r0, #0
 8008760:	dc03      	bgt.n	800876a <_dtoa_r+0xa52>
 8008762:	d1e1      	bne.n	8008728 <_dtoa_r+0xa10>
 8008764:	f018 0f01 	tst.w	r8, #1
 8008768:	d0de      	beq.n	8008728 <_dtoa_r+0xa10>
 800876a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800876e:	d1d8      	bne.n	8008722 <_dtoa_r+0xa0a>
 8008770:	9a00      	ldr	r2, [sp, #0]
 8008772:	2339      	movs	r3, #57	@ 0x39
 8008774:	7013      	strb	r3, [r2, #0]
 8008776:	4633      	mov	r3, r6
 8008778:	461e      	mov	r6, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008780:	2a39      	cmp	r2, #57	@ 0x39
 8008782:	d052      	beq.n	800882a <_dtoa_r+0xb12>
 8008784:	3201      	adds	r2, #1
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	e612      	b.n	80083b0 <_dtoa_r+0x698>
 800878a:	2a00      	cmp	r2, #0
 800878c:	dd07      	ble.n	800879e <_dtoa_r+0xa86>
 800878e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008792:	d0ed      	beq.n	8008770 <_dtoa_r+0xa58>
 8008794:	9a00      	ldr	r2, [sp, #0]
 8008796:	f108 0301 	add.w	r3, r8, #1
 800879a:	7013      	strb	r3, [r2, #0]
 800879c:	e608      	b.n	80083b0 <_dtoa_r+0x698>
 800879e:	9b07      	ldr	r3, [sp, #28]
 80087a0:	9a07      	ldr	r2, [sp, #28]
 80087a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80087a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d028      	beq.n	80087fe <_dtoa_r+0xae6>
 80087ac:	4649      	mov	r1, r9
 80087ae:	2300      	movs	r3, #0
 80087b0:	220a      	movs	r2, #10
 80087b2:	4658      	mov	r0, fp
 80087b4:	f000 f9d6 	bl	8008b64 <__multadd>
 80087b8:	42af      	cmp	r7, r5
 80087ba:	4681      	mov	r9, r0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	f04f 020a 	mov.w	r2, #10
 80087c4:	4639      	mov	r1, r7
 80087c6:	4658      	mov	r0, fp
 80087c8:	d107      	bne.n	80087da <_dtoa_r+0xac2>
 80087ca:	f000 f9cb 	bl	8008b64 <__multadd>
 80087ce:	4607      	mov	r7, r0
 80087d0:	4605      	mov	r5, r0
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	3301      	adds	r3, #1
 80087d6:	9307      	str	r3, [sp, #28]
 80087d8:	e774      	b.n	80086c4 <_dtoa_r+0x9ac>
 80087da:	f000 f9c3 	bl	8008b64 <__multadd>
 80087de:	4629      	mov	r1, r5
 80087e0:	4607      	mov	r7, r0
 80087e2:	2300      	movs	r3, #0
 80087e4:	220a      	movs	r2, #10
 80087e6:	4658      	mov	r0, fp
 80087e8:	f000 f9bc 	bl	8008b64 <__multadd>
 80087ec:	4605      	mov	r5, r0
 80087ee:	e7f0      	b.n	80087d2 <_dtoa_r+0xaba>
 80087f0:	9b00      	ldr	r3, [sp, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	bfcc      	ite	gt
 80087f6:	461e      	movgt	r6, r3
 80087f8:	2601      	movle	r6, #1
 80087fa:	4456      	add	r6, sl
 80087fc:	2700      	movs	r7, #0
 80087fe:	4649      	mov	r1, r9
 8008800:	2201      	movs	r2, #1
 8008802:	4658      	mov	r0, fp
 8008804:	f000 fb5a 	bl	8008ebc <__lshift>
 8008808:	4621      	mov	r1, r4
 800880a:	4681      	mov	r9, r0
 800880c:	f000 fbc2 	bl	8008f94 <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	dcb0      	bgt.n	8008776 <_dtoa_r+0xa5e>
 8008814:	d102      	bne.n	800881c <_dtoa_r+0xb04>
 8008816:	f018 0f01 	tst.w	r8, #1
 800881a:	d1ac      	bne.n	8008776 <_dtoa_r+0xa5e>
 800881c:	4633      	mov	r3, r6
 800881e:	461e      	mov	r6, r3
 8008820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008824:	2a30      	cmp	r2, #48	@ 0x30
 8008826:	d0fa      	beq.n	800881e <_dtoa_r+0xb06>
 8008828:	e5c2      	b.n	80083b0 <_dtoa_r+0x698>
 800882a:	459a      	cmp	sl, r3
 800882c:	d1a4      	bne.n	8008778 <_dtoa_r+0xa60>
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	3301      	adds	r3, #1
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	2331      	movs	r3, #49	@ 0x31
 8008836:	f88a 3000 	strb.w	r3, [sl]
 800883a:	e5b9      	b.n	80083b0 <_dtoa_r+0x698>
 800883c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800883e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800889c <_dtoa_r+0xb84>
 8008842:	b11b      	cbz	r3, 800884c <_dtoa_r+0xb34>
 8008844:	f10a 0308 	add.w	r3, sl, #8
 8008848:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	4650      	mov	r0, sl
 800884e:	b019      	add	sp, #100	@ 0x64
 8008850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008856:	2b01      	cmp	r3, #1
 8008858:	f77f ae37 	ble.w	80084ca <_dtoa_r+0x7b2>
 800885c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800885e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008860:	2001      	movs	r0, #1
 8008862:	e655      	b.n	8008510 <_dtoa_r+0x7f8>
 8008864:	9b00      	ldr	r3, [sp, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	f77f aed6 	ble.w	8008618 <_dtoa_r+0x900>
 800886c:	4656      	mov	r6, sl
 800886e:	4621      	mov	r1, r4
 8008870:	4648      	mov	r0, r9
 8008872:	f7ff f9c6 	bl	8007c02 <quorem>
 8008876:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800887a:	f806 8b01 	strb.w	r8, [r6], #1
 800887e:	9b00      	ldr	r3, [sp, #0]
 8008880:	eba6 020a 	sub.w	r2, r6, sl
 8008884:	4293      	cmp	r3, r2
 8008886:	ddb3      	ble.n	80087f0 <_dtoa_r+0xad8>
 8008888:	4649      	mov	r1, r9
 800888a:	2300      	movs	r3, #0
 800888c:	220a      	movs	r2, #10
 800888e:	4658      	mov	r0, fp
 8008890:	f000 f968 	bl	8008b64 <__multadd>
 8008894:	4681      	mov	r9, r0
 8008896:	e7ea      	b.n	800886e <_dtoa_r+0xb56>
 8008898:	0800a188 	.word	0x0800a188
 800889c:	0800a10c 	.word	0x0800a10c

080088a0 <_free_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4605      	mov	r5, r0
 80088a4:	2900      	cmp	r1, #0
 80088a6:	d041      	beq.n	800892c <_free_r+0x8c>
 80088a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ac:	1f0c      	subs	r4, r1, #4
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfb8      	it	lt
 80088b2:	18e4      	addlt	r4, r4, r3
 80088b4:	f000 f8e8 	bl	8008a88 <__malloc_lock>
 80088b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008930 <_free_r+0x90>)
 80088ba:	6813      	ldr	r3, [r2, #0]
 80088bc:	b933      	cbnz	r3, 80088cc <_free_r+0x2c>
 80088be:	6063      	str	r3, [r4, #4]
 80088c0:	6014      	str	r4, [r2, #0]
 80088c2:	4628      	mov	r0, r5
 80088c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c8:	f000 b8e4 	b.w	8008a94 <__malloc_unlock>
 80088cc:	42a3      	cmp	r3, r4
 80088ce:	d908      	bls.n	80088e2 <_free_r+0x42>
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	1821      	adds	r1, r4, r0
 80088d4:	428b      	cmp	r3, r1
 80088d6:	bf01      	itttt	eq
 80088d8:	6819      	ldreq	r1, [r3, #0]
 80088da:	685b      	ldreq	r3, [r3, #4]
 80088dc:	1809      	addeq	r1, r1, r0
 80088de:	6021      	streq	r1, [r4, #0]
 80088e0:	e7ed      	b.n	80088be <_free_r+0x1e>
 80088e2:	461a      	mov	r2, r3
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b10b      	cbz	r3, 80088ec <_free_r+0x4c>
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d9fa      	bls.n	80088e2 <_free_r+0x42>
 80088ec:	6811      	ldr	r1, [r2, #0]
 80088ee:	1850      	adds	r0, r2, r1
 80088f0:	42a0      	cmp	r0, r4
 80088f2:	d10b      	bne.n	800890c <_free_r+0x6c>
 80088f4:	6820      	ldr	r0, [r4, #0]
 80088f6:	4401      	add	r1, r0
 80088f8:	1850      	adds	r0, r2, r1
 80088fa:	4283      	cmp	r3, r0
 80088fc:	6011      	str	r1, [r2, #0]
 80088fe:	d1e0      	bne.n	80088c2 <_free_r+0x22>
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	6053      	str	r3, [r2, #4]
 8008906:	4408      	add	r0, r1
 8008908:	6010      	str	r0, [r2, #0]
 800890a:	e7da      	b.n	80088c2 <_free_r+0x22>
 800890c:	d902      	bls.n	8008914 <_free_r+0x74>
 800890e:	230c      	movs	r3, #12
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	e7d6      	b.n	80088c2 <_free_r+0x22>
 8008914:	6820      	ldr	r0, [r4, #0]
 8008916:	1821      	adds	r1, r4, r0
 8008918:	428b      	cmp	r3, r1
 800891a:	bf04      	itt	eq
 800891c:	6819      	ldreq	r1, [r3, #0]
 800891e:	685b      	ldreq	r3, [r3, #4]
 8008920:	6063      	str	r3, [r4, #4]
 8008922:	bf04      	itt	eq
 8008924:	1809      	addeq	r1, r1, r0
 8008926:	6021      	streq	r1, [r4, #0]
 8008928:	6054      	str	r4, [r2, #4]
 800892a:	e7ca      	b.n	80088c2 <_free_r+0x22>
 800892c:	bd38      	pop	{r3, r4, r5, pc}
 800892e:	bf00      	nop
 8008930:	20001cfc 	.word	0x20001cfc

08008934 <malloc>:
 8008934:	4b02      	ldr	r3, [pc, #8]	@ (8008940 <malloc+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f000 b825 	b.w	8008988 <_malloc_r>
 800893e:	bf00      	nop
 8008940:	2000001c 	.word	0x2000001c

08008944 <sbrk_aligned>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	4e0f      	ldr	r6, [pc, #60]	@ (8008984 <sbrk_aligned+0x40>)
 8008948:	460c      	mov	r4, r1
 800894a:	6831      	ldr	r1, [r6, #0]
 800894c:	4605      	mov	r5, r0
 800894e:	b911      	cbnz	r1, 8008956 <sbrk_aligned+0x12>
 8008950:	f000 feaa 	bl	80096a8 <_sbrk_r>
 8008954:	6030      	str	r0, [r6, #0]
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f000 fea5 	bl	80096a8 <_sbrk_r>
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	d103      	bne.n	800896a <sbrk_aligned+0x26>
 8008962:	f04f 34ff 	mov.w	r4, #4294967295
 8008966:	4620      	mov	r0, r4
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	1cc4      	adds	r4, r0, #3
 800896c:	f024 0403 	bic.w	r4, r4, #3
 8008970:	42a0      	cmp	r0, r4
 8008972:	d0f8      	beq.n	8008966 <sbrk_aligned+0x22>
 8008974:	1a21      	subs	r1, r4, r0
 8008976:	4628      	mov	r0, r5
 8008978:	f000 fe96 	bl	80096a8 <_sbrk_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d1f2      	bne.n	8008966 <sbrk_aligned+0x22>
 8008980:	e7ef      	b.n	8008962 <sbrk_aligned+0x1e>
 8008982:	bf00      	nop
 8008984:	20001cf8 	.word	0x20001cf8

08008988 <_malloc_r>:
 8008988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800898c:	1ccd      	adds	r5, r1, #3
 800898e:	f025 0503 	bic.w	r5, r5, #3
 8008992:	3508      	adds	r5, #8
 8008994:	2d0c      	cmp	r5, #12
 8008996:	bf38      	it	cc
 8008998:	250c      	movcc	r5, #12
 800899a:	2d00      	cmp	r5, #0
 800899c:	4606      	mov	r6, r0
 800899e:	db01      	blt.n	80089a4 <_malloc_r+0x1c>
 80089a0:	42a9      	cmp	r1, r5
 80089a2:	d904      	bls.n	80089ae <_malloc_r+0x26>
 80089a4:	230c      	movs	r3, #12
 80089a6:	6033      	str	r3, [r6, #0]
 80089a8:	2000      	movs	r0, #0
 80089aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a84 <_malloc_r+0xfc>
 80089b2:	f000 f869 	bl	8008a88 <__malloc_lock>
 80089b6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ba:	461c      	mov	r4, r3
 80089bc:	bb44      	cbnz	r4, 8008a10 <_malloc_r+0x88>
 80089be:	4629      	mov	r1, r5
 80089c0:	4630      	mov	r0, r6
 80089c2:	f7ff ffbf 	bl	8008944 <sbrk_aligned>
 80089c6:	1c43      	adds	r3, r0, #1
 80089c8:	4604      	mov	r4, r0
 80089ca:	d158      	bne.n	8008a7e <_malloc_r+0xf6>
 80089cc:	f8d8 4000 	ldr.w	r4, [r8]
 80089d0:	4627      	mov	r7, r4
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	d143      	bne.n	8008a5e <_malloc_r+0xd6>
 80089d6:	2c00      	cmp	r4, #0
 80089d8:	d04b      	beq.n	8008a72 <_malloc_r+0xea>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	4639      	mov	r1, r7
 80089de:	4630      	mov	r0, r6
 80089e0:	eb04 0903 	add.w	r9, r4, r3
 80089e4:	f000 fe60 	bl	80096a8 <_sbrk_r>
 80089e8:	4581      	cmp	r9, r0
 80089ea:	d142      	bne.n	8008a72 <_malloc_r+0xea>
 80089ec:	6821      	ldr	r1, [r4, #0]
 80089ee:	1a6d      	subs	r5, r5, r1
 80089f0:	4629      	mov	r1, r5
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ffa6 	bl	8008944 <sbrk_aligned>
 80089f8:	3001      	adds	r0, #1
 80089fa:	d03a      	beq.n	8008a72 <_malloc_r+0xea>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	442b      	add	r3, r5
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	f8d8 3000 	ldr.w	r3, [r8]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	bb62      	cbnz	r2, 8008a64 <_malloc_r+0xdc>
 8008a0a:	f8c8 7000 	str.w	r7, [r8]
 8008a0e:	e00f      	b.n	8008a30 <_malloc_r+0xa8>
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	1b52      	subs	r2, r2, r5
 8008a14:	d420      	bmi.n	8008a58 <_malloc_r+0xd0>
 8008a16:	2a0b      	cmp	r2, #11
 8008a18:	d917      	bls.n	8008a4a <_malloc_r+0xc2>
 8008a1a:	1961      	adds	r1, r4, r5
 8008a1c:	42a3      	cmp	r3, r4
 8008a1e:	6025      	str	r5, [r4, #0]
 8008a20:	bf18      	it	ne
 8008a22:	6059      	strne	r1, [r3, #4]
 8008a24:	6863      	ldr	r3, [r4, #4]
 8008a26:	bf08      	it	eq
 8008a28:	f8c8 1000 	streq.w	r1, [r8]
 8008a2c:	5162      	str	r2, [r4, r5]
 8008a2e:	604b      	str	r3, [r1, #4]
 8008a30:	4630      	mov	r0, r6
 8008a32:	f000 f82f 	bl	8008a94 <__malloc_unlock>
 8008a36:	f104 000b 	add.w	r0, r4, #11
 8008a3a:	1d23      	adds	r3, r4, #4
 8008a3c:	f020 0007 	bic.w	r0, r0, #7
 8008a40:	1ac2      	subs	r2, r0, r3
 8008a42:	bf1c      	itt	ne
 8008a44:	1a1b      	subne	r3, r3, r0
 8008a46:	50a3      	strne	r3, [r4, r2]
 8008a48:	e7af      	b.n	80089aa <_malloc_r+0x22>
 8008a4a:	6862      	ldr	r2, [r4, #4]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	bf0c      	ite	eq
 8008a50:	f8c8 2000 	streq.w	r2, [r8]
 8008a54:	605a      	strne	r2, [r3, #4]
 8008a56:	e7eb      	b.n	8008a30 <_malloc_r+0xa8>
 8008a58:	4623      	mov	r3, r4
 8008a5a:	6864      	ldr	r4, [r4, #4]
 8008a5c:	e7ae      	b.n	80089bc <_malloc_r+0x34>
 8008a5e:	463c      	mov	r4, r7
 8008a60:	687f      	ldr	r7, [r7, #4]
 8008a62:	e7b6      	b.n	80089d2 <_malloc_r+0x4a>
 8008a64:	461a      	mov	r2, r3
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	d1fb      	bne.n	8008a64 <_malloc_r+0xdc>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6053      	str	r3, [r2, #4]
 8008a70:	e7de      	b.n	8008a30 <_malloc_r+0xa8>
 8008a72:	230c      	movs	r3, #12
 8008a74:	6033      	str	r3, [r6, #0]
 8008a76:	4630      	mov	r0, r6
 8008a78:	f000 f80c 	bl	8008a94 <__malloc_unlock>
 8008a7c:	e794      	b.n	80089a8 <_malloc_r+0x20>
 8008a7e:	6005      	str	r5, [r0, #0]
 8008a80:	e7d6      	b.n	8008a30 <_malloc_r+0xa8>
 8008a82:	bf00      	nop
 8008a84:	20001cfc 	.word	0x20001cfc

08008a88 <__malloc_lock>:
 8008a88:	4801      	ldr	r0, [pc, #4]	@ (8008a90 <__malloc_lock+0x8>)
 8008a8a:	f7ff b8aa 	b.w	8007be2 <__retarget_lock_acquire_recursive>
 8008a8e:	bf00      	nop
 8008a90:	20001cf4 	.word	0x20001cf4

08008a94 <__malloc_unlock>:
 8008a94:	4801      	ldr	r0, [pc, #4]	@ (8008a9c <__malloc_unlock+0x8>)
 8008a96:	f7ff b8a5 	b.w	8007be4 <__retarget_lock_release_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	20001cf4 	.word	0x20001cf4

08008aa0 <_Balloc>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	69c6      	ldr	r6, [r0, #28]
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	b976      	cbnz	r6, 8008ac8 <_Balloc+0x28>
 8008aaa:	2010      	movs	r0, #16
 8008aac:	f7ff ff42 	bl	8008934 <malloc>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	61e0      	str	r0, [r4, #28]
 8008ab4:	b920      	cbnz	r0, 8008ac0 <_Balloc+0x20>
 8008ab6:	4b18      	ldr	r3, [pc, #96]	@ (8008b18 <_Balloc+0x78>)
 8008ab8:	4818      	ldr	r0, [pc, #96]	@ (8008b1c <_Balloc+0x7c>)
 8008aba:	216b      	movs	r1, #107	@ 0x6b
 8008abc:	f000 fe04 	bl	80096c8 <__assert_func>
 8008ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ac4:	6006      	str	r6, [r0, #0]
 8008ac6:	60c6      	str	r6, [r0, #12]
 8008ac8:	69e6      	ldr	r6, [r4, #28]
 8008aca:	68f3      	ldr	r3, [r6, #12]
 8008acc:	b183      	cbz	r3, 8008af0 <_Balloc+0x50>
 8008ace:	69e3      	ldr	r3, [r4, #28]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ad6:	b9b8      	cbnz	r0, 8008b08 <_Balloc+0x68>
 8008ad8:	2101      	movs	r1, #1
 8008ada:	fa01 f605 	lsl.w	r6, r1, r5
 8008ade:	1d72      	adds	r2, r6, #5
 8008ae0:	0092      	lsls	r2, r2, #2
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fe0e 	bl	8009704 <_calloc_r>
 8008ae8:	b160      	cbz	r0, 8008b04 <_Balloc+0x64>
 8008aea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008aee:	e00e      	b.n	8008b0e <_Balloc+0x6e>
 8008af0:	2221      	movs	r2, #33	@ 0x21
 8008af2:	2104      	movs	r1, #4
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fe05 	bl	8009704 <_calloc_r>
 8008afa:	69e3      	ldr	r3, [r4, #28]
 8008afc:	60f0      	str	r0, [r6, #12]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e4      	bne.n	8008ace <_Balloc+0x2e>
 8008b04:	2000      	movs	r0, #0
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	6802      	ldr	r2, [r0, #0]
 8008b0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b14:	e7f7      	b.n	8008b06 <_Balloc+0x66>
 8008b16:	bf00      	nop
 8008b18:	0800a119 	.word	0x0800a119
 8008b1c:	0800a199 	.word	0x0800a199

08008b20 <_Bfree>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	69c6      	ldr	r6, [r0, #28]
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	b976      	cbnz	r6, 8008b48 <_Bfree+0x28>
 8008b2a:	2010      	movs	r0, #16
 8008b2c:	f7ff ff02 	bl	8008934 <malloc>
 8008b30:	4602      	mov	r2, r0
 8008b32:	61e8      	str	r0, [r5, #28]
 8008b34:	b920      	cbnz	r0, 8008b40 <_Bfree+0x20>
 8008b36:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <_Bfree+0x3c>)
 8008b38:	4809      	ldr	r0, [pc, #36]	@ (8008b60 <_Bfree+0x40>)
 8008b3a:	218f      	movs	r1, #143	@ 0x8f
 8008b3c:	f000 fdc4 	bl	80096c8 <__assert_func>
 8008b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b44:	6006      	str	r6, [r0, #0]
 8008b46:	60c6      	str	r6, [r0, #12]
 8008b48:	b13c      	cbz	r4, 8008b5a <_Bfree+0x3a>
 8008b4a:	69eb      	ldr	r3, [r5, #28]
 8008b4c:	6862      	ldr	r2, [r4, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b54:	6021      	str	r1, [r4, #0]
 8008b56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	0800a119 	.word	0x0800a119
 8008b60:	0800a199 	.word	0x0800a199

08008b64 <__multadd>:
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	690d      	ldr	r5, [r1, #16]
 8008b6a:	4607      	mov	r7, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	461e      	mov	r6, r3
 8008b70:	f101 0c14 	add.w	ip, r1, #20
 8008b74:	2000      	movs	r0, #0
 8008b76:	f8dc 3000 	ldr.w	r3, [ip]
 8008b7a:	b299      	uxth	r1, r3
 8008b7c:	fb02 6101 	mla	r1, r2, r1, r6
 8008b80:	0c1e      	lsrs	r6, r3, #16
 8008b82:	0c0b      	lsrs	r3, r1, #16
 8008b84:	fb02 3306 	mla	r3, r2, r6, r3
 8008b88:	b289      	uxth	r1, r1
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b90:	4285      	cmp	r5, r0
 8008b92:	f84c 1b04 	str.w	r1, [ip], #4
 8008b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b9a:	dcec      	bgt.n	8008b76 <__multadd+0x12>
 8008b9c:	b30e      	cbz	r6, 8008be2 <__multadd+0x7e>
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	dc19      	bgt.n	8008bd8 <__multadd+0x74>
 8008ba4:	6861      	ldr	r1, [r4, #4]
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	3101      	adds	r1, #1
 8008baa:	f7ff ff79 	bl	8008aa0 <_Balloc>
 8008bae:	4680      	mov	r8, r0
 8008bb0:	b928      	cbnz	r0, 8008bbe <__multadd+0x5a>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008be8 <__multadd+0x84>)
 8008bb6:	480d      	ldr	r0, [pc, #52]	@ (8008bec <__multadd+0x88>)
 8008bb8:	21ba      	movs	r1, #186	@ 0xba
 8008bba:	f000 fd85 	bl	80096c8 <__assert_func>
 8008bbe:	6922      	ldr	r2, [r4, #16]
 8008bc0:	3202      	adds	r2, #2
 8008bc2:	f104 010c 	add.w	r1, r4, #12
 8008bc6:	0092      	lsls	r2, r2, #2
 8008bc8:	300c      	adds	r0, #12
 8008bca:	f7ff f80c 	bl	8007be6 <memcpy>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f7ff ffa5 	bl	8008b20 <_Bfree>
 8008bd6:	4644      	mov	r4, r8
 8008bd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bdc:	3501      	adds	r5, #1
 8008bde:	615e      	str	r6, [r3, #20]
 8008be0:	6125      	str	r5, [r4, #16]
 8008be2:	4620      	mov	r0, r4
 8008be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be8:	0800a188 	.word	0x0800a188
 8008bec:	0800a199 	.word	0x0800a199

08008bf0 <__hi0bits>:
 8008bf0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	bf36      	itet	cc
 8008bf8:	0403      	lslcc	r3, r0, #16
 8008bfa:	2000      	movcs	r0, #0
 8008bfc:	2010      	movcc	r0, #16
 8008bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c02:	bf3c      	itt	cc
 8008c04:	021b      	lslcc	r3, r3, #8
 8008c06:	3008      	addcc	r0, #8
 8008c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c0c:	bf3c      	itt	cc
 8008c0e:	011b      	lslcc	r3, r3, #4
 8008c10:	3004      	addcc	r0, #4
 8008c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c16:	bf3c      	itt	cc
 8008c18:	009b      	lslcc	r3, r3, #2
 8008c1a:	3002      	addcc	r0, #2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	db05      	blt.n	8008c2c <__hi0bits+0x3c>
 8008c20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c24:	f100 0001 	add.w	r0, r0, #1
 8008c28:	bf08      	it	eq
 8008c2a:	2020      	moveq	r0, #32
 8008c2c:	4770      	bx	lr

08008c2e <__lo0bits>:
 8008c2e:	6803      	ldr	r3, [r0, #0]
 8008c30:	4602      	mov	r2, r0
 8008c32:	f013 0007 	ands.w	r0, r3, #7
 8008c36:	d00b      	beq.n	8008c50 <__lo0bits+0x22>
 8008c38:	07d9      	lsls	r1, r3, #31
 8008c3a:	d421      	bmi.n	8008c80 <__lo0bits+0x52>
 8008c3c:	0798      	lsls	r0, r3, #30
 8008c3e:	bf49      	itett	mi
 8008c40:	085b      	lsrmi	r3, r3, #1
 8008c42:	089b      	lsrpl	r3, r3, #2
 8008c44:	2001      	movmi	r0, #1
 8008c46:	6013      	strmi	r3, [r2, #0]
 8008c48:	bf5c      	itt	pl
 8008c4a:	6013      	strpl	r3, [r2, #0]
 8008c4c:	2002      	movpl	r0, #2
 8008c4e:	4770      	bx	lr
 8008c50:	b299      	uxth	r1, r3
 8008c52:	b909      	cbnz	r1, 8008c58 <__lo0bits+0x2a>
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	2010      	movs	r0, #16
 8008c58:	b2d9      	uxtb	r1, r3
 8008c5a:	b909      	cbnz	r1, 8008c60 <__lo0bits+0x32>
 8008c5c:	3008      	adds	r0, #8
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	0719      	lsls	r1, r3, #28
 8008c62:	bf04      	itt	eq
 8008c64:	091b      	lsreq	r3, r3, #4
 8008c66:	3004      	addeq	r0, #4
 8008c68:	0799      	lsls	r1, r3, #30
 8008c6a:	bf04      	itt	eq
 8008c6c:	089b      	lsreq	r3, r3, #2
 8008c6e:	3002      	addeq	r0, #2
 8008c70:	07d9      	lsls	r1, r3, #31
 8008c72:	d403      	bmi.n	8008c7c <__lo0bits+0x4e>
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	f100 0001 	add.w	r0, r0, #1
 8008c7a:	d003      	beq.n	8008c84 <__lo0bits+0x56>
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	4770      	bx	lr
 8008c80:	2000      	movs	r0, #0
 8008c82:	4770      	bx	lr
 8008c84:	2020      	movs	r0, #32
 8008c86:	4770      	bx	lr

08008c88 <__i2b>:
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	f7ff ff07 	bl	8008aa0 <_Balloc>
 8008c92:	4602      	mov	r2, r0
 8008c94:	b928      	cbnz	r0, 8008ca2 <__i2b+0x1a>
 8008c96:	4b05      	ldr	r3, [pc, #20]	@ (8008cac <__i2b+0x24>)
 8008c98:	4805      	ldr	r0, [pc, #20]	@ (8008cb0 <__i2b+0x28>)
 8008c9a:	f240 1145 	movw	r1, #325	@ 0x145
 8008c9e:	f000 fd13 	bl	80096c8 <__assert_func>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	6144      	str	r4, [r0, #20]
 8008ca6:	6103      	str	r3, [r0, #16]
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	bf00      	nop
 8008cac:	0800a188 	.word	0x0800a188
 8008cb0:	0800a199 	.word	0x0800a199

08008cb4 <__multiply>:
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4614      	mov	r4, r2
 8008cba:	690a      	ldr	r2, [r1, #16]
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	bfa8      	it	ge
 8008cc2:	4623      	movge	r3, r4
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	bfa4      	itt	ge
 8008cc8:	460c      	movge	r4, r1
 8008cca:	461f      	movge	r7, r3
 8008ccc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008cd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cd4:	68a3      	ldr	r3, [r4, #8]
 8008cd6:	6861      	ldr	r1, [r4, #4]
 8008cd8:	eb0a 0609 	add.w	r6, sl, r9
 8008cdc:	42b3      	cmp	r3, r6
 8008cde:	b085      	sub	sp, #20
 8008ce0:	bfb8      	it	lt
 8008ce2:	3101      	addlt	r1, #1
 8008ce4:	f7ff fedc 	bl	8008aa0 <_Balloc>
 8008ce8:	b930      	cbnz	r0, 8008cf8 <__multiply+0x44>
 8008cea:	4602      	mov	r2, r0
 8008cec:	4b44      	ldr	r3, [pc, #272]	@ (8008e00 <__multiply+0x14c>)
 8008cee:	4845      	ldr	r0, [pc, #276]	@ (8008e04 <__multiply+0x150>)
 8008cf0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008cf4:	f000 fce8 	bl	80096c8 <__assert_func>
 8008cf8:	f100 0514 	add.w	r5, r0, #20
 8008cfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d00:	462b      	mov	r3, r5
 8008d02:	2200      	movs	r2, #0
 8008d04:	4543      	cmp	r3, r8
 8008d06:	d321      	bcc.n	8008d4c <__multiply+0x98>
 8008d08:	f107 0114 	add.w	r1, r7, #20
 8008d0c:	f104 0214 	add.w	r2, r4, #20
 8008d10:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d14:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	1b13      	subs	r3, r2, r4
 8008d1c:	3b15      	subs	r3, #21
 8008d1e:	f023 0303 	bic.w	r3, r3, #3
 8008d22:	3304      	adds	r3, #4
 8008d24:	f104 0715 	add.w	r7, r4, #21
 8008d28:	42ba      	cmp	r2, r7
 8008d2a:	bf38      	it	cc
 8008d2c:	2304      	movcc	r3, #4
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	9103      	str	r1, [sp, #12]
 8008d34:	428b      	cmp	r3, r1
 8008d36:	d80c      	bhi.n	8008d52 <__multiply+0x9e>
 8008d38:	2e00      	cmp	r6, #0
 8008d3a:	dd03      	ble.n	8008d44 <__multiply+0x90>
 8008d3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d05b      	beq.n	8008dfc <__multiply+0x148>
 8008d44:	6106      	str	r6, [r0, #16]
 8008d46:	b005      	add	sp, #20
 8008d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4c:	f843 2b04 	str.w	r2, [r3], #4
 8008d50:	e7d8      	b.n	8008d04 <__multiply+0x50>
 8008d52:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d56:	f1ba 0f00 	cmp.w	sl, #0
 8008d5a:	d024      	beq.n	8008da6 <__multiply+0xf2>
 8008d5c:	f104 0e14 	add.w	lr, r4, #20
 8008d60:	46a9      	mov	r9, r5
 8008d62:	f04f 0c00 	mov.w	ip, #0
 8008d66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d6a:	f8d9 3000 	ldr.w	r3, [r9]
 8008d6e:	fa1f fb87 	uxth.w	fp, r7
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d78:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d7c:	f8d9 7000 	ldr.w	r7, [r9]
 8008d80:	4463      	add	r3, ip
 8008d82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d86:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d94:	4572      	cmp	r2, lr
 8008d96:	f849 3b04 	str.w	r3, [r9], #4
 8008d9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d9e:	d8e2      	bhi.n	8008d66 <__multiply+0xb2>
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	f845 c003 	str.w	ip, [r5, r3]
 8008da6:	9b03      	ldr	r3, [sp, #12]
 8008da8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dac:	3104      	adds	r1, #4
 8008dae:	f1b9 0f00 	cmp.w	r9, #0
 8008db2:	d021      	beq.n	8008df8 <__multiply+0x144>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	f104 0c14 	add.w	ip, r4, #20
 8008dba:	46ae      	mov	lr, r5
 8008dbc:	f04f 0a00 	mov.w	sl, #0
 8008dc0:	f8bc b000 	ldrh.w	fp, [ip]
 8008dc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008dc8:	fb09 770b 	mla	r7, r9, fp, r7
 8008dcc:	4457      	add	r7, sl
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dd4:	f84e 3b04 	str.w	r3, [lr], #4
 8008dd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ddc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008de0:	f8be 3000 	ldrh.w	r3, [lr]
 8008de4:	fb09 330a 	mla	r3, r9, sl, r3
 8008de8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008dec:	4562      	cmp	r2, ip
 8008dee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008df2:	d8e5      	bhi.n	8008dc0 <__multiply+0x10c>
 8008df4:	9f01      	ldr	r7, [sp, #4]
 8008df6:	51eb      	str	r3, [r5, r7]
 8008df8:	3504      	adds	r5, #4
 8008dfa:	e799      	b.n	8008d30 <__multiply+0x7c>
 8008dfc:	3e01      	subs	r6, #1
 8008dfe:	e79b      	b.n	8008d38 <__multiply+0x84>
 8008e00:	0800a188 	.word	0x0800a188
 8008e04:	0800a199 	.word	0x0800a199

08008e08 <__pow5mult>:
 8008e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4615      	mov	r5, r2
 8008e0e:	f012 0203 	ands.w	r2, r2, #3
 8008e12:	4607      	mov	r7, r0
 8008e14:	460e      	mov	r6, r1
 8008e16:	d007      	beq.n	8008e28 <__pow5mult+0x20>
 8008e18:	4c25      	ldr	r4, [pc, #148]	@ (8008eb0 <__pow5mult+0xa8>)
 8008e1a:	3a01      	subs	r2, #1
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e22:	f7ff fe9f 	bl	8008b64 <__multadd>
 8008e26:	4606      	mov	r6, r0
 8008e28:	10ad      	asrs	r5, r5, #2
 8008e2a:	d03d      	beq.n	8008ea8 <__pow5mult+0xa0>
 8008e2c:	69fc      	ldr	r4, [r7, #28]
 8008e2e:	b97c      	cbnz	r4, 8008e50 <__pow5mult+0x48>
 8008e30:	2010      	movs	r0, #16
 8008e32:	f7ff fd7f 	bl	8008934 <malloc>
 8008e36:	4602      	mov	r2, r0
 8008e38:	61f8      	str	r0, [r7, #28]
 8008e3a:	b928      	cbnz	r0, 8008e48 <__pow5mult+0x40>
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb4 <__pow5mult+0xac>)
 8008e3e:	481e      	ldr	r0, [pc, #120]	@ (8008eb8 <__pow5mult+0xb0>)
 8008e40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e44:	f000 fc40 	bl	80096c8 <__assert_func>
 8008e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e4c:	6004      	str	r4, [r0, #0]
 8008e4e:	60c4      	str	r4, [r0, #12]
 8008e50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e58:	b94c      	cbnz	r4, 8008e6e <__pow5mult+0x66>
 8008e5a:	f240 2171 	movw	r1, #625	@ 0x271
 8008e5e:	4638      	mov	r0, r7
 8008e60:	f7ff ff12 	bl	8008c88 <__i2b>
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	6003      	str	r3, [r0, #0]
 8008e6e:	f04f 0900 	mov.w	r9, #0
 8008e72:	07eb      	lsls	r3, r5, #31
 8008e74:	d50a      	bpl.n	8008e8c <__pow5mult+0x84>
 8008e76:	4631      	mov	r1, r6
 8008e78:	4622      	mov	r2, r4
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f7ff ff1a 	bl	8008cb4 <__multiply>
 8008e80:	4631      	mov	r1, r6
 8008e82:	4680      	mov	r8, r0
 8008e84:	4638      	mov	r0, r7
 8008e86:	f7ff fe4b 	bl	8008b20 <_Bfree>
 8008e8a:	4646      	mov	r6, r8
 8008e8c:	106d      	asrs	r5, r5, #1
 8008e8e:	d00b      	beq.n	8008ea8 <__pow5mult+0xa0>
 8008e90:	6820      	ldr	r0, [r4, #0]
 8008e92:	b938      	cbnz	r0, 8008ea4 <__pow5mult+0x9c>
 8008e94:	4622      	mov	r2, r4
 8008e96:	4621      	mov	r1, r4
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ff0b 	bl	8008cb4 <__multiply>
 8008e9e:	6020      	str	r0, [r4, #0]
 8008ea0:	f8c0 9000 	str.w	r9, [r0]
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	e7e4      	b.n	8008e72 <__pow5mult+0x6a>
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eae:	bf00      	nop
 8008eb0:	0800a1f4 	.word	0x0800a1f4
 8008eb4:	0800a119 	.word	0x0800a119
 8008eb8:	0800a199 	.word	0x0800a199

08008ebc <__lshift>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6849      	ldr	r1, [r1, #4]
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eca:	68a3      	ldr	r3, [r4, #8]
 8008ecc:	4607      	mov	r7, r0
 8008ece:	4691      	mov	r9, r2
 8008ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ed4:	f108 0601 	add.w	r6, r8, #1
 8008ed8:	42b3      	cmp	r3, r6
 8008eda:	db0b      	blt.n	8008ef4 <__lshift+0x38>
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff fddf 	bl	8008aa0 <_Balloc>
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	b948      	cbnz	r0, 8008efa <__lshift+0x3e>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	4b28      	ldr	r3, [pc, #160]	@ (8008f8c <__lshift+0xd0>)
 8008eea:	4829      	ldr	r0, [pc, #164]	@ (8008f90 <__lshift+0xd4>)
 8008eec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008ef0:	f000 fbea 	bl	80096c8 <__assert_func>
 8008ef4:	3101      	adds	r1, #1
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	e7ee      	b.n	8008ed8 <__lshift+0x1c>
 8008efa:	2300      	movs	r3, #0
 8008efc:	f100 0114 	add.w	r1, r0, #20
 8008f00:	f100 0210 	add.w	r2, r0, #16
 8008f04:	4618      	mov	r0, r3
 8008f06:	4553      	cmp	r3, sl
 8008f08:	db33      	blt.n	8008f72 <__lshift+0xb6>
 8008f0a:	6920      	ldr	r0, [r4, #16]
 8008f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f10:	f104 0314 	add.w	r3, r4, #20
 8008f14:	f019 091f 	ands.w	r9, r9, #31
 8008f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f20:	d02b      	beq.n	8008f7a <__lshift+0xbe>
 8008f22:	f1c9 0e20 	rsb	lr, r9, #32
 8008f26:	468a      	mov	sl, r1
 8008f28:	2200      	movs	r2, #0
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	fa00 f009 	lsl.w	r0, r0, r9
 8008f30:	4310      	orrs	r0, r2
 8008f32:	f84a 0b04 	str.w	r0, [sl], #4
 8008f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f3a:	459c      	cmp	ip, r3
 8008f3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f40:	d8f3      	bhi.n	8008f2a <__lshift+0x6e>
 8008f42:	ebac 0304 	sub.w	r3, ip, r4
 8008f46:	3b15      	subs	r3, #21
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	f104 0015 	add.w	r0, r4, #21
 8008f52:	4584      	cmp	ip, r0
 8008f54:	bf38      	it	cc
 8008f56:	2304      	movcc	r3, #4
 8008f58:	50ca      	str	r2, [r1, r3]
 8008f5a:	b10a      	cbz	r2, 8008f60 <__lshift+0xa4>
 8008f5c:	f108 0602 	add.w	r6, r8, #2
 8008f60:	3e01      	subs	r6, #1
 8008f62:	4638      	mov	r0, r7
 8008f64:	612e      	str	r6, [r5, #16]
 8008f66:	4621      	mov	r1, r4
 8008f68:	f7ff fdda 	bl	8008b20 <_Bfree>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f72:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f76:	3301      	adds	r3, #1
 8008f78:	e7c5      	b.n	8008f06 <__lshift+0x4a>
 8008f7a:	3904      	subs	r1, #4
 8008f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f80:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f84:	459c      	cmp	ip, r3
 8008f86:	d8f9      	bhi.n	8008f7c <__lshift+0xc0>
 8008f88:	e7ea      	b.n	8008f60 <__lshift+0xa4>
 8008f8a:	bf00      	nop
 8008f8c:	0800a188 	.word	0x0800a188
 8008f90:	0800a199 	.word	0x0800a199

08008f94 <__mcmp>:
 8008f94:	690a      	ldr	r2, [r1, #16]
 8008f96:	4603      	mov	r3, r0
 8008f98:	6900      	ldr	r0, [r0, #16]
 8008f9a:	1a80      	subs	r0, r0, r2
 8008f9c:	b530      	push	{r4, r5, lr}
 8008f9e:	d10e      	bne.n	8008fbe <__mcmp+0x2a>
 8008fa0:	3314      	adds	r3, #20
 8008fa2:	3114      	adds	r1, #20
 8008fa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fb4:	4295      	cmp	r5, r2
 8008fb6:	d003      	beq.n	8008fc0 <__mcmp+0x2c>
 8008fb8:	d205      	bcs.n	8008fc6 <__mcmp+0x32>
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbe:	bd30      	pop	{r4, r5, pc}
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d3f3      	bcc.n	8008fac <__mcmp+0x18>
 8008fc4:	e7fb      	b.n	8008fbe <__mcmp+0x2a>
 8008fc6:	2001      	movs	r0, #1
 8008fc8:	e7f9      	b.n	8008fbe <__mcmp+0x2a>
	...

08008fcc <__mdiff>:
 8008fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	4689      	mov	r9, r1
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4648      	mov	r0, r9
 8008fd8:	4614      	mov	r4, r2
 8008fda:	f7ff ffdb 	bl	8008f94 <__mcmp>
 8008fde:	1e05      	subs	r5, r0, #0
 8008fe0:	d112      	bne.n	8009008 <__mdiff+0x3c>
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	f7ff fd5b 	bl	8008aa0 <_Balloc>
 8008fea:	4602      	mov	r2, r0
 8008fec:	b928      	cbnz	r0, 8008ffa <__mdiff+0x2e>
 8008fee:	4b3f      	ldr	r3, [pc, #252]	@ (80090ec <__mdiff+0x120>)
 8008ff0:	f240 2137 	movw	r1, #567	@ 0x237
 8008ff4:	483e      	ldr	r0, [pc, #248]	@ (80090f0 <__mdiff+0x124>)
 8008ff6:	f000 fb67 	bl	80096c8 <__assert_func>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009000:	4610      	mov	r0, r2
 8009002:	b003      	add	sp, #12
 8009004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009008:	bfbc      	itt	lt
 800900a:	464b      	movlt	r3, r9
 800900c:	46a1      	movlt	r9, r4
 800900e:	4630      	mov	r0, r6
 8009010:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009014:	bfba      	itte	lt
 8009016:	461c      	movlt	r4, r3
 8009018:	2501      	movlt	r5, #1
 800901a:	2500      	movge	r5, #0
 800901c:	f7ff fd40 	bl	8008aa0 <_Balloc>
 8009020:	4602      	mov	r2, r0
 8009022:	b918      	cbnz	r0, 800902c <__mdiff+0x60>
 8009024:	4b31      	ldr	r3, [pc, #196]	@ (80090ec <__mdiff+0x120>)
 8009026:	f240 2145 	movw	r1, #581	@ 0x245
 800902a:	e7e3      	b.n	8008ff4 <__mdiff+0x28>
 800902c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009030:	6926      	ldr	r6, [r4, #16]
 8009032:	60c5      	str	r5, [r0, #12]
 8009034:	f109 0310 	add.w	r3, r9, #16
 8009038:	f109 0514 	add.w	r5, r9, #20
 800903c:	f104 0e14 	add.w	lr, r4, #20
 8009040:	f100 0b14 	add.w	fp, r0, #20
 8009044:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009048:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800904c:	9301      	str	r3, [sp, #4]
 800904e:	46d9      	mov	r9, fp
 8009050:	f04f 0c00 	mov.w	ip, #0
 8009054:	9b01      	ldr	r3, [sp, #4]
 8009056:	f85e 0b04 	ldr.w	r0, [lr], #4
 800905a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	fa1f f38a 	uxth.w	r3, sl
 8009064:	4619      	mov	r1, r3
 8009066:	b283      	uxth	r3, r0
 8009068:	1acb      	subs	r3, r1, r3
 800906a:	0c00      	lsrs	r0, r0, #16
 800906c:	4463      	add	r3, ip
 800906e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009072:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009076:	b29b      	uxth	r3, r3
 8009078:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800907c:	4576      	cmp	r6, lr
 800907e:	f849 3b04 	str.w	r3, [r9], #4
 8009082:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009086:	d8e5      	bhi.n	8009054 <__mdiff+0x88>
 8009088:	1b33      	subs	r3, r6, r4
 800908a:	3b15      	subs	r3, #21
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	3415      	adds	r4, #21
 8009092:	3304      	adds	r3, #4
 8009094:	42a6      	cmp	r6, r4
 8009096:	bf38      	it	cc
 8009098:	2304      	movcc	r3, #4
 800909a:	441d      	add	r5, r3
 800909c:	445b      	add	r3, fp
 800909e:	461e      	mov	r6, r3
 80090a0:	462c      	mov	r4, r5
 80090a2:	4544      	cmp	r4, r8
 80090a4:	d30e      	bcc.n	80090c4 <__mdiff+0xf8>
 80090a6:	f108 0103 	add.w	r1, r8, #3
 80090aa:	1b49      	subs	r1, r1, r5
 80090ac:	f021 0103 	bic.w	r1, r1, #3
 80090b0:	3d03      	subs	r5, #3
 80090b2:	45a8      	cmp	r8, r5
 80090b4:	bf38      	it	cc
 80090b6:	2100      	movcc	r1, #0
 80090b8:	440b      	add	r3, r1
 80090ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090be:	b191      	cbz	r1, 80090e6 <__mdiff+0x11a>
 80090c0:	6117      	str	r7, [r2, #16]
 80090c2:	e79d      	b.n	8009000 <__mdiff+0x34>
 80090c4:	f854 1b04 	ldr.w	r1, [r4], #4
 80090c8:	46e6      	mov	lr, ip
 80090ca:	0c08      	lsrs	r0, r1, #16
 80090cc:	fa1c fc81 	uxtah	ip, ip, r1
 80090d0:	4471      	add	r1, lr
 80090d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090d6:	b289      	uxth	r1, r1
 80090d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090dc:	f846 1b04 	str.w	r1, [r6], #4
 80090e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090e4:	e7dd      	b.n	80090a2 <__mdiff+0xd6>
 80090e6:	3f01      	subs	r7, #1
 80090e8:	e7e7      	b.n	80090ba <__mdiff+0xee>
 80090ea:	bf00      	nop
 80090ec:	0800a188 	.word	0x0800a188
 80090f0:	0800a199 	.word	0x0800a199

080090f4 <__d2b>:
 80090f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090f8:	460f      	mov	r7, r1
 80090fa:	2101      	movs	r1, #1
 80090fc:	ec59 8b10 	vmov	r8, r9, d0
 8009100:	4616      	mov	r6, r2
 8009102:	f7ff fccd 	bl	8008aa0 <_Balloc>
 8009106:	4604      	mov	r4, r0
 8009108:	b930      	cbnz	r0, 8009118 <__d2b+0x24>
 800910a:	4602      	mov	r2, r0
 800910c:	4b23      	ldr	r3, [pc, #140]	@ (800919c <__d2b+0xa8>)
 800910e:	4824      	ldr	r0, [pc, #144]	@ (80091a0 <__d2b+0xac>)
 8009110:	f240 310f 	movw	r1, #783	@ 0x30f
 8009114:	f000 fad8 	bl	80096c8 <__assert_func>
 8009118:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800911c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009120:	b10d      	cbz	r5, 8009126 <__d2b+0x32>
 8009122:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	f1b8 0300 	subs.w	r3, r8, #0
 800912c:	d023      	beq.n	8009176 <__d2b+0x82>
 800912e:	4668      	mov	r0, sp
 8009130:	9300      	str	r3, [sp, #0]
 8009132:	f7ff fd7c 	bl	8008c2e <__lo0bits>
 8009136:	e9dd 1200 	ldrd	r1, r2, [sp]
 800913a:	b1d0      	cbz	r0, 8009172 <__d2b+0x7e>
 800913c:	f1c0 0320 	rsb	r3, r0, #32
 8009140:	fa02 f303 	lsl.w	r3, r2, r3
 8009144:	430b      	orrs	r3, r1
 8009146:	40c2      	lsrs	r2, r0
 8009148:	6163      	str	r3, [r4, #20]
 800914a:	9201      	str	r2, [sp, #4]
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	61a3      	str	r3, [r4, #24]
 8009150:	2b00      	cmp	r3, #0
 8009152:	bf0c      	ite	eq
 8009154:	2201      	moveq	r2, #1
 8009156:	2202      	movne	r2, #2
 8009158:	6122      	str	r2, [r4, #16]
 800915a:	b1a5      	cbz	r5, 8009186 <__d2b+0x92>
 800915c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009160:	4405      	add	r5, r0
 8009162:	603d      	str	r5, [r7, #0]
 8009164:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009168:	6030      	str	r0, [r6, #0]
 800916a:	4620      	mov	r0, r4
 800916c:	b003      	add	sp, #12
 800916e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009172:	6161      	str	r1, [r4, #20]
 8009174:	e7ea      	b.n	800914c <__d2b+0x58>
 8009176:	a801      	add	r0, sp, #4
 8009178:	f7ff fd59 	bl	8008c2e <__lo0bits>
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	6163      	str	r3, [r4, #20]
 8009180:	3020      	adds	r0, #32
 8009182:	2201      	movs	r2, #1
 8009184:	e7e8      	b.n	8009158 <__d2b+0x64>
 8009186:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800918a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800918e:	6038      	str	r0, [r7, #0]
 8009190:	6918      	ldr	r0, [r3, #16]
 8009192:	f7ff fd2d 	bl	8008bf0 <__hi0bits>
 8009196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800919a:	e7e5      	b.n	8009168 <__d2b+0x74>
 800919c:	0800a188 	.word	0x0800a188
 80091a0:	0800a199 	.word	0x0800a199

080091a4 <__sfputc_r>:
 80091a4:	6893      	ldr	r3, [r2, #8]
 80091a6:	3b01      	subs	r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	b410      	push	{r4}
 80091ac:	6093      	str	r3, [r2, #8]
 80091ae:	da08      	bge.n	80091c2 <__sfputc_r+0x1e>
 80091b0:	6994      	ldr	r4, [r2, #24]
 80091b2:	42a3      	cmp	r3, r4
 80091b4:	db01      	blt.n	80091ba <__sfputc_r+0x16>
 80091b6:	290a      	cmp	r1, #10
 80091b8:	d103      	bne.n	80091c2 <__sfputc_r+0x1e>
 80091ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091be:	f000 b9df 	b.w	8009580 <__swbuf_r>
 80091c2:	6813      	ldr	r3, [r2, #0]
 80091c4:	1c58      	adds	r0, r3, #1
 80091c6:	6010      	str	r0, [r2, #0]
 80091c8:	7019      	strb	r1, [r3, #0]
 80091ca:	4608      	mov	r0, r1
 80091cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <__sfputs_r>:
 80091d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d4:	4606      	mov	r6, r0
 80091d6:	460f      	mov	r7, r1
 80091d8:	4614      	mov	r4, r2
 80091da:	18d5      	adds	r5, r2, r3
 80091dc:	42ac      	cmp	r4, r5
 80091de:	d101      	bne.n	80091e4 <__sfputs_r+0x12>
 80091e0:	2000      	movs	r0, #0
 80091e2:	e007      	b.n	80091f4 <__sfputs_r+0x22>
 80091e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e8:	463a      	mov	r2, r7
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff ffda 	bl	80091a4 <__sfputc_r>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d1f3      	bne.n	80091dc <__sfputs_r+0xa>
 80091f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091f8 <_vfiprintf_r>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	460d      	mov	r5, r1
 80091fe:	b09d      	sub	sp, #116	@ 0x74
 8009200:	4614      	mov	r4, r2
 8009202:	4698      	mov	r8, r3
 8009204:	4606      	mov	r6, r0
 8009206:	b118      	cbz	r0, 8009210 <_vfiprintf_r+0x18>
 8009208:	6a03      	ldr	r3, [r0, #32]
 800920a:	b90b      	cbnz	r3, 8009210 <_vfiprintf_r+0x18>
 800920c:	f7fe fbe0 	bl	80079d0 <__sinit>
 8009210:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009212:	07d9      	lsls	r1, r3, #31
 8009214:	d405      	bmi.n	8009222 <_vfiprintf_r+0x2a>
 8009216:	89ab      	ldrh	r3, [r5, #12]
 8009218:	059a      	lsls	r2, r3, #22
 800921a:	d402      	bmi.n	8009222 <_vfiprintf_r+0x2a>
 800921c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800921e:	f7fe fce0 	bl	8007be2 <__retarget_lock_acquire_recursive>
 8009222:	89ab      	ldrh	r3, [r5, #12]
 8009224:	071b      	lsls	r3, r3, #28
 8009226:	d501      	bpl.n	800922c <_vfiprintf_r+0x34>
 8009228:	692b      	ldr	r3, [r5, #16]
 800922a:	b99b      	cbnz	r3, 8009254 <_vfiprintf_r+0x5c>
 800922c:	4629      	mov	r1, r5
 800922e:	4630      	mov	r0, r6
 8009230:	f000 f9e4 	bl	80095fc <__swsetup_r>
 8009234:	b170      	cbz	r0, 8009254 <_vfiprintf_r+0x5c>
 8009236:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009238:	07dc      	lsls	r4, r3, #31
 800923a:	d504      	bpl.n	8009246 <_vfiprintf_r+0x4e>
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	b01d      	add	sp, #116	@ 0x74
 8009242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	0598      	lsls	r0, r3, #22
 800924a:	d4f7      	bmi.n	800923c <_vfiprintf_r+0x44>
 800924c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800924e:	f7fe fcc9 	bl	8007be4 <__retarget_lock_release_recursive>
 8009252:	e7f3      	b.n	800923c <_vfiprintf_r+0x44>
 8009254:	2300      	movs	r3, #0
 8009256:	9309      	str	r3, [sp, #36]	@ 0x24
 8009258:	2320      	movs	r3, #32
 800925a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800925e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009262:	2330      	movs	r3, #48	@ 0x30
 8009264:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009414 <_vfiprintf_r+0x21c>
 8009268:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800926c:	f04f 0901 	mov.w	r9, #1
 8009270:	4623      	mov	r3, r4
 8009272:	469a      	mov	sl, r3
 8009274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009278:	b10a      	cbz	r2, 800927e <_vfiprintf_r+0x86>
 800927a:	2a25      	cmp	r2, #37	@ 0x25
 800927c:	d1f9      	bne.n	8009272 <_vfiprintf_r+0x7a>
 800927e:	ebba 0b04 	subs.w	fp, sl, r4
 8009282:	d00b      	beq.n	800929c <_vfiprintf_r+0xa4>
 8009284:	465b      	mov	r3, fp
 8009286:	4622      	mov	r2, r4
 8009288:	4629      	mov	r1, r5
 800928a:	4630      	mov	r0, r6
 800928c:	f7ff ffa1 	bl	80091d2 <__sfputs_r>
 8009290:	3001      	adds	r0, #1
 8009292:	f000 80a7 	beq.w	80093e4 <_vfiprintf_r+0x1ec>
 8009296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009298:	445a      	add	r2, fp
 800929a:	9209      	str	r2, [sp, #36]	@ 0x24
 800929c:	f89a 3000 	ldrb.w	r3, [sl]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 809f 	beq.w	80093e4 <_vfiprintf_r+0x1ec>
 80092a6:	2300      	movs	r3, #0
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092b0:	f10a 0a01 	add.w	sl, sl, #1
 80092b4:	9304      	str	r3, [sp, #16]
 80092b6:	9307      	str	r3, [sp, #28]
 80092b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80092be:	4654      	mov	r4, sl
 80092c0:	2205      	movs	r2, #5
 80092c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c6:	4853      	ldr	r0, [pc, #332]	@ (8009414 <_vfiprintf_r+0x21c>)
 80092c8:	f7f6 ff82 	bl	80001d0 <memchr>
 80092cc:	9a04      	ldr	r2, [sp, #16]
 80092ce:	b9d8      	cbnz	r0, 8009308 <_vfiprintf_r+0x110>
 80092d0:	06d1      	lsls	r1, r2, #27
 80092d2:	bf44      	itt	mi
 80092d4:	2320      	movmi	r3, #32
 80092d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092da:	0713      	lsls	r3, r2, #28
 80092dc:	bf44      	itt	mi
 80092de:	232b      	movmi	r3, #43	@ 0x2b
 80092e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092e4:	f89a 3000 	ldrb.w	r3, [sl]
 80092e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ea:	d015      	beq.n	8009318 <_vfiprintf_r+0x120>
 80092ec:	9a07      	ldr	r2, [sp, #28]
 80092ee:	4654      	mov	r4, sl
 80092f0:	2000      	movs	r0, #0
 80092f2:	f04f 0c0a 	mov.w	ip, #10
 80092f6:	4621      	mov	r1, r4
 80092f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092fc:	3b30      	subs	r3, #48	@ 0x30
 80092fe:	2b09      	cmp	r3, #9
 8009300:	d94b      	bls.n	800939a <_vfiprintf_r+0x1a2>
 8009302:	b1b0      	cbz	r0, 8009332 <_vfiprintf_r+0x13a>
 8009304:	9207      	str	r2, [sp, #28]
 8009306:	e014      	b.n	8009332 <_vfiprintf_r+0x13a>
 8009308:	eba0 0308 	sub.w	r3, r0, r8
 800930c:	fa09 f303 	lsl.w	r3, r9, r3
 8009310:	4313      	orrs	r3, r2
 8009312:	9304      	str	r3, [sp, #16]
 8009314:	46a2      	mov	sl, r4
 8009316:	e7d2      	b.n	80092be <_vfiprintf_r+0xc6>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	1d19      	adds	r1, r3, #4
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	9103      	str	r1, [sp, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	bfbb      	ittet	lt
 8009324:	425b      	neglt	r3, r3
 8009326:	f042 0202 	orrlt.w	r2, r2, #2
 800932a:	9307      	strge	r3, [sp, #28]
 800932c:	9307      	strlt	r3, [sp, #28]
 800932e:	bfb8      	it	lt
 8009330:	9204      	strlt	r2, [sp, #16]
 8009332:	7823      	ldrb	r3, [r4, #0]
 8009334:	2b2e      	cmp	r3, #46	@ 0x2e
 8009336:	d10a      	bne.n	800934e <_vfiprintf_r+0x156>
 8009338:	7863      	ldrb	r3, [r4, #1]
 800933a:	2b2a      	cmp	r3, #42	@ 0x2a
 800933c:	d132      	bne.n	80093a4 <_vfiprintf_r+0x1ac>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	1d1a      	adds	r2, r3, #4
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	9203      	str	r2, [sp, #12]
 8009346:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800934a:	3402      	adds	r4, #2
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009424 <_vfiprintf_r+0x22c>
 8009352:	7821      	ldrb	r1, [r4, #0]
 8009354:	2203      	movs	r2, #3
 8009356:	4650      	mov	r0, sl
 8009358:	f7f6 ff3a 	bl	80001d0 <memchr>
 800935c:	b138      	cbz	r0, 800936e <_vfiprintf_r+0x176>
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	eba0 000a 	sub.w	r0, r0, sl
 8009364:	2240      	movs	r2, #64	@ 0x40
 8009366:	4082      	lsls	r2, r0
 8009368:	4313      	orrs	r3, r2
 800936a:	3401      	adds	r4, #1
 800936c:	9304      	str	r3, [sp, #16]
 800936e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009372:	4829      	ldr	r0, [pc, #164]	@ (8009418 <_vfiprintf_r+0x220>)
 8009374:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009378:	2206      	movs	r2, #6
 800937a:	f7f6 ff29 	bl	80001d0 <memchr>
 800937e:	2800      	cmp	r0, #0
 8009380:	d03f      	beq.n	8009402 <_vfiprintf_r+0x20a>
 8009382:	4b26      	ldr	r3, [pc, #152]	@ (800941c <_vfiprintf_r+0x224>)
 8009384:	bb1b      	cbnz	r3, 80093ce <_vfiprintf_r+0x1d6>
 8009386:	9b03      	ldr	r3, [sp, #12]
 8009388:	3307      	adds	r3, #7
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	3308      	adds	r3, #8
 8009390:	9303      	str	r3, [sp, #12]
 8009392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009394:	443b      	add	r3, r7
 8009396:	9309      	str	r3, [sp, #36]	@ 0x24
 8009398:	e76a      	b.n	8009270 <_vfiprintf_r+0x78>
 800939a:	fb0c 3202 	mla	r2, ip, r2, r3
 800939e:	460c      	mov	r4, r1
 80093a0:	2001      	movs	r0, #1
 80093a2:	e7a8      	b.n	80092f6 <_vfiprintf_r+0xfe>
 80093a4:	2300      	movs	r3, #0
 80093a6:	3401      	adds	r4, #1
 80093a8:	9305      	str	r3, [sp, #20]
 80093aa:	4619      	mov	r1, r3
 80093ac:	f04f 0c0a 	mov.w	ip, #10
 80093b0:	4620      	mov	r0, r4
 80093b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b6:	3a30      	subs	r2, #48	@ 0x30
 80093b8:	2a09      	cmp	r2, #9
 80093ba:	d903      	bls.n	80093c4 <_vfiprintf_r+0x1cc>
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0c6      	beq.n	800934e <_vfiprintf_r+0x156>
 80093c0:	9105      	str	r1, [sp, #20]
 80093c2:	e7c4      	b.n	800934e <_vfiprintf_r+0x156>
 80093c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c8:	4604      	mov	r4, r0
 80093ca:	2301      	movs	r3, #1
 80093cc:	e7f0      	b.n	80093b0 <_vfiprintf_r+0x1b8>
 80093ce:	ab03      	add	r3, sp, #12
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	462a      	mov	r2, r5
 80093d4:	4b12      	ldr	r3, [pc, #72]	@ (8009420 <_vfiprintf_r+0x228>)
 80093d6:	a904      	add	r1, sp, #16
 80093d8:	4630      	mov	r0, r6
 80093da:	f7fd feb5 	bl	8007148 <_printf_float>
 80093de:	4607      	mov	r7, r0
 80093e0:	1c78      	adds	r0, r7, #1
 80093e2:	d1d6      	bne.n	8009392 <_vfiprintf_r+0x19a>
 80093e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093e6:	07d9      	lsls	r1, r3, #31
 80093e8:	d405      	bmi.n	80093f6 <_vfiprintf_r+0x1fe>
 80093ea:	89ab      	ldrh	r3, [r5, #12]
 80093ec:	059a      	lsls	r2, r3, #22
 80093ee:	d402      	bmi.n	80093f6 <_vfiprintf_r+0x1fe>
 80093f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093f2:	f7fe fbf7 	bl	8007be4 <__retarget_lock_release_recursive>
 80093f6:	89ab      	ldrh	r3, [r5, #12]
 80093f8:	065b      	lsls	r3, r3, #25
 80093fa:	f53f af1f 	bmi.w	800923c <_vfiprintf_r+0x44>
 80093fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009400:	e71e      	b.n	8009240 <_vfiprintf_r+0x48>
 8009402:	ab03      	add	r3, sp, #12
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4b05      	ldr	r3, [pc, #20]	@ (8009420 <_vfiprintf_r+0x228>)
 800940a:	a904      	add	r1, sp, #16
 800940c:	4630      	mov	r0, r6
 800940e:	f7fe f933 	bl	8007678 <_printf_i>
 8009412:	e7e4      	b.n	80093de <_vfiprintf_r+0x1e6>
 8009414:	0800a2f0 	.word	0x0800a2f0
 8009418:	0800a2fa 	.word	0x0800a2fa
 800941c:	08007149 	.word	0x08007149
 8009420:	080091d3 	.word	0x080091d3
 8009424:	0800a2f6 	.word	0x0800a2f6

08009428 <__sflush_r>:
 8009428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	0716      	lsls	r6, r2, #28
 8009432:	4605      	mov	r5, r0
 8009434:	460c      	mov	r4, r1
 8009436:	d454      	bmi.n	80094e2 <__sflush_r+0xba>
 8009438:	684b      	ldr	r3, [r1, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	dc02      	bgt.n	8009444 <__sflush_r+0x1c>
 800943e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	dd48      	ble.n	80094d6 <__sflush_r+0xae>
 8009444:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009446:	2e00      	cmp	r6, #0
 8009448:	d045      	beq.n	80094d6 <__sflush_r+0xae>
 800944a:	2300      	movs	r3, #0
 800944c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009450:	682f      	ldr	r7, [r5, #0]
 8009452:	6a21      	ldr	r1, [r4, #32]
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	d030      	beq.n	80094ba <__sflush_r+0x92>
 8009458:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800945a:	89a3      	ldrh	r3, [r4, #12]
 800945c:	0759      	lsls	r1, r3, #29
 800945e:	d505      	bpl.n	800946c <__sflush_r+0x44>
 8009460:	6863      	ldr	r3, [r4, #4]
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009466:	b10b      	cbz	r3, 800946c <__sflush_r+0x44>
 8009468:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800946a:	1ad2      	subs	r2, r2, r3
 800946c:	2300      	movs	r3, #0
 800946e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009470:	6a21      	ldr	r1, [r4, #32]
 8009472:	4628      	mov	r0, r5
 8009474:	47b0      	blx	r6
 8009476:	1c43      	adds	r3, r0, #1
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	d106      	bne.n	800948a <__sflush_r+0x62>
 800947c:	6829      	ldr	r1, [r5, #0]
 800947e:	291d      	cmp	r1, #29
 8009480:	d82b      	bhi.n	80094da <__sflush_r+0xb2>
 8009482:	4a2a      	ldr	r2, [pc, #168]	@ (800952c <__sflush_r+0x104>)
 8009484:	410a      	asrs	r2, r1
 8009486:	07d6      	lsls	r6, r2, #31
 8009488:	d427      	bmi.n	80094da <__sflush_r+0xb2>
 800948a:	2200      	movs	r2, #0
 800948c:	6062      	str	r2, [r4, #4]
 800948e:	04d9      	lsls	r1, r3, #19
 8009490:	6922      	ldr	r2, [r4, #16]
 8009492:	6022      	str	r2, [r4, #0]
 8009494:	d504      	bpl.n	80094a0 <__sflush_r+0x78>
 8009496:	1c42      	adds	r2, r0, #1
 8009498:	d101      	bne.n	800949e <__sflush_r+0x76>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	b903      	cbnz	r3, 80094a0 <__sflush_r+0x78>
 800949e:	6560      	str	r0, [r4, #84]	@ 0x54
 80094a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094a2:	602f      	str	r7, [r5, #0]
 80094a4:	b1b9      	cbz	r1, 80094d6 <__sflush_r+0xae>
 80094a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094aa:	4299      	cmp	r1, r3
 80094ac:	d002      	beq.n	80094b4 <__sflush_r+0x8c>
 80094ae:	4628      	mov	r0, r5
 80094b0:	f7ff f9f6 	bl	80088a0 <_free_r>
 80094b4:	2300      	movs	r3, #0
 80094b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80094b8:	e00d      	b.n	80094d6 <__sflush_r+0xae>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4628      	mov	r0, r5
 80094be:	47b0      	blx	r6
 80094c0:	4602      	mov	r2, r0
 80094c2:	1c50      	adds	r0, r2, #1
 80094c4:	d1c9      	bne.n	800945a <__sflush_r+0x32>
 80094c6:	682b      	ldr	r3, [r5, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d0c6      	beq.n	800945a <__sflush_r+0x32>
 80094cc:	2b1d      	cmp	r3, #29
 80094ce:	d001      	beq.n	80094d4 <__sflush_r+0xac>
 80094d0:	2b16      	cmp	r3, #22
 80094d2:	d11e      	bne.n	8009512 <__sflush_r+0xea>
 80094d4:	602f      	str	r7, [r5, #0]
 80094d6:	2000      	movs	r0, #0
 80094d8:	e022      	b.n	8009520 <__sflush_r+0xf8>
 80094da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094de:	b21b      	sxth	r3, r3
 80094e0:	e01b      	b.n	800951a <__sflush_r+0xf2>
 80094e2:	690f      	ldr	r7, [r1, #16]
 80094e4:	2f00      	cmp	r7, #0
 80094e6:	d0f6      	beq.n	80094d6 <__sflush_r+0xae>
 80094e8:	0793      	lsls	r3, r2, #30
 80094ea:	680e      	ldr	r6, [r1, #0]
 80094ec:	bf08      	it	eq
 80094ee:	694b      	ldreq	r3, [r1, #20]
 80094f0:	600f      	str	r7, [r1, #0]
 80094f2:	bf18      	it	ne
 80094f4:	2300      	movne	r3, #0
 80094f6:	eba6 0807 	sub.w	r8, r6, r7
 80094fa:	608b      	str	r3, [r1, #8]
 80094fc:	f1b8 0f00 	cmp.w	r8, #0
 8009500:	dde9      	ble.n	80094d6 <__sflush_r+0xae>
 8009502:	6a21      	ldr	r1, [r4, #32]
 8009504:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009506:	4643      	mov	r3, r8
 8009508:	463a      	mov	r2, r7
 800950a:	4628      	mov	r0, r5
 800950c:	47b0      	blx	r6
 800950e:	2800      	cmp	r0, #0
 8009510:	dc08      	bgt.n	8009524 <__sflush_r+0xfc>
 8009512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009524:	4407      	add	r7, r0
 8009526:	eba8 0800 	sub.w	r8, r8, r0
 800952a:	e7e7      	b.n	80094fc <__sflush_r+0xd4>
 800952c:	dfbffffe 	.word	0xdfbffffe

08009530 <_fflush_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	690b      	ldr	r3, [r1, #16]
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	b913      	cbnz	r3, 8009540 <_fflush_r+0x10>
 800953a:	2500      	movs	r5, #0
 800953c:	4628      	mov	r0, r5
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	b118      	cbz	r0, 800954a <_fflush_r+0x1a>
 8009542:	6a03      	ldr	r3, [r0, #32]
 8009544:	b90b      	cbnz	r3, 800954a <_fflush_r+0x1a>
 8009546:	f7fe fa43 	bl	80079d0 <__sinit>
 800954a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0f3      	beq.n	800953a <_fflush_r+0xa>
 8009552:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009554:	07d0      	lsls	r0, r2, #31
 8009556:	d404      	bmi.n	8009562 <_fflush_r+0x32>
 8009558:	0599      	lsls	r1, r3, #22
 800955a:	d402      	bmi.n	8009562 <_fflush_r+0x32>
 800955c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800955e:	f7fe fb40 	bl	8007be2 <__retarget_lock_acquire_recursive>
 8009562:	4628      	mov	r0, r5
 8009564:	4621      	mov	r1, r4
 8009566:	f7ff ff5f 	bl	8009428 <__sflush_r>
 800956a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800956c:	07da      	lsls	r2, r3, #31
 800956e:	4605      	mov	r5, r0
 8009570:	d4e4      	bmi.n	800953c <_fflush_r+0xc>
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	059b      	lsls	r3, r3, #22
 8009576:	d4e1      	bmi.n	800953c <_fflush_r+0xc>
 8009578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800957a:	f7fe fb33 	bl	8007be4 <__retarget_lock_release_recursive>
 800957e:	e7dd      	b.n	800953c <_fflush_r+0xc>

08009580 <__swbuf_r>:
 8009580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009582:	460e      	mov	r6, r1
 8009584:	4614      	mov	r4, r2
 8009586:	4605      	mov	r5, r0
 8009588:	b118      	cbz	r0, 8009592 <__swbuf_r+0x12>
 800958a:	6a03      	ldr	r3, [r0, #32]
 800958c:	b90b      	cbnz	r3, 8009592 <__swbuf_r+0x12>
 800958e:	f7fe fa1f 	bl	80079d0 <__sinit>
 8009592:	69a3      	ldr	r3, [r4, #24]
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	071a      	lsls	r2, r3, #28
 800959a:	d501      	bpl.n	80095a0 <__swbuf_r+0x20>
 800959c:	6923      	ldr	r3, [r4, #16]
 800959e:	b943      	cbnz	r3, 80095b2 <__swbuf_r+0x32>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4628      	mov	r0, r5
 80095a4:	f000 f82a 	bl	80095fc <__swsetup_r>
 80095a8:	b118      	cbz	r0, 80095b2 <__swbuf_r+0x32>
 80095aa:	f04f 37ff 	mov.w	r7, #4294967295
 80095ae:	4638      	mov	r0, r7
 80095b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	6922      	ldr	r2, [r4, #16]
 80095b6:	1a98      	subs	r0, r3, r2
 80095b8:	6963      	ldr	r3, [r4, #20]
 80095ba:	b2f6      	uxtb	r6, r6
 80095bc:	4283      	cmp	r3, r0
 80095be:	4637      	mov	r7, r6
 80095c0:	dc05      	bgt.n	80095ce <__swbuf_r+0x4e>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7ff ffb3 	bl	8009530 <_fflush_r>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d1ed      	bne.n	80095aa <__swbuf_r+0x2a>
 80095ce:	68a3      	ldr	r3, [r4, #8]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	701e      	strb	r6, [r3, #0]
 80095dc:	6962      	ldr	r2, [r4, #20]
 80095de:	1c43      	adds	r3, r0, #1
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d004      	beq.n	80095ee <__swbuf_r+0x6e>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	07db      	lsls	r3, r3, #31
 80095e8:	d5e1      	bpl.n	80095ae <__swbuf_r+0x2e>
 80095ea:	2e0a      	cmp	r6, #10
 80095ec:	d1df      	bne.n	80095ae <__swbuf_r+0x2e>
 80095ee:	4621      	mov	r1, r4
 80095f0:	4628      	mov	r0, r5
 80095f2:	f7ff ff9d 	bl	8009530 <_fflush_r>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d0d9      	beq.n	80095ae <__swbuf_r+0x2e>
 80095fa:	e7d6      	b.n	80095aa <__swbuf_r+0x2a>

080095fc <__swsetup_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4b29      	ldr	r3, [pc, #164]	@ (80096a4 <__swsetup_r+0xa8>)
 8009600:	4605      	mov	r5, r0
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	460c      	mov	r4, r1
 8009606:	b118      	cbz	r0, 8009610 <__swsetup_r+0x14>
 8009608:	6a03      	ldr	r3, [r0, #32]
 800960a:	b90b      	cbnz	r3, 8009610 <__swsetup_r+0x14>
 800960c:	f7fe f9e0 	bl	80079d0 <__sinit>
 8009610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009614:	0719      	lsls	r1, r3, #28
 8009616:	d422      	bmi.n	800965e <__swsetup_r+0x62>
 8009618:	06da      	lsls	r2, r3, #27
 800961a:	d407      	bmi.n	800962c <__swsetup_r+0x30>
 800961c:	2209      	movs	r2, #9
 800961e:	602a      	str	r2, [r5, #0]
 8009620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	f04f 30ff 	mov.w	r0, #4294967295
 800962a:	e033      	b.n	8009694 <__swsetup_r+0x98>
 800962c:	0758      	lsls	r0, r3, #29
 800962e:	d512      	bpl.n	8009656 <__swsetup_r+0x5a>
 8009630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009632:	b141      	cbz	r1, 8009646 <__swsetup_r+0x4a>
 8009634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009638:	4299      	cmp	r1, r3
 800963a:	d002      	beq.n	8009642 <__swsetup_r+0x46>
 800963c:	4628      	mov	r0, r5
 800963e:	f7ff f92f 	bl	80088a0 <_free_r>
 8009642:	2300      	movs	r3, #0
 8009644:	6363      	str	r3, [r4, #52]	@ 0x34
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800964c:	81a3      	strh	r3, [r4, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f043 0308 	orr.w	r3, r3, #8
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	b94b      	cbnz	r3, 8009676 <__swsetup_r+0x7a>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800966c:	d003      	beq.n	8009676 <__swsetup_r+0x7a>
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 f8b3 	bl	80097dc <__smakebuf_r>
 8009676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967a:	f013 0201 	ands.w	r2, r3, #1
 800967e:	d00a      	beq.n	8009696 <__swsetup_r+0x9a>
 8009680:	2200      	movs	r2, #0
 8009682:	60a2      	str	r2, [r4, #8]
 8009684:	6962      	ldr	r2, [r4, #20]
 8009686:	4252      	negs	r2, r2
 8009688:	61a2      	str	r2, [r4, #24]
 800968a:	6922      	ldr	r2, [r4, #16]
 800968c:	b942      	cbnz	r2, 80096a0 <__swsetup_r+0xa4>
 800968e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009692:	d1c5      	bne.n	8009620 <__swsetup_r+0x24>
 8009694:	bd38      	pop	{r3, r4, r5, pc}
 8009696:	0799      	lsls	r1, r3, #30
 8009698:	bf58      	it	pl
 800969a:	6962      	ldrpl	r2, [r4, #20]
 800969c:	60a2      	str	r2, [r4, #8]
 800969e:	e7f4      	b.n	800968a <__swsetup_r+0x8e>
 80096a0:	2000      	movs	r0, #0
 80096a2:	e7f7      	b.n	8009694 <__swsetup_r+0x98>
 80096a4:	2000001c 	.word	0x2000001c

080096a8 <_sbrk_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d06      	ldr	r5, [pc, #24]	@ (80096c4 <_sbrk_r+0x1c>)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	602b      	str	r3, [r5, #0]
 80096b4:	f7f8 fa0c 	bl	8001ad0 <_sbrk>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_sbrk_r+0x1a>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_sbrk_r+0x1a>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	20001cf0 	.word	0x20001cf0

080096c8 <__assert_func>:
 80096c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096ca:	4614      	mov	r4, r2
 80096cc:	461a      	mov	r2, r3
 80096ce:	4b09      	ldr	r3, [pc, #36]	@ (80096f4 <__assert_func+0x2c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4605      	mov	r5, r0
 80096d4:	68d8      	ldr	r0, [r3, #12]
 80096d6:	b954      	cbnz	r4, 80096ee <__assert_func+0x26>
 80096d8:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <__assert_func+0x30>)
 80096da:	461c      	mov	r4, r3
 80096dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e0:	9100      	str	r1, [sp, #0]
 80096e2:	462b      	mov	r3, r5
 80096e4:	4905      	ldr	r1, [pc, #20]	@ (80096fc <__assert_func+0x34>)
 80096e6:	f000 f841 	bl	800976c <fiprintf>
 80096ea:	f000 f8d5 	bl	8009898 <abort>
 80096ee:	4b04      	ldr	r3, [pc, #16]	@ (8009700 <__assert_func+0x38>)
 80096f0:	e7f4      	b.n	80096dc <__assert_func+0x14>
 80096f2:	bf00      	nop
 80096f4:	2000001c 	.word	0x2000001c
 80096f8:	0800a346 	.word	0x0800a346
 80096fc:	0800a318 	.word	0x0800a318
 8009700:	0800a30b 	.word	0x0800a30b

08009704 <_calloc_r>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	fba1 5402 	umull	r5, r4, r1, r2
 800970a:	b93c      	cbnz	r4, 800971c <_calloc_r+0x18>
 800970c:	4629      	mov	r1, r5
 800970e:	f7ff f93b 	bl	8008988 <_malloc_r>
 8009712:	4606      	mov	r6, r0
 8009714:	b928      	cbnz	r0, 8009722 <_calloc_r+0x1e>
 8009716:	2600      	movs	r6, #0
 8009718:	4630      	mov	r0, r6
 800971a:	bd70      	pop	{r4, r5, r6, pc}
 800971c:	220c      	movs	r2, #12
 800971e:	6002      	str	r2, [r0, #0]
 8009720:	e7f9      	b.n	8009716 <_calloc_r+0x12>
 8009722:	462a      	mov	r2, r5
 8009724:	4621      	mov	r1, r4
 8009726:	f7fe f9de 	bl	8007ae6 <memset>
 800972a:	e7f5      	b.n	8009718 <_calloc_r+0x14>

0800972c <__ascii_mbtowc>:
 800972c:	b082      	sub	sp, #8
 800972e:	b901      	cbnz	r1, 8009732 <__ascii_mbtowc+0x6>
 8009730:	a901      	add	r1, sp, #4
 8009732:	b142      	cbz	r2, 8009746 <__ascii_mbtowc+0x1a>
 8009734:	b14b      	cbz	r3, 800974a <__ascii_mbtowc+0x1e>
 8009736:	7813      	ldrb	r3, [r2, #0]
 8009738:	600b      	str	r3, [r1, #0]
 800973a:	7812      	ldrb	r2, [r2, #0]
 800973c:	1e10      	subs	r0, r2, #0
 800973e:	bf18      	it	ne
 8009740:	2001      	movne	r0, #1
 8009742:	b002      	add	sp, #8
 8009744:	4770      	bx	lr
 8009746:	4610      	mov	r0, r2
 8009748:	e7fb      	b.n	8009742 <__ascii_mbtowc+0x16>
 800974a:	f06f 0001 	mvn.w	r0, #1
 800974e:	e7f8      	b.n	8009742 <__ascii_mbtowc+0x16>

08009750 <__ascii_wctomb>:
 8009750:	4603      	mov	r3, r0
 8009752:	4608      	mov	r0, r1
 8009754:	b141      	cbz	r1, 8009768 <__ascii_wctomb+0x18>
 8009756:	2aff      	cmp	r2, #255	@ 0xff
 8009758:	d904      	bls.n	8009764 <__ascii_wctomb+0x14>
 800975a:	228a      	movs	r2, #138	@ 0x8a
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	4770      	bx	lr
 8009764:	700a      	strb	r2, [r1, #0]
 8009766:	2001      	movs	r0, #1
 8009768:	4770      	bx	lr
	...

0800976c <fiprintf>:
 800976c:	b40e      	push	{r1, r2, r3}
 800976e:	b503      	push	{r0, r1, lr}
 8009770:	4601      	mov	r1, r0
 8009772:	ab03      	add	r3, sp, #12
 8009774:	4805      	ldr	r0, [pc, #20]	@ (800978c <fiprintf+0x20>)
 8009776:	f853 2b04 	ldr.w	r2, [r3], #4
 800977a:	6800      	ldr	r0, [r0, #0]
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	f7ff fd3b 	bl	80091f8 <_vfiprintf_r>
 8009782:	b002      	add	sp, #8
 8009784:	f85d eb04 	ldr.w	lr, [sp], #4
 8009788:	b003      	add	sp, #12
 800978a:	4770      	bx	lr
 800978c:	2000001c 	.word	0x2000001c

08009790 <__swhatbuf_r>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	460c      	mov	r4, r1
 8009794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009798:	2900      	cmp	r1, #0
 800979a:	b096      	sub	sp, #88	@ 0x58
 800979c:	4615      	mov	r5, r2
 800979e:	461e      	mov	r6, r3
 80097a0:	da0d      	bge.n	80097be <__swhatbuf_r+0x2e>
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097a8:	f04f 0100 	mov.w	r1, #0
 80097ac:	bf14      	ite	ne
 80097ae:	2340      	movne	r3, #64	@ 0x40
 80097b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097b4:	2000      	movs	r0, #0
 80097b6:	6031      	str	r1, [r6, #0]
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	b016      	add	sp, #88	@ 0x58
 80097bc:	bd70      	pop	{r4, r5, r6, pc}
 80097be:	466a      	mov	r2, sp
 80097c0:	f000 f848 	bl	8009854 <_fstat_r>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	dbec      	blt.n	80097a2 <__swhatbuf_r+0x12>
 80097c8:	9901      	ldr	r1, [sp, #4]
 80097ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097d2:	4259      	negs	r1, r3
 80097d4:	4159      	adcs	r1, r3
 80097d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097da:	e7eb      	b.n	80097b4 <__swhatbuf_r+0x24>

080097dc <__smakebuf_r>:
 80097dc:	898b      	ldrh	r3, [r1, #12]
 80097de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097e0:	079d      	lsls	r5, r3, #30
 80097e2:	4606      	mov	r6, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	d507      	bpl.n	80097f8 <__smakebuf_r+0x1c>
 80097e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097ec:	6023      	str	r3, [r4, #0]
 80097ee:	6123      	str	r3, [r4, #16]
 80097f0:	2301      	movs	r3, #1
 80097f2:	6163      	str	r3, [r4, #20]
 80097f4:	b003      	add	sp, #12
 80097f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f8:	ab01      	add	r3, sp, #4
 80097fa:	466a      	mov	r2, sp
 80097fc:	f7ff ffc8 	bl	8009790 <__swhatbuf_r>
 8009800:	9f00      	ldr	r7, [sp, #0]
 8009802:	4605      	mov	r5, r0
 8009804:	4639      	mov	r1, r7
 8009806:	4630      	mov	r0, r6
 8009808:	f7ff f8be 	bl	8008988 <_malloc_r>
 800980c:	b948      	cbnz	r0, 8009822 <__smakebuf_r+0x46>
 800980e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009812:	059a      	lsls	r2, r3, #22
 8009814:	d4ee      	bmi.n	80097f4 <__smakebuf_r+0x18>
 8009816:	f023 0303 	bic.w	r3, r3, #3
 800981a:	f043 0302 	orr.w	r3, r3, #2
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	e7e2      	b.n	80097e8 <__smakebuf_r+0xc>
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	6020      	str	r0, [r4, #0]
 8009826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800982a:	81a3      	strh	r3, [r4, #12]
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009832:	b15b      	cbz	r3, 800984c <__smakebuf_r+0x70>
 8009834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009838:	4630      	mov	r0, r6
 800983a:	f000 f81d 	bl	8009878 <_isatty_r>
 800983e:	b128      	cbz	r0, 800984c <__smakebuf_r+0x70>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	f043 0301 	orr.w	r3, r3, #1
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	431d      	orrs	r5, r3
 8009850:	81a5      	strh	r5, [r4, #12]
 8009852:	e7cf      	b.n	80097f4 <__smakebuf_r+0x18>

08009854 <_fstat_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d07      	ldr	r5, [pc, #28]	@ (8009874 <_fstat_r+0x20>)
 8009858:	2300      	movs	r3, #0
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	4611      	mov	r1, r2
 8009860:	602b      	str	r3, [r5, #0]
 8009862:	f7f8 f90d 	bl	8001a80 <_fstat>
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	d102      	bne.n	8009870 <_fstat_r+0x1c>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	b103      	cbz	r3, 8009870 <_fstat_r+0x1c>
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	bd38      	pop	{r3, r4, r5, pc}
 8009872:	bf00      	nop
 8009874:	20001cf0 	.word	0x20001cf0

08009878 <_isatty_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4d06      	ldr	r5, [pc, #24]	@ (8009894 <_isatty_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	602b      	str	r3, [r5, #0]
 8009884:	f7f8 f90c 	bl	8001aa0 <_isatty>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_isatty_r+0x1a>
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	b103      	cbz	r3, 8009892 <_isatty_r+0x1a>
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	20001cf0 	.word	0x20001cf0

08009898 <abort>:
 8009898:	b508      	push	{r3, lr}
 800989a:	2006      	movs	r0, #6
 800989c:	f000 f82c 	bl	80098f8 <raise>
 80098a0:	2001      	movs	r0, #1
 80098a2:	f7f8 f89d 	bl	80019e0 <_exit>

080098a6 <_raise_r>:
 80098a6:	291f      	cmp	r1, #31
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4605      	mov	r5, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	d904      	bls.n	80098ba <_raise_r+0x14>
 80098b0:	2316      	movs	r3, #22
 80098b2:	6003      	str	r3, [r0, #0]
 80098b4:	f04f 30ff 	mov.w	r0, #4294967295
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80098bc:	b112      	cbz	r2, 80098c4 <_raise_r+0x1e>
 80098be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098c2:	b94b      	cbnz	r3, 80098d8 <_raise_r+0x32>
 80098c4:	4628      	mov	r0, r5
 80098c6:	f000 f831 	bl	800992c <_getpid_r>
 80098ca:	4622      	mov	r2, r4
 80098cc:	4601      	mov	r1, r0
 80098ce:	4628      	mov	r0, r5
 80098d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098d4:	f000 b818 	b.w	8009908 <_kill_r>
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d00a      	beq.n	80098f2 <_raise_r+0x4c>
 80098dc:	1c59      	adds	r1, r3, #1
 80098de:	d103      	bne.n	80098e8 <_raise_r+0x42>
 80098e0:	2316      	movs	r3, #22
 80098e2:	6003      	str	r3, [r0, #0]
 80098e4:	2001      	movs	r0, #1
 80098e6:	e7e7      	b.n	80098b8 <_raise_r+0x12>
 80098e8:	2100      	movs	r1, #0
 80098ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098ee:	4620      	mov	r0, r4
 80098f0:	4798      	blx	r3
 80098f2:	2000      	movs	r0, #0
 80098f4:	e7e0      	b.n	80098b8 <_raise_r+0x12>
	...

080098f8 <raise>:
 80098f8:	4b02      	ldr	r3, [pc, #8]	@ (8009904 <raise+0xc>)
 80098fa:	4601      	mov	r1, r0
 80098fc:	6818      	ldr	r0, [r3, #0]
 80098fe:	f7ff bfd2 	b.w	80098a6 <_raise_r>
 8009902:	bf00      	nop
 8009904:	2000001c 	.word	0x2000001c

08009908 <_kill_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4d07      	ldr	r5, [pc, #28]	@ (8009928 <_kill_r+0x20>)
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	4608      	mov	r0, r1
 8009912:	4611      	mov	r1, r2
 8009914:	602b      	str	r3, [r5, #0]
 8009916:	f7f8 f853 	bl	80019c0 <_kill>
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	d102      	bne.n	8009924 <_kill_r+0x1c>
 800991e:	682b      	ldr	r3, [r5, #0]
 8009920:	b103      	cbz	r3, 8009924 <_kill_r+0x1c>
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	bd38      	pop	{r3, r4, r5, pc}
 8009926:	bf00      	nop
 8009928:	20001cf0 	.word	0x20001cf0

0800992c <_getpid_r>:
 800992c:	f7f8 b840 	b.w	80019b0 <_getpid>

08009930 <log>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	ed2d 8b02 	vpush	{d8}
 8009936:	ec55 4b10 	vmov	r4, r5, d0
 800993a:	f000 f8dd 	bl	8009af8 <__ieee754_log>
 800993e:	4622      	mov	r2, r4
 8009940:	462b      	mov	r3, r5
 8009942:	4620      	mov	r0, r4
 8009944:	4629      	mov	r1, r5
 8009946:	eeb0 8a40 	vmov.f32	s16, s0
 800994a:	eef0 8a60 	vmov.f32	s17, s1
 800994e:	f7f7 f8ed 	bl	8000b2c <__aeabi_dcmpun>
 8009952:	b998      	cbnz	r0, 800997c <log+0x4c>
 8009954:	2200      	movs	r2, #0
 8009956:	2300      	movs	r3, #0
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	f7f7 f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8009960:	b960      	cbnz	r0, 800997c <log+0x4c>
 8009962:	2200      	movs	r2, #0
 8009964:	2300      	movs	r3, #0
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f7 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800996e:	b160      	cbz	r0, 800998a <log+0x5a>
 8009970:	f7fe f90c 	bl	8007b8c <__errno>
 8009974:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80099a0 <log+0x70>
 8009978:	2322      	movs	r3, #34	@ 0x22
 800997a:	6003      	str	r3, [r0, #0]
 800997c:	eeb0 0a48 	vmov.f32	s0, s16
 8009980:	eef0 0a68 	vmov.f32	s1, s17
 8009984:	ecbd 8b02 	vpop	{d8}
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	f7fe f8ff 	bl	8007b8c <__errno>
 800998e:	ecbd 8b02 	vpop	{d8}
 8009992:	2321      	movs	r3, #33	@ 0x21
 8009994:	6003      	str	r3, [r0, #0]
 8009996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800999a:	4803      	ldr	r0, [pc, #12]	@ (80099a8 <log+0x78>)
 800999c:	f000 b85c 	b.w	8009a58 <nan>
 80099a0:	00000000 	.word	0x00000000
 80099a4:	fff00000 	.word	0xfff00000
 80099a8:	0800a346 	.word	0x0800a346

080099ac <expf>:
 80099ac:	b508      	push	{r3, lr}
 80099ae:	ed2d 8b02 	vpush	{d8}
 80099b2:	eef0 8a40 	vmov.f32	s17, s0
 80099b6:	f000 fa55 	bl	8009e64 <__ieee754_expf>
 80099ba:	eeb0 8a40 	vmov.f32	s16, s0
 80099be:	eeb0 0a68 	vmov.f32	s0, s17
 80099c2:	f000 f851 	bl	8009a68 <finitef>
 80099c6:	b160      	cbz	r0, 80099e2 <expf+0x36>
 80099c8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009a08 <expf+0x5c>
 80099cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80099d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d4:	dd0a      	ble.n	80099ec <expf+0x40>
 80099d6:	f7fe f8d9 	bl	8007b8c <__errno>
 80099da:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8009a0c <expf+0x60>
 80099de:	2322      	movs	r3, #34	@ 0x22
 80099e0:	6003      	str	r3, [r0, #0]
 80099e2:	eeb0 0a48 	vmov.f32	s0, s16
 80099e6:	ecbd 8b02 	vpop	{d8}
 80099ea:	bd08      	pop	{r3, pc}
 80099ec:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009a10 <expf+0x64>
 80099f0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80099f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f8:	d5f3      	bpl.n	80099e2 <expf+0x36>
 80099fa:	f7fe f8c7 	bl	8007b8c <__errno>
 80099fe:	2322      	movs	r3, #34	@ 0x22
 8009a00:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8009a14 <expf+0x68>
 8009a04:	6003      	str	r3, [r0, #0]
 8009a06:	e7ec      	b.n	80099e2 <expf+0x36>
 8009a08:	42b17217 	.word	0x42b17217
 8009a0c:	7f800000 	.word	0x7f800000
 8009a10:	c2cff1b5 	.word	0xc2cff1b5
 8009a14:	00000000 	.word	0x00000000

08009a18 <sqrtf>:
 8009a18:	b508      	push	{r3, lr}
 8009a1a:	ed2d 8b02 	vpush	{d8}
 8009a1e:	eeb0 8a40 	vmov.f32	s16, s0
 8009a22:	f000 f865 	bl	8009af0 <__ieee754_sqrtf>
 8009a26:	eeb4 8a48 	vcmp.f32	s16, s16
 8009a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a2e:	d60c      	bvs.n	8009a4a <sqrtf+0x32>
 8009a30:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009a50 <sqrtf+0x38>
 8009a34:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3c:	d505      	bpl.n	8009a4a <sqrtf+0x32>
 8009a3e:	f7fe f8a5 	bl	8007b8c <__errno>
 8009a42:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009a46:	2321      	movs	r3, #33	@ 0x21
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	ecbd 8b02 	vpop	{d8}
 8009a4e:	bd08      	pop	{r3, pc}
	...

08009a58 <nan>:
 8009a58:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009a60 <nan+0x8>
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	00000000 	.word	0x00000000
 8009a64:	7ff80000 	.word	0x7ff80000

08009a68 <finitef>:
 8009a68:	ee10 3a10 	vmov	r3, s0
 8009a6c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009a70:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009a74:	bfac      	ite	ge
 8009a76:	2000      	movge	r0, #0
 8009a78:	2001      	movlt	r0, #1
 8009a7a:	4770      	bx	lr

08009a7c <fminf>:
 8009a7c:	b508      	push	{r3, lr}
 8009a7e:	ed2d 8b02 	vpush	{d8}
 8009a82:	eeb0 8a40 	vmov.f32	s16, s0
 8009a86:	eef0 8a60 	vmov.f32	s17, s1
 8009a8a:	f000 f815 	bl	8009ab8 <__fpclassifyf>
 8009a8e:	b930      	cbnz	r0, 8009a9e <fminf+0x22>
 8009a90:	eeb0 8a68 	vmov.f32	s16, s17
 8009a94:	eeb0 0a48 	vmov.f32	s0, s16
 8009a98:	ecbd 8b02 	vpop	{d8}
 8009a9c:	bd08      	pop	{r3, pc}
 8009a9e:	eeb0 0a68 	vmov.f32	s0, s17
 8009aa2:	f000 f809 	bl	8009ab8 <__fpclassifyf>
 8009aa6:	2800      	cmp	r0, #0
 8009aa8:	d0f4      	beq.n	8009a94 <fminf+0x18>
 8009aaa:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab2:	d5ed      	bpl.n	8009a90 <fminf+0x14>
 8009ab4:	e7ee      	b.n	8009a94 <fminf+0x18>
	...

08009ab8 <__fpclassifyf>:
 8009ab8:	ee10 3a10 	vmov	r3, s0
 8009abc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8009ac0:	d00d      	beq.n	8009ade <__fpclassifyf+0x26>
 8009ac2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8009ac6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8009aca:	d30a      	bcc.n	8009ae2 <__fpclassifyf+0x2a>
 8009acc:	4b07      	ldr	r3, [pc, #28]	@ (8009aec <__fpclassifyf+0x34>)
 8009ace:	1e42      	subs	r2, r0, #1
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d908      	bls.n	8009ae6 <__fpclassifyf+0x2e>
 8009ad4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8009ad8:	4258      	negs	r0, r3
 8009ada:	4158      	adcs	r0, r3
 8009adc:	4770      	bx	lr
 8009ade:	2002      	movs	r0, #2
 8009ae0:	4770      	bx	lr
 8009ae2:	2004      	movs	r0, #4
 8009ae4:	4770      	bx	lr
 8009ae6:	2003      	movs	r0, #3
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	007ffffe 	.word	0x007ffffe

08009af0 <__ieee754_sqrtf>:
 8009af0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009af4:	4770      	bx	lr
	...

08009af8 <__ieee754_log>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	ec51 0b10 	vmov	r0, r1, d0
 8009b00:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009b04:	b087      	sub	sp, #28
 8009b06:	460d      	mov	r5, r1
 8009b08:	da26      	bge.n	8009b58 <__ieee754_log+0x60>
 8009b0a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b0e:	4303      	orrs	r3, r0
 8009b10:	4602      	mov	r2, r0
 8009b12:	d10a      	bne.n	8009b2a <__ieee754_log+0x32>
 8009b14:	49ce      	ldr	r1, [pc, #824]	@ (8009e50 <__ieee754_log+0x358>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	2000      	movs	r0, #0
 8009b1c:	f7f6 fe96 	bl	800084c <__aeabi_ddiv>
 8009b20:	ec41 0b10 	vmov	d0, r0, r1
 8009b24:	b007      	add	sp, #28
 8009b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	da05      	bge.n	8009b3a <__ieee754_log+0x42>
 8009b2e:	460b      	mov	r3, r1
 8009b30:	f7f6 fbaa 	bl	8000288 <__aeabi_dsub>
 8009b34:	2200      	movs	r2, #0
 8009b36:	2300      	movs	r3, #0
 8009b38:	e7f0      	b.n	8009b1c <__ieee754_log+0x24>
 8009b3a:	4bc6      	ldr	r3, [pc, #792]	@ (8009e54 <__ieee754_log+0x35c>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f7f6 fd5b 	bl	80005f8 <__aeabi_dmul>
 8009b42:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8009b46:	460d      	mov	r5, r1
 8009b48:	4ac3      	ldr	r2, [pc, #780]	@ (8009e58 <__ieee754_log+0x360>)
 8009b4a:	4295      	cmp	r5, r2
 8009b4c:	dd06      	ble.n	8009b5c <__ieee754_log+0x64>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	f7f6 fb9b 	bl	800028c <__adddf3>
 8009b56:	e7e3      	b.n	8009b20 <__ieee754_log+0x28>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e7f5      	b.n	8009b48 <__ieee754_log+0x50>
 8009b5c:	152c      	asrs	r4, r5, #20
 8009b5e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009b62:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009b66:	441c      	add	r4, r3
 8009b68:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8009b6c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b74:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009b78:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8009b7c:	ea42 0105 	orr.w	r1, r2, r5
 8009b80:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009b84:	2200      	movs	r2, #0
 8009b86:	4bb5      	ldr	r3, [pc, #724]	@ (8009e5c <__ieee754_log+0x364>)
 8009b88:	f7f6 fb7e 	bl	8000288 <__aeabi_dsub>
 8009b8c:	1cab      	adds	r3, r5, #2
 8009b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	4682      	mov	sl, r0
 8009b96:	468b      	mov	fp, r1
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	dc53      	bgt.n	8009c46 <__ieee754_log+0x14e>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f7f6 ff92 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba4:	b1d0      	cbz	r0, 8009bdc <__ieee754_log+0xe4>
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	f000 8120 	beq.w	8009dec <__ieee754_log+0x2f4>
 8009bac:	4620      	mov	r0, r4
 8009bae:	f7f6 fcb9 	bl	8000524 <__aeabi_i2d>
 8009bb2:	a391      	add	r3, pc, #580	@ (adr r3, 8009df8 <__ieee754_log+0x300>)
 8009bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb8:	4606      	mov	r6, r0
 8009bba:	460f      	mov	r7, r1
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	a38f      	add	r3, pc, #572	@ (adr r3, 8009e00 <__ieee754_log+0x308>)
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	460d      	mov	r5, r1
 8009bca:	4630      	mov	r0, r6
 8009bcc:	4639      	mov	r1, r7
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	e7ba      	b.n	8009b52 <__ieee754_log+0x5a>
 8009bdc:	a38a      	add	r3, pc, #552	@ (adr r3, 8009e08 <__ieee754_log+0x310>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	4650      	mov	r0, sl
 8009be4:	4659      	mov	r1, fp
 8009be6:	f7f6 fd07 	bl	80005f8 <__aeabi_dmul>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	2000      	movs	r0, #0
 8009bf0:	499b      	ldr	r1, [pc, #620]	@ (8009e60 <__ieee754_log+0x368>)
 8009bf2:	f7f6 fb49 	bl	8000288 <__aeabi_dsub>
 8009bf6:	4652      	mov	r2, sl
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	460f      	mov	r7, r1
 8009bfc:	465b      	mov	r3, fp
 8009bfe:	4650      	mov	r0, sl
 8009c00:	4659      	mov	r1, fp
 8009c02:	f7f6 fcf9 	bl	80005f8 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	f7f6 fcf3 	bl	80005f8 <__aeabi_dmul>
 8009c12:	4606      	mov	r6, r0
 8009c14:	460f      	mov	r7, r1
 8009c16:	b914      	cbnz	r4, 8009c1e <__ieee754_log+0x126>
 8009c18:	4632      	mov	r2, r6
 8009c1a:	463b      	mov	r3, r7
 8009c1c:	e0a0      	b.n	8009d60 <__ieee754_log+0x268>
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7f6 fc80 	bl	8000524 <__aeabi_i2d>
 8009c24:	a374      	add	r3, pc, #464	@ (adr r3, 8009df8 <__ieee754_log+0x300>)
 8009c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	4689      	mov	r9, r1
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	a373      	add	r3, pc, #460	@ (adr r3, 8009e00 <__ieee754_log+0x308>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	4604      	mov	r4, r0
 8009c3a:	460d      	mov	r5, r1
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	4649      	mov	r1, r9
 8009c40:	f7f6 fcda 	bl	80005f8 <__aeabi_dmul>
 8009c44:	e0a5      	b.n	8009d92 <__ieee754_log+0x29a>
 8009c46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009c4a:	f7f6 fb1f 	bl	800028c <__adddf3>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4650      	mov	r0, sl
 8009c54:	4659      	mov	r1, fp
 8009c56:	f7f6 fdf9 	bl	800084c <__aeabi_ddiv>
 8009c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7f6 fc60 	bl	8000524 <__aeabi_i2d>
 8009c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f7f6 fcc2 	bl	80005f8 <__aeabi_dmul>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c7c:	f7f6 fcbc 	bl	80005f8 <__aeabi_dmul>
 8009c80:	a363      	add	r3, pc, #396	@ (adr r3, 8009e10 <__ieee754_log+0x318>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	4680      	mov	r8, r0
 8009c88:	4689      	mov	r9, r1
 8009c8a:	f7f6 fcb5 	bl	80005f8 <__aeabi_dmul>
 8009c8e:	a362      	add	r3, pc, #392	@ (adr r3, 8009e18 <__ieee754_log+0x320>)
 8009c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c94:	f7f6 fafa 	bl	800028c <__adddf3>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	f7f6 fcac 	bl	80005f8 <__aeabi_dmul>
 8009ca0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009e20 <__ieee754_log+0x328>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 faf1 	bl	800028c <__adddf3>
 8009caa:	4642      	mov	r2, r8
 8009cac:	464b      	mov	r3, r9
 8009cae:	f7f6 fca3 	bl	80005f8 <__aeabi_dmul>
 8009cb2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009e28 <__ieee754_log+0x330>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fae8 	bl	800028c <__adddf3>
 8009cbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc0:	f7f6 fc9a 	bl	80005f8 <__aeabi_dmul>
 8009cc4:	a35a      	add	r3, pc, #360	@ (adr r3, 8009e30 <__ieee754_log+0x338>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cce:	4640      	mov	r0, r8
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	f7f6 fc91 	bl	80005f8 <__aeabi_dmul>
 8009cd6:	a358      	add	r3, pc, #352	@ (adr r3, 8009e38 <__ieee754_log+0x340>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fad6 	bl	800028c <__adddf3>
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	f7f6 fc88 	bl	80005f8 <__aeabi_dmul>
 8009ce8:	a355      	add	r3, pc, #340	@ (adr r3, 8009e40 <__ieee754_log+0x348>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 facd 	bl	800028c <__adddf3>
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	f7f6 fc7f 	bl	80005f8 <__aeabi_dmul>
 8009cfa:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d0a:	f7f6 fabf 	bl	800028c <__adddf3>
 8009d0e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009d12:	3551      	adds	r5, #81	@ 0x51
 8009d14:	4335      	orrs	r5, r6
 8009d16:	2d00      	cmp	r5, #0
 8009d18:	4680      	mov	r8, r0
 8009d1a:	4689      	mov	r9, r1
 8009d1c:	dd48      	ble.n	8009db0 <__ieee754_log+0x2b8>
 8009d1e:	4b50      	ldr	r3, [pc, #320]	@ (8009e60 <__ieee754_log+0x368>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	4650      	mov	r0, sl
 8009d24:	4659      	mov	r1, fp
 8009d26:	f7f6 fc67 	bl	80005f8 <__aeabi_dmul>
 8009d2a:	4652      	mov	r2, sl
 8009d2c:	465b      	mov	r3, fp
 8009d2e:	f7f6 fc63 	bl	80005f8 <__aeabi_dmul>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4606      	mov	r6, r0
 8009d38:	460f      	mov	r7, r1
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	f7f6 faa5 	bl	800028c <__adddf3>
 8009d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d46:	f7f6 fc57 	bl	80005f8 <__aeabi_dmul>
 8009d4a:	4680      	mov	r8, r0
 8009d4c:	4689      	mov	r9, r1
 8009d4e:	b964      	cbnz	r4, 8009d6a <__ieee754_log+0x272>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fa96 	bl	8000288 <__aeabi_dsub>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4650      	mov	r0, sl
 8009d62:	4659      	mov	r1, fp
 8009d64:	f7f6 fa90 	bl	8000288 <__aeabi_dsub>
 8009d68:	e6da      	b.n	8009b20 <__ieee754_log+0x28>
 8009d6a:	a323      	add	r3, pc, #140	@ (adr r3, 8009df8 <__ieee754_log+0x300>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	a321      	add	r3, pc, #132	@ (adr r3, 8009e00 <__ieee754_log+0x308>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	4604      	mov	r4, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d86:	f7f6 fc37 	bl	80005f8 <__aeabi_dmul>
 8009d8a:	4642      	mov	r2, r8
 8009d8c:	464b      	mov	r3, r9
 8009d8e:	f7f6 fa7d 	bl	800028c <__adddf3>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fa75 	bl	8000288 <__aeabi_dsub>
 8009d9e:	4652      	mov	r2, sl
 8009da0:	465b      	mov	r3, fp
 8009da2:	f7f6 fa71 	bl	8000288 <__aeabi_dsub>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	e7d9      	b.n	8009d64 <__ieee754_log+0x26c>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4650      	mov	r0, sl
 8009db6:	4659      	mov	r1, fp
 8009db8:	f7f6 fa66 	bl	8000288 <__aeabi_dsub>
 8009dbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dc0:	f7f6 fc1a 	bl	80005f8 <__aeabi_dmul>
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	460f      	mov	r7, r1
 8009dc8:	2c00      	cmp	r4, #0
 8009dca:	f43f af25 	beq.w	8009c18 <__ieee754_log+0x120>
 8009dce:	a30a      	add	r3, pc, #40	@ (adr r3, 8009df8 <__ieee754_log+0x300>)
 8009dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	a308      	add	r3, pc, #32	@ (adr r3, 8009e00 <__ieee754_log+0x308>)
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	4604      	mov	r4, r0
 8009de4:	460d      	mov	r5, r1
 8009de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dea:	e729      	b.n	8009c40 <__ieee754_log+0x148>
 8009dec:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009e48 <__ieee754_log+0x350>
 8009df0:	e698      	b.n	8009b24 <__ieee754_log+0x2c>
 8009df2:	bf00      	nop
 8009df4:	f3af 8000 	nop.w
 8009df8:	fee00000 	.word	0xfee00000
 8009dfc:	3fe62e42 	.word	0x3fe62e42
 8009e00:	35793c76 	.word	0x35793c76
 8009e04:	3dea39ef 	.word	0x3dea39ef
 8009e08:	55555555 	.word	0x55555555
 8009e0c:	3fd55555 	.word	0x3fd55555
 8009e10:	df3e5244 	.word	0xdf3e5244
 8009e14:	3fc2f112 	.word	0x3fc2f112
 8009e18:	96cb03de 	.word	0x96cb03de
 8009e1c:	3fc74664 	.word	0x3fc74664
 8009e20:	94229359 	.word	0x94229359
 8009e24:	3fd24924 	.word	0x3fd24924
 8009e28:	55555593 	.word	0x55555593
 8009e2c:	3fe55555 	.word	0x3fe55555
 8009e30:	d078c69f 	.word	0xd078c69f
 8009e34:	3fc39a09 	.word	0x3fc39a09
 8009e38:	1d8e78af 	.word	0x1d8e78af
 8009e3c:	3fcc71c5 	.word	0x3fcc71c5
 8009e40:	9997fa04 	.word	0x9997fa04
 8009e44:	3fd99999 	.word	0x3fd99999
	...
 8009e50:	c3500000 	.word	0xc3500000
 8009e54:	43500000 	.word	0x43500000
 8009e58:	7fefffff 	.word	0x7fefffff
 8009e5c:	3ff00000 	.word	0x3ff00000
 8009e60:	3fe00000 	.word	0x3fe00000

08009e64 <__ieee754_expf>:
 8009e64:	ee10 2a10 	vmov	r2, s0
 8009e68:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8009e6c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009e70:	d902      	bls.n	8009e78 <__ieee754_expf+0x14>
 8009e72:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e76:	4770      	bx	lr
 8009e78:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009e7c:	d106      	bne.n	8009e8c <__ieee754_expf+0x28>
 8009e7e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8009fb8 <__ieee754_expf+0x154>
 8009e82:	2900      	cmp	r1, #0
 8009e84:	bf18      	it	ne
 8009e86:	eeb0 0a67 	vmovne.f32	s0, s15
 8009e8a:	4770      	bx	lr
 8009e8c:	484b      	ldr	r0, [pc, #300]	@ (8009fbc <__ieee754_expf+0x158>)
 8009e8e:	4282      	cmp	r2, r0
 8009e90:	dd02      	ble.n	8009e98 <__ieee754_expf+0x34>
 8009e92:	2000      	movs	r0, #0
 8009e94:	f000 b8d4 	b.w	800a040 <__math_oflowf>
 8009e98:	2a00      	cmp	r2, #0
 8009e9a:	da05      	bge.n	8009ea8 <__ieee754_expf+0x44>
 8009e9c:	4a48      	ldr	r2, [pc, #288]	@ (8009fc0 <__ieee754_expf+0x15c>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d902      	bls.n	8009ea8 <__ieee754_expf+0x44>
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	f000 b8c6 	b.w	800a034 <__math_uflowf>
 8009ea8:	4a46      	ldr	r2, [pc, #280]	@ (8009fc4 <__ieee754_expf+0x160>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009eb0:	d952      	bls.n	8009f58 <__ieee754_expf+0xf4>
 8009eb2:	4a45      	ldr	r2, [pc, #276]	@ (8009fc8 <__ieee754_expf+0x164>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009eba:	d834      	bhi.n	8009f26 <__ieee754_expf+0xc2>
 8009ebc:	4b43      	ldr	r3, [pc, #268]	@ (8009fcc <__ieee754_expf+0x168>)
 8009ebe:	4413      	add	r3, r2
 8009ec0:	ed93 7a00 	vldr	s14, [r3]
 8009ec4:	4b42      	ldr	r3, [pc, #264]	@ (8009fd0 <__ieee754_expf+0x16c>)
 8009ec6:	4413      	add	r3, r2
 8009ec8:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009ecc:	f1c1 0201 	rsb	r2, r1, #1
 8009ed0:	edd3 7a00 	vldr	s15, [r3]
 8009ed4:	1a52      	subs	r2, r2, r1
 8009ed6:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009eda:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009ede:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8009fd4 <__ieee754_expf+0x170>
 8009ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009fd8 <__ieee754_expf+0x174>
 8009ee6:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009eea:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8009fdc <__ieee754_expf+0x178>
 8009eee:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009ef2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009fe0 <__ieee754_expf+0x17c>
 8009ef6:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009efa:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8009fe4 <__ieee754_expf+0x180>
 8009efe:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009f02:	eef0 6a40 	vmov.f32	s13, s0
 8009f06:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009f0a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009f0e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009f12:	bb92      	cbnz	r2, 8009f7a <__ieee754_expf+0x116>
 8009f14:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009f18:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009f1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009f20:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009f24:	4770      	bx	lr
 8009f26:	4b30      	ldr	r3, [pc, #192]	@ (8009fe8 <__ieee754_expf+0x184>)
 8009f28:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8009fec <__ieee754_expf+0x188>
 8009f2c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8009ff0 <__ieee754_expf+0x18c>
 8009f30:	4413      	add	r3, r2
 8009f32:	edd3 7a00 	vldr	s15, [r3]
 8009f36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f3a:	eeb0 7a40 	vmov.f32	s14, s0
 8009f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f42:	ee17 2a90 	vmov	r2, s15
 8009f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f4a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009f4e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009ff4 <__ieee754_expf+0x190>
 8009f52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f56:	e7be      	b.n	8009ed6 <__ieee754_expf+0x72>
 8009f58:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8009f5c:	d20b      	bcs.n	8009f76 <__ieee754_expf+0x112>
 8009f5e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009ff8 <__ieee754_expf+0x194>
 8009f62:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009f66:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6e:	dd02      	ble.n	8009f76 <__ieee754_expf+0x112>
 8009f70:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009f74:	4770      	bx	lr
 8009f76:	2200      	movs	r2, #0
 8009f78:	e7af      	b.n	8009eda <__ieee754_expf+0x76>
 8009f7a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009f7e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8009f82:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009f86:	bfb8      	it	lt
 8009f88:	3264      	addlt	r2, #100	@ 0x64
 8009f8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f92:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009f96:	ee17 3a90 	vmov	r3, s15
 8009f9a:	bfab      	itete	ge
 8009f9c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009fa0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009fa4:	ee00 3a10 	vmovge	s0, r3
 8009fa8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8009ffc <__ieee754_expf+0x198>
 8009fac:	bfbc      	itt	lt
 8009fae:	ee00 3a10 	vmovlt	s0, r3
 8009fb2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009fb6:	4770      	bx	lr
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	42b17217 	.word	0x42b17217
 8009fc0:	42cff1b5 	.word	0x42cff1b5
 8009fc4:	3eb17218 	.word	0x3eb17218
 8009fc8:	3f851591 	.word	0x3f851591
 8009fcc:	0800a450 	.word	0x0800a450
 8009fd0:	0800a448 	.word	0x0800a448
 8009fd4:	3331bb4c 	.word	0x3331bb4c
 8009fd8:	b5ddea0e 	.word	0xb5ddea0e
 8009fdc:	388ab355 	.word	0x388ab355
 8009fe0:	bb360b61 	.word	0xbb360b61
 8009fe4:	3e2aaaab 	.word	0x3e2aaaab
 8009fe8:	0800a458 	.word	0x0800a458
 8009fec:	3fb8aa3b 	.word	0x3fb8aa3b
 8009ff0:	3f317180 	.word	0x3f317180
 8009ff4:	3717f7d1 	.word	0x3717f7d1
 8009ff8:	7149f2ca 	.word	0x7149f2ca
 8009ffc:	0d800000 	.word	0x0d800000

0800a000 <with_errnof>:
 800a000:	b510      	push	{r4, lr}
 800a002:	ed2d 8b02 	vpush	{d8}
 800a006:	eeb0 8a40 	vmov.f32	s16, s0
 800a00a:	4604      	mov	r4, r0
 800a00c:	f7fd fdbe 	bl	8007b8c <__errno>
 800a010:	eeb0 0a48 	vmov.f32	s0, s16
 800a014:	ecbd 8b02 	vpop	{d8}
 800a018:	6004      	str	r4, [r0, #0]
 800a01a:	bd10      	pop	{r4, pc}

0800a01c <xflowf>:
 800a01c:	b130      	cbz	r0, 800a02c <xflowf+0x10>
 800a01e:	eef1 7a40 	vneg.f32	s15, s0
 800a022:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a026:	2022      	movs	r0, #34	@ 0x22
 800a028:	f7ff bfea 	b.w	800a000 <with_errnof>
 800a02c:	eef0 7a40 	vmov.f32	s15, s0
 800a030:	e7f7      	b.n	800a022 <xflowf+0x6>
	...

0800a034 <__math_uflowf>:
 800a034:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a03c <__math_uflowf+0x8>
 800a038:	f7ff bff0 	b.w	800a01c <xflowf>
 800a03c:	10000000 	.word	0x10000000

0800a040 <__math_oflowf>:
 800a040:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a048 <__math_oflowf+0x8>
 800a044:	f7ff bfea 	b.w	800a01c <xflowf>
 800a048:	70000000 	.word	0x70000000

0800a04c <_init>:
 800a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04e:	bf00      	nop
 800a050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a052:	bc08      	pop	{r3}
 800a054:	469e      	mov	lr, r3
 800a056:	4770      	bx	lr

0800a058 <_fini>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr
