
hidfase1a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b50  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d80  08009d80  0000b12c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d80  08009d80  0000ad80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d88  08009d88  0000b12c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d88  08009d88  0000ad88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d8c  08009d8c  0000ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000012c  20000000  08009d90  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c6c  2000012c  08009ebc  0000b12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d98  08009ebc  0000bd98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2af  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004220  00000000  00000000  0002840b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  0002c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000139e  00000000  00000000  0002dfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006281  00000000  00000000  0002f356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a50  00000000  00000000  000355d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5170  00000000  00000000  00056027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b197  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b94  00000000  00000000  0014b1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00151d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000012c 	.word	0x2000012c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cc0 	.word	0x08009cc0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000130 	.word	0x20000130
 80001c4:	08009cc0 	.word	0x08009cc0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LSM6DSL_Init>:
#include "LSM6DSL.h"

extern I2C_HandleTypeDef hi2c2;

void LSM6DSL_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af04      	add	r7, sp, #16
	uint8_t buffer[1];
	buffer[0] = 0x40;
 80004be:	2340      	movs	r3, #64	@ 0x40
 80004c0:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c2, 0xD4, 0x10,
 80004c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004c6:	9302      	str	r3, [sp, #8]
 80004c8:	2301      	movs	r3, #1
 80004ca:	9301      	str	r3, [sp, #4]
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	2210      	movs	r2, #16
 80004d4:	21d4      	movs	r1, #212	@ 0xd4
 80004d6:	4803      	ldr	r0, [pc, #12]	@ (80004e4 <LSM6DSL_Init+0x2c>)
 80004d8:	f001 fbc0 	bl	8001c5c <HAL_I2C_Mem_Write>
			I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000180 	.word	0x20000180

080004e8 <LSM6DSL_ReadAccel>:

int16_t LSM6DSL_ReadAccel(uint8_t axis)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af04      	add	r7, sp, #16
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[2];
	HAL_I2C_Mem_Read(&hi2c2, 0xD4, 0x28+2*axis,
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3314      	adds	r3, #20
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	2302      	movs	r3, #2
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	f107 030c 	add.w	r3, r7, #12
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	21d4      	movs	r1, #212	@ 0xd4
 8000510:	480c      	ldr	r0, [pc, #48]	@ (8000544 <LSM6DSL_ReadAccel+0x5c>)
 8000512:	f001 fcb7 	bl	8001e84 <HAL_I2C_Mem_Read>
			I2C_MEMADD_SIZE_8BIT, buffer, 2, 1000);
	return ((int16_t)(buffer[1]<<8) | buffer[0]) * 0.061f;
 8000516:	7b7b      	ldrb	r3, [r7, #13]
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21b      	sxth	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	7b3b      	ldrb	r3, [r7, #12]
 8000520:	4313      	orrs	r3, r2
 8000522:	ee07 3a90 	vmov	s15, r3
 8000526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800052a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000548 <LSM6DSL_ReadAccel+0x60>
 800052e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000536:	ee17 3a90 	vmov	r3, s15
 800053a:	b21b      	sxth	r3, r3
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000180 	.word	0x20000180
 8000548:	3d79db23 	.word	0x3d79db23

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fe4c 	bl	80011ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f845 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f9e1 	bl	8000920 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800055e:	f000 f8a3 	bl	80006a8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000562:	f000 f8d9 	bl	8000718 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000566:	f000 f917 	bl	8000798 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800056a:	f000 f93b 	bl	80007e4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800056e:	f000 f977 	bl	8000860 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000572:	f000 f9a5 	bl	80008c0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8000576:	f008 fdad 	bl	80090d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  LSM6DSL_Init();
 800057a:	f7ff ff9d 	bl	80004b8 <LSM6DSL_Init>
  HAL_Delay(5000);
 800057e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000582:	f000 fea9 	bl	80012d8 <HAL_Delay>
  dato[0] = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	703b      	strb	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int16_t accelX = LSM6DSL_ReadAccel(0);
 800058a:	2000      	movs	r0, #0
 800058c:	f7ff ffac 	bl	80004e8 <LSM6DSL_ReadAccel>
 8000590:	4603      	mov	r3, r0
 8000592:	80fb      	strh	r3, [r7, #6]
	  int16_t accelY = LSM6DSL_ReadAccel(1);
 8000594:	2001      	movs	r0, #1
 8000596:	f7ff ffa7 	bl	80004e8 <LSM6DSL_ReadAccel>
 800059a:	4603      	mov	r3, r0
 800059c:	80bb      	strh	r3, [r7, #4]

	  dato[1] = accelX/100;
 800059e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005a2:	4a0f      	ldr	r2, [pc, #60]	@ (80005e0 <main+0x94>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1152      	asrs	r2, r2, #5
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	707b      	strb	r3, [r7, #1]
	  dato[2] = accelY/100;
 80005b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005b8:	4a09      	ldr	r2, [pc, #36]	@ (80005e0 <main+0x94>)
 80005ba:	fb82 1203 	smull	r1, r2, r2, r3
 80005be:	1152      	asrs	r2, r2, #5
 80005c0:	17db      	asrs	r3, r3, #31
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	b21b      	sxth	r3, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	70bb      	strb	r3, [r7, #2]
	  USBD_CUSTOM_HID_SendReport_FS(dato, 3);
 80005ca:	463b      	mov	r3, r7
 80005cc:	2103      	movs	r1, #3
 80005ce:	4618      	mov	r0, r3
 80005d0:	f008 fdd2 	bl	8009178 <USBD_CUSTOM_HID_SendReport_FS>
	  HAL_Delay(10);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 fe7f 	bl	80012d8 <HAL_Delay>
  {
 80005da:	bf00      	nop
 80005dc:	e7d5      	b.n	800058a <main+0x3e>
 80005de:	bf00      	nop
 80005e0:	51eb851f 	.word	0x51eb851f

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	@ 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	@ 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 fb38 	bl	8009c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060a:	f003 fa4b 	bl	8003aa4 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f000 fb36 	bl	8000c84 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f003 fa26 	bl	8003a68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800061c:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <SystemClock_Config+0xc0>)
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000622:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <SystemClock_Config+0xc0>)
 8000624:	f023 0318 	bic.w	r3, r3, #24
 8000628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800062c:	2314      	movs	r3, #20
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800063c:	2360      	movs	r3, #96	@ 0x60
 800063e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000644:	2301      	movs	r3, #1
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800064c:	2328      	movs	r3, #40	@ 0x28
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fb41 	bl	8003ce8 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800066c:	f000 fb0a 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	2104      	movs	r1, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f003 ff09 	bl	80044a0 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000694:	f000 faf6 	bl	8000c84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000698:	f004 fc10 	bl	8004ebc <HAL_RCCEx_EnableMSIPLLMode>
}
 800069c:	bf00      	nop
 800069e:	3758      	adds	r7, #88	@ 0x58
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000

080006a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006ae:	4a19      	ldr	r2, [pc, #100]	@ (8000714 <MX_DFSDM1_Init+0x6c>)
 80006b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006d6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_DFSDM1_Init+0x68>)
 80006fe:	f000 ff21 	bl	8001544 <HAL_DFSDM_ChannelInit>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000708:	f000 fabc 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000148 	.word	0x20000148
 8000714:	40016020 	.word	0x40016020

08000718 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_I2C2_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_I2C2_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_I2C2_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_I2C2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_I2C2_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_I2C2_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_I2C2_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C2_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_I2C2_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	@ (800078c <MX_I2C2_Init+0x74>)
 8000754:	f001 f9e7 	bl	8001b26 <HAL_I2C_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800075e:	f000 fa91 	bl	8000c84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_I2C2_Init+0x74>)
 8000766:	f001 ff69 	bl	800263c <HAL_I2CEx_ConfigAnalogFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 fa88 	bl	8000c84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_I2C2_Init+0x74>)
 8000778:	f001 ffab 	bl	80026d2 <HAL_I2CEx_ConfigDigitalFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fa7f 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000180 	.word	0x20000180
 8000790:	40005800 	.word	0x40005800
 8000794:	10d19ce4 	.word	0x10d19ce4

08000798 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 800079e:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <MX_QUADSPI_Init+0x48>)
 80007a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007b6:	2217      	movs	r2, #23
 80007b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007c8:	f003 f9d2 	bl	8003b70 <HAL_QSPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007d2:	f000 fa57 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001d4 	.word	0x200001d4
 80007e0:	a0001000 	.word	0xa0001000

080007e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	@ (800085c <MX_SPI3_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_SPI3_Init+0x74>)
 80007fe:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000802:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_SPI3_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000816:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_SPI3_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_SPI3_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000832:	2207      	movs	r2, #7
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_SPI3_Init+0x74>)
 800083e:	2208      	movs	r2, #8
 8000840:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_SPI3_Init+0x74>)
 8000844:	f004 fd1c 	bl	8005280 <HAL_SPI_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 fa19 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000218 	.word	0x20000218
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000866:	4a15      	ldr	r2, [pc, #84]	@ (80008bc <MX_USART1_UART_Init+0x5c>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USART1_UART_Init+0x58>)
 80008a4:	f004 fd8f 	bl	80053c6 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f9e9 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000027c 	.word	0x2000027c
 80008bc:	40013800 	.word	0x40013800

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	@ (800091c <MX_USART3_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_USART3_UART_Init+0x58>)
 8000904:	f004 fd5f 	bl	80053c6 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 f9b9 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000304 	.word	0x20000304
 800091c:	40004800 	.word	0x40004800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	@ 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000936:	4bbd      	ldr	r3, [pc, #756]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4abc      	ldr	r2, [pc, #752]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4bba      	ldr	r3, [pc, #744]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4bb7      	ldr	r3, [pc, #732]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4ab6      	ldr	r2, [pc, #728]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4bb4      	ldr	r3, [pc, #720]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4bb1      	ldr	r3, [pc, #708]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	4ab0      	ldr	r2, [pc, #704]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000972:	4bae      	ldr	r3, [pc, #696]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4bab      	ldr	r3, [pc, #684]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	4aaa      	ldr	r2, [pc, #680]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800098a:	4ba8      	ldr	r3, [pc, #672]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4ba5      	ldr	r3, [pc, #660]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4aa4      	ldr	r2, [pc, #656]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4ba2      	ldr	r3, [pc, #648]	@ (8000c2c <MX_GPIO_Init+0x30c>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80009b4:	489e      	ldr	r0, [pc, #632]	@ (8000c30 <MX_GPIO_Init+0x310>)
 80009b6:	f001 f87b 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f248 1104 	movw	r1, #33028	@ 0x8104
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f001 f874 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009c8:	2200      	movs	r2, #0
 80009ca:	f24f 0114 	movw	r1, #61460	@ 0xf014
 80009ce:	4899      	ldr	r0, [pc, #612]	@ (8000c34 <MX_GPIO_Init+0x314>)
 80009d0:	f001 f86e 	bl	8001ab0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80009da:	4897      	ldr	r0, [pc, #604]	@ (8000c38 <MX_GPIO_Init+0x318>)
 80009dc:	f001 f868 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e6:	4894      	ldr	r0, [pc, #592]	@ (8000c38 <MX_GPIO_Init+0x318>)
 80009e8:	f001 f862 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80009f2:	4892      	ldr	r0, [pc, #584]	@ (8000c3c <MX_GPIO_Init+0x31c>)
 80009f4:	f001 f85c 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	488d      	ldr	r0, [pc, #564]	@ (8000c34 <MX_GPIO_Init+0x314>)
 80009fe:	f001 f857 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2101      	movs	r1, #1
 8000a06:	488a      	ldr	r0, [pc, #552]	@ (8000c30 <MX_GPIO_Init+0x310>)
 8000a08:	f001 f852 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a0c:	f240 1315 	movw	r3, #277	@ 0x115
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4882      	ldr	r0, [pc, #520]	@ (8000c30 <MX_GPIO_Init+0x310>)
 8000a26:	f000 fe99 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a2a:	236a      	movs	r3, #106	@ 0x6a
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	487c      	ldr	r0, [pc, #496]	@ (8000c30 <MX_GPIO_Init+0x310>)
 8000a40:	f000 fe8c 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4878      	ldr	r0, [pc, #480]	@ (8000c3c <MX_GPIO_Init+0x31c>)
 8000a5c:	f000 fe7e 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a60:	233f      	movs	r3, #63	@ 0x3f
 8000a62:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a64:	230b      	movs	r3, #11
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4872      	ldr	r0, [pc, #456]	@ (8000c3c <MX_GPIO_Init+0x31c>)
 8000a74:	f000 fe72 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 fe61 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a9a:	f248 1304 	movw	r3, #33028	@ 0x8104
 8000a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f000 fe51 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000aba:	2308      	movs	r3, #8
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f000 fe40 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000adc:	2310      	movs	r3, #16
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 fe33 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000af6:	23e0      	movs	r3, #224	@ 0xe0
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b06:	2305      	movs	r3, #5
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b14:	f000 fe22 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4841      	ldr	r0, [pc, #260]	@ (8000c34 <MX_GPIO_Init+0x314>)
 8000b2e:	f000 fe15 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b36:	230b      	movs	r3, #11
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	483b      	ldr	r0, [pc, #236]	@ (8000c34 <MX_GPIO_Init+0x314>)
 8000b46:	f000 fe09 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b4a:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8000b4e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4834      	ldr	r0, [pc, #208]	@ (8000c34 <MX_GPIO_Init+0x314>)
 8000b64:	f000 fdfa 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b68:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000b6c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	482e      	ldr	r0, [pc, #184]	@ (8000c38 <MX_GPIO_Init+0x318>)
 8000b80:	f000 fdec 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b84:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4826      	ldr	r0, [pc, #152]	@ (8000c38 <MX_GPIO_Init+0x318>)
 8000b9e:	f000 fddd 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ba2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4820      	ldr	r0, [pc, #128]	@ (8000c3c <MX_GPIO_Init+0x31c>)
 8000bbc:	f000 fdce 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bc0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4819      	ldr	r0, [pc, #100]	@ (8000c3c <MX_GPIO_Init+0x31c>)
 8000bd8:	f000 fdc0 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bec:	2305      	movs	r3, #5
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <MX_GPIO_Init+0x318>)
 8000bf8:	f000 fdb0 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bfc:	2378      	movs	r3, #120	@ 0x78
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <MX_GPIO_Init+0x318>)
 8000c18:	f000 fda0 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	2312      	movs	r3, #18
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e00a      	b.n	8000c40 <MX_GPIO_Init+0x320>
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48001000 	.word	0x48001000
 8000c34:	48000400 	.word	0x48000400
 8000c38:	48000c00 	.word	0x48000c00
 8000c3c:	48000800 	.word	0x48000800
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c46:	2304      	movs	r3, #4
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <MX_GPIO_Init+0x360>)
 8000c52:	f000 fd83 	bl	800175c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2017      	movs	r0, #23
 8000c5c:	f000 fc3b 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c60:	2017      	movs	r0, #23
 8000c62:	f000 fc54 	bl	800150e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2028      	movs	r0, #40	@ 0x28
 8000c6c:	f000 fc33 	bl	80014d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c70:	2028      	movs	r0, #40	@ 0x28
 8000c72:	f000 fc4c 	bl	800150e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	48000400 	.word	0x48000400

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0ac      	sub	sp, #176	@ 0xb0
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2288      	movs	r2, #136	@ 0x88
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f008 ffb5 	bl	8009c68 <memset>
  if(DFSDM1_Init == 0)
 8000cfe:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d142      	bne.n	8000d8c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fde6 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d22:	f7ff ffaf 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d26:	4b1c      	ldr	r3, [pc, #112]	@ (8000d98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d56:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d70:	2306      	movs	r3, #6
 8000d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d7e:	f000 fced 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	4a02      	ldr	r2, [pc, #8]	@ (8000d94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d8a:	6013      	str	r3, [r2, #0]
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	37b0      	adds	r7, #176	@ 0xb0
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000038c 	.word	0x2000038c
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48001000 	.word	0x48001000

08000da0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0ac      	sub	sp, #176	@ 0xb0
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2288      	movs	r2, #136	@ 0x88
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f008 ff51 	bl	8009c68 <memset>
  if(hi2c->Instance==I2C2)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <HAL_I2C_MspInit+0xb0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d13b      	bne.n	8000e48 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 fd83 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000de8:	f7ff ff4c 	bl	8000c84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <HAL_I2C_MspInit+0xb4>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <HAL_I2C_MspInit+0xb4>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df8:	4b16      	ldr	r3, [pc, #88]	@ (8000e54 <HAL_I2C_MspInit+0xb4>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e04:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <HAL_I2C_MspInit+0xb8>)
 8000e2c:	f000 fc96 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <HAL_I2C_MspInit+0xb4>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e34:	4a07      	ldr	r2, [pc, #28]	@ (8000e54 <HAL_I2C_MspInit+0xb4>)
 8000e36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_I2C_MspInit+0xb4>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000e48:	bf00      	nop
 8000e4a:	37b0      	adds	r7, #176	@ 0xb0
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40005800 	.word	0x40005800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a17      	ldr	r2, [pc, #92]	@ (8000ed8 <HAL_QSPI_MspInit+0x7c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d128      	bne.n	8000ed0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e7e:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_QSPI_MspInit+0x80>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e82:	4a16      	ldr	r2, [pc, #88]	@ (8000edc <HAL_QSPI_MspInit+0x80>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e88:	6513      	str	r3, [r2, #80]	@ 0x50
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <HAL_QSPI_MspInit+0x80>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_QSPI_MspInit+0x80>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_QSPI_MspInit+0x80>)
 8000e9c:	f043 0310 	orr.w	r3, r3, #16
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_QSPI_MspInit+0x80>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000eae:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8000eb2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_QSPI_MspInit+0x84>)
 8000ecc:	f000 fc46 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	a0001000 	.word	0xa0001000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48001000 	.word	0x48001000

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <HAL_SPI_MspInit+0x7c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d128      	bne.n	8000f58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_SPI_MspInit+0x80>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <HAL_SPI_MspInit+0x80>)
 8000f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <HAL_SPI_MspInit+0x80>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <HAL_SPI_MspInit+0x80>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <HAL_SPI_MspInit+0x80>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <HAL_SPI_MspInit+0x80>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_SPI_MspInit+0x84>)
 8000f54:	f000 fc02 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	@ 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40003c00 	.word	0x40003c00
 8000f64:	40021000 	.word	0x40021000
 8000f68:	48000800 	.word	0x48000800

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0ae      	sub	sp, #184	@ 0xb8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2288      	movs	r2, #136	@ 0x88
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f008 fe6b 	bl	8009c68 <memset>
  if(huart->Instance==USART1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <HAL_UART_MspInit+0x134>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d13b      	bne.n	8001014 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fc9d 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fb4:	f7ff fe66 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbc:	4a39      	ldr	r2, [pc, #228]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc4:	4b37      	ldr	r3, [pc, #220]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b34      	ldr	r3, [pc, #208]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	4a33      	ldr	r2, [pc, #204]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fdc:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000fe8:	23c0      	movs	r3, #192	@ 0xc0
 8000fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001000:	2307      	movs	r3, #7
 8001002:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800100a:	4619      	mov	r1, r3
 800100c:	4826      	ldr	r0, [pc, #152]	@ (80010a8 <HAL_UART_MspInit+0x13c>)
 800100e:	f000 fba5 	bl	800175c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001012:	e040      	b.n	8001096 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a24      	ldr	r2, [pc, #144]	@ (80010ac <HAL_UART_MspInit+0x140>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d13b      	bne.n	8001096 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800101e:	2304      	movs	r3, #4
 8001020:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001022:	2300      	movs	r3, #0
 8001024:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4618      	mov	r0, r3
 800102c:	f003 fc5c 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001036:	f7ff fe25 	bl	8000c84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001044:	6593      	str	r3, [r2, #88]	@ 0x58
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a13      	ldr	r2, [pc, #76]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800106a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800106e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001084:	2307      	movs	r3, #7
 8001086:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800108e:	4619      	mov	r1, r3
 8001090:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <HAL_UART_MspInit+0x144>)
 8001092:	f000 fb63 	bl	800175c <HAL_GPIO_Init>
}
 8001096:	bf00      	nop
 8001098:	37b8      	adds	r7, #184	@ 0xb8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40013800 	.word	0x40013800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400
 80010ac:	40004800 	.word	0x40004800
 80010b0:	48000c00 	.word	0x48000c00

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f8c5 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}

08001112 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001116:	2020      	movs	r0, #32
 8001118:	f000 fce2 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800111c:	2040      	movs	r0, #64	@ 0x40
 800111e:	f000 fcdf 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001122:	2080      	movs	r0, #128	@ 0x80
 8001124:	f000 fcdc 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001128:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800112c:	f000 fcd8 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001138:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800113c:	f000 fcd0 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001140:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001144:	f000 fccc 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001148:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800114c:	f000 fcc8 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001150:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001154:	f000 fcc4 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001158:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800115c:	f000 fcc0 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <OTG_FS_IRQHandler+0x10>)
 800116a:	f001 fc3c 	bl	80029e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000898 	.word	0x20000898

08001178 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff ffea 	bl	8001178 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011a6:	490d      	ldr	r1, [pc, #52]	@ (80011dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80011a8:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <LoopForever+0xe>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011bc:	4c0a      	ldr	r4, [pc, #40]	@ (80011e8 <LoopForever+0x16>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f008 fd55 	bl	8009c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ce:	f7ff f9bd 	bl	800054c <main>

080011d2 <LoopForever>:

LoopForever:
    b LoopForever
 80011d2:	e7fe      	b.n	80011d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80011e0:	08009d90 	.word	0x08009d90
  ldr r2, =_sbss
 80011e4:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80011e8:	20000d98 	.word	0x20000d98

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>

080011ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f961 	bl	80014c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f80e 	bl	8001220 <HAL_InitTick>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e001      	b.n	8001214 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001210:	f7ff fd3e 	bl	8000c90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001214:	79fb      	ldrb	r3, [r7, #7]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_InitTick+0x6c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d023      	beq.n	800127c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001234:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_InitTick+0x70>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b14      	ldr	r3, [pc, #80]	@ (800128c <HAL_InitTick+0x6c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f96d 	bl	800152a <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d809      	bhi.n	8001270 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f000 f937 	bl	80014d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_InitTick+0x74>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e007      	b.n	8001280 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e004      	b.n	8001280 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	e001      	b.n	8001280 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x20>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_IncTick+0x24>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_IncTick+0x24>)
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000390 	.word	0x20000390

080012c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return uwTick;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_GetTick+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000390 	.word	0x20000390

080012d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff ffee 	bl	80012c0 <HAL_GetTick>
 80012e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d005      	beq.n	80012fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012f2:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <HAL_Delay+0x44>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012fe:	bf00      	nop
 8001300:	f7ff ffde 	bl	80012c0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	429a      	cmp	r2, r3
 800130e:	d8f7      	bhi.n	8001300 <HAL_Delay+0x28>
  {
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008

08001320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800136c:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <__NVIC_GetPriorityGrouping+0x18>)
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 0307 	and.w	r3, r3, #7
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	2b00      	cmp	r3, #0
 8001394:	db0b      	blt.n	80013ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 021f 	and.w	r2, r3, #31
 800139c:	4907      	ldr	r1, [pc, #28]	@ (80013bc <__NVIC_EnableIRQ+0x38>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	095b      	lsrs	r3, r3, #5
 80013a4:	2001      	movs	r0, #1
 80013a6:	fa00 f202 	lsl.w	r2, r0, r2
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	@ (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800148c:	d301      	bcc.n	8001492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148e:	2301      	movs	r3, #1
 8001490:	e00f      	b.n	80014b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001492:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <SysTick_Config+0x40>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149a:	210f      	movs	r1, #15
 800149c:	f04f 30ff 	mov.w	r0, #4294967295
 80014a0:	f7ff ff8e 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <SysTick_Config+0x40>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014aa:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <SysTick_Config+0x40>)
 80014ac:	2207      	movs	r2, #7
 80014ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff29 	bl	8001320 <__NVIC_SetPriorityGrouping>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e8:	f7ff ff3e 	bl	8001368 <__NVIC_GetPriorityGrouping>
 80014ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68b9      	ldr	r1, [r7, #8]
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f7ff ff8e 	bl	8001414 <NVIC_EncodePriority>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fe:	4611      	mov	r1, r2
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff5d 	bl	80013c0 <__NVIC_SetPriority>
}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff31 	bl	8001384 <__NVIC_EnableIRQ>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ffa2 	bl	800147c <SysTick_Config>
 8001538:	4603      	mov	r3, r0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0ac      	b.n	80016b0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f8b2 	bl	80016c4 <DFSDM_GetChannelFromInstance>
 8001560:	4603      	mov	r3, r0
 8001562:	4a55      	ldr	r2, [pc, #340]	@ (80016b8 <HAL_DFSDM_ChannelInit+0x174>)
 8001564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e09f      	b.n	80016b0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fbb1 	bl	8000cd8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001576:	4b51      	ldr	r3, [pc, #324]	@ (80016bc <HAL_DFSDM_ChannelInit+0x178>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a4f      	ldr	r2, [pc, #316]	@ (80016bc <HAL_DFSDM_ChannelInit+0x178>)
 800157e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001580:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <HAL_DFSDM_ChannelInit+0x178>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d125      	bne.n	80015d4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001588:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a4c      	ldr	r2, [pc, #304]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800158e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001592:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001594:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4948      	ldr	r1, [pc, #288]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80015a2:	4b47      	ldr	r3, [pc, #284]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a46      	ldr	r2, [pc, #280]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015a8:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80015ac:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	791b      	ldrb	r3, [r3, #4]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80015b6:	4b42      	ldr	r3, [pc, #264]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	3b01      	subs	r3, #1
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	493f      	ldr	r1, [pc, #252]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015c8:	4b3d      	ldr	r3, [pc, #244]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a3c      	ldr	r2, [pc, #240]	@ (80016c0 <HAL_DFSDM_ChannelInit+0x17c>)
 80015ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015d2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80015e2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6819      	ldr	r1, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015f2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80015f8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 020f 	bic.w	r2, r2, #15
 8001610:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001638:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001648:	3b01      	subs	r3, #1
 800164a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f002 0207 	and.w	r2, r2, #7
 8001664:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6859      	ldr	r1, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001670:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001690:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f810 	bl	80016c4 <DFSDM_GetChannelFromInstance>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4904      	ldr	r1, [pc, #16]	@ (80016b8 <HAL_DFSDM_ChannelInit+0x174>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000398 	.word	0x20000398
 80016bc:	20000394 	.word	0x20000394
 80016c0:	40016000 	.word	0x40016000

080016c4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <DFSDM_GetChannelFromInstance+0x7c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e02b      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a19      	ldr	r2, [pc, #100]	@ (8001744 <DFSDM_GetChannelFromInstance+0x80>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e024      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <DFSDM_GetChannelFromInstance+0x84>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e01d      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <DFSDM_GetChannelFromInstance+0x88>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d102      	bne.n	8001704 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80016fe:	2304      	movs	r3, #4
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e016      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <DFSDM_GetChannelFromInstance+0x8c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d102      	bne.n	8001712 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800170c:	2305      	movs	r3, #5
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e00f      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0f      	ldr	r2, [pc, #60]	@ (8001754 <DFSDM_GetChannelFromInstance+0x90>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800171a:	2306      	movs	r3, #6
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e008      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <DFSDM_GetChannelFromInstance+0x94>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d102      	bne.n	800172e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001728:	2307      	movs	r3, #7
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e001      	b.n	8001732 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800172e:	2303      	movs	r3, #3
 8001730:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40016000 	.word	0x40016000
 8001744:	40016020 	.word	0x40016020
 8001748:	40016040 	.word	0x40016040
 800174c:	40016080 	.word	0x40016080
 8001750:	400160a0 	.word	0x400160a0
 8001754:	400160c0 	.word	0x400160c0
 8001758:	400160e0 	.word	0x400160e0

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e17f      	b.n	8001a6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8171 	beq.w	8001a66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d005      	beq.n	800179c <HAL_GPIO_Init+0x40>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d130      	bne.n	80017fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d2:	2201      	movs	r2, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	f003 0201 	and.w	r2, r3, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b03      	cmp	r3, #3
 8001808:	d118      	bne.n	800183c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	6939      	ldr	r1, [r7, #16]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80ac 	beq.w	8001a66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a8c <HAL_GPIO_Init+0x330>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	4a5e      	ldr	r2, [pc, #376]	@ (8001a8c <HAL_GPIO_Init+0x330>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6613      	str	r3, [r2, #96]	@ 0x60
 800191a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a8c <HAL_GPIO_Init+0x330>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001926:	4a5a      	ldr	r2, [pc, #360]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001950:	d025      	beq.n	800199e <HAL_GPIO_Init+0x242>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4f      	ldr	r2, [pc, #316]	@ (8001a94 <HAL_GPIO_Init+0x338>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01f      	beq.n	800199a <HAL_GPIO_Init+0x23e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a98 <HAL_GPIO_Init+0x33c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0x23a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4d      	ldr	r2, [pc, #308]	@ (8001a9c <HAL_GPIO_Init+0x340>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x236>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa0 <HAL_GPIO_Init+0x344>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x232>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa4 <HAL_GPIO_Init+0x348>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x22e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4a      	ldr	r2, [pc, #296]	@ (8001aa8 <HAL_GPIO_Init+0x34c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x22a>
 8001982:	2306      	movs	r3, #6
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 8001986:	2307      	movs	r3, #7
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800199e:	2300      	movs	r3, #0
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b0:	4937      	ldr	r1, [pc, #220]	@ (8001a90 <HAL_GPIO_Init+0x334>)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019be:	4b3b      	ldr	r3, [pc, #236]	@ (8001aac <HAL_GPIO_Init+0x350>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e2:	4a32      	ldr	r2, [pc, #200]	@ (8001aac <HAL_GPIO_Init+0x350>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019e8:	4b30      	ldr	r3, [pc, #192]	@ (8001aac <HAL_GPIO_Init+0x350>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a0c:	4a27      	ldr	r2, [pc, #156]	@ (8001aac <HAL_GPIO_Init+0x350>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a12:	4b26      	ldr	r3, [pc, #152]	@ (8001aac <HAL_GPIO_Init+0x350>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a36:	4a1d      	ldr	r2, [pc, #116]	@ (8001aac <HAL_GPIO_Init+0x350>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_GPIO_Init+0x350>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <HAL_GPIO_Init+0x350>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f ae78 	bne.w	800176c <HAL_GPIO_Init+0x10>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	48000400 	.word	0x48000400
 8001a98:	48000800 	.word	0x48000800
 8001a9c:	48000c00 	.word	0x48000c00
 8001aa0:	48001000 	.word	0x48001000
 8001aa4:	48001400 	.word	0x48001400
 8001aa8:	48001800 	.word	0x48001800
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aea:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f806 	bl	8001b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e08d      	b.n	8001c54 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d106      	bne.n	8001b52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff f927 	bl	8000da0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2224      	movs	r2, #36	@ 0x24
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0201 	bic.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	e006      	b.n	8001bae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001bac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d108      	bne.n	8001bc8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	e007      	b.n	8001bd8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69d9      	ldr	r1, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1a      	ldr	r2, [r3, #32]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f042 0201 	orr.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af02      	add	r7, sp, #8
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	817b      	strh	r3, [r7, #10]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	813b      	strh	r3, [r7, #8]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	f040 80f9 	bne.w	8001e76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_I2C_Mem_Write+0x34>
 8001c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c96:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0ed      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_I2C_Mem_Write+0x4e>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e0e6      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cb2:	f7ff fb05 	bl	80012c0 <HAL_GetTick>
 8001cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2319      	movs	r3, #25
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f000 fac3 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0d1      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2221      	movs	r2, #33	@ 0x21
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2240      	movs	r2, #64	@ 0x40
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a3a      	ldr	r2, [r7, #32]
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cfc:	88f8      	ldrh	r0, [r7, #6]
 8001cfe:	893a      	ldrh	r2, [r7, #8]
 8001d00:	8979      	ldrh	r1, [r7, #10]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f9d3 	bl	80020b8 <I2C_RequestMemoryWrite>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0a9      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2bff      	cmp	r3, #255	@ 0xff
 8001d2c:	d90e      	bls.n	8001d4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	22ff      	movs	r2, #255	@ 0xff
 8001d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	8979      	ldrh	r1, [r7, #10]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fc47 	bl	80025d8 <I2C_TransferConfig>
 8001d4a:	e00f      	b.n	8001d6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	8979      	ldrh	r1, [r7, #10]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fc36 	bl	80025d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 fac6 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e07b      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d034      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x1c8>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d130      	bne.n	8001e24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2180      	movs	r1, #128	@ 0x80
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 fa3f 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e04d      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2bff      	cmp	r3, #255	@ 0xff
 8001de4:	d90e      	bls.n	8001e04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	22ff      	movs	r2, #255	@ 0xff
 8001dea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	8979      	ldrh	r1, [r7, #10]
 8001df4:	2300      	movs	r3, #0
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f000 fbeb 	bl	80025d8 <I2C_TransferConfig>
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	8979      	ldrh	r1, [r7, #10]
 8001e16:	2300      	movs	r3, #0
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fbda 	bl	80025d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d19e      	bne.n	8001d6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 faac 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e01a      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2220      	movs	r2, #32
 8001e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_I2C_Mem_Write+0x224>)
 8001e56:	400b      	ands	r3, r1
 8001e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001e76:	2302      	movs	r3, #2
  }
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	fe00e800 	.word	0xfe00e800

08001e84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	f040 80fd 	bne.w	80020a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_I2C_Mem_Read+0x34>
 8001eb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0f1      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Mem_Read+0x4e>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e0ea      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eda:	f7ff f9f1 	bl	80012c0 <HAL_GetTick>
 8001ede:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2319      	movs	r3, #25
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f9af 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0d5      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2222      	movs	r2, #34	@ 0x22
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2240      	movs	r2, #64	@ 0x40
 8001f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a3a      	ldr	r2, [r7, #32]
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f24:	88f8      	ldrh	r0, [r7, #6]
 8001f26:	893a      	ldrh	r2, [r7, #8]
 8001f28:	8979      	ldrh	r1, [r7, #10]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4603      	mov	r3, r0
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f913 	bl	8002160 <I2C_RequestMemoryRead>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0ad      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2bff      	cmp	r3, #255	@ 0xff
 8001f54:	d90e      	bls.n	8001f74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	8979      	ldrh	r1, [r7, #10]
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_I2C_Mem_Read+0x22c>)
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fb33 	bl	80025d8 <I2C_TransferConfig>
 8001f72:	e00f      	b.n	8001f94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	4b4a      	ldr	r3, [pc, #296]	@ (80020b0 <HAL_I2C_Mem_Read+0x22c>)
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fb22 	bl	80025d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f956 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07c      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d034      	beq.n	8002054 <HAL_I2C_Mem_Read+0x1d0>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d130      	bne.n	8002054 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2180      	movs	r1, #128	@ 0x80
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f927 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04d      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2bff      	cmp	r3, #255	@ 0xff
 8002014:	d90e      	bls.n	8002034 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fad3 	bl	80025d8 <I2C_TransferConfig>
 8002032:	e00f      	b.n	8002054 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002042:	b2da      	uxtb	r2, r3
 8002044:	8979      	ldrh	r1, [r7, #10]
 8002046:	2300      	movs	r3, #0
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 fac2 	bl	80025d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d19a      	bne.n	8001f94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f994 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01a      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <HAL_I2C_Mem_Read+0x230>)
 8002086:	400b      	ands	r3, r1
 8002088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e000      	b.n	80020a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2302      	movs	r3, #2
  }
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	80002400 	.word	0x80002400
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	817b      	strh	r3, [r7, #10]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <I2C_RequestMemoryWrite+0xa4>)
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fa79 	bl	80025d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	69b9      	ldr	r1, [r7, #24]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f909 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e02c      	b.n	8002154 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002100:	893b      	ldrh	r3, [r7, #8]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	629a      	str	r2, [r3, #40]	@ 0x28
 800210a:	e015      	b.n	8002138 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800210c:	893b      	ldrh	r3, [r7, #8]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 f8ef 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e012      	b.n	8002154 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800212e:	893b      	ldrh	r3, [r7, #8]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2200      	movs	r2, #0
 8002140:	2180      	movs	r1, #128	@ 0x80
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f884 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	80002000 	.word	0x80002000

08002160 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	4608      	mov	r0, r1
 800216a:	4611      	mov	r1, r2
 800216c:	461a      	mov	r2, r3
 800216e:	4603      	mov	r3, r0
 8002170:	817b      	strh	r3, [r7, #10]
 8002172:	460b      	mov	r3, r1
 8002174:	813b      	strh	r3, [r7, #8]
 8002176:	4613      	mov	r3, r2
 8002178:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	8979      	ldrh	r1, [r7, #10]
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <I2C_RequestMemoryRead+0xa4>)
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2300      	movs	r3, #0
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 fa26 	bl	80025d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f8b6 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e02c      	b.n	80021fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021a6:	893b      	ldrh	r3, [r7, #8]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80021b0:	e015      	b.n	80021de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021b2:	893b      	ldrh	r3, [r7, #8]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 f89c 	bl	8002302 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e012      	b.n	80021fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021d4:	893b      	ldrh	r3, [r7, #8]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2200      	movs	r2, #0
 80021e6:	2140      	movs	r1, #64	@ 0x40
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f831 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	80002000 	.word	0x80002000

08002208 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	d103      	bne.n	8002226 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d007      	beq.n	8002244 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	619a      	str	r2, [r3, #24]
  }
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002260:	e03b      	b.n	80022da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	6839      	ldr	r1, [r7, #0]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8d6 	bl	8002418 <I2C_IsErrorOccurred>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e041      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d02d      	beq.n	80022da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800227e:	f7ff f81f 	bl	80012c0 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d302      	bcc.n	8002294 <I2C_WaitOnFlagUntilTimeout+0x44>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d122      	bne.n	80022da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699a      	ldr	r2, [r3, #24]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4013      	ands	r3, r2
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d113      	bne.n	80022da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f043 0220 	orr.w	r2, r3, #32
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4013      	ands	r3, r2
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d0b4      	beq.n	8002262 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800230e:	e033      	b.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f87f 	bl	8002418 <I2C_IsErrorOccurred>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e031      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232a:	d025      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232c:	f7fe ffc8 	bl	80012c0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11a      	bne.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d013      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d1c4      	bne.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239c:	e02f      	b.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f838 	bl	8002418 <I2C_IsErrorOccurred>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02d      	b.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7fe ff85 	bl	80012c0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11a      	bne.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d013      	beq.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	f043 0220 	orr.w	r2, r3, #32
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e007      	b.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b20      	cmp	r3, #32
 800240a:	d1c8      	bne.n	800239e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d068      	beq.n	8002516 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2210      	movs	r2, #16
 800244a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800244c:	e049      	b.n	80024e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002454:	d045      	beq.n	80024e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002456:	f7fe ff33 	bl	80012c0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	429a      	cmp	r2, r3
 8002464:	d302      	bcc.n	800246c <I2C_IsErrorOccurred+0x54>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d13a      	bne.n	80024e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002476:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800247e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800248a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800248e:	d121      	bne.n	80024d4 <I2C_IsErrorOccurred+0xbc>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002496:	d01d      	beq.n	80024d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b20      	cmp	r3, #32
 800249c:	d01a      	beq.n	80024d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024ae:	f7fe ff07 	bl	80012c0 <HAL_GetTick>
 80024b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b4:	e00e      	b.n	80024d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024b6:	f7fe ff03 	bl	80012c0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b19      	cmp	r3, #25
 80024c2:	d907      	bls.n	80024d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f043 0320 	orr.w	r3, r3, #32
 80024ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80024d2:	e006      	b.n	80024e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d1e9      	bne.n	80024b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d003      	beq.n	80024f8 <I2C_IsErrorOccurred+0xe0>
 80024f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0aa      	beq.n	800244e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d103      	bne.n	8002508 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2220      	movs	r2, #32
 8002506:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002538:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800255a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01c      	beq.n	80025c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff fe3b 	bl	8002208 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <I2C_IsErrorOccurred+0x1bc>)
 800259e:	400b      	ands	r3, r1
 80025a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80025c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	fe00e800 	.word	0xfe00e800

080025d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	4613      	mov	r3, r2
 80025e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ea:	897b      	ldrh	r3, [r7, #10]
 80025ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	041b      	lsls	r3, r3, #16
 80025f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	4313      	orrs	r3, r2
 8002602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002606:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	0d5b      	lsrs	r3, r3, #21
 8002612:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <I2C_TransferConfig+0x60>)
 8002618:	430b      	orrs	r3, r1
 800261a:	43db      	mvns	r3, r3
 800261c:	ea02 0103 	and.w	r1, r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800262a:	bf00      	nop
 800262c:	371c      	adds	r7, #28
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	03ff63ff 	.word	0x03ff63ff

0800263c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	d138      	bne.n	80026c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800265c:	2302      	movs	r3, #2
 800265e:	e032      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	@ 0x24
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800268e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d139      	bne.n	800275c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e033      	b.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2224      	movs	r2, #36	@ 0x24
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002724:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af02      	add	r7, sp, #8
 8002770:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e101      	b.n	8002980 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f006 fe27 	bl	80093e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fc08 	bl	8005fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7c1a      	ldrb	r2, [r3, #16]
 80027b6:	f88d 2000 	strb.w	r2, [sp]
 80027ba:	3304      	adds	r3, #4
 80027bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027be:	f003 fb24 	bl	8005e0a <USB_CoreInit>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d5      	b.n	8002980 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f003 fc00 	bl	8005fe0 <USB_SetCurrentMode>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0c6      	b.n	8002980 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e04a      	b.n	800288e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3315      	adds	r3, #21
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3314      	adds	r3, #20
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	b298      	uxth	r0, r3
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	332e      	adds	r3, #46	@ 0x2e
 8002834:	4602      	mov	r2, r0
 8002836:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3318      	adds	r3, #24
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	331c      	adds	r3, #28
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3320      	adds	r3, #32
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3324      	adds	r3, #36	@ 0x24
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	3301      	adds	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	791b      	ldrb	r3, [r3, #4]
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	429a      	cmp	r2, r3
 8002896:	d3af      	bcc.n	80027f8 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e044      	b.n	8002928 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028c6:	7bfa      	ldrb	r2, [r7, #15]
 80028c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3301      	adds	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	791b      	ldrb	r3, [r3, #4]
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	429a      	cmp	r2, r3
 8002930:	d3b5      	bcc.n	800289e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7c1a      	ldrb	r2, [r3, #16]
 800293a:	f88d 2000 	strb.w	r2, [sp]
 800293e:	3304      	adds	r3, #4
 8002940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002942:	f003 fb99 	bl	8006078 <USB_DevInit>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e013      	b.n	8002980 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7b1b      	ldrb	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f001 f856 	bl	8003a20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f004 fb50 	bl	800701e <USB_DevDisconnect>

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_PCD_Start+0x1c>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e01c      	b.n	80029de <HAL_PCD_Start+0x56>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7b5b      	ldrb	r3, [r3, #13]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 fae9 	bl	8005f9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 fb04 	bl	8006fdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029e6:	b590      	push	{r4, r7, lr}
 80029e8:	b08d      	sub	sp, #52	@ 0x34
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f004 fbc2 	bl	8007186 <USB_GetMode>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f040 8481 	bne.w	800330c <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fb26 	bl	8007060 <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8477 	beq.w	800330a <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fb13 	bl	8007060 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f002 0202 	and.w	r2, r2, #2
 8002a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fb01 	bl	8007060 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d161      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0210 	bic.w	r2, r2, #16
 8002a76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	0c5b      	lsrs	r3, r3, #17
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d124      	bne.n	8002aee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d035      	beq.n	8002b1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6a38      	ldr	r0, [r7, #32]
 8002ac4:	f004 f938 	bl	8006d38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad4:	441a      	add	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ae6:	441a      	add	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	615a      	str	r2, [r3, #20]
 8002aec:	e016      	b.n	8002b1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	0c5b      	lsrs	r3, r3, #17
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d110      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b00:	2208      	movs	r2, #8
 8002b02:	4619      	mov	r1, r3
 8002b04:	6a38      	ldr	r0, [r7, #32]
 8002b06:	f004 f917 	bl	8006d38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b16:	441a      	add	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0210 	orr.w	r2, r2, #16
 8002b2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 fa95 	bl	8007060 <USB_ReadInterrupts>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b40:	f040 80a7 	bne.w	8002c92 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fa9a 	bl	8007086 <USB_ReadDevAllOutEpInterrupt>
 8002b52:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b54:	e099      	b.n	8002c8a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 808e 	beq.w	8002c7e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 fabe 	bl	80070ee <USB_ReadDevOutEPInterrupt>
 8002b72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fe6a 	bl	800386c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00c      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bae:	461a      	mov	r2, r3
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fea6 	bl	8003908 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2310      	movs	r3, #16
 8002bd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d030      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bea:	2b80      	cmp	r3, #128	@ 0x80
 8002bec:	d109      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bfc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c00:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	78db      	ldrb	r3, [r3, #3]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d108      	bne.n	8002c32 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2200      	movs	r2, #0
 8002c24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f006 fd3f 	bl	80096b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2302      	movs	r3, #2
 8002c42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	3301      	adds	r3, #1
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f47f af62 	bne.w	8002b56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 f9e2 	bl	8007060 <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ca6:	f040 80a4 	bne.w	8002df2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fa03 	bl	80070ba <USB_ReadDevAllInEpInterrupt>
 8002cb4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cba:	e096      	b.n	8002dea <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 808b 	beq.w	8002dde <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fa29 	bl	800712a <USB_ReadDevInEPInterrupt>
 8002cd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d020      	beq.n	8002d26 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69f9      	ldr	r1, [r7, #28]
 8002d00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d04:	4013      	ands	r3, r2
 8002d06:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d14:	461a      	mov	r2, r3
 8002d16:	2301      	movs	r3, #1
 8002d18:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f006 fc30 	bl	8009586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2308      	movs	r3, #8
 8002d40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d74:	461a      	mov	r2, r3
 8002d76:	2340      	movs	r3, #64	@ 0x40
 8002d78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d023      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d86:	6a38      	ldr	r0, [r7, #32]
 8002d88:	f003 fabe 	bl	8006308 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3310      	adds	r3, #16
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	78db      	ldrb	r3, [r3, #3]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f006 fc8d 	bl	80096d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2302      	movs	r3, #2
 8002dca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002dd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fcbe 	bl	800375a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	3301      	adds	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f af65 	bne.w	8002cbc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 f932 	bl	8007060 <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e06:	d122      	bne.n	8002e4e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e16:	f023 0301 	bic.w	r3, r3, #1
 8002e1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d108      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e2e:	2100      	movs	r1, #0
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f006 fead 	bl	8009b90 <HAL_PCDEx_LPM_Callback>
 8002e36:	e002      	b.n	8002e3e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f006 fc11 	bl	8009660 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 f904 	bl	8007060 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e62:	d112      	bne.n	8002e8a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f006 fbcd 	bl	8009614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 f8e6 	bl	8007060 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e9e:	d121      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002eae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f006 fe5a 	bl	8009b90 <HAL_PCDEx_LPM_Callback>
 8002edc:	e002      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f006 fb98 	bl	8009614 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 f8b9 	bl	8007060 <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef8:	f040 80b6 	bne.w	8003068 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2110      	movs	r1, #16
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 f9f6 	bl	8006308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f20:	e046      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f9a:	0151      	lsls	r1, r2, #5
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	440a      	add	r2, r1
 8002fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fa8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fac:	3301      	adds	r3, #1
 8002fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	791b      	ldrb	r3, [r3, #4]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d3b2      	bcc.n	8002f22 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	69fa      	ldr	r2, [r7, #28]
 8002fc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7bdb      	ldrb	r3, [r3, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d016      	beq.n	8003006 <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe8:	f043 030b 	orr.w	r3, r3, #11
 8002fec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ffe:	f043 030b 	orr.w	r3, r3, #11
 8003002:	6453      	str	r3, [r2, #68]	@ 0x44
 8003004:	e015      	b.n	8003032 <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003014:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003018:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800301c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302c:	f043 030b 	orr.w	r3, r3, #11
 8003030:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003040:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003044:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f004 f8c8 	bl	80071e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fff7 	bl	8007060 <USB_ReadInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307c:	d123      	bne.n	80030c6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f004 f88d 	bl	80071a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 f9b4 	bl	80063fa <USB_GetDevSpeed>
 8003092:	4603      	mov	r3, r0
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681c      	ldr	r4, [r3, #0]
 800309e:	f001 fb8b 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80030a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030a8:	461a      	mov	r2, r3
 80030aa:	4620      	mov	r0, r4
 80030ac:	f002 feda 	bl	8005e64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f006 fa90 	bl	80095d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f003 ffc8 	bl	8007060 <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d10a      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f006 fa6d 	bl	80095ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f002 0208 	and.w	r2, r2, #8
 80030ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 ffb3 	bl	8007060 <USB_ReadInterrupts>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003100:	2b80      	cmp	r3, #128	@ 0x80
 8003102:	d123      	bne.n	800314c <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003110:	2301      	movs	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
 8003114:	e014      	b.n	8003140 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	b2db      	uxtb	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fadf 	bl	80036f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	3301      	adds	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	791b      	ldrb	r3, [r3, #4]
 8003144:	461a      	mov	r2, r3
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	4293      	cmp	r3, r2
 800314a:	d3e4      	bcc.n	8003116 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 ff85 	bl	8007060 <USB_ReadInterrupts>
 8003156:	4603      	mov	r3, r0
 8003158:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003160:	d13c      	bne.n	80031dc <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003162:	2301      	movs	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	@ 0x24
 8003166:	e02b      	b.n	80031c0 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3318      	adds	r3, #24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d115      	bne.n	80031ba <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800318e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003190:	2b00      	cmp	r3, #0
 8003192:	da12      	bge.n	80031ba <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3317      	adds	r3, #23
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fa9f 	bl	80036f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	3301      	adds	r3, #1
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d3cd      	bcc.n	8003168 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 ff3d 	bl	8007060 <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031f0:	d156      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f2:	2301      	movs	r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f6:	e045      	b.n	8003284 <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d12e      	bne.n	800327e <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003220:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003222:	2b00      	cmp	r3, #0
 8003224:	da2b      	bge.n	800327e <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003232:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003236:	429a      	cmp	r2, r3
 8003238:	d121      	bne.n	800327e <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	69fa      	ldr	r2, [r7, #28]
 8003272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800327a:	6053      	str	r3, [r2, #4]
            break;
 800327c:	e008      	b.n	8003290 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	791b      	ldrb	r3, [r3, #4]
 8003288:	461a      	mov	r2, r3
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	4293      	cmp	r3, r2
 800328e:	d3b3      	bcc.n	80031f8 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800329e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 fedb 	bl	8007060 <USB_ReadInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d10a      	bne.n	80032cc <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f006 fa1e 	bl	80096f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 fec5 	bl	8007060 <USB_ReadInterrupts>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d115      	bne.n	800330c <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f006 fa0e 	bl	8009714 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e000      	b.n	800330c <HAL_PCD_IRQHandler+0x926>
      return;
 800330a:	bf00      	nop
    }
  }
}
 800330c:	3734      	adds	r7, #52	@ 0x34
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_PCD_SetAddress+0x1a>
 8003328:	2302      	movs	r3, #2
 800332a:	e012      	b.n	8003352 <HAL_PCD_SetAddress+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f003 fe24 	bl	8006f90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	4608      	mov	r0, r1
 8003364:	4611      	mov	r1, r2
 8003366:	461a      	mov	r2, r3
 8003368:	4603      	mov	r3, r0
 800336a:	70fb      	strb	r3, [r7, #3]
 800336c:	460b      	mov	r3, r1
 800336e:	803b      	strh	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800337c:	2b00      	cmp	r3, #0
 800337e:	da0f      	bge.n	80033a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	f003 020f 	and.w	r2, r3, #15
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3310      	adds	r3, #16
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	705a      	strb	r2, [r3, #1]
 800339e:	e00f      	b.n	80033c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80033cc:	883b      	ldrh	r3, [r7, #0]
 80033ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	78ba      	ldrb	r2, [r7, #2]
 80033da:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033ee:	78bb      	ldrb	r3, [r7, #2]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d102      	bne.n	80033fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_PCD_EP_Open+0xae>
 8003404:	2302      	movs	r3, #2
 8003406:	e00e      	b.n	8003426 <HAL_PCD_EP_Open+0xcc>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f003 f80e 	bl	8006438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003424:	7afb      	ldrb	r3, [r7, #11]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800343a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343e:	2b00      	cmp	r3, #0
 8003440:	da0f      	bge.n	8003462 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 020f 	and.w	r2, r3, #15
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	3310      	adds	r3, #16
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	3304      	adds	r3, #4
 8003458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	705a      	strb	r2, [r3, #1]
 8003460:	e00f      	b.n	8003482 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	3304      	adds	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	b2da      	uxtb	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_PCD_EP_Close+0x6e>
 8003498:	2302      	movs	r3, #2
 800349a:	e00e      	b.n	80034ba <HAL_PCD_EP_Close+0x8c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 f84c 	bl	8006548 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	460b      	mov	r3, r1
 80034d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003504:	7afb      	ldrb	r3, [r7, #11]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	b2da      	uxtb	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	4618      	mov	r0, r3
 8003518:	f003 f8f2 	bl	8006700 <USB_EPStartXfer>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	460b      	mov	r3, r1
 8003534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003536:	7afb      	ldrb	r3, [r7, #11]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	3310      	adds	r3, #16
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	3304      	adds	r3, #4
 800354c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2201      	movs	r2, #1
 8003564:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	b2da      	uxtb	r2, r3
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 f8c1 	bl	8006700 <USB_EPStartXfer>

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	7912      	ldrb	r2, [r2, #4]
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e04e      	b.n	8003644 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da0f      	bge.n	80035ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	3310      	adds	r3, #16
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	705a      	strb	r2, [r3, #1]
 80035cc:	e00d      	b.n	80035ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_PCD_EP_SetStall+0x82>
 8003606:	2302      	movs	r3, #2
 8003608:	e01c      	b.n	8003644 <HAL_PCD_EP_SetStall+0xbc>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	4618      	mov	r0, r3
 800361a:	f003 fbe5 	bl	8006de8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f003 fdd7 	bl	80071e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	7912      	ldrb	r2, [r2, #4]
 8003662:	4293      	cmp	r3, r2
 8003664:	d901      	bls.n	800366a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e042      	b.n	80036f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800366a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da0f      	bge.n	8003692 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3310      	adds	r3, #16
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	705a      	strb	r2, [r3, #1]
 8003690:	e00f      	b.n	80036b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	3304      	adds	r3, #4
 80036aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_EP_ClrStall+0x86>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e00e      	b.n	80036f0 <HAL_PCD_EP_ClrStall+0xa4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 fbef 	bl	8006ec4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0c      	bge.n	8003726 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3310      	adds	r3, #16
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e00c      	b.n	8003740 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 020f 	and.w	r2, r3, #15
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68f9      	ldr	r1, [r7, #12]
 8003746:	4618      	mov	r0, r3
 8003748:	f003 fa12 	bl	8006b70 <USB_EPStopXfer>
 800374c:	4603      	mov	r3, r0
 800374e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003750:	7afb      	ldrb	r3, [r7, #11]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b088      	sub	sp, #32
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3310      	adds	r3, #16
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4413      	add	r3, r2
 800377e:	3304      	adds	r3, #4
 8003780:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d901      	bls.n	8003792 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e067      	b.n	8003862 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d902      	bls.n	80037ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3303      	adds	r3, #3
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b6:	e026      	b.n	8003806 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d902      	bls.n	80037d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3303      	adds	r3, #3
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68d9      	ldr	r1, [r3, #12]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	6978      	ldr	r0, [r7, #20]
 80037ea:	f003 fa6b 	bl	8006cc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	441a      	add	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	441a      	add	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d809      	bhi.n	8003830 <PCD_WriteEmptyTxFifo+0xd6>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003824:	429a      	cmp	r2, r3
 8003826:	d203      	bcs.n	8003830 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1c3      	bne.n	80037b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	429a      	cmp	r2, r3
 800383a:	d811      	bhi.n	8003860 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	2201      	movs	r2, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	43db      	mvns	r3, r3
 8003856:	6939      	ldr	r1, [r7, #16]
 8003858:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800385c:	4013      	ands	r3, r2
 800385e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	333c      	adds	r3, #60	@ 0x3c
 8003884:	3304      	adds	r3, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a19      	ldr	r2, [pc, #100]	@ (8003904 <PCD_EP_OutXfrComplete_int+0x98>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d124      	bne.n	80038ec <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	e01a      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	2320      	movs	r3, #32
 80038dc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f005 fe33 	bl	8009550 <HAL_PCD_DataOutStageCallback>
 80038ea:	e005      	b.n	80038f8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f005 fe2c 	bl	8009550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	4f54310a 	.word	0x4f54310a

08003908 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	333c      	adds	r3, #60	@ 0x3c
 8003920:	3304      	adds	r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a0c      	ldr	r2, [pc, #48]	@ (800396c <PCD_EP_OutSetupPacket_int+0x64>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d90e      	bls.n	800395c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003954:	461a      	mov	r2, r3
 8003956:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f005 fde5 	bl	800952c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	4f54300a 	.word	0x4f54300a

08003970 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
 800397c:	4613      	mov	r3, r2
 800397e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800398e:	883b      	ldrh	r3, [r7, #0]
 8003990:	0419      	lsls	r1, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	430a      	orrs	r2, r1
 800399a:	629a      	str	r2, [r3, #40]	@ 0x28
 800399c:	e028      	b.n	80039f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a4:	0c1b      	lsrs	r3, r3, #16
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	4413      	add	r3, r2
 80039aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e00d      	b.n	80039ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3340      	adds	r3, #64	@ 0x40
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	3301      	adds	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3ec      	bcc.n	80039b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039d8:	883b      	ldrh	r3, [r7, #0]
 80039da:	0418      	lsls	r0, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6819      	ldr	r1, [r3, #0]
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4302      	orrs	r2, r0
 80039e8:	3340      	adds	r3, #64	@ 0x40
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	887a      	ldrh	r2, [r7, #2]
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	f043 0303 	orr.w	r3, r3, #3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a76:	6013      	str	r3, [r2, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	@ (8003aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40007000 	.word	0x40007000

08003aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d130      	bne.n	8003b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab4:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac0:	d038      	beq.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ac2:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003aca:	4a1e      	ldr	r2, [pc, #120]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2232      	movs	r2, #50	@ 0x32
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	4a1b      	ldr	r2, [pc, #108]	@ (8003b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0c9b      	lsrs	r3, r3, #18
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ae8:	e002      	b.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003afc:	d102      	bne.n	8003b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f2      	bne.n	8003aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b04:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b10:	d110      	bne.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e00f      	b.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b22:	d007      	beq.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b2c:	4a05      	ldr	r2, [pc, #20]	@ (8003b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40007000 	.word	0x40007000
 8003b48:	20000000 	.word	0x20000000
 8003b4c:	431bde83 	.word	0x431bde83

08003b50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a04      	ldr	r2, [pc, #16]	@ (8003b6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b5e:	6053      	str	r3, [r2, #4]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40007000 	.word	0x40007000

08003b70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b78:	f7fd fba2 	bl	80012c0 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e063      	b.n	8003c50 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd f95d 	bl	8000e5c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003ba2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f858 	bl	8003c5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	021a      	lsls	r2, r3, #8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2120      	movs	r1, #32
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f850 	bl	8003c78 <QSPI_WaitFlagStateUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d131      	bne.n	8003c46 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bec:	f023 0310 	bic.w	r3, r3, #16
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6852      	ldr	r2, [r2, #4]
 8003bf4:	0611      	lsls	r1, r2, #24
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68d2      	ldr	r2, [r2, #12]
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	4b13      	ldr	r3, [pc, #76]	@ (8003c58 <HAL_QSPI_Init+0xe8>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6912      	ldr	r2, [r2, #16]
 8003c12:	0411      	lsls	r1, r2, #16
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6952      	ldr	r2, [r2, #20]
 8003c18:	4311      	orrs	r1, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6992      	ldr	r2, [r2, #24]
 8003c1e:	4311      	orrs	r1, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	ffe0f8fe 	.word	0xffe0f8fe

08003c5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c88:	e01a      	b.n	8003cc0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d016      	beq.n	8003cc0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7fd fb15 	bl	80012c0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2204      	movs	r2, #4
 8003cac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e00e      	b.n	8003cde <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf14      	ite	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	2300      	moveq	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1d6      	bne.n	8003c8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e3ca      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfa:	4b97      	ldr	r3, [pc, #604]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d04:	4b94      	ldr	r3, [pc, #592]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80e4 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_RCC_OscConfig+0x4a>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	f040 808b 	bne.w	8003e40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 8087 	bne.w	8003e40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d32:	4b89      	ldr	r3, [pc, #548]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_RCC_OscConfig+0x62>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e3a2      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1a      	ldr	r2, [r3, #32]
 8003d4e:	4b82      	ldr	r3, [pc, #520]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_RCC_OscConfig+0x7c>
 8003d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d62:	e005      	b.n	8003d70 <HAL_RCC_OscConfig+0x88>
 8003d64:	4b7c      	ldr	r3, [pc, #496]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d223      	bcs.n	8003dbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fd55 	bl	8004828 <RCC_SetFlashLatencyFromMSIRange>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e383      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d88:	4b73      	ldr	r3, [pc, #460]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a72      	ldr	r2, [pc, #456]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	f043 0308 	orr.w	r3, r3, #8
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b70      	ldr	r3, [pc, #448]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	496d      	ldr	r1, [pc, #436]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003da6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	4968      	ldr	r1, [pc, #416]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
 8003dba:	e025      	b.n	8003e08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dbc:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003dc2:	f043 0308 	orr.w	r3, r3, #8
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b63      	ldr	r3, [pc, #396]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	4960      	ldr	r1, [pc, #384]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dda:	4b5f      	ldr	r3, [pc, #380]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	495b      	ldr	r1, [pc, #364]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fd15 	bl	8004828 <RCC_SetFlashLatencyFromMSIRange>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e343      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e08:	f000 fc4a 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b52      	ldr	r3, [pc, #328]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	4950      	ldr	r1, [pc, #320]	@ (8003f5c <HAL_RCC_OscConfig+0x274>)
 8003e1a:	5ccb      	ldrb	r3, [r1, r3]
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	4a4e      	ldr	r2, [pc, #312]	@ (8003f60 <HAL_RCC_OscConfig+0x278>)
 8003e26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e28:	4b4e      	ldr	r3, [pc, #312]	@ (8003f64 <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fd f9f7 	bl	8001220 <HAL_InitTick>
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d052      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	e327      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d032      	beq.n	8003eae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e48:	4b43      	ldr	r3, [pc, #268]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a42      	ldr	r2, [pc, #264]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fa34 	bl	80012c0 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e5c:	f7fd fa30 	bl	80012c0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e310      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a36      	ldr	r2, [pc, #216]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e80:	f043 0308 	orr.w	r3, r3, #8
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b34      	ldr	r3, [pc, #208]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4931      	ldr	r1, [pc, #196]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e98:	4b2f      	ldr	r3, [pc, #188]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	492c      	ldr	r1, [pc, #176]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
 8003eac:	e01a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eae:	4b2a      	ldr	r3, [pc, #168]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a29      	ldr	r2, [pc, #164]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eba:	f7fd fa01 	bl	80012c0 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ec2:	f7fd f9fd 	bl	80012c0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e2dd      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ed4:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x1da>
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ee2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d074      	beq.n	8003fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x21a>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d10e      	bne.n	8003f1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d10b      	bne.n	8003f1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d064      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d160      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e2ba      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x24a>
 8003f24:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a0b      	ldr	r2, [pc, #44]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f2e:	6013      	str	r3, [r2, #0]
 8003f30:	e026      	b.n	8003f80 <HAL_RCC_OscConfig+0x298>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f3a:	d115      	bne.n	8003f68 <HAL_RCC_OscConfig+0x280>
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a05      	ldr	r2, [pc, #20]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a02      	ldr	r2, [pc, #8]	@ (8003f58 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e014      	b.n	8003f80 <HAL_RCC_OscConfig+0x298>
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	08009d38 	.word	0x08009d38
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004
 8003f68:	4ba0      	ldr	r3, [pc, #640]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a9f      	ldr	r2, [pc, #636]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b9d      	ldr	r3, [pc, #628]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a9c      	ldr	r2, [pc, #624]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd f99a 	bl	80012c0 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f90:	f7fd f996 	bl	80012c0 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b64      	cmp	r3, #100	@ 0x64
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e276      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa2:	4b92      	ldr	r3, [pc, #584]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x2a8>
 8003fae:	e014      	b.n	8003fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fd f986 	bl	80012c0 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd f982 	bl	80012c0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	@ 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e262      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fca:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x2d0>
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d060      	beq.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d005      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x310>
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d119      	bne.n	8004026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d116      	bne.n	8004026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_RCC_OscConfig+0x328>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e23f      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004010:	4b76      	ldr	r3, [pc, #472]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	061b      	lsls	r3, r3, #24
 800401e:	4973      	ldr	r1, [pc, #460]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004024:	e040      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d023      	beq.n	8004076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800402e:	4b6f      	ldr	r3, [pc, #444]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6e      	ldr	r2, [pc, #440]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd f941 	bl	80012c0 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004042:	f7fd f93d 	bl	80012c0 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e21d      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004054:	4b65      	ldr	r3, [pc, #404]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b62      	ldr	r3, [pc, #392]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	495f      	ldr	r1, [pc, #380]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
 8004074:	e018      	b.n	80040a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004076:	4b5d      	ldr	r3, [pc, #372]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a5c      	ldr	r2, [pc, #368]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 800407c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fd f91d 	bl	80012c0 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408a:	f7fd f919 	bl	80012c0 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1f9      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800409c:	4b53      	ldr	r3, [pc, #332]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d03c      	beq.n	800412e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01c      	beq.n	80040f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040bc:	4b4b      	ldr	r3, [pc, #300]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80040be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c2:	4a4a      	ldr	r2, [pc, #296]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7fd f8f8 	bl	80012c0 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040d4:	f7fd f8f4 	bl	80012c0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1d4      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040e6:	4b41      	ldr	r3, [pc, #260]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80040e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ef      	beq.n	80040d4 <HAL_RCC_OscConfig+0x3ec>
 80040f4:	e01b      	b.n	800412e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040f6:	4b3d      	ldr	r3, [pc, #244]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80040f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040fc:	4a3b      	ldr	r2, [pc, #236]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004106:	f7fd f8db 	bl	80012c0 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800410e:	f7fd f8d7 	bl	80012c0 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e1b7      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004120:	4b32      	ldr	r3, [pc, #200]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1ef      	bne.n	800410e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a6 	beq.w	8004288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413c:	2300      	movs	r3, #0
 800413e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004140:	4b2a      	ldr	r3, [pc, #168]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10d      	bne.n	8004168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414c:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 800414e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004150:	4a26      	ldr	r2, [pc, #152]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004156:	6593      	str	r3, [r2, #88]	@ 0x58
 8004158:	4b24      	ldr	r3, [pc, #144]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 800415a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004164:	2301      	movs	r3, #1
 8004166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <HAL_RCC_OscConfig+0x508>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d118      	bne.n	80041a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004174:	4b1e      	ldr	r3, [pc, #120]	@ (80041f0 <HAL_RCC_OscConfig+0x508>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1d      	ldr	r2, [pc, #116]	@ (80041f0 <HAL_RCC_OscConfig+0x508>)
 800417a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800417e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004180:	f7fd f89e 	bl	80012c0 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004188:	f7fd f89a 	bl	80012c0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e17a      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800419a:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <HAL_RCC_OscConfig+0x508>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d108      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4d8>
 80041ae:	4b0f      	ldr	r3, [pc, #60]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b4:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041be:	e029      	b.n	8004214 <HAL_RCC_OscConfig+0x52c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d115      	bne.n	80041f4 <HAL_RCC_OscConfig+0x50c>
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	4a07      	ldr	r2, [pc, #28]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041d8:	4b04      	ldr	r3, [pc, #16]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	4a03      	ldr	r2, [pc, #12]	@ (80041ec <HAL_RCC_OscConfig+0x504>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041e8:	e014      	b.n	8004214 <HAL_RCC_OscConfig+0x52c>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
 80041f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fa:	4a9b      	ldr	r2, [pc, #620]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80041fc:	f023 0301 	bic.w	r3, r3, #1
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004204:	4b98      	ldr	r3, [pc, #608]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	4a97      	ldr	r2, [pc, #604]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800420c:	f023 0304 	bic.w	r3, r3, #4
 8004210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d016      	beq.n	800424a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd f850 	bl	80012c0 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004222:	e00a      	b.n	800423a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004224:	f7fd f84c 	bl	80012c0 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e12a      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423a:	4b8b      	ldr	r3, [pc, #556]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0ed      	beq.n	8004224 <HAL_RCC_OscConfig+0x53c>
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fd f839 	bl	80012c0 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004250:	e00a      	b.n	8004268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fd f835 	bl	80012c0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004260:	4293      	cmp	r3, r2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e113      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004268:	4b7f      	ldr	r3, [pc, #508]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1ed      	bne.n	8004252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004276:	7ffb      	ldrb	r3, [r7, #31]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d105      	bne.n	8004288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800427c:	4b7a      	ldr	r3, [pc, #488]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	4a79      	ldr	r2, [pc, #484]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004286:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80fe 	beq.w	800448e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	2b02      	cmp	r3, #2
 8004298:	f040 80d0 	bne.w	800443c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800429c:	4b72      	ldr	r3, [pc, #456]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 0203 	and.w	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d130      	bne.n	8004312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	3b01      	subs	r3, #1
 80042bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d127      	bne.n	8004312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d11f      	bne.n	8004312 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042dc:	2a07      	cmp	r2, #7
 80042de:	bf14      	ite	ne
 80042e0:	2201      	movne	r2, #1
 80042e2:	2200      	moveq	r2, #0
 80042e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d113      	bne.n	8004312 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	085b      	lsrs	r3, r3, #1
 80042f6:	3b01      	subs	r3, #1
 80042f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d109      	bne.n	8004312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	085b      	lsrs	r3, r3, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d06e      	beq.n	80043f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	d069      	beq.n	80043ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004318:	4b53      	ldr	r3, [pc, #332]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004324:	4b50      	ldr	r3, [pc, #320]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0ad      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004334:	4b4c      	ldr	r3, [pc, #304]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a4b      	ldr	r2, [pc, #300]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800433a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800433e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004340:	f7fc ffbe 	bl	80012c0 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004348:	f7fc ffba 	bl	80012c0 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e09a      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800435a:	4b43      	ldr	r3, [pc, #268]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f0      	bne.n	8004348 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004366:	4b40      	ldr	r3, [pc, #256]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	4b40      	ldr	r3, [pc, #256]	@ (800446c <HAL_RCC_OscConfig+0x784>)
 800436c:	4013      	ands	r3, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004376:	3a01      	subs	r2, #1
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	4311      	orrs	r1, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004380:	0212      	lsls	r2, r2, #8
 8004382:	4311      	orrs	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004388:	0852      	lsrs	r2, r2, #1
 800438a:	3a01      	subs	r2, #1
 800438c:	0552      	lsls	r2, r2, #21
 800438e:	4311      	orrs	r1, r2
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004394:	0852      	lsrs	r2, r2, #1
 8004396:	3a01      	subs	r2, #1
 8004398:	0652      	lsls	r2, r2, #25
 800439a:	4311      	orrs	r1, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a0:	0912      	lsrs	r2, r2, #4
 80043a2:	0452      	lsls	r2, r2, #17
 80043a4:	430a      	orrs	r2, r1
 80043a6:	4930      	ldr	r1, [pc, #192]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c4:	f7fc ff7c 	bl	80012c0 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fc ff78 	bl	80012c0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e058      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043de:	4b22      	ldr	r3, [pc, #136]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ea:	e050      	b.n	800448e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e04f      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d148      	bne.n	800448e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a19      	ldr	r2, [pc, #100]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004406:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004408:	4b17      	ldr	r3, [pc, #92]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a16      	ldr	r2, [pc, #88]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004414:	f7fc ff54 	bl	80012c0 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fc ff50 	bl	80012c0 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e030      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442e:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x734>
 800443a:	e028      	b.n	800448e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d023      	beq.n	800448a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004442:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a08      	ldr	r2, [pc, #32]	@ (8004468 <HAL_RCC_OscConfig+0x780>)
 8004448:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800444c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fc ff37 	bl	80012c0 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004454:	e00c      	b.n	8004470 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004456:	f7fc ff33 	bl	80012c0 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d905      	bls.n	8004470 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e013      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
 8004468:	40021000 	.word	0x40021000
 800446c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004470:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_OscConfig+0x7b0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1ec      	bne.n	8004456 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800447c:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_RCC_OscConfig+0x7b0>)
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4905      	ldr	r1, [pc, #20]	@ (8004498 <HAL_RCC_OscConfig+0x7b0>)
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x7b4>)
 8004484:	4013      	ands	r3, r2
 8004486:	60cb      	str	r3, [r1, #12]
 8004488:	e001      	b.n	800448e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	feeefffc 	.word	0xfeeefffc

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0e7      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b4:	4b75      	ldr	r3, [pc, #468]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d910      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b72      	ldr	r3, [pc, #456]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 0207 	bic.w	r2, r3, #7
 80044ca:	4970      	ldr	r1, [pc, #448]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b6e      	ldr	r3, [pc, #440]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0cf      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d010      	beq.n	8004512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	4b66      	ldr	r3, [pc, #408]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d908      	bls.n	8004512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	4b63      	ldr	r3, [pc, #396]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4960      	ldr	r1, [pc, #384]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d04c      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004526:	4b5a      	ldr	r3, [pc, #360]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d121      	bne.n	8004576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e0a6      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	4b54      	ldr	r3, [pc, #336]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d115      	bne.n	8004576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e09a      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004556:	4b4e      	ldr	r3, [pc, #312]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e08e      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004566:	4b4a      	ldr	r3, [pc, #296]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e086      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004576:	4b46      	ldr	r3, [pc, #280]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4943      	ldr	r1, [pc, #268]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004588:	f7fc fe9a 	bl	80012c0 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7fc fe96 	bl	80012c0 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e06e      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 020c 	and.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1eb      	bne.n	8004590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	4b31      	ldr	r3, [pc, #196]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d208      	bcs.n	80045e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	492b      	ldr	r1, [pc, #172]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e6:	4b29      	ldr	r3, [pc, #164]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d210      	bcs.n	8004616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f4:	4b25      	ldr	r3, [pc, #148]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 0207 	bic.w	r2, r3, #7
 80045fc:	4923      	ldr	r1, [pc, #140]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004604:	4b21      	ldr	r3, [pc, #132]	@ (800468c <HAL_RCC_ClockConfig+0x1ec>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d001      	beq.n	8004616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e036      	b.n	8004684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004622:	4b1b      	ldr	r3, [pc, #108]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4918      	ldr	r1, [pc, #96]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004640:	4b13      	ldr	r3, [pc, #76]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4910      	ldr	r1, [pc, #64]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004654:	f000 f824 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <HAL_RCC_ClockConfig+0x1f0>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	490b      	ldr	r1, [pc, #44]	@ (8004694 <HAL_RCC_ClockConfig+0x1f4>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
 8004670:	4a09      	ldr	r2, [pc, #36]	@ (8004698 <HAL_RCC_ClockConfig+0x1f8>)
 8004672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004674:	4b09      	ldr	r3, [pc, #36]	@ (800469c <HAL_RCC_ClockConfig+0x1fc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7fc fdd1 	bl	8001220 <HAL_InitTick>
 800467e:	4603      	mov	r3, r0
 8004680:	72fb      	strb	r3, [r7, #11]

  return status;
 8004682:	7afb      	ldrb	r3, [r7, #11]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40022000 	.word	0x40022000
 8004690:	40021000 	.word	0x40021000
 8004694:	08009d38 	.word	0x08009d38
 8004698:	20000000 	.word	0x20000000
 800469c:	20000004 	.word	0x20000004

080046a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b089      	sub	sp, #36	@ 0x24
 80046a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ae:	4b3e      	ldr	r3, [pc, #248]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b8:	4b3b      	ldr	r3, [pc, #236]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_RCC_GetSysClockFreq+0x34>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b0c      	cmp	r3, #12
 80046cc:	d121      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11e      	bne.n	8004712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046d4:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e0:	4b31      	ldr	r3, [pc, #196]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e005      	b.n	80046fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f0:	4b2d      	ldr	r3, [pc, #180]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046fc:	4a2b      	ldr	r2, [pc, #172]	@ (80047ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10d      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d102      	bne.n	800471e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004718:	4b25      	ldr	r3, [pc, #148]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e004      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d101      	bne.n	8004728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004724:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d134      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0xa6>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d003      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0xac>
 8004744:	e005      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004746:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004748:	617b      	str	r3, [r7, #20]
      break;
 800474a:	e005      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800474e:	617b      	str	r3, [r7, #20]
      break;
 8004750:	e002      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	617b      	str	r3, [r7, #20]
      break;
 8004756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004758:	4b13      	ldr	r3, [pc, #76]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	3301      	adds	r3, #1
 8004764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004766:	4b10      	ldr	r3, [pc, #64]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	fb03 f202 	mul.w	r2, r3, r2
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800477e:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	0e5b      	lsrs	r3, r3, #25
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	3301      	adds	r3, #1
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004798:	69bb      	ldr	r3, [r7, #24]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	@ 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	08009d50 	.word	0x08009d50
 80047b0:	00f42400 	.word	0x00f42400
 80047b4:	007a1200 	.word	0x007a1200

080047b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047bc:	4b03      	ldr	r3, [pc, #12]	@ (80047cc <HAL_RCC_GetHCLKFreq+0x14>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000

080047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047d4:	f7ff fff0 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4904      	ldr	r1, [pc, #16]	@ (80047f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	08009d48 	.word	0x08009d48

080047fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004800:	f7ff ffda 	bl	80047b8 <HAL_RCC_GetHCLKFreq>
 8004804:	4602      	mov	r2, r0
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	0adb      	lsrs	r3, r3, #11
 800480c:	f003 0307 	and.w	r3, r3, #7
 8004810:	4904      	ldr	r1, [pc, #16]	@ (8004824 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004812:	5ccb      	ldrb	r3, [r1, r3]
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40021000 	.word	0x40021000
 8004824:	08009d48 	.word	0x08009d48

08004828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004834:	4b2a      	ldr	r3, [pc, #168]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004840:	f7ff f922 	bl	8003a88 <HAL_PWREx_GetVoltageRange>
 8004844:	6178      	str	r0, [r7, #20]
 8004846:	e014      	b.n	8004872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484c:	4a24      	ldr	r2, [pc, #144]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	@ 0x58
 8004854:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004860:	f7ff f912 	bl	8003a88 <HAL_PWREx_GetVoltageRange>
 8004864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004866:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004870:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004878:	d10b      	bne.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b80      	cmp	r3, #128	@ 0x80
 800487e:	d919      	bls.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2ba0      	cmp	r3, #160	@ 0xa0
 8004884:	d902      	bls.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004886:	2302      	movs	r3, #2
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e013      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800488c:	2301      	movs	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e010      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b80      	cmp	r3, #128	@ 0x80
 8004896:	d902      	bls.n	800489e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004898:	2303      	movs	r3, #3
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	e00a      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b80      	cmp	r3, #128	@ 0x80
 80048a2:	d102      	bne.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048a4:	2302      	movs	r3, #2
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e004      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b70      	cmp	r3, #112	@ 0x70
 80048ae:	d101      	bne.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048b0:	2301      	movs	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 0207 	bic.w	r2, r3, #7
 80048bc:	4909      	ldr	r1, [pc, #36]	@ (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048c4:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40022000 	.word	0x40022000

080048e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048f0:	2300      	movs	r3, #0
 80048f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048f4:	2300      	movs	r3, #0
 80048f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004900:	2b00      	cmp	r3, #0
 8004902:	d041      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004908:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800490c:	d02a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800490e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004912:	d824      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004914:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800491a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800491e:	d81e      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004928:	d010      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800492a:	e018      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800492c:	4b86      	ldr	r3, [pc, #536]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a85      	ldr	r2, [pc, #532]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004938:	e015      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 facb 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800494a:	e00c      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3320      	adds	r3, #32
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fbb6 	bl	80050c4 <RCCEx_PLLSAI2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	74fb      	strb	r3, [r7, #19]
      break;
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800496c:	4b76      	ldr	r3, [pc, #472]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800497a:	4973      	ldr	r1, [pc, #460]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d041      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004998:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800499c:	d02a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800499e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049a2:	d824      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049ae:	d81e      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80049b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b8:	d010      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049ba:	e018      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049bc:	4b62      	ldr	r3, [pc, #392]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a61      	ldr	r2, [pc, #388]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049c8:	e015      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa83 	bl	8004edc <RCCEx_PLLSAI1_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049da:	e00c      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3320      	adds	r3, #32
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fb6e 	bl	80050c4 <RCCEx_PLLSAI2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	74fb      	strb	r3, [r7, #19]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80049f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049fc:	4b52      	ldr	r3, [pc, #328]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a02:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a0a:	494f      	ldr	r1, [pc, #316]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a12:	e001      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80a0 	beq.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b41      	ldr	r3, [pc, #260]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	4a40      	ldr	r2, [pc, #256]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3a      	ldr	r2, [pc, #232]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a68:	f7fc fc2a 	bl	80012c0 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fc fc26 	bl	80012c0 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	74fb      	strb	r3, [r7, #19]
        break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a84:	4b31      	ldr	r3, [pc, #196]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ef      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d15c      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a96:	4b2c      	ldr	r3, [pc, #176]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d019      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ab4:	4b24      	ldr	r3, [pc, #144]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ac0:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac6:	4a20      	ldr	r2, [pc, #128]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ae0:	4a19      	ldr	r2, [pc, #100]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af2:	f7fc fbe5 	bl	80012c0 <HAL_GetTick>
 8004af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af8:	e00b      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fc fbe1 	bl	80012c0 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d902      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b10:	e006      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b12:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ec      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b26:	4b08      	ldr	r3, [pc, #32]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b36:	4904      	ldr	r1, [pc, #16]	@ (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004b3e:	e009      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	74bb      	strb	r3, [r7, #18]
 8004b44:	e006      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b54:	7c7b      	ldrb	r3, [r7, #17]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5a:	4b9e      	ldr	r3, [pc, #632]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5e:	4a9d      	ldr	r2, [pc, #628]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b72:	4b98      	ldr	r3, [pc, #608]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b78:	f023 0203 	bic.w	r2, r3, #3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	4994      	ldr	r1, [pc, #592]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b94:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9a:	f023 020c 	bic.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba2:	498c      	ldr	r1, [pc, #560]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb6:	4b87      	ldr	r3, [pc, #540]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	4983      	ldr	r1, [pc, #524]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	497b      	ldr	r1, [pc, #492]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bfa:	4b76      	ldr	r3, [pc, #472]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c08:	4972      	ldr	r1, [pc, #456]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c1c:	4b6d      	ldr	r3, [pc, #436]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2a:	496a      	ldr	r1, [pc, #424]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3e:	4b65      	ldr	r3, [pc, #404]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	4961      	ldr	r1, [pc, #388]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c60:	4b5c      	ldr	r3, [pc, #368]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6e:	4959      	ldr	r1, [pc, #356]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c82:	4b54      	ldr	r3, [pc, #336]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c90:	4950      	ldr	r1, [pc, #320]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004caa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	4948      	ldr	r1, [pc, #288]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cc6:	4b43      	ldr	r3, [pc, #268]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ccc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd4:	493f      	ldr	r1, [pc, #252]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d028      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cf6:	4937      	ldr	r1, [pc, #220]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d08:	4b32      	ldr	r3, [pc, #200]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a31      	ldr	r2, [pc, #196]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d12:	60d3      	str	r3, [r2, #12]
 8004d14:	e011      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2101      	movs	r1, #1
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f8d8 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d028      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d46:	4b23      	ldr	r3, [pc, #140]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	491f      	ldr	r1, [pc, #124]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d66:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d70:	60d3      	str	r3, [r2, #12]
 8004d72:	e011      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2101      	movs	r1, #1
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f8a9 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d02b      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db2:	4908      	ldr	r1, [pc, #32]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc4:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a02      	ldr	r2, [pc, #8]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dce:	60d3      	str	r3, [r2, #12]
 8004dd0:	e014      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004dd2:	bf00      	nop
 8004dd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ddc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2101      	movs	r1, #1
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f877 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d02f      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e16:	4928      	ldr	r1, [pc, #160]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f854 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d014      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	74bb      	strb	r3, [r7, #18]
 8004e42:	e011      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3320      	adds	r3, #32
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f935 	bl	80050c4 <RCCEx_PLLSAI2_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5e:	7cfb      	ldrb	r3, [r7, #19]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e64:	7cfb      	ldrb	r3, [r7, #19]
 8004e66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e82:	490d      	ldr	r1, [pc, #52]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e96:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ea6:	4904      	ldr	r1, [pc, #16]	@ (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004eae:	7cbb      	ldrb	r3, [r7, #18]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40021000 	.word	0x40021000

08004ebc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	@ (8004ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ec6:	f043 0304 	orr.w	r3, r3, #4
 8004eca:	6013      	str	r3, [r2, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000

08004edc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eea:	4b75      	ldr	r3, [pc, #468]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ef6:	4b72      	ldr	r3, [pc, #456]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0203 	and.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d10d      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
       ||
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d047      	beq.n	8004fb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	e044      	b.n	8004fb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d018      	beq.n	8004f62 <RCCEx_PLLSAI1_Config+0x86>
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d825      	bhi.n	8004f80 <RCCEx_PLLSAI1_Config+0xa4>
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d002      	beq.n	8004f3e <RCCEx_PLLSAI1_Config+0x62>
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d009      	beq.n	8004f50 <RCCEx_PLLSAI1_Config+0x74>
 8004f3c:	e020      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f3e:	4b60      	ldr	r3, [pc, #384]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d11d      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4e:	e01a      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f50:	4b5b      	ldr	r3, [pc, #364]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d116      	bne.n	8004f8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f60:	e013      	b.n	8004f8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f62:	4b57      	ldr	r3, [pc, #348]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10f      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f6e:	4b54      	ldr	r3, [pc, #336]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f7e:	e006      	b.n	8004f8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e004      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f96:	4b4a      	ldr	r3, [pc, #296]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	430b      	orrs	r3, r1
 8004fac:	4944      	ldr	r1, [pc, #272]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d17d      	bne.n	80050b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fb8:	4b41      	ldr	r3, [pc, #260]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a40      	ldr	r2, [pc, #256]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc4:	f7fc f97c 	bl	80012c0 <HAL_GetTick>
 8004fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fca:	e009      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fcc:	f7fc f978 	bl	80012c0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d902      	bls.n	8004fe0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fde:	e005      	b.n	8004fec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fe0:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ef      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d160      	bne.n	80050b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d111      	bne.n	800501c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff8:	4b31      	ldr	r3, [pc, #196]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6892      	ldr	r2, [r2, #8]
 8005008:	0211      	lsls	r1, r2, #8
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68d2      	ldr	r2, [r2, #12]
 800500e:	0912      	lsrs	r2, r2, #4
 8005010:	0452      	lsls	r2, r2, #17
 8005012:	430a      	orrs	r2, r1
 8005014:	492a      	ldr	r1, [pc, #168]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005016:	4313      	orrs	r3, r2
 8005018:	610b      	str	r3, [r1, #16]
 800501a:	e027      	b.n	800506c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d112      	bne.n	8005048 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005022:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800502a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6892      	ldr	r2, [r2, #8]
 8005032:	0211      	lsls	r1, r2, #8
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6912      	ldr	r2, [r2, #16]
 8005038:	0852      	lsrs	r2, r2, #1
 800503a:	3a01      	subs	r2, #1
 800503c:	0552      	lsls	r2, r2, #21
 800503e:	430a      	orrs	r2, r1
 8005040:	491f      	ldr	r1, [pc, #124]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005042:	4313      	orrs	r3, r2
 8005044:	610b      	str	r3, [r1, #16]
 8005046:	e011      	b.n	800506c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005048:	4b1d      	ldr	r3, [pc, #116]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005050:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6892      	ldr	r2, [r2, #8]
 8005058:	0211      	lsls	r1, r2, #8
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6952      	ldr	r2, [r2, #20]
 800505e:	0852      	lsrs	r2, r2, #1
 8005060:	3a01      	subs	r2, #1
 8005062:	0652      	lsls	r2, r2, #25
 8005064:	430a      	orrs	r2, r1
 8005066:	4916      	ldr	r1, [pc, #88]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005068:	4313      	orrs	r3, r2
 800506a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800506c:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a13      	ldr	r2, [pc, #76]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005072:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005076:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fc f922 	bl	80012c0 <HAL_GetTick>
 800507c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800507e:	e009      	b.n	8005094 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005080:	f7fc f91e 	bl	80012c0 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d902      	bls.n	8005094 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	73fb      	strb	r3, [r7, #15]
          break;
 8005092:	e005      	b.n	80050a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005094:	4b0a      	ldr	r3, [pc, #40]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ef      	beq.n	8005080 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050a6:	4b06      	ldr	r3, [pc, #24]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a8:	691a      	ldr	r2, [r3, #16]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	4904      	ldr	r1, [pc, #16]	@ (80050c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000

080050c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050d2:	4b6a      	ldr	r3, [pc, #424]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050de:	4b67      	ldr	r3, [pc, #412]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d10d      	bne.n	800510a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
       ||
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050f6:	4b61      	ldr	r3, [pc, #388]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
       ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d047      	beq.n	800519a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e044      	b.n	800519a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d018      	beq.n	800514a <RCCEx_PLLSAI2_Config+0x86>
 8005118:	2b03      	cmp	r3, #3
 800511a:	d825      	bhi.n	8005168 <RCCEx_PLLSAI2_Config+0xa4>
 800511c:	2b01      	cmp	r3, #1
 800511e:	d002      	beq.n	8005126 <RCCEx_PLLSAI2_Config+0x62>
 8005120:	2b02      	cmp	r3, #2
 8005122:	d009      	beq.n	8005138 <RCCEx_PLLSAI2_Config+0x74>
 8005124:	e020      	b.n	8005168 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005126:	4b55      	ldr	r3, [pc, #340]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d11d      	bne.n	800516e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005136:	e01a      	b.n	800516e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005138:	4b50      	ldr	r3, [pc, #320]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d116      	bne.n	8005172 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005148:	e013      	b.n	8005172 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800514a:	4b4c      	ldr	r3, [pc, #304]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005156:	4b49      	ldr	r3, [pc, #292]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005166:	e006      	b.n	8005176 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
      break;
 800516c:	e004      	b.n	8005178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005176:	bf00      	nop
    }

    if(status == HAL_OK)
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10d      	bne.n	800519a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800517e:	4b3f      	ldr	r3, [pc, #252]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	430b      	orrs	r3, r1
 8005194:	4939      	ldr	r1, [pc, #228]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005196:	4313      	orrs	r3, r2
 8005198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d167      	bne.n	8005270 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051a0:	4b36      	ldr	r3, [pc, #216]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a35      	ldr	r2, [pc, #212]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fc f888 	bl	80012c0 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051b2:	e009      	b.n	80051c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051b4:	f7fc f884 	bl	80012c0 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
        break;
 80051c6:	e005      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051c8:	4b2c      	ldr	r3, [pc, #176]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ef      	bne.n	80051b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d14a      	bne.n	8005270 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d111      	bne.n	8005204 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051e0:	4b26      	ldr	r3, [pc, #152]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80051e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6892      	ldr	r2, [r2, #8]
 80051f0:	0211      	lsls	r1, r2, #8
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68d2      	ldr	r2, [r2, #12]
 80051f6:	0912      	lsrs	r2, r2, #4
 80051f8:	0452      	lsls	r2, r2, #17
 80051fa:	430a      	orrs	r2, r1
 80051fc:	491f      	ldr	r1, [pc, #124]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	614b      	str	r3, [r1, #20]
 8005202:	e011      	b.n	8005228 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005204:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800520c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6892      	ldr	r2, [r2, #8]
 8005214:	0211      	lsls	r1, r2, #8
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6912      	ldr	r2, [r2, #16]
 800521a:	0852      	lsrs	r2, r2, #1
 800521c:	3a01      	subs	r2, #1
 800521e:	0652      	lsls	r2, r2, #25
 8005220:	430a      	orrs	r2, r1
 8005222:	4916      	ldr	r1, [pc, #88]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005224:	4313      	orrs	r3, r2
 8005226:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005228:	4b14      	ldr	r3, [pc, #80]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a13      	ldr	r2, [pc, #76]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005232:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fc f844 	bl	80012c0 <HAL_GetTick>
 8005238:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800523a:	e009      	b.n	8005250 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800523c:	f7fc f840 	bl	80012c0 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d902      	bls.n	8005250 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	73fb      	strb	r3, [r7, #15]
          break;
 800524e:	e005      	b.n	800525c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005250:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0ef      	beq.n	800523c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005262:	4b06      	ldr	r3, [pc, #24]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	4904      	ldr	r1, [pc, #16]	@ (800527c <RCCEx_PLLSAI2_Config+0x1b8>)
 800526c:	4313      	orrs	r3, r2
 800526e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000

08005280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e095      	b.n	80053be <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d108      	bne.n	80052ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a2:	d009      	beq.n	80052b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	61da      	str	r2, [r3, #28]
 80052aa:	e005      	b.n	80052b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fe06 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052f8:	d902      	bls.n	8005300 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e002      	b.n	8005306 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005300:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005304:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800530e:	d007      	beq.n	8005320 <HAL_SPI_Init+0xa0>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005318:	d002      	beq.n	8005320 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005362:	ea42 0103 	orr.w	r1, r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	f003 0204 	and.w	r2, r3, #4
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800539c:	ea42 0103 	orr.w	r1, r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e040      	b.n	800545a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fb fdbf 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2224      	movs	r2, #36	@ 0x24
 80053f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fae1 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f826 	bl	8005464 <UART_SetConfig>
 8005418:	4603      	mov	r3, r0
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e01b      	b.n	800545a <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005430:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005440:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fb60 	bl	8005b18 <UART_CheckIdleState>
 8005458:	4603      	mov	r3, r0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005468:	b08a      	sub	sp, #40	@ 0x28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	4313      	orrs	r3, r2
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4ba4      	ldr	r3, [pc, #656]	@ (8005724 <UART_SetConfig+0x2c0>)
 8005494:	4013      	ands	r3, r2
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	6812      	ldr	r2, [r2, #0]
 800549a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800549c:	430b      	orrs	r3, r1
 800549e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a99      	ldr	r2, [pc, #612]	@ (8005728 <UART_SetConfig+0x2c4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d004      	beq.n	80054d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054cc:	4313      	orrs	r3, r2
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	430a      	orrs	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a90      	ldr	r2, [pc, #576]	@ (800572c <UART_SetConfig+0x2c8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d126      	bne.n	800553c <UART_SetConfig+0xd8>
 80054ee:	4b90      	ldr	r3, [pc, #576]	@ (8005730 <UART_SetConfig+0x2cc>)
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d81b      	bhi.n	8005534 <UART_SetConfig+0xd0>
 80054fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <UART_SetConfig+0xa0>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005515 	.word	0x08005515
 8005508:	08005525 	.word	0x08005525
 800550c:	0800551d 	.word	0x0800551d
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551a:	e116      	b.n	800574a <UART_SetConfig+0x2e6>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e112      	b.n	800574a <UART_SetConfig+0x2e6>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552a:	e10e      	b.n	800574a <UART_SetConfig+0x2e6>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005532:	e10a      	b.n	800574a <UART_SetConfig+0x2e6>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553a:	e106      	b.n	800574a <UART_SetConfig+0x2e6>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a7c      	ldr	r2, [pc, #496]	@ (8005734 <UART_SetConfig+0x2d0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d138      	bne.n	80055b8 <UART_SetConfig+0x154>
 8005546:	4b7a      	ldr	r3, [pc, #488]	@ (8005730 <UART_SetConfig+0x2cc>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800554c:	f003 030c 	and.w	r3, r3, #12
 8005550:	2b0c      	cmp	r3, #12
 8005552:	d82d      	bhi.n	80055b0 <UART_SetConfig+0x14c>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0xf8>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005591 	.word	0x08005591
 8005560:	080055b1 	.word	0x080055b1
 8005564:	080055b1 	.word	0x080055b1
 8005568:	080055b1 	.word	0x080055b1
 800556c:	080055a1 	.word	0x080055a1
 8005570:	080055b1 	.word	0x080055b1
 8005574:	080055b1 	.word	0x080055b1
 8005578:	080055b1 	.word	0x080055b1
 800557c:	08005599 	.word	0x08005599
 8005580:	080055b1 	.word	0x080055b1
 8005584:	080055b1 	.word	0x080055b1
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055a9 	.word	0x080055a9
 8005590:	2300      	movs	r3, #0
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005596:	e0d8      	b.n	800574a <UART_SetConfig+0x2e6>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800559e:	e0d4      	b.n	800574a <UART_SetConfig+0x2e6>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055a6:	e0d0      	b.n	800574a <UART_SetConfig+0x2e6>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ae:	e0cc      	b.n	800574a <UART_SetConfig+0x2e6>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b6:	e0c8      	b.n	800574a <UART_SetConfig+0x2e6>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005738 <UART_SetConfig+0x2d4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d125      	bne.n	800560e <UART_SetConfig+0x1aa>
 80055c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005730 <UART_SetConfig+0x2cc>)
 80055c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055cc:	2b30      	cmp	r3, #48	@ 0x30
 80055ce:	d016      	beq.n	80055fe <UART_SetConfig+0x19a>
 80055d0:	2b30      	cmp	r3, #48	@ 0x30
 80055d2:	d818      	bhi.n	8005606 <UART_SetConfig+0x1a2>
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d00a      	beq.n	80055ee <UART_SetConfig+0x18a>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d814      	bhi.n	8005606 <UART_SetConfig+0x1a2>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <UART_SetConfig+0x182>
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d008      	beq.n	80055f6 <UART_SetConfig+0x192>
 80055e4:	e00f      	b.n	8005606 <UART_SetConfig+0x1a2>
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ec:	e0ad      	b.n	800574a <UART_SetConfig+0x2e6>
 80055ee:	2302      	movs	r3, #2
 80055f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f4:	e0a9      	b.n	800574a <UART_SetConfig+0x2e6>
 80055f6:	2304      	movs	r3, #4
 80055f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fc:	e0a5      	b.n	800574a <UART_SetConfig+0x2e6>
 80055fe:	2308      	movs	r3, #8
 8005600:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005604:	e0a1      	b.n	800574a <UART_SetConfig+0x2e6>
 8005606:	2310      	movs	r3, #16
 8005608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560c:	e09d      	b.n	800574a <UART_SetConfig+0x2e6>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a4a      	ldr	r2, [pc, #296]	@ (800573c <UART_SetConfig+0x2d8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d125      	bne.n	8005664 <UART_SetConfig+0x200>
 8005618:	4b45      	ldr	r3, [pc, #276]	@ (8005730 <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005622:	2bc0      	cmp	r3, #192	@ 0xc0
 8005624:	d016      	beq.n	8005654 <UART_SetConfig+0x1f0>
 8005626:	2bc0      	cmp	r3, #192	@ 0xc0
 8005628:	d818      	bhi.n	800565c <UART_SetConfig+0x1f8>
 800562a:	2b80      	cmp	r3, #128	@ 0x80
 800562c:	d00a      	beq.n	8005644 <UART_SetConfig+0x1e0>
 800562e:	2b80      	cmp	r3, #128	@ 0x80
 8005630:	d814      	bhi.n	800565c <UART_SetConfig+0x1f8>
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <UART_SetConfig+0x1d8>
 8005636:	2b40      	cmp	r3, #64	@ 0x40
 8005638:	d008      	beq.n	800564c <UART_SetConfig+0x1e8>
 800563a:	e00f      	b.n	800565c <UART_SetConfig+0x1f8>
 800563c:	2300      	movs	r3, #0
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005642:	e082      	b.n	800574a <UART_SetConfig+0x2e6>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564a:	e07e      	b.n	800574a <UART_SetConfig+0x2e6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005652:	e07a      	b.n	800574a <UART_SetConfig+0x2e6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565a:	e076      	b.n	800574a <UART_SetConfig+0x2e6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005662:	e072      	b.n	800574a <UART_SetConfig+0x2e6>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a35      	ldr	r2, [pc, #212]	@ (8005740 <UART_SetConfig+0x2dc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d12a      	bne.n	80056c4 <UART_SetConfig+0x260>
 800566e:	4b30      	ldr	r3, [pc, #192]	@ (8005730 <UART_SetConfig+0x2cc>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800567c:	d01a      	beq.n	80056b4 <UART_SetConfig+0x250>
 800567e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005682:	d81b      	bhi.n	80056bc <UART_SetConfig+0x258>
 8005684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005688:	d00c      	beq.n	80056a4 <UART_SetConfig+0x240>
 800568a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568e:	d815      	bhi.n	80056bc <UART_SetConfig+0x258>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <UART_SetConfig+0x238>
 8005694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005698:	d008      	beq.n	80056ac <UART_SetConfig+0x248>
 800569a:	e00f      	b.n	80056bc <UART_SetConfig+0x258>
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a2:	e052      	b.n	800574a <UART_SetConfig+0x2e6>
 80056a4:	2302      	movs	r3, #2
 80056a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056aa:	e04e      	b.n	800574a <UART_SetConfig+0x2e6>
 80056ac:	2304      	movs	r3, #4
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b2:	e04a      	b.n	800574a <UART_SetConfig+0x2e6>
 80056b4:	2308      	movs	r3, #8
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ba:	e046      	b.n	800574a <UART_SetConfig+0x2e6>
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c2:	e042      	b.n	800574a <UART_SetConfig+0x2e6>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <UART_SetConfig+0x2c4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d13a      	bne.n	8005744 <UART_SetConfig+0x2e0>
 80056ce:	4b18      	ldr	r3, [pc, #96]	@ (8005730 <UART_SetConfig+0x2cc>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056dc:	d01a      	beq.n	8005714 <UART_SetConfig+0x2b0>
 80056de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056e2:	d81b      	bhi.n	800571c <UART_SetConfig+0x2b8>
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e8:	d00c      	beq.n	8005704 <UART_SetConfig+0x2a0>
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ee:	d815      	bhi.n	800571c <UART_SetConfig+0x2b8>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <UART_SetConfig+0x298>
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056f8:	d008      	beq.n	800570c <UART_SetConfig+0x2a8>
 80056fa:	e00f      	b.n	800571c <UART_SetConfig+0x2b8>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005702:	e022      	b.n	800574a <UART_SetConfig+0x2e6>
 8005704:	2302      	movs	r3, #2
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570a:	e01e      	b.n	800574a <UART_SetConfig+0x2e6>
 800570c:	2304      	movs	r3, #4
 800570e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005712:	e01a      	b.n	800574a <UART_SetConfig+0x2e6>
 8005714:	2308      	movs	r3, #8
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800571a:	e016      	b.n	800574a <UART_SetConfig+0x2e6>
 800571c:	2310      	movs	r3, #16
 800571e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005722:	e012      	b.n	800574a <UART_SetConfig+0x2e6>
 8005724:	efff69f3 	.word	0xefff69f3
 8005728:	40008000 	.word	0x40008000
 800572c:	40013800 	.word	0x40013800
 8005730:	40021000 	.word	0x40021000
 8005734:	40004400 	.word	0x40004400
 8005738:	40004800 	.word	0x40004800
 800573c:	40004c00 	.word	0x40004c00
 8005740:	40005000 	.word	0x40005000
 8005744:	2310      	movs	r3, #16
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a9f      	ldr	r2, [pc, #636]	@ (80059cc <UART_SetConfig+0x568>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d17a      	bne.n	800584a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005754:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005758:	2b08      	cmp	r3, #8
 800575a:	d824      	bhi.n	80057a6 <UART_SetConfig+0x342>
 800575c:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <UART_SetConfig+0x300>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005789 	.word	0x08005789
 8005768:	080057a7 	.word	0x080057a7
 800576c:	08005791 	.word	0x08005791
 8005770:	080057a7 	.word	0x080057a7
 8005774:	08005797 	.word	0x08005797
 8005778:	080057a7 	.word	0x080057a7
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057a7 	.word	0x080057a7
 8005784:	0800579f 	.word	0x0800579f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7ff f822 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 800578c:	61f8      	str	r0, [r7, #28]
        break;
 800578e:	e010      	b.n	80057b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005790:	4b8f      	ldr	r3, [pc, #572]	@ (80059d0 <UART_SetConfig+0x56c>)
 8005792:	61fb      	str	r3, [r7, #28]
        break;
 8005794:	e00d      	b.n	80057b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005796:	f7fe ff83 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 800579a:	61f8      	str	r0, [r7, #28]
        break;
 800579c:	e009      	b.n	80057b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057a2:	61fb      	str	r3, [r7, #28]
        break;
 80057a4:	e005      	b.n	80057b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80057b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80fb 	beq.w	80059b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d305      	bcc.n	80057d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d903      	bls.n	80057de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057dc:	e0e8      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2200      	movs	r2, #0
 80057e2:	461c      	mov	r4, r3
 80057e4:	4615      	mov	r5, r2
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	022b      	lsls	r3, r5, #8
 80057f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057f4:	0222      	lsls	r2, r4, #8
 80057f6:	68f9      	ldr	r1, [r7, #12]
 80057f8:	6849      	ldr	r1, [r1, #4]
 80057fa:	0849      	lsrs	r1, r1, #1
 80057fc:	2000      	movs	r0, #0
 80057fe:	4688      	mov	r8, r1
 8005800:	4681      	mov	r9, r0
 8005802:	eb12 0a08 	adds.w	sl, r2, r8
 8005806:	eb43 0b09 	adc.w	fp, r3, r9
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005818:	4650      	mov	r0, sl
 800581a:	4659      	mov	r1, fp
 800581c:	f7fa fcd4 	bl	80001c8 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4613      	mov	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800582e:	d308      	bcc.n	8005842 <UART_SetConfig+0x3de>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005836:	d204      	bcs.n	8005842 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	e0b6      	b.n	80059b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005848:	e0b2      	b.n	80059b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005852:	d15e      	bne.n	8005912 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005854:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005858:	2b08      	cmp	r3, #8
 800585a:	d828      	bhi.n	80058ae <UART_SetConfig+0x44a>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <UART_SetConfig+0x400>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005889 	.word	0x08005889
 8005868:	08005891 	.word	0x08005891
 800586c:	08005899 	.word	0x08005899
 8005870:	080058af 	.word	0x080058af
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
 800587c:	080058af 	.word	0x080058af
 8005880:	080058af 	.word	0x080058af
 8005884:	080058a7 	.word	0x080058a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005888:	f7fe ffa2 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 800588c:	61f8      	str	r0, [r7, #28]
        break;
 800588e:	e014      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe ffb4 	bl	80047fc <HAL_RCC_GetPCLK2Freq>
 8005894:	61f8      	str	r0, [r7, #28]
        break;
 8005896:	e010      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005898:	4b4d      	ldr	r3, [pc, #308]	@ (80059d0 <UART_SetConfig+0x56c>)
 800589a:	61fb      	str	r3, [r7, #28]
        break;
 800589c:	e00d      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800589e:	f7fe feff 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 80058a2:	61f8      	str	r0, [r7, #28]
        break;
 80058a4:	e009      	b.n	80058ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058aa:	61fb      	str	r3, [r7, #28]
        break;
 80058ac:	e005      	b.n	80058ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80058b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d077      	beq.n	80059b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	005a      	lsls	r2, r3, #1
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	441a      	add	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b0f      	cmp	r3, #15
 80058da:	d916      	bls.n	800590a <UART_SetConfig+0x4a6>
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e2:	d212      	bcs.n	800590a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f023 030f 	bic.w	r3, r3, #15
 80058ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	8afb      	ldrh	r3, [r7, #22]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	8afa      	ldrh	r2, [r7, #22]
 8005906:	60da      	str	r2, [r3, #12]
 8005908:	e052      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005910:	e04e      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005912:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005916:	2b08      	cmp	r3, #8
 8005918:	d827      	bhi.n	800596a <UART_SetConfig+0x506>
 800591a:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <UART_SetConfig+0x4bc>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005945 	.word	0x08005945
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005955 	.word	0x08005955
 800592c:	0800596b 	.word	0x0800596b
 8005930:	0800595b 	.word	0x0800595b
 8005934:	0800596b 	.word	0x0800596b
 8005938:	0800596b 	.word	0x0800596b
 800593c:	0800596b 	.word	0x0800596b
 8005940:	08005963 	.word	0x08005963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe ff44 	bl	80047d0 <HAL_RCC_GetPCLK1Freq>
 8005948:	61f8      	str	r0, [r7, #28]
        break;
 800594a:	e014      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800594c:	f7fe ff56 	bl	80047fc <HAL_RCC_GetPCLK2Freq>
 8005950:	61f8      	str	r0, [r7, #28]
        break;
 8005952:	e010      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4b1e      	ldr	r3, [pc, #120]	@ (80059d0 <UART_SetConfig+0x56c>)
 8005956:	61fb      	str	r3, [r7, #28]
        break;
 8005958:	e00d      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fea1 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 800595e:	61f8      	str	r0, [r7, #28]
        break;
 8005960:	e009      	b.n	8005976 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005966:	61fb      	str	r3, [r7, #28]
        break;
 8005968:	e005      	b.n	8005976 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005974:	bf00      	nop
    }

    if (pclk != 0U)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d019      	beq.n	80059b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	085a      	lsrs	r2, r3, #1
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	fbb2 f3f3 	udiv	r3, r2, r3
 800598e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	2b0f      	cmp	r3, #15
 8005994:	d909      	bls.n	80059aa <UART_SetConfig+0x546>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800599c:	d205      	bcs.n	80059aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60da      	str	r2, [r3, #12]
 80059a8:	e002      	b.n	80059b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80059bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3728      	adds	r7, #40	@ 0x28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ca:	bf00      	nop
 80059cc:	40008000 	.word	0x40008000
 80059d0:	00f42400 	.word	0x00f42400

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad2:	d10a      	bne.n	8005aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b098      	sub	sp, #96	@ 0x60
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b28:	f7fb fbca 	bl	80012c0 <HAL_GetTick>
 8005b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d12e      	bne.n	8005b9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f88c 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e062      	b.n	8005c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d149      	bne.n	8005c3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f856 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d03c      	beq.n	8005c3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	e853 3f00 	ldrex	r3, [r3]
 8005c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0301 	bic.w	r3, r3, #1
 8005c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e5      	bne.n	8005bf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e011      	b.n	8005c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3758      	adds	r7, #88	@ 0x58
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	e04f      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d04b      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fb fb1d 	bl	80012c0 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e04e      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d037      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b80      	cmp	r3, #128	@ 0x80
 8005cae:	d034      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b40      	cmp	r3, #64	@ 0x40
 8005cb4:	d031      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d110      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f838 	bl	8005d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e029      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf4:	d111      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f81e 	bl	8005d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0a0      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b095      	sub	sp, #84	@ 0x54
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e6      	bne.n	8005d4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d118      	bne.n	8005dea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0310 	bic.w	r3, r3, #16
 8005dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	613b      	str	r3, [r7, #16]
   return(result);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e6      	bne.n	8005db8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dfe:	bf00      	nop
 8005e00:	3754      	adds	r7, #84	@ 0x54
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	f107 001c 	add.w	r0, r7, #28
 8005e18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fa25 	bl	8007278 <USB_CoreReset>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005e32:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e46:	e005      	b.n	8005e54 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e60:	b004      	add	sp, #16
 8005e62:	4770      	bx	lr

08005e64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d165      	bne.n	8005f44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f74 <USB_SetTurnaroundTime+0x110>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d906      	bls.n	8005e8e <USB_SetTurnaroundTime+0x2a>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a3d      	ldr	r2, [pc, #244]	@ (8005f78 <USB_SetTurnaroundTime+0x114>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d202      	bcs.n	8005e8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e88:	230f      	movs	r3, #15
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e05c      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a39      	ldr	r2, [pc, #228]	@ (8005f78 <USB_SetTurnaroundTime+0x114>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d306      	bcc.n	8005ea4 <USB_SetTurnaroundTime+0x40>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a38      	ldr	r2, [pc, #224]	@ (8005f7c <USB_SetTurnaroundTime+0x118>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d202      	bcs.n	8005ea4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e9e:	230e      	movs	r3, #14
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e051      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a35      	ldr	r2, [pc, #212]	@ (8005f7c <USB_SetTurnaroundTime+0x118>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d306      	bcc.n	8005eba <USB_SetTurnaroundTime+0x56>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a34      	ldr	r2, [pc, #208]	@ (8005f80 <USB_SetTurnaroundTime+0x11c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d202      	bcs.n	8005eba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005eb4:	230d      	movs	r3, #13
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e046      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a30      	ldr	r2, [pc, #192]	@ (8005f80 <USB_SetTurnaroundTime+0x11c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d306      	bcc.n	8005ed0 <USB_SetTurnaroundTime+0x6c>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8005f84 <USB_SetTurnaroundTime+0x120>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d802      	bhi.n	8005ed0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005eca:	230c      	movs	r3, #12
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e03b      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f84 <USB_SetTurnaroundTime+0x120>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d906      	bls.n	8005ee6 <USB_SetTurnaroundTime+0x82>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a2b      	ldr	r2, [pc, #172]	@ (8005f88 <USB_SetTurnaroundTime+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d802      	bhi.n	8005ee6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ee0:	230b      	movs	r3, #11
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e030      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	4a27      	ldr	r2, [pc, #156]	@ (8005f88 <USB_SetTurnaroundTime+0x124>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d906      	bls.n	8005efc <USB_SetTurnaroundTime+0x98>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	@ (8005f8c <USB_SetTurnaroundTime+0x128>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d802      	bhi.n	8005efc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ef6:	230a      	movs	r3, #10
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e025      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4a23      	ldr	r2, [pc, #140]	@ (8005f8c <USB_SetTurnaroundTime+0x128>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d906      	bls.n	8005f12 <USB_SetTurnaroundTime+0xae>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	4a22      	ldr	r2, [pc, #136]	@ (8005f90 <USB_SetTurnaroundTime+0x12c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d202      	bcs.n	8005f12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f0c:	2309      	movs	r3, #9
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	e01a      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4a1e      	ldr	r2, [pc, #120]	@ (8005f90 <USB_SetTurnaroundTime+0x12c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d306      	bcc.n	8005f28 <USB_SetTurnaroundTime+0xc4>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <USB_SetTurnaroundTime+0x130>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d802      	bhi.n	8005f28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f22:	2308      	movs	r3, #8
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e00f      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005f94 <USB_SetTurnaroundTime+0x130>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d906      	bls.n	8005f3e <USB_SetTurnaroundTime+0xda>
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <USB_SetTurnaroundTime+0x134>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d202      	bcs.n	8005f3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f38:	2307      	movs	r3, #7
 8005f3a:	617b      	str	r3, [r7, #20]
 8005f3c:	e004      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f3e:	2306      	movs	r3, #6
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e001      	b.n	8005f48 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f44:	2309      	movs	r3, #9
 8005f46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	029b      	lsls	r3, r3, #10
 8005f5c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f60:	431a      	orrs	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	00d8acbf 	.word	0x00d8acbf
 8005f78:	00e4e1c0 	.word	0x00e4e1c0
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	01067380 	.word	0x01067380
 8005f84:	011a499f 	.word	0x011a499f
 8005f88:	01312cff 	.word	0x01312cff
 8005f8c:	014ca43f 	.word	0x014ca43f
 8005f90:	016e3600 	.word	0x016e3600
 8005f94:	01a6ab1f 	.word	0x01a6ab1f
 8005f98:	01e84800 	.word	0x01e84800

08005f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d115      	bne.n	800602e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800600e:	200a      	movs	r0, #10
 8006010:	f7fb f962 	bl	80012d8 <HAL_Delay>
      ms += 10U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	330a      	adds	r3, #10
 8006018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 f8b3 	bl	8007186 <USB_GetMode>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d01e      	beq.n	8006064 <USB_SetCurrentMode+0x84>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2bc7      	cmp	r3, #199	@ 0xc7
 800602a:	d9f0      	bls.n	800600e <USB_SetCurrentMode+0x2e>
 800602c:	e01a      	b.n	8006064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d115      	bne.n	8006060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006040:	200a      	movs	r0, #10
 8006042:	f7fb f949 	bl	80012d8 <HAL_Delay>
      ms += 10U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	330a      	adds	r3, #10
 800604a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f89a 	bl	8007186 <USB_GetMode>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <USB_SetCurrentMode+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2bc7      	cmp	r3, #199	@ 0xc7
 800605c:	d9f0      	bls.n	8006040 <USB_SetCurrentMode+0x60>
 800605e:	e001      	b.n	8006064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e005      	b.n	8006070 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2bc8      	cmp	r3, #200	@ 0xc8
 8006068:	d101      	bne.n	800606e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006078:	b084      	sub	sp, #16
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e009      	b.n	80060ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3340      	adds	r3, #64	@ 0x40
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3301      	adds	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b0e      	cmp	r3, #14
 80060b0:	d9f2      	bls.n	8006098 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11c      	bne.n	80060f4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	e005      	b.n	8006100 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006106:	461a      	mov	r2, r3
 8006108:	2300      	movs	r3, #0
 800610a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800610c:	2103      	movs	r1, #3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f95a 	bl	80063c8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006114:	2110      	movs	r1, #16
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f8f6 	bl	8006308 <USB_FlushTxFifo>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f920 	bl	800636c <USB_FlushRxFifo>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613c:	461a      	mov	r2, r3
 800613e:	2300      	movs	r3, #0
 8006140:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006148:	461a      	mov	r2, r3
 800614a:	2300      	movs	r3, #0
 800614c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006154:	461a      	mov	r2, r3
 8006156:	2300      	movs	r3, #0
 8006158:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800615a:	2300      	movs	r3, #0
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	e043      	b.n	80061e8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006172:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006176:	d118      	bne.n	80061aa <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800618a:	461a      	mov	r2, r3
 800618c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	e013      	b.n	80061bc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	461a      	mov	r2, r3
 80061a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e008      	b.n	80061bc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b6:	461a      	mov	r2, r3
 80061b8:	2300      	movs	r3, #0
 80061ba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c8:	461a      	mov	r2, r3
 80061ca:	2300      	movs	r3, #0
 80061cc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061da:	461a      	mov	r2, r3
 80061dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3301      	adds	r3, #1
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061ec:	461a      	mov	r2, r3
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d3b5      	bcc.n	8006160 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	e043      	b.n	8006282 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800620c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006210:	d118      	bne.n	8006244 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10a      	bne.n	800622e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	e013      	b.n	8006256 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800623a:	461a      	mov	r2, r3
 800623c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e008      	b.n	8006256 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006262:	461a      	mov	r2, r3
 8006264:	2300      	movs	r3, #0
 8006266:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006274:	461a      	mov	r2, r3
 8006276:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800627a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	3301      	adds	r3, #1
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006286:	461a      	mov	r2, r3
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4293      	cmp	r3, r2
 800628c:	d3b5      	bcc.n	80061fa <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800629c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80062ae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f043 0210 	orr.w	r2, r3, #16
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <USB_DevInit+0x28c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f043 0208 	orr.w	r2, r3, #8
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062ec:	f043 0304 	orr.w	r3, r3, #4
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006300:	b004      	add	sp, #16
 8006302:	4770      	bx	lr
 8006304:	803c3800 	.word	0x803c3800

08006308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006322:	d901      	bls.n	8006328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e01b      	b.n	8006360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	daf2      	bge.n	8006316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	019b      	lsls	r3, r3, #6
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800634c:	d901      	bls.n	8006352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e006      	b.n	8006360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b20      	cmp	r3, #32
 800635c:	d0f0      	beq.n	8006340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006384:	d901      	bls.n	800638a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e018      	b.n	80063bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	daf2      	bge.n	8006378 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2210      	movs	r2, #16
 800639a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063a8:	d901      	bls.n	80063ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e006      	b.n	80063bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0310 	and.w	r3, r3, #16
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d0f0      	beq.n	800639c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063e8:	4313      	orrs	r3, r2
 80063ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0306 	and.w	r3, r3, #6
 8006412:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d002      	beq.n	8006420 <USB_GetDevSpeed+0x26>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b06      	cmp	r3, #6
 800641e:	d102      	bne.n	8006426 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006420:	2302      	movs	r3, #2
 8006422:	75fb      	strb	r3, [r7, #23]
 8006424:	e001      	b.n	800642a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006426:	230f      	movs	r3, #15
 8006428:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
}
 800642c:	4618      	mov	r0, r3
 800642e:	371c      	adds	r7, #28
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	785b      	ldrb	r3, [r3, #1]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d13a      	bne.n	80064ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	b29b      	uxth	r3, r3
 800646c:	68f9      	ldr	r1, [r7, #12]
 800646e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006472:	4313      	orrs	r3, r2
 8006474:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d155      	bne.n	8006538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	791b      	ldrb	r3, [r3, #4]
 80064a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	059b      	lsls	r3, r3, #22
 80064ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064b0:	4313      	orrs	r3, r2
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	0151      	lsls	r1, r2, #5
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	440a      	add	r2, r1
 80064ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	e036      	b.n	8006538 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d0:	69da      	ldr	r2, [r3, #28]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	2101      	movs	r1, #1
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e8:	4313      	orrs	r3, r2
 80064ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d11a      	bne.n	8006538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	791b      	ldrb	r3, [r3, #4]
 800651c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800651e:	430b      	orrs	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	0151      	lsls	r1, r2, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	440a      	add	r2, r1
 800652a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800652e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006536:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d161      	bne.n	8006628 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800657a:	d11f      	bne.n	80065bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	0151      	lsls	r1, r2, #5
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	440a      	add	r2, r1
 8006592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006596:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800659a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	0151      	lsls	r1, r2, #5
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	440a      	add	r2, r1
 80065b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065dc:	4013      	ands	r3, r2
 80065de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	2101      	movs	r1, #1
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	43db      	mvns	r3, r3
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006600:	4013      	ands	r3, r2
 8006602:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	0159      	lsls	r1, r3, #5
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	440b      	add	r3, r1
 800661a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661e:	4619      	mov	r1, r3
 8006620:	4b35      	ldr	r3, [pc, #212]	@ (80066f8 <USB_DeactivateEndpoint+0x1b0>)
 8006622:	4013      	ands	r3, r2
 8006624:	600b      	str	r3, [r1, #0]
 8006626:	e060      	b.n	80066ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800663a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663e:	d11f      	bne.n	8006680 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800665a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800665e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800667a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800667e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	2101      	movs	r1, #1
 8006692:	fa01 f303 	lsl.w	r3, r1, r3
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	43db      	mvns	r3, r3
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066a0:	4013      	ands	r3, r2
 80066a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	2101      	movs	r1, #1
 80066b6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	43db      	mvns	r3, r3
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066c4:	4013      	ands	r3, r2
 80066c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	0159      	lsls	r1, r3, #5
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	440b      	add	r3, r1
 80066de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e2:	4619      	mov	r1, r3
 80066e4:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <USB_DeactivateEndpoint+0x1b4>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	ec337800 	.word	0xec337800
 80066fc:	eff37800 	.word	0xeff37800

08006700 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 812d 	bne.w	8006978 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d132      	bne.n	800678c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006740:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006744:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006784:	0cdb      	lsrs	r3, r3, #19
 8006786:	04db      	lsls	r3, r3, #19
 8006788:	6113      	str	r3, [r2, #16]
 800678a:	e097      	b.n	80068bc <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a6:	0cdb      	lsrs	r3, r3, #19
 80067a8:	04db      	lsls	r3, r3, #19
 80067aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d11a      	bne.n	800680c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d903      	bls.n	80067ea <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006808:	6113      	str	r3, [r2, #16]
 800680a:	e044      	b.n	8006896 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	4413      	add	r3, r2
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	04d9      	lsls	r1, r3, #19
 8006834:	4b8f      	ldr	r3, [pc, #572]	@ (8006a74 <USB_EPStartXfer+0x374>)
 8006836:	400b      	ands	r3, r1
 8006838:	6939      	ldr	r1, [r7, #16]
 800683a:	0148      	lsls	r0, r1, #5
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	4401      	add	r1, r0
 8006840:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006844:	4313      	orrs	r3, r2
 8006846:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d122      	bne.n	8006896 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800686a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800686e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	89fb      	ldrh	r3, [r7, #14]
 8006880:	075b      	lsls	r3, r3, #29
 8006882:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006886:	6939      	ldr	r1, [r7, #16]
 8006888:	0148      	lsls	r0, r1, #5
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	4401      	add	r1, r0
 800688e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006892:	4313      	orrs	r3, r2
 8006894:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ac:	6939      	ldr	r1, [r7, #16]
 80068ae:	0148      	lsls	r0, r1, #5
 80068b0:	6979      	ldr	r1, [r7, #20]
 80068b2:	4401      	add	r1, r0
 80068b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068b8:	4313      	orrs	r3, r2
 80068ba:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80068da:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	791b      	ldrb	r3, [r3, #4]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d015      	beq.n	8006910 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 813a 	beq.w	8006b62 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	2101      	movs	r1, #1
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800690a:	4313      	orrs	r3, r2
 800690c:	634b      	str	r3, [r1, #52]	@ 0x34
 800690e:	e128      	b.n	8006b62 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d110      	bne.n	8006942 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	440a      	add	r2, r1
 8006936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e00f      	b.n	8006962 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006960:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68d9      	ldr	r1, [r3, #12]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	b29b      	uxth	r3, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f9a7 	bl	8006cc4 <USB_WritePacket>
 8006976:	e0f4      	b.n	8006b62 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	440a      	add	r2, r1
 800698e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006992:	0cdb      	lsrs	r3, r3, #19
 8006994:	04db      	lsls	r3, r3, #19
 8006996:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80069b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80069ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d12f      	bne.n	8006a22 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f0:	6939      	ldr	r1, [r7, #16]
 80069f2:	0148      	lsls	r0, r1, #5
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	4401      	add	r1, r0
 80069f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069fc:	4313      	orrs	r3, r2
 80069fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	0151      	lsls	r1, r2, #5
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	440a      	add	r2, r1
 8006a16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a1e:	6113      	str	r3, [r2, #16]
 8006a20:	e062      	b.n	8006ae8 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d126      	bne.n	8006a78 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a40:	6939      	ldr	r1, [r7, #16]
 8006a42:	0148      	lsls	r0, r1, #5
 8006a44:	6979      	ldr	r1, [r7, #20]
 8006a46:	4401      	add	r1, r0
 8006a48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a6e:	6113      	str	r3, [r2, #16]
 8006a70:	e03a      	b.n	8006ae8 <USB_EPStartXfer+0x3e8>
 8006a72:	bf00      	nop
 8006a74:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	4413      	add	r3, r2
 8006a82:	1e5a      	subs	r2, r3, #1
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	89fa      	ldrh	r2, [r7, #14]
 8006a94:	fb03 f202 	mul.w	r2, r3, r2
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	04d9      	lsls	r1, r3, #19
 8006aae:	4b2f      	ldr	r3, [pc, #188]	@ (8006b6c <USB_EPStartXfer+0x46c>)
 8006ab0:	400b      	ands	r3, r1
 8006ab2:	6939      	ldr	r1, [r7, #16]
 8006ab4:	0148      	lsls	r0, r1, #5
 8006ab6:	6979      	ldr	r1, [r7, #20]
 8006ab8:	4401      	add	r1, r0
 8006aba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ad8:	6939      	ldr	r1, [r7, #16]
 8006ada:	0148      	lsls	r0, r1, #5
 8006adc:	6979      	ldr	r1, [r7, #20]
 8006ade:	4401      	add	r1, r0
 8006ae0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	791b      	ldrb	r3, [r3, #4]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d128      	bne.n	8006b42 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d110      	bne.n	8006b22 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	e00f      	b.n	8006b42 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b40:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006b60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	1ff80000 	.word	0x1ff80000

08006b70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d14a      	bne.n	8006c24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ba6:	f040 8086 	bne.w	8006cb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	7812      	ldrb	r2, [r2, #0]
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bc8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	7812      	ldrb	r2, [r2, #0]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d902      	bls.n	8006c08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
          break;
 8006c06:	e056      	b.n	8006cb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c20:	d0e7      	beq.n	8006bf2 <USB_EPStopXfer+0x82>
 8006c22:	e048      	b.n	8006cb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c3c:	d13b      	bne.n	8006cb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	7812      	ldrb	r2, [r2, #0]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	0151      	lsls	r1, r2, #5
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	440a      	add	r2, r1
 8006c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d902      	bls.n	8006c9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
          break;
 8006c9a:	e00c      	b.n	8006cb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb4:	d0e7      	beq.n	8006c86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	@ 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4611      	mov	r1, r2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	71fb      	strb	r3, [r7, #7]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006ce2:	88bb      	ldrh	r3, [r7, #4]
 8006ce4:	3303      	adds	r3, #3
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
 8006cee:	e018      	b.n	8006d22 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	031a      	lsls	r2, r3, #12
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	3301      	adds	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d3e2      	bcc.n	8006cf0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3724      	adds	r7, #36	@ 0x24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b08b      	sub	sp, #44	@ 0x2c
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d5e:	2300      	movs	r3, #0
 8006d60:	623b      	str	r3, [r7, #32]
 8006d62:	e014      	b.n	8006d8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d72:	3301      	adds	r3, #1
 8006d74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d78:	3301      	adds	r3, #1
 8006d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	3301      	adds	r3, #1
 8006d80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d84:	3301      	adds	r3, #1
 8006d86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	623b      	str	r3, [r7, #32]
 8006d8e:	6a3a      	ldr	r2, [r7, #32]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d3e6      	bcc.n	8006d64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d96:	8bfb      	ldrh	r3, [r7, #30]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01e      	beq.n	8006dda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006da6:	461a      	mov	r2, r3
 8006da8:	f107 0310 	add.w	r3, r7, #16
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	701a      	strb	r2, [r3, #0]
      i++;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	3301      	adds	r3, #1
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006dce:	8bfb      	ldrh	r3, [r7, #30]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006dd4:	8bfb      	ldrh	r3, [r7, #30]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1ea      	bne.n	8006db0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	372c      	adds	r7, #44	@ 0x2c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d12c      	bne.n	8006e5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	db12      	blt.n	8006e3c <USB_EPSetStall+0x54>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00f      	beq.n	8006e3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	e02b      	b.n	8006eb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	db12      	blt.n	8006e96 <USB_EPSetStall+0xae>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00f      	beq.n	8006e96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006eb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d128      	bne.n	8006f32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	0151      	lsls	r1, r2, #5
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	440a      	add	r2, r1
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006efa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006efe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	791b      	ldrb	r3, [r3, #4]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d003      	beq.n	8006f10 <USB_EPClearStall+0x4c>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d138      	bne.n	8006f82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	0151      	lsls	r1, r2, #5
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	440a      	add	r2, r1
 8006f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e027      	b.n	8006f82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	0151      	lsls	r1, r2, #5
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	440a      	add	r2, r1
 8006f48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	791b      	ldrb	r3, [r3, #4]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d003      	beq.n	8006f62 <USB_EPClearStall+0x9e>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	791b      	ldrb	r3, [r3, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d10f      	bne.n	8006f82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	0151      	lsls	r1, r2, #5
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	440a      	add	r2, r1
 8006f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006fb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800700a:	f023 0302 	bic.w	r3, r3, #2
 800700e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007038:	f023 0303 	bic.w	r3, r3, #3
 800703c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800704c:	f043 0302 	orr.w	r3, r3, #2
 8007050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4013      	ands	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	4013      	ands	r3, r2
 80070a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	0c1b      	lsrs	r3, r3, #16
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	b29b      	uxth	r3, r3
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	460b      	mov	r3, r1
 80070f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070fe:	78fb      	ldrb	r3, [r7, #3]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4013      	ands	r3, r2
 800711a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800711c:	68bb      	ldr	r3, [r7, #8]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800712a:	b480      	push	{r7}
 800712c:	b087      	sub	sp, #28
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	f003 030f 	and.w	r3, r3, #15
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	01db      	lsls	r3, r3, #7
 800715c:	b2db      	uxtb	r3, r3
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4013      	ands	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007178:	68bb      	ldr	r3, [r7, #8]
}
 800717a:	4618      	mov	r0, r3
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	f003 0301 	and.w	r3, r3, #1
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80071c0:	f023 0307 	bic.w	r3, r3, #7
 80071c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	333c      	adds	r3, #60	@ 0x3c
 80071fa:	3304      	adds	r3, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	4a1c      	ldr	r2, [pc, #112]	@ (8007274 <USB_EP0_OutStart+0x8c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d90a      	bls.n	800721e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007218:	d101      	bne.n	800721e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	e024      	b.n	8007268 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007224:	461a      	mov	r2, r3
 8007226:	2300      	movs	r3, #0
 8007228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800723c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800724c:	f043 0318 	orr.w	r3, r3, #24
 8007250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007260:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007264:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	4f54300a 	.word	0x4f54300a

08007278 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007290:	d901      	bls.n	8007296 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e01b      	b.n	80072ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	daf2      	bge.n	8007284 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f043 0201 	orr.w	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072ba:	d901      	bls.n	80072c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e006      	b.n	80072ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d0f0      	beq.n	80072ae <USB_CoreReset+0x36>

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80072e8:	2018      	movs	r0, #24
 80072ea:	f002 fc9f 	bl	8009c2c <USBD_static_malloc>
 80072ee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	32b0      	adds	r2, #176	@ 0xb0
 8007300:	2100      	movs	r1, #0
 8007302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007306:	2302      	movs	r3, #2
 8007308:	e08a      	b.n	8007420 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	32b0      	adds	r2, #176	@ 0xb0
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32b0      	adds	r2, #176	@ 0xb0
 8007324:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	7c1b      	ldrb	r3, [r3, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d11b      	bne.n	800736e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007336:	4b3c      	ldr	r3, [pc, #240]	@ (8007428 <USBD_CUSTOM_HID_Init+0x14c>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	f003 020f 	and.w	r2, r3, #15
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	3326      	adds	r3, #38	@ 0x26
 800734c:	2205      	movs	r2, #5
 800734e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007350:	4b36      	ldr	r3, [pc, #216]	@ (800742c <USBD_CUSTOM_HID_Init+0x150>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	f003 020f 	and.w	r2, r3, #15
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	440b      	add	r3, r1
 8007364:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007368:	2205      	movs	r2, #5
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	e01a      	b.n	80073a4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800736e:	4b2e      	ldr	r3, [pc, #184]	@ (8007428 <USBD_CUSTOM_HID_Init+0x14c>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	3326      	adds	r3, #38	@ 0x26
 8007384:	2205      	movs	r2, #5
 8007386:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007388:	4b28      	ldr	r3, [pc, #160]	@ (800742c <USBD_CUSTOM_HID_Init+0x150>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	4613      	mov	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	440b      	add	r3, r1
 800739c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80073a0:	2205      	movs	r2, #5
 80073a2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80073a4:	4b20      	ldr	r3, [pc, #128]	@ (8007428 <USBD_CUSTOM_HID_Init+0x14c>)
 80073a6:	7819      	ldrb	r1, [r3, #0]
 80073a8:	2302      	movs	r3, #2
 80073aa:	2203      	movs	r2, #3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f002 fa3d 	bl	800982c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80073b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007428 <USBD_CUSTOM_HID_Init+0x14c>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	3324      	adds	r3, #36	@ 0x24
 80073c8:	2201      	movs	r2, #1
 80073ca:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80073cc:	4b17      	ldr	r3, [pc, #92]	@ (800742c <USBD_CUSTOM_HID_Init+0x150>)
 80073ce:	7819      	ldrb	r1, [r3, #0]
 80073d0:	2302      	movs	r3, #2
 80073d2:	2203      	movs	r2, #3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f002 fa29 	bl	800982c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80073da:	4b14      	ldr	r3, [pc, #80]	@ (800742c <USBD_CUSTOM_HID_Init+0x150>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 020f 	and.w	r2, r3, #15
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073f2:	2201      	movs	r2, #1
 80073f4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	33b0      	adds	r3, #176	@ 0xb0
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007410:	4b06      	ldr	r3, [pc, #24]	@ (800742c <USBD_CUSTOM_HID_Init+0x150>)
 8007412:	7819      	ldrb	r1, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	2304      	movs	r3, #4
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f002 fb81 	bl	8009b20 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000086 	.word	0x20000086
 800742c:	20000087 	.word	0x20000087

08007430 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800743c:	4b37      	ldr	r3, [pc, #220]	@ (800751c <USBD_CUSTOM_HID_DeInit+0xec>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 fa30 	bl	80098a8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007448:	4b34      	ldr	r3, [pc, #208]	@ (800751c <USBD_CUSTOM_HID_DeInit+0xec>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f003 020f 	and.w	r2, r3, #15
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	3324      	adds	r3, #36	@ 0x24
 800745e:	2200      	movs	r2, #0
 8007460:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007462:	4b2e      	ldr	r3, [pc, #184]	@ (800751c <USBD_CUSTOM_HID_DeInit+0xec>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	f003 020f 	and.w	r2, r3, #15
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	3326      	adds	r3, #38	@ 0x26
 8007478:	2200      	movs	r2, #0
 800747a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800747c:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f002 fa10 	bl	80098a8 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007488:	4b25      	ldr	r3, [pc, #148]	@ (8007520 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	f003 020f 	and.w	r2, r3, #15
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074a0:	2200      	movs	r2, #0
 80074a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80074a4:	4b1e      	ldr	r3, [pc, #120]	@ (8007520 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f003 020f 	and.w	r2, r3, #15
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80074bc:	2200      	movs	r2, #0
 80074be:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32b0      	adds	r2, #176	@ 0xb0
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01f      	beq.n	8007512 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	33b0      	adds	r3, #176	@ 0xb0
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	32b0      	adds	r2, #176	@ 0xb0
 80074f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 fba7 	bl	8009c48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	32b0      	adds	r2, #176	@ 0xb0
 8007504:	2100      	movs	r1, #0
 8007506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000086 	.word	0x20000086
 8007520:	20000087 	.word	0x20000087

08007524 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	32b0      	adds	r2, #176	@ 0xb0
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8007554:	2303      	movs	r3, #3
 8007556:	e102      	b.n	800775e <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007560:	2b00      	cmp	r3, #0
 8007562:	d056      	beq.n	8007612 <USBD_CUSTOM_HID_Setup+0xee>
 8007564:	2b20      	cmp	r3, #32
 8007566:	f040 80f2 	bne.w	800774e <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	3b02      	subs	r3, #2
 8007570:	2b09      	cmp	r3, #9
 8007572:	d846      	bhi.n	8007602 <USBD_CUSTOM_HID_Setup+0xde>
 8007574:	a201      	add	r2, pc, #4	@ (adr r2, 800757c <USBD_CUSTOM_HID_Setup+0x58>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	080075d5 	.word	0x080075d5
 8007580:	080075b3 	.word	0x080075b3
 8007584:	08007603 	.word	0x08007603
 8007588:	08007603 	.word	0x08007603
 800758c:	08007603 	.word	0x08007603
 8007590:	08007603 	.word	0x08007603
 8007594:	08007603 	.word	0x08007603
 8007598:	080075e5 	.word	0x080075e5
 800759c:	080075c3 	.word	0x080075c3
 80075a0:	080075a5 	.word	0x080075a5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	885b      	ldrh	r3, [r3, #2]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	461a      	mov	r2, r3
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	605a      	str	r2, [r3, #4]
          break;
 80075b0:	e02e      	b.n	8007610 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	3304      	adds	r3, #4
 80075b6:	2201      	movs	r2, #1
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 fd0a 	bl	8008fd4 <USBD_CtlSendData>
          break;
 80075c0:	e026      	b.n	8007610 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	885b      	ldrh	r3, [r3, #2]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	609a      	str	r2, [r3, #8]
          break;
 80075d2:	e01d      	b.n	8007610 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3308      	adds	r3, #8
 80075d8:	2201      	movs	r2, #1
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fcf9 	bl	8008fd4 <USBD_CtlSendData>
          break;
 80075e2:	e015      	b.n	8007610 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2201      	movs	r2, #1
 80075e8:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80075ea:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	88db      	ldrh	r3, [r3, #6]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	bf28      	it	cs
 80075f4:	2304      	movcs	r3, #4
 80075f6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80075f8:	461a      	mov	r2, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 fd16 	bl	800902c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8007600:	e006      	b.n	8007610 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 fc68 	bl	8008eda <USBD_CtlError>
          ret = USBD_FAIL;
 800760a:	2303      	movs	r3, #3
 800760c:	75fb      	strb	r3, [r7, #23]
          break;
 800760e:	bf00      	nop
      }
      break;
 8007610:	e0a4      	b.n	800775c <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b0b      	cmp	r3, #11
 8007618:	f200 8090 	bhi.w	800773c <USBD_CUSTOM_HID_Setup+0x218>
 800761c:	a201      	add	r2, pc, #4	@ (adr r2, 8007624 <USBD_CUSTOM_HID_Setup+0x100>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007655 	.word	0x08007655
 8007628:	0800774b 	.word	0x0800774b
 800762c:	0800773d 	.word	0x0800773d
 8007630:	0800773d 	.word	0x0800773d
 8007634:	0800773d 	.word	0x0800773d
 8007638:	0800773d 	.word	0x0800773d
 800763c:	0800767f 	.word	0x0800767f
 8007640:	0800773d 	.word	0x0800773d
 8007644:	0800773d 	.word	0x0800773d
 8007648:	0800773d 	.word	0x0800773d
 800764c:	080076eb 	.word	0x080076eb
 8007650:	08007715 	.word	0x08007715
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b03      	cmp	r3, #3
 800765e:	d107      	bne.n	8007670 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007660:	f107 030e 	add.w	r3, r7, #14
 8007664:	2202      	movs	r2, #2
 8007666:	4619      	mov	r1, r3
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fcb3 	bl	8008fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800766e:	e06d      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 fc31 	bl	8008eda <USBD_CtlError>
            ret = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	75fb      	strb	r3, [r7, #23]
          break;
 800767c:	e066      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	885b      	ldrh	r3, [r3, #2]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b22      	cmp	r3, #34	@ 0x22
 8007688:	d110      	bne.n	80076ac <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	88db      	ldrh	r3, [r3, #6]
 800768e:	2b32      	cmp	r3, #50	@ 0x32
 8007690:	bf28      	it	cs
 8007692:	2332      	movcs	r3, #50	@ 0x32
 8007694:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	33b0      	adds	r3, #176	@ 0xb0
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	61bb      	str	r3, [r7, #24]
 80076aa:	e00d      	b.n	80076c8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	885b      	ldrh	r3, [r3, #2]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b21      	cmp	r3, #33	@ 0x21
 80076b6:	d107      	bne.n	80076c8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80076b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007768 <USBD_CUSTOM_HID_Setup+0x244>)
 80076ba:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	bf28      	it	cs
 80076c4:	2309      	movcs	r3, #9
 80076c6:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d006      	beq.n	80076dc <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 80076ce:	8bfb      	ldrh	r3, [r7, #30]
 80076d0:	461a      	mov	r2, r3
 80076d2:	69b9      	ldr	r1, [r7, #24]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fc7d 	bl	8008fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076da:	e037      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fbfb 	bl	8008eda <USBD_CtlError>
            ret = USBD_FAIL;
 80076e4:	2303      	movs	r3, #3
 80076e6:	75fb      	strb	r3, [r7, #23]
          break;
 80076e8:	e030      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d107      	bne.n	8007706 <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	330c      	adds	r3, #12
 80076fa:	2201      	movs	r2, #1
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 fc68 	bl	8008fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007704:	e022      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fbe6 	bl	8008eda <USBD_CtlError>
            ret = USBD_FAIL;
 800770e:	2303      	movs	r3, #3
 8007710:	75fb      	strb	r3, [r7, #23]
          break;
 8007712:	e01b      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800771a:	b2db      	uxtb	r3, r3
 800771c:	2b03      	cmp	r3, #3
 800771e:	d106      	bne.n	800772e <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800772c:	e00e      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 fbd2 	bl	8008eda <USBD_CtlError>
            ret = USBD_FAIL;
 8007736:	2303      	movs	r3, #3
 8007738:	75fb      	strb	r3, [r7, #23]
          break;
 800773a:	e007      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fbcb 	bl	8008eda <USBD_CtlError>
          ret = USBD_FAIL;
 8007744:	2303      	movs	r3, #3
 8007746:	75fb      	strb	r3, [r7, #23]
          break;
 8007748:	e000      	b.n	800774c <USBD_CUSTOM_HID_Setup+0x228>
          break;
 800774a:	bf00      	nop
      }
      break;
 800774c:	e006      	b.n	800775c <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fbc2 	bl	8008eda <USBD_CtlError>
      ret = USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	75fb      	strb	r3, [r7, #23]
      break;
 800775a:	bf00      	nop
  }
  return (uint8_t)ret;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000070 	.word	0x20000070

0800776c <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	32b0      	adds	r2, #176	@ 0xb0
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	e017      	b.n	80077c4 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b03      	cmp	r3, #3
 800779e:	d110      	bne.n	80077c2 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	7d1b      	ldrb	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10a      	bne.n	80077be <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	2201      	movs	r2, #1
 80077ac:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80077ae:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <USBD_CUSTOM_HID_SendReport+0x60>)
 80077b0:	7819      	ldrb	r1, [r3, #0]
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f002 f97a 	bl	8009ab0 <USBD_LL_Transmit>
 80077bc:	e001      	b.n	80077c2 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000086 	.word	0x20000086

080077d0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80077d8:	2181      	movs	r1, #129	@ 0x81
 80077da:	4815      	ldr	r0, [pc, #84]	@ (8007830 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80077dc:	f000 fd1d 	bl	800821a <USBD_GetEpDesc>
 80077e0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80077e2:	2101      	movs	r1, #1
 80077e4:	4812      	ldr	r0, [pc, #72]	@ (8007830 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80077e6:	f000 fd18 	bl	800821a <USBD_GetEpDesc>
 80077ea:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f042 0202 	orr.w	r2, r2, #2
 80077fa:	711a      	strb	r2, [r3, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2205      	movs	r2, #5
 8007804:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	f042 0202 	orr.w	r2, r2, #2
 8007814:	711a      	strb	r2, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2205      	movs	r2, #5
 800781e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2229      	movs	r2, #41	@ 0x29
 8007824:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8007826:	4b02      	ldr	r3, [pc, #8]	@ (8007830 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000044 	.word	0x20000044

08007834 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800783c:	2181      	movs	r1, #129	@ 0x81
 800783e:	4815      	ldr	r0, [pc, #84]	@ (8007894 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8007840:	f000 fceb 	bl	800821a <USBD_GetEpDesc>
 8007844:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8007846:	2101      	movs	r1, #1
 8007848:	4812      	ldr	r0, [pc, #72]	@ (8007894 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800784a:	f000 fce6 	bl	800821a <USBD_GetEpDesc>
 800784e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f042 0202 	orr.w	r2, r2, #2
 800785e:	711a      	strb	r2, [r3, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2205      	movs	r2, #5
 8007868:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	f042 0202 	orr.w	r2, r2, #2
 8007878:	711a      	strb	r2, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2205      	movs	r2, #5
 8007882:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2229      	movs	r2, #41	@ 0x29
 8007888:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800788a:	4b02      	ldr	r3, [pc, #8]	@ (8007894 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	20000044 	.word	0x20000044

08007898 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80078a0:	2181      	movs	r1, #129	@ 0x81
 80078a2:	4815      	ldr	r0, [pc, #84]	@ (80078f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80078a4:	f000 fcb9 	bl	800821a <USBD_GetEpDesc>
 80078a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80078aa:	2101      	movs	r1, #1
 80078ac:	4812      	ldr	r0, [pc, #72]	@ (80078f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80078ae:	f000 fcb4 	bl	800821a <USBD_GetEpDesc>
 80078b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f042 0202 	orr.w	r2, r2, #2
 80078c2:	711a      	strb	r2, [r3, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2205      	movs	r2, #5
 80078cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f042 0202 	orr.w	r2, r2, #2
 80078dc:	711a      	strb	r2, [r3, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2205      	movs	r2, #5
 80078e6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2229      	movs	r2, #41	@ 0x29
 80078ec:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80078ee:	4b02      	ldr	r3, [pc, #8]	@ (80078f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000044 	.word	0x20000044

080078fc <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	32b0      	adds	r2, #176	@ 0xb0
 8007912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007916:	2200      	movs	r2, #0
 8007918:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	460b      	mov	r3, r1
 8007932:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32b0      	adds	r2, #176	@ 0xb0
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007946:	2303      	movs	r3, #3
 8007948:	e017      	b.n	800797a <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	32b0      	adds	r2, #176	@ 0xb0
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	33b0      	adds	r3, #176	@ 0xb0
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	7810      	ldrb	r0, [r2, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	7852      	ldrb	r2, [r2, #1]
 8007974:	4611      	mov	r1, r2
 8007976:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	32b0      	adds	r2, #176	@ 0xb0
 8007996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800799e:	2303      	movs	r3, #3
 80079a0:	e00f      	b.n	80079c2 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	32b0      	adds	r2, #176	@ 0xb0
 80079ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b0:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80079b2:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80079b4:	7819      	ldrb	r1, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	2304      	movs	r3, #4
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f002 f8b0 	bl	8009b20 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000087 	.word	0x20000087

080079d0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	32b0      	adds	r2, #176	@ 0xb0
 80079e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e016      	b.n	8007a20 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d111      	bne.n	8007a1e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	33b0      	adds	r3, #176	@ 0xb0
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	7810      	ldrb	r0, [r2, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	7852      	ldrb	r2, [r2, #1]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	220a      	movs	r2, #10
 8007a34:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007a36:	4b03      	ldr	r3, [pc, #12]	@ (8007a44 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	2000007c 	.word	0x2000007c

08007a48 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e009      	b.n	8007a70 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	33b0      	adds	r3, #176	@ 0xb0
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e01f      	b.n	8007ad4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	79fa      	ldrb	r2, [r7, #7]
 8007ac6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f001 fe31 	bl	8009730 <USBD_LL_Init>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e025      	b.n	8007b40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	32ae      	adds	r2, #174	@ 0xae
 8007b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00f      	beq.n	8007b30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32ae      	adds	r2, #174	@ 0xae
 8007b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b20:	f107 020e 	add.w	r2, r7, #14
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	4602      	mov	r2, r0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b36:	1c5a      	adds	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fe39 	bl	80097c8 <USBD_LL_Start>
 8007b56:	4603      	mov	r3, r0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	78fa      	ldrb	r2, [r7, #3]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f001 f936 	bl	8008e66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c08:	461a      	mov	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d01a      	beq.n	8007c54 <USBD_LL_SetupStage+0x72>
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d822      	bhi.n	8007c68 <USBD_LL_SetupStage+0x86>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <USBD_LL_SetupStage+0x4a>
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d00a      	beq.n	8007c40 <USBD_LL_SetupStage+0x5e>
 8007c2a:	e01d      	b.n	8007c68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb63 	bl	8008300 <USBD_StdDevReq>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c3e:	e020      	b.n	8007c82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fbcb 	bl	80083e4 <USBD_StdItfReq>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]
      break;
 8007c52:	e016      	b.n	8007c82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fc2d 	bl	80084bc <USBD_StdEPReq>
 8007c62:	4603      	mov	r3, r0
 8007c64:	73fb      	strb	r3, [r7, #15]
      break;
 8007c66:	e00c      	b.n	8007c82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fe4c 	bl	8009914 <USBD_LL_StallEP>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c80:	bf00      	nop
  }

  return ret;
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	460b      	mov	r3, r1
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c9e:	7afb      	ldrb	r3, [r7, #11]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d16e      	bne.n	8007d82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007caa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	f040 8098 	bne.w	8007de8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d913      	bls.n	8007cec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	1ad2      	subs	r2, r2, r3
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	bf28      	it	cs
 8007cde:	4613      	movcs	r3, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f001 f9be 	bl	8009066 <USBD_CtlContinueRx>
 8007cea:	e07d      	b.n	8007de8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cf2:	f003 031f 	and.w	r3, r3, #31
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d014      	beq.n	8007d24 <USBD_LL_DataOutStage+0x98>
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d81d      	bhi.n	8007d3a <USBD_LL_DataOutStage+0xae>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <USBD_LL_DataOutStage+0x7c>
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d003      	beq.n	8007d0e <USBD_LL_DataOutStage+0x82>
 8007d06:	e018      	b.n	8007d3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d0c:	e018      	b.n	8007d40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fa64 	bl	80081e6 <USBD_CoreFindIF>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75bb      	strb	r3, [r7, #22]
            break;
 8007d22:	e00d      	b.n	8007d40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 fa66 	bl	8008200 <USBD_CoreFindEP>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75bb      	strb	r3, [r7, #22]
            break;
 8007d38:	e002      	b.n	8007d40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d40:	7dbb      	ldrb	r3, [r7, #22]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d119      	bne.n	8007d7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d113      	bne.n	8007d7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d52:	7dba      	ldrb	r2, [r7, #22]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	32ae      	adds	r2, #174	@ 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00b      	beq.n	8007d7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d62:	7dba      	ldrb	r2, [r7, #22]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d6a:	7dba      	ldrb	r2, [r7, #22]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	32ae      	adds	r2, #174	@ 0xae
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f001 f984 	bl	8009088 <USBD_CtlSendStatus>
 8007d80:	e032      	b.n	8007de8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 fa37 	bl	8008200 <USBD_CoreFindEP>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d96:	7dbb      	ldrb	r3, [r7, #22]
 8007d98:	2bff      	cmp	r3, #255	@ 0xff
 8007d9a:	d025      	beq.n	8007de8 <USBD_LL_DataOutStage+0x15c>
 8007d9c:	7dbb      	ldrb	r3, [r7, #22]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d122      	bne.n	8007de8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d117      	bne.n	8007dde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007dae:	7dba      	ldrb	r2, [r7, #22]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	32ae      	adds	r2, #174	@ 0xae
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00f      	beq.n	8007dde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007dbe:	7dba      	ldrb	r2, [r7, #22]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007dc6:	7dba      	ldrb	r2, [r7, #22]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	32ae      	adds	r2, #174	@ 0xae
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	7afa      	ldrb	r2, [r7, #11]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	e000      	b.n	8007dea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	607a      	str	r2, [r7, #4]
 8007dfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e00:	7afb      	ldrb	r3, [r7, #11]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d16f      	bne.n	8007ee6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d15a      	bne.n	8007ecc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d914      	bls.n	8007e4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	461a      	mov	r2, r3
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 f8e6 	bl	800900a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2200      	movs	r2, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f001 fe6b 	bl	8009b20 <USBD_LL_PrepareReceive>
 8007e4a:	e03f      	b.n	8007ecc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	68da      	ldr	r2, [r3, #12]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d11c      	bne.n	8007e92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d316      	bcc.n	8007e92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d20f      	bcs.n	8007e92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f001 f8c7 	bl	800900a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e84:	2300      	movs	r3, #0
 8007e86:	2200      	movs	r2, #0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f001 fe48 	bl	8009b20 <USBD_LL_PrepareReceive>
 8007e90:	e01c      	b.n	8007ecc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d10f      	bne.n	8007ebe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ebe:	2180      	movs	r1, #128	@ 0x80
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f001 fd27 	bl	8009914 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f001 f8f1 	bl	80090ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d03a      	beq.n	8007f4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f7ff fe42 	bl	8007b60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ee4:	e032      	b.n	8007f4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 f985 	bl	8008200 <USBD_CoreFindEP>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2bff      	cmp	r3, #255	@ 0xff
 8007efe:	d025      	beq.n	8007f4c <USBD_LL_DataInStage+0x15a>
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d122      	bne.n	8007f4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d11c      	bne.n	8007f4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f12:	7dfa      	ldrb	r2, [r7, #23]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	32ae      	adds	r2, #174	@ 0xae
 8007f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d014      	beq.n	8007f4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f22:	7dfa      	ldrb	r2, [r7, #23]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f2a:	7dfa      	ldrb	r2, [r7, #23]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	32ae      	adds	r2, #174	@ 0xae
 8007f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	7afa      	ldrb	r2, [r7, #11]
 8007f38:	4611      	mov	r1, r2
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	4798      	blx	r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f42:	7dbb      	ldrb	r3, [r7, #22]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f48:	7dbb      	ldrb	r3, [r7, #22]
 8007f4a:	e000      	b.n	8007f4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f4c:	2300      	movs	r3, #0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d014      	beq.n	8007fbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00e      	beq.n	8007fbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6852      	ldr	r2, [r2, #4]
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	4611      	mov	r1, r2
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fbc:	2340      	movs	r3, #64	@ 0x40
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 fc32 	bl	800982c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2240      	movs	r2, #64	@ 0x40
 8007fd4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fd8:	2340      	movs	r3, #64	@ 0x40
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2180      	movs	r1, #128	@ 0x80
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 fc24 	bl	800982c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2240      	movs	r2, #64	@ 0x40
 8007fee:	621a      	str	r2, [r3, #32]

  return ret;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b083      	sub	sp, #12
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	78fa      	ldrb	r2, [r7, #3]
 800800a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b04      	cmp	r3, #4
 800802c:	d006      	beq.n	800803c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008034:	b2da      	uxtb	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2204      	movs	r2, #4
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b04      	cmp	r3, #4
 8008064:	d106      	bne.n	8008074 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800806c:	b2da      	uxtb	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b03      	cmp	r3, #3
 8008094:	d110      	bne.n	80080b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b082      	sub	sp, #8
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	460b      	mov	r3, r1
 80080cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	32ae      	adds	r2, #174	@ 0xae
 80080d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e01c      	b.n	800811e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d115      	bne.n	800811c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	32ae      	adds	r2, #174	@ 0xae
 80080fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fe:	6a1b      	ldr	r3, [r3, #32]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	32ae      	adds	r2, #174	@ 0xae
 800810e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	78fa      	ldrb	r2, [r7, #3]
 8008116:	4611      	mov	r1, r2
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32ae      	adds	r2, #174	@ 0xae
 800813c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	e01c      	b.n	8008182 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b03      	cmp	r3, #3
 8008152:	d115      	bne.n	8008180 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32ae      	adds	r2, #174	@ 0xae
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32ae      	adds	r2, #174	@ 0xae
 8008172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	78fa      	ldrb	r2, [r7, #3]
 800817a:	4611      	mov	r1, r2
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00e      	beq.n	80081dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6852      	ldr	r2, [r2, #4]
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	4611      	mov	r1, r2
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800820c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	885b      	ldrh	r3, [r3, #2]
 8008236:	b29b      	uxth	r3, r3
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	4293      	cmp	r3, r2
 800823e:	d91f      	bls.n	8008280 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008246:	e013      	b.n	8008270 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008248:	f107 030a 	add.w	r3, r7, #10
 800824c:	4619      	mov	r1, r3
 800824e:	6978      	ldr	r0, [r7, #20]
 8008250:	f000 f81b 	bl	800828a <USBD_GetNextDesc>
 8008254:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	2b05      	cmp	r3, #5
 800825c:	d108      	bne.n	8008270 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	789b      	ldrb	r3, [r3, #2]
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	429a      	cmp	r2, r3
 800826a:	d008      	beq.n	800827e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800826c:	2300      	movs	r3, #0
 800826e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	885b      	ldrh	r3, [r3, #2]
 8008274:	b29a      	uxth	r2, r3
 8008276:	897b      	ldrh	r3, [r7, #10]
 8008278:	429a      	cmp	r2, r3
 800827a:	d8e5      	bhi.n	8008248 <USBD_GetEpDesc+0x2e>
 800827c:	e000      	b.n	8008280 <USBD_GetEpDesc+0x66>
          break;
 800827e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008280:	693b      	ldr	r3, [r7, #16]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	4413      	add	r3, r2
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082b4:	68fb      	ldr	r3, [r7, #12]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082c2:	b480      	push	{r7}
 80082c4:	b087      	sub	sp, #28
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3301      	adds	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082e0:	8a3b      	ldrh	r3, [r7, #16]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	b21a      	sxth	r2, r3
 80082e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	b21b      	sxth	r3, r3
 80082ee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082f0:	89fb      	ldrh	r3, [r7, #14]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
	...

08008300 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008316:	2b40      	cmp	r3, #64	@ 0x40
 8008318:	d005      	beq.n	8008326 <USBD_StdDevReq+0x26>
 800831a:	2b40      	cmp	r3, #64	@ 0x40
 800831c:	d857      	bhi.n	80083ce <USBD_StdDevReq+0xce>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00f      	beq.n	8008342 <USBD_StdDevReq+0x42>
 8008322:	2b20      	cmp	r3, #32
 8008324:	d153      	bne.n	80083ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	32ae      	adds	r2, #174	@ 0xae
 8008330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	4798      	blx	r3
 800833c:	4603      	mov	r3, r0
 800833e:	73fb      	strb	r3, [r7, #15]
      break;
 8008340:	e04a      	b.n	80083d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	2b09      	cmp	r3, #9
 8008348:	d83b      	bhi.n	80083c2 <USBD_StdDevReq+0xc2>
 800834a:	a201      	add	r2, pc, #4	@ (adr r2, 8008350 <USBD_StdDevReq+0x50>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	080083a5 	.word	0x080083a5
 8008354:	080083b9 	.word	0x080083b9
 8008358:	080083c3 	.word	0x080083c3
 800835c:	080083af 	.word	0x080083af
 8008360:	080083c3 	.word	0x080083c3
 8008364:	08008383 	.word	0x08008383
 8008368:	08008379 	.word	0x08008379
 800836c:	080083c3 	.word	0x080083c3
 8008370:	0800839b 	.word	0x0800839b
 8008374:	0800838d 	.word	0x0800838d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fa3c 	bl	80087f8 <USBD_GetDescriptor>
          break;
 8008380:	e024      	b.n	80083cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fbcb 	bl	8008b20 <USBD_SetAddress>
          break;
 800838a:	e01f      	b.n	80083cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800838c:	6839      	ldr	r1, [r7, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fc0a 	bl	8008ba8 <USBD_SetConfig>
 8008394:	4603      	mov	r3, r0
 8008396:	73fb      	strb	r3, [r7, #15]
          break;
 8008398:	e018      	b.n	80083cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fcad 	bl	8008cfc <USBD_GetConfig>
          break;
 80083a2:	e013      	b.n	80083cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fcde 	bl	8008d68 <USBD_GetStatus>
          break;
 80083ac:	e00e      	b.n	80083cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fd0d 	bl	8008dd0 <USBD_SetFeature>
          break;
 80083b6:	e009      	b.n	80083cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fd31 	bl	8008e22 <USBD_ClrFeature>
          break;
 80083c0:	e004      	b.n	80083cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fd88 	bl	8008eda <USBD_CtlError>
          break;
 80083ca:	bf00      	nop
      }
      break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fd82 	bl	8008eda <USBD_CtlError>
      break;
 80083d6:	bf00      	nop
  }

  return ret;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop

080083e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d005      	beq.n	800840a <USBD_StdItfReq+0x26>
 80083fe:	2b40      	cmp	r3, #64	@ 0x40
 8008400:	d852      	bhi.n	80084a8 <USBD_StdItfReq+0xc4>
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <USBD_StdItfReq+0x26>
 8008406:	2b20      	cmp	r3, #32
 8008408:	d14e      	bne.n	80084a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008410:	b2db      	uxtb	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	2b02      	cmp	r3, #2
 8008416:	d840      	bhi.n	800849a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	889b      	ldrh	r3, [r3, #4]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b01      	cmp	r3, #1
 8008420:	d836      	bhi.n	8008490 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	889b      	ldrh	r3, [r3, #4]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff fedb 	bl	80081e6 <USBD_CoreFindIF>
 8008430:	4603      	mov	r3, r0
 8008432:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2bff      	cmp	r3, #255	@ 0xff
 8008438:	d01d      	beq.n	8008476 <USBD_StdItfReq+0x92>
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11a      	bne.n	8008476 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008440:	7bba      	ldrb	r2, [r7, #14]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32ae      	adds	r2, #174	@ 0xae
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00f      	beq.n	8008470 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008450:	7bba      	ldrb	r2, [r7, #14]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008458:	7bba      	ldrb	r2, [r7, #14]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	32ae      	adds	r2, #174	@ 0xae
 800845e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
 800846a:	4603      	mov	r3, r0
 800846c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800846e:	e004      	b.n	800847a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008470:	2303      	movs	r3, #3
 8008472:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008474:	e001      	b.n	800847a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008476:	2303      	movs	r3, #3
 8008478:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	88db      	ldrh	r3, [r3, #6]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d110      	bne.n	80084a4 <USBD_StdItfReq+0xc0>
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10d      	bne.n	80084a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fdfd 	bl	8009088 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800848e:	e009      	b.n	80084a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fd21 	bl	8008eda <USBD_CtlError>
          break;
 8008498:	e004      	b.n	80084a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fd1c 	bl	8008eda <USBD_CtlError>
          break;
 80084a2:	e000      	b.n	80084a6 <USBD_StdItfReq+0xc2>
          break;
 80084a4:	bf00      	nop
      }
      break;
 80084a6:	e004      	b.n	80084b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fd15 	bl	8008eda <USBD_CtlError>
      break;
 80084b0:	bf00      	nop
  }

  return ret;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	889b      	ldrh	r3, [r3, #4]
 80084ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084d8:	2b40      	cmp	r3, #64	@ 0x40
 80084da:	d007      	beq.n	80084ec <USBD_StdEPReq+0x30>
 80084dc:	2b40      	cmp	r3, #64	@ 0x40
 80084de:	f200 817f 	bhi.w	80087e0 <USBD_StdEPReq+0x324>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d02a      	beq.n	800853c <USBD_StdEPReq+0x80>
 80084e6:	2b20      	cmp	r3, #32
 80084e8:	f040 817a 	bne.w	80087e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff fe85 	bl	8008200 <USBD_CoreFindEP>
 80084f6:	4603      	mov	r3, r0
 80084f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084fa:	7b7b      	ldrb	r3, [r7, #13]
 80084fc:	2bff      	cmp	r3, #255	@ 0xff
 80084fe:	f000 8174 	beq.w	80087ea <USBD_StdEPReq+0x32e>
 8008502:	7b7b      	ldrb	r3, [r7, #13]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f040 8170 	bne.w	80087ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800850a:	7b7a      	ldrb	r2, [r7, #13]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008512:	7b7a      	ldrb	r2, [r7, #13]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	32ae      	adds	r2, #174	@ 0xae
 8008518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 8163 	beq.w	80087ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008524:	7b7a      	ldrb	r2, [r7, #13]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32ae      	adds	r2, #174	@ 0xae
 800852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800853a:	e156      	b.n	80087ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	785b      	ldrb	r3, [r3, #1]
 8008540:	2b03      	cmp	r3, #3
 8008542:	d008      	beq.n	8008556 <USBD_StdEPReq+0x9a>
 8008544:	2b03      	cmp	r3, #3
 8008546:	f300 8145 	bgt.w	80087d4 <USBD_StdEPReq+0x318>
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 809b 	beq.w	8008686 <USBD_StdEPReq+0x1ca>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d03c      	beq.n	80085ce <USBD_StdEPReq+0x112>
 8008554:	e13e      	b.n	80087d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d002      	beq.n	8008568 <USBD_StdEPReq+0xac>
 8008562:	2b03      	cmp	r3, #3
 8008564:	d016      	beq.n	8008594 <USBD_StdEPReq+0xd8>
 8008566:	e02c      	b.n	80085c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00d      	beq.n	800858a <USBD_StdEPReq+0xce>
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b80      	cmp	r3, #128	@ 0x80
 8008572:	d00a      	beq.n	800858a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f9cb 	bl	8009914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800857e:	2180      	movs	r1, #128	@ 0x80
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 f9c7 	bl	8009914 <USBD_LL_StallEP>
 8008586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008588:	e020      	b.n	80085cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fca4 	bl	8008eda <USBD_CtlError>
              break;
 8008592:	e01b      	b.n	80085cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	885b      	ldrh	r3, [r3, #2]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10e      	bne.n	80085ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00b      	beq.n	80085ba <USBD_StdEPReq+0xfe>
 80085a2:	7bbb      	ldrb	r3, [r7, #14]
 80085a4:	2b80      	cmp	r3, #128	@ 0x80
 80085a6:	d008      	beq.n	80085ba <USBD_StdEPReq+0xfe>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d104      	bne.n	80085ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085b0:	7bbb      	ldrb	r3, [r7, #14]
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 f9ad 	bl	8009914 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fd64 	bl	8009088 <USBD_CtlSendStatus>

              break;
 80085c0:	e004      	b.n	80085cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80085c2:	6839      	ldr	r1, [r7, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 fc88 	bl	8008eda <USBD_CtlError>
              break;
 80085ca:	bf00      	nop
          }
          break;
 80085cc:	e107      	b.n	80087de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d002      	beq.n	80085e0 <USBD_StdEPReq+0x124>
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d016      	beq.n	800860c <USBD_StdEPReq+0x150>
 80085de:	e04b      	b.n	8008678 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00d      	beq.n	8008602 <USBD_StdEPReq+0x146>
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b80      	cmp	r3, #128	@ 0x80
 80085ea:	d00a      	beq.n	8008602 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 f98f 	bl	8009914 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f6:	2180      	movs	r1, #128	@ 0x80
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 f98b 	bl	8009914 <USBD_LL_StallEP>
 80085fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008600:	e040      	b.n	8008684 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fc68 	bl	8008eda <USBD_CtlError>
              break;
 800860a:	e03b      	b.n	8008684 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d136      	bne.n	8008682 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 f9ac 	bl	8009980 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fd2d 	bl	8009088 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff fde4 	bl	8008200 <USBD_CoreFindEP>
 8008638:	4603      	mov	r3, r0
 800863a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800863c:	7b7b      	ldrb	r3, [r7, #13]
 800863e:	2bff      	cmp	r3, #255	@ 0xff
 8008640:	d01f      	beq.n	8008682 <USBD_StdEPReq+0x1c6>
 8008642:	7b7b      	ldrb	r3, [r7, #13]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d11c      	bne.n	8008682 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008648:	7b7a      	ldrb	r2, [r7, #13]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008650:	7b7a      	ldrb	r2, [r7, #13]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32ae      	adds	r2, #174	@ 0xae
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d010      	beq.n	8008682 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008660:	7b7a      	ldrb	r2, [r7, #13]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	32ae      	adds	r2, #174	@ 0xae
 8008666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008676:	e004      	b.n	8008682 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fc2d 	bl	8008eda <USBD_CtlError>
              break;
 8008680:	e000      	b.n	8008684 <USBD_StdEPReq+0x1c8>
              break;
 8008682:	bf00      	nop
          }
          break;
 8008684:	e0ab      	b.n	80087de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d002      	beq.n	8008698 <USBD_StdEPReq+0x1dc>
 8008692:	2b03      	cmp	r3, #3
 8008694:	d032      	beq.n	80086fc <USBD_StdEPReq+0x240>
 8008696:	e097      	b.n	80087c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <USBD_StdEPReq+0x1f2>
 800869e:	7bbb      	ldrb	r3, [r7, #14]
 80086a0:	2b80      	cmp	r3, #128	@ 0x80
 80086a2:	d004      	beq.n	80086ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fc17 	bl	8008eda <USBD_CtlError>
                break;
 80086ac:	e091      	b.n	80087d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	da0b      	bge.n	80086ce <USBD_StdEPReq+0x212>
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086bc:	4613      	mov	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	3310      	adds	r3, #16
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4413      	add	r3, r2
 80086ca:	3304      	adds	r3, #4
 80086cc:	e00b      	b.n	80086e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	3304      	adds	r3, #4
 80086e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	2202      	movs	r2, #2
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fc6d 	bl	8008fd4 <USBD_CtlSendData>
              break;
 80086fa:	e06a      	b.n	80087d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da11      	bge.n	8008728 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 020f 	and.w	r2, r3, #15
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	3324      	adds	r3, #36	@ 0x24
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d117      	bne.n	800874e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fbda 	bl	8008eda <USBD_CtlError>
                  break;
 8008726:	e054      	b.n	80087d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008728:	7bbb      	ldrb	r3, [r7, #14]
 800872a:	f003 020f 	and.w	r2, r3, #15
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	440b      	add	r3, r1
 800873a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d104      	bne.n	800874e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fbc7 	bl	8008eda <USBD_CtlError>
                  break;
 800874c:	e041      	b.n	80087d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800874e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008752:	2b00      	cmp	r3, #0
 8008754:	da0b      	bge.n	800876e <USBD_StdEPReq+0x2b2>
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	3310      	adds	r3, #16
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	4413      	add	r3, r2
 800876a:	3304      	adds	r3, #4
 800876c:	e00b      	b.n	8008786 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4413      	add	r3, r2
 8008784:	3304      	adds	r3, #4
 8008786:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <USBD_StdEPReq+0x2d8>
 800878e:	7bbb      	ldrb	r3, [r7, #14]
 8008790:	2b80      	cmp	r3, #128	@ 0x80
 8008792:	d103      	bne.n	800879c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e00e      	b.n	80087ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f001 f923 	bl	80099ec <USBD_LL_IsStallEP>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2201      	movs	r2, #1
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	e002      	b.n	80087ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2202      	movs	r2, #2
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fc07 	bl	8008fd4 <USBD_CtlSendData>
              break;
 80087c6:	e004      	b.n	80087d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fb85 	bl	8008eda <USBD_CtlError>
              break;
 80087d0:	bf00      	nop
          }
          break;
 80087d2:	e004      	b.n	80087de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb7f 	bl	8008eda <USBD_CtlError>
          break;
 80087dc:	bf00      	nop
      }
      break;
 80087de:	e005      	b.n	80087ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fb79 	bl	8008eda <USBD_CtlError>
      break;
 80087e8:	e000      	b.n	80087ec <USBD_StdEPReq+0x330>
      break;
 80087ea:	bf00      	nop
  }

  return ret;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	0a1b      	lsrs	r3, r3, #8
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	2b0e      	cmp	r3, #14
 800881a:	f200 8152 	bhi.w	8008ac2 <USBD_GetDescriptor+0x2ca>
 800881e:	a201      	add	r2, pc, #4	@ (adr r2, 8008824 <USBD_GetDescriptor+0x2c>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008895 	.word	0x08008895
 8008828:	080088ad 	.word	0x080088ad
 800882c:	080088ed 	.word	0x080088ed
 8008830:	08008ac3 	.word	0x08008ac3
 8008834:	08008ac3 	.word	0x08008ac3
 8008838:	08008a63 	.word	0x08008a63
 800883c:	08008a8f 	.word	0x08008a8f
 8008840:	08008ac3 	.word	0x08008ac3
 8008844:	08008ac3 	.word	0x08008ac3
 8008848:	08008ac3 	.word	0x08008ac3
 800884c:	08008ac3 	.word	0x08008ac3
 8008850:	08008ac3 	.word	0x08008ac3
 8008854:	08008ac3 	.word	0x08008ac3
 8008858:	08008ac3 	.word	0x08008ac3
 800885c:	08008861 	.word	0x08008861
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00b      	beq.n	8008884 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	f107 0108 	add.w	r1, r7, #8
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
 8008880:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008882:	e126      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 fb27 	bl	8008eda <USBD_CtlError>
        err++;
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	3301      	adds	r3, #1
 8008890:	72fb      	strb	r3, [r7, #11]
      break;
 8008892:	e11e      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
      break;
 80088aa:	e112      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7c1b      	ldrb	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d10d      	bne.n	80088d0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088bc:	f107 0208 	add.w	r2, r7, #8
 80088c0:	4610      	mov	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	2202      	movs	r2, #2
 80088cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088ce:	e100      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d8:	f107 0208 	add.w	r2, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3301      	adds	r3, #1
 80088e6:	2202      	movs	r2, #2
 80088e8:	701a      	strb	r2, [r3, #0]
      break;
 80088ea:	e0f2      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	885b      	ldrh	r3, [r3, #2]
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	f200 80ac 	bhi.w	8008a50 <USBD_GetDescriptor+0x258>
 80088f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <USBD_GetDescriptor+0x108>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008919 	.word	0x08008919
 8008904:	0800894d 	.word	0x0800894d
 8008908:	08008981 	.word	0x08008981
 800890c:	080089b5 	.word	0x080089b5
 8008910:	080089e9 	.word	0x080089e9
 8008914:	08008a1d 	.word	0x08008a1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800893a:	e091      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 facb 	bl	8008eda <USBD_CtlError>
            err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
          break;
 800894a:	e089      	b.n	8008a60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896e:	e077      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fab1 	bl	8008eda <USBD_CtlError>
            err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
          break;
 800897e:	e06f      	b.n	8008a60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e05d      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa97 	bl	8008eda <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e055      	b.n	8008a60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d6:	e043      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa7d 	bl	8008eda <USBD_CtlError>
            err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
          break;
 80089e6:	e03b      	b.n	8008a60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0a:	e029      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa63 	bl	8008eda <USBD_CtlError>
            err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1a:	e021      	b.n	8008a60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a3e:	e00f      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa49 	bl	8008eda <USBD_CtlError>
            err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a4e:	e007      	b.n	8008a60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa41 	bl	8008eda <USBD_CtlError>
          err++;
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a5e:	bf00      	nop
      }
      break;
 8008a60:	e037      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7c1b      	ldrb	r3, [r3, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d109      	bne.n	8008a7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a72:	f107 0208 	add.w	r2, r7, #8
 8008a76:	4610      	mov	r0, r2
 8008a78:	4798      	blx	r3
 8008a7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a7c:	e029      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fa2a 	bl	8008eda <USBD_CtlError>
        err++;
 8008a86:	7afb      	ldrb	r3, [r7, #11]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a8c:	e021      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	7c1b      	ldrb	r3, [r3, #16]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10d      	bne.n	8008ab2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9e:	f107 0208 	add.w	r2, r7, #8
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	4798      	blx	r3
 8008aa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	2207      	movs	r2, #7
 8008aae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab0:	e00f      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa10 	bl	8008eda <USBD_CtlError>
        err++;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	3301      	adds	r3, #1
 8008abe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac0:	e007      	b.n	8008ad2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fa08 	bl	8008eda <USBD_CtlError>
      err++;
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	3301      	adds	r3, #1
 8008ace:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad0:	bf00      	nop
  }

  if (err != 0U)
 8008ad2:	7afb      	ldrb	r3, [r7, #11]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11e      	bne.n	8008b16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	88db      	ldrh	r3, [r3, #6]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d016      	beq.n	8008b0e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008ae0:	893b      	ldrh	r3, [r7, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00e      	beq.n	8008b04 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	88da      	ldrh	r2, [r3, #6]
 8008aea:	893b      	ldrh	r3, [r7, #8]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	bf28      	it	cs
 8008af0:	4613      	movcs	r3, r2
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	461a      	mov	r2, r3
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fa69 	bl	8008fd4 <USBD_CtlSendData>
 8008b02:	e009      	b.n	8008b18 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9e7 	bl	8008eda <USBD_CtlError>
 8008b0c:	e004      	b.n	8008b18 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 faba 	bl	8009088 <USBD_CtlSendStatus>
 8008b14:	e000      	b.n	8008b18 <USBD_GetDescriptor+0x320>
    return;
 8008b16:	bf00      	nop
  }
}
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop

08008b20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	889b      	ldrh	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d131      	bne.n	8008b96 <USBD_SetAddress+0x76>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88db      	ldrh	r3, [r3, #6]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d12d      	bne.n	8008b96 <USBD_SetAddress+0x76>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	885b      	ldrh	r3, [r3, #2]
 8008b3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b40:	d829      	bhi.n	8008b96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	885b      	ldrh	r3, [r3, #2]
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d104      	bne.n	8008b64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f9bc 	bl	8008eda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b62:	e01d      	b.n	8008ba0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7bfa      	ldrb	r2, [r7, #15]
 8008b68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 ff67 	bl	8009a44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa86 	bl	8009088 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d004      	beq.n	8008b8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2202      	movs	r2, #2
 8008b86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	e009      	b.n	8008ba0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	e004      	b.n	8008ba0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f99e 	bl	8008eda <USBD_CtlError>
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	885b      	ldrh	r3, [r3, #2]
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	4b4e      	ldr	r3, [pc, #312]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008bbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d905      	bls.n	8008bd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f985 	bl	8008eda <USBD_CtlError>
    return USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e08c      	b.n	8008cee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d002      	beq.n	8008be6 <USBD_SetConfig+0x3e>
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d029      	beq.n	8008c38 <USBD_SetConfig+0x90>
 8008be4:	e075      	b.n	8008cd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008be6:	4b44      	ldr	r3, [pc, #272]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d020      	beq.n	8008c30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bee:	4b42      	ldr	r3, [pc, #264]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7fe ffb9 	bl	8007b76 <USBD_SetClassConfig>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d008      	beq.n	8008c20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f962 	bl	8008eda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2202      	movs	r2, #2
 8008c1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c1e:	e065      	b.n	8008cec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fa31 	bl	8009088 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c2e:	e05d      	b.n	8008cec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa29 	bl	8009088 <USBD_CtlSendStatus>
      break;
 8008c36:	e059      	b.n	8008cec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c38:	4b2f      	ldr	r3, [pc, #188]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d112      	bne.n	8008c66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c48:	4b2b      	ldr	r3, [pc, #172]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c52:	4b29      	ldr	r3, [pc, #164]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7fe ffa8 	bl	8007bae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa12 	bl	8009088 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c64:	e042      	b.n	8008cec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c66:	4b24      	ldr	r3, [pc, #144]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d02a      	beq.n	8008cca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7fe ff96 	bl	8007bae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c82:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7fe ff6f 	bl	8007b76 <USBD_SetClassConfig>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00f      	beq.n	8008cc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f918 	bl	8008eda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fe ff7b 	bl	8007bae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008cc0:	e014      	b.n	8008cec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f9e0 	bl	8009088 <USBD_CtlSendStatus>
      break;
 8008cc8:	e010      	b.n	8008cec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f9dc 	bl	8009088 <USBD_CtlSendStatus>
      break;
 8008cd0:	e00c      	b.n	8008cec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f900 	bl	8008eda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cda:	4b07      	ldr	r3, [pc, #28]	@ (8008cf8 <USBD_SetConfig+0x150>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7fe ff64 	bl	8007bae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cea:	bf00      	nop
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200003b8 	.word	0x200003b8

08008cfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d004      	beq.n	8008d18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d0e:	6839      	ldr	r1, [r7, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f8e2 	bl	8008eda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d16:	e023      	b.n	8008d60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	dc02      	bgt.n	8008d2a <USBD_GetConfig+0x2e>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dc03      	bgt.n	8008d30 <USBD_GetConfig+0x34>
 8008d28:	e015      	b.n	8008d56 <USBD_GetConfig+0x5a>
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d00b      	beq.n	8008d46 <USBD_GetConfig+0x4a>
 8008d2e:	e012      	b.n	8008d56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f948 	bl	8008fd4 <USBD_CtlSendData>
        break;
 8008d44:	e00c      	b.n	8008d60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f940 	bl	8008fd4 <USBD_CtlSendData>
        break;
 8008d54:	e004      	b.n	8008d60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f8be 	bl	8008eda <USBD_CtlError>
        break;
 8008d5e:	bf00      	nop
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d81e      	bhi.n	8008dbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d004      	beq.n	8008d92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f8a5 	bl	8008eda <USBD_CtlError>
        break;
 8008d90:	e01a      	b.n	8008dc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	f043 0202 	orr.w	r2, r3, #2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	330c      	adds	r3, #12
 8008db2:	2202      	movs	r2, #2
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f90c 	bl	8008fd4 <USBD_CtlSendData>
      break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f88a 	bl	8008eda <USBD_CtlError>
      break;
 8008dc6:	bf00      	nop
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3708      	adds	r7, #8
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	885b      	ldrh	r3, [r3, #2]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d107      	bne.n	8008df2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f94c 	bl	8009088 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008df0:	e013      	b.n	8008e1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	885b      	ldrh	r3, [r3, #2]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d10b      	bne.n	8008e12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	889b      	ldrh	r3, [r3, #4]
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f93c 	bl	8009088 <USBD_CtlSendStatus>
}
 8008e10:	e003      	b.n	8008e1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f860 	bl	8008eda <USBD_CtlError>
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d80b      	bhi.n	8008e52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	885b      	ldrh	r3, [r3, #2]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d10c      	bne.n	8008e5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f91c 	bl	8009088 <USBD_CtlSendStatus>
      }
      break;
 8008e50:	e004      	b.n	8008e5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f840 	bl	8008eda <USBD_CtlError>
      break;
 8008e5a:	e000      	b.n	8008e5e <USBD_ClrFeature+0x3c>
      break;
 8008e5c:	bf00      	nop
  }
}
 8008e5e:	bf00      	nop
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f7ff fa16 	bl	80082c2 <SWAPBYTE>
 8008e96:	4603      	mov	r3, r0
 8008e98:	461a      	mov	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff fa09 	bl	80082c2 <SWAPBYTE>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f7ff f9fc 	bl	80082c2 <SWAPBYTE>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461a      	mov	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	80da      	strh	r2, [r3, #6]
}
 8008ed2:	bf00      	nop
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ee4:	2180      	movs	r1, #128	@ 0x80
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fd14 	bl	8009914 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eec:	2100      	movs	r1, #0
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fd10 	bl	8009914 <USBD_LL_StallEP>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d042      	beq.n	8008f98 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008f16:	6938      	ldr	r0, [r7, #16]
 8008f18:	f000 f842 	bl	8008fa0 <USBD_GetLen>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	3301      	adds	r3, #1
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f26:	d808      	bhi.n	8008f3a <USBD_GetString+0x3e>
 8008f28:	6938      	ldr	r0, [r7, #16]
 8008f2a:	f000 f839 	bl	8008fa0 <USBD_GetLen>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	3301      	adds	r3, #1
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	e001      	b.n	8008f3e <USBD_GetString+0x42>
 8008f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	4413      	add	r3, r2
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	3301      	adds	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f54:	7dfb      	ldrb	r3, [r7, #23]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	4413      	add	r3, r2
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	3301      	adds	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f64:	e013      	b.n	8008f8e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	3301      	adds	r3, #1
 8008f76:	613b      	str	r3, [r7, #16]
    idx++;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	4413      	add	r3, r2
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e7      	bne.n	8008f66 <USBD_GetString+0x6a>
 8008f96:	e000      	b.n	8008f9a <USBD_GetString+0x9e>
    return;
 8008f98:	bf00      	nop
  }
}
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fb0:	e005      	b.n	8008fbe <USBD_GetLen+0x1e>
  {
    len++;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f5      	bne.n	8008fb2 <USBD_GetLen+0x12>
  }

  return len;
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	68f8      	ldr	r0, [r7, #12]
 8008ffc:	f000 fd58 	bl	8009ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	2100      	movs	r1, #0
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fd47 	bl	8009ab0 <USBD_LL_Transmit>

  return USBD_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2203      	movs	r2, #3
 800903c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	2100      	movs	r1, #0
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 fd62 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	2100      	movs	r1, #0
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 fd51 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2204      	movs	r2, #4
 8009094:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009098:	2300      	movs	r3, #0
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fd06 	bl	8009ab0 <USBD_LL_Transmit>

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2205      	movs	r2, #5
 80090ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090be:	2300      	movs	r3, #0
 80090c0:	2200      	movs	r2, #0
 80090c2:	2100      	movs	r1, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fd2b 	bl	8009b20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090d8:	2200      	movs	r2, #0
 80090da:	4912      	ldr	r1, [pc, #72]	@ (8009124 <MX_USB_DEVICE_Init+0x50>)
 80090dc:	4812      	ldr	r0, [pc, #72]	@ (8009128 <MX_USB_DEVICE_Init+0x54>)
 80090de:	f7fe fccd 	bl	8007a7c <USBD_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090e8:	f7f7 fdcc 	bl	8000c84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80090ec:	490f      	ldr	r1, [pc, #60]	@ (800912c <MX_USB_DEVICE_Init+0x58>)
 80090ee:	480e      	ldr	r0, [pc, #56]	@ (8009128 <MX_USB_DEVICE_Init+0x54>)
 80090f0:	f7fe fcf4 	bl	8007adc <USBD_RegisterClass>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090fa:	f7f7 fdc3 	bl	8000c84 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80090fe:	490c      	ldr	r1, [pc, #48]	@ (8009130 <MX_USB_DEVICE_Init+0x5c>)
 8009100:	4809      	ldr	r0, [pc, #36]	@ (8009128 <MX_USB_DEVICE_Init+0x54>)
 8009102:	f7fe fca1 	bl	8007a48 <USBD_CUSTOM_HID_RegisterInterface>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800910c:	f7f7 fdba 	bl	8000c84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009110:	4805      	ldr	r0, [pc, #20]	@ (8009128 <MX_USB_DEVICE_Init+0x54>)
 8009112:	f7fe fd19 	bl	8007b48 <USBD_Start>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800911c:	f7f7 fdb2 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009120:	bf00      	nop
 8009122:	bd80      	pop	{r7, pc}
 8009124:	200000cc 	.word	0x200000cc
 8009128:	200003bc 	.word	0x200003bc
 800912c:	2000000c 	.word	0x2000000c
 8009130:	200000bc 	.word	0x200000bc

08009134 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800913a:	4618      	mov	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009148:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800914a:	4618      	mov	r0, r3
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	4603      	mov	r3, r0
 800915c:	460a      	mov	r2, r1
 800915e:	71fb      	strb	r3, [r7, #7]
 8009160:	4613      	mov	r3, r2
 8009162:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8009164:	4803      	ldr	r0, [pc, #12]	@ (8009174 <CUSTOM_HID_OutEvent_FS+0x20>)
 8009166:	f7fe fc0d 	bl	8007984 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200003bc 	.word	0x200003bc

08009178 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 8009184:	887b      	ldrh	r3, [r7, #2]
 8009186:	461a      	mov	r2, r3
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4804      	ldr	r0, [pc, #16]	@ (800919c <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 800918c:	f7fe faee 	bl	800776c <USBD_CUSTOM_HID_SendReport>
 8009190:	4603      	mov	r3, r0
 8009192:	b25b      	sxtb	r3, r3
}
 8009194:	4618      	mov	r0, r3
 8009196:	3708      	adds	r7, #8
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	200003bc 	.word	0x200003bc

080091a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2212      	movs	r2, #18
 80091b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091b2:	4b03      	ldr	r3, [pc, #12]	@ (80091c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	200000ec 	.word	0x200000ec

080091c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	6039      	str	r1, [r7, #0]
 80091ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2204      	movs	r2, #4
 80091d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091d6:	4b03      	ldr	r3, [pc, #12]	@ (80091e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091d8:	4618      	mov	r0, r3
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	2000010c 	.word	0x2000010c

080091e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	6039      	str	r1, [r7, #0]
 80091f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d105      	bne.n	8009206 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	4907      	ldr	r1, [pc, #28]	@ (800921c <USBD_FS_ProductStrDescriptor+0x34>)
 80091fe:	4808      	ldr	r0, [pc, #32]	@ (8009220 <USBD_FS_ProductStrDescriptor+0x38>)
 8009200:	f7ff fe7c 	bl	8008efc <USBD_GetString>
 8009204:	e004      	b.n	8009210 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4904      	ldr	r1, [pc, #16]	@ (800921c <USBD_FS_ProductStrDescriptor+0x34>)
 800920a:	4805      	ldr	r0, [pc, #20]	@ (8009220 <USBD_FS_ProductStrDescriptor+0x38>)
 800920c:	f7ff fe76 	bl	8008efc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009210:	4b02      	ldr	r3, [pc, #8]	@ (800921c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009212:	4618      	mov	r0, r3
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000698 	.word	0x20000698
 8009220:	08009cd8 	.word	0x08009cd8

08009224 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	4904      	ldr	r1, [pc, #16]	@ (8009244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009234:	4804      	ldr	r0, [pc, #16]	@ (8009248 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009236:	f7ff fe61 	bl	8008efc <USBD_GetString>
  return USBD_StrDesc;
 800923a:	4b02      	ldr	r3, [pc, #8]	@ (8009244 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800923c:	4618      	mov	r0, r3
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20000698 	.word	0x20000698
 8009248:	08009cf8 	.word	0x08009cf8

0800924c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	6039      	str	r1, [r7, #0]
 8009256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	221a      	movs	r2, #26
 800925c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800925e:	f000 f855 	bl	800930c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009262:	4b02      	ldr	r3, [pc, #8]	@ (800926c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009264:	4618      	mov	r0, r3
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000110 	.word	0x20000110

08009270 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	6039      	str	r1, [r7, #0]
 800927a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d105      	bne.n	800928e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4907      	ldr	r1, [pc, #28]	@ (80092a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009286:	4808      	ldr	r0, [pc, #32]	@ (80092a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009288:	f7ff fe38 	bl	8008efc <USBD_GetString>
 800928c:	e004      	b.n	8009298 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	4904      	ldr	r1, [pc, #16]	@ (80092a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009292:	4805      	ldr	r0, [pc, #20]	@ (80092a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009294:	f7ff fe32 	bl	8008efc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009298:	4b02      	ldr	r3, [pc, #8]	@ (80092a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800929a:	4618      	mov	r0, r3
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000698 	.word	0x20000698
 80092a8:	08009d0c 	.word	0x08009d0c

080092ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d105      	bne.n	80092ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4907      	ldr	r1, [pc, #28]	@ (80092e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092c2:	4808      	ldr	r0, [pc, #32]	@ (80092e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092c4:	f7ff fe1a 	bl	8008efc <USBD_GetString>
 80092c8:	e004      	b.n	80092d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	4904      	ldr	r1, [pc, #16]	@ (80092e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ce:	4805      	ldr	r0, [pc, #20]	@ (80092e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092d0:	f7ff fe14 	bl	8008efc <USBD_GetString>
  }
  return USBD_StrDesc;
 80092d4:	4b02      	ldr	r3, [pc, #8]	@ (80092e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000698 	.word	0x20000698
 80092e4:	08009d20 	.word	0x08009d20

080092e8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	4603      	mov	r3, r0
 80092f0:	6039      	str	r1, [r7, #0]
 80092f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	220c      	movs	r2, #12
 80092f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80092fa:	4b03      	ldr	r3, [pc, #12]	@ (8009308 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20000100 	.word	0x20000100

0800930c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009312:	4b0f      	ldr	r3, [pc, #60]	@ (8009350 <Get_SerialNum+0x44>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009318:	4b0e      	ldr	r3, [pc, #56]	@ (8009354 <Get_SerialNum+0x48>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800931e:	4b0e      	ldr	r3, [pc, #56]	@ (8009358 <Get_SerialNum+0x4c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d009      	beq.n	8009346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009332:	2208      	movs	r2, #8
 8009334:	4909      	ldr	r1, [pc, #36]	@ (800935c <Get_SerialNum+0x50>)
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f814 	bl	8009364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800933c:	2204      	movs	r2, #4
 800933e:	4908      	ldr	r1, [pc, #32]	@ (8009360 <Get_SerialNum+0x54>)
 8009340:	68b8      	ldr	r0, [r7, #8]
 8009342:	f000 f80f 	bl	8009364 <IntToUnicode>
  }
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	1fff7590 	.word	0x1fff7590
 8009354:	1fff7594 	.word	0x1fff7594
 8009358:	1fff7598 	.word	0x1fff7598
 800935c:	20000112 	.word	0x20000112
 8009360:	20000122 	.word	0x20000122

08009364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009364:	b480      	push	{r7}
 8009366:	b087      	sub	sp, #28
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009376:	2300      	movs	r3, #0
 8009378:	75fb      	strb	r3, [r7, #23]
 800937a:	e027      	b.n	80093cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	0f1b      	lsrs	r3, r3, #28
 8009380:	2b09      	cmp	r3, #9
 8009382:	d80b      	bhi.n	800939c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	0f1b      	lsrs	r3, r3, #28
 8009388:	b2da      	uxtb	r2, r3
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	4619      	mov	r1, r3
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	440b      	add	r3, r1
 8009394:	3230      	adds	r2, #48	@ 0x30
 8009396:	b2d2      	uxtb	r2, r2
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	e00a      	b.n	80093b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	0f1b      	lsrs	r3, r3, #28
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	4619      	mov	r1, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	440b      	add	r3, r1
 80093ac:	3237      	adds	r2, #55	@ 0x37
 80093ae:	b2d2      	uxtb	r2, r2
 80093b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	3301      	adds	r3, #1
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	2200      	movs	r2, #0
 80093c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	3301      	adds	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
 80093cc:	7dfa      	ldrb	r2, [r7, #23]
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d3d3      	bcc.n	800937c <IntToUnicode+0x18>
  }
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
	...

080093e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b0ac      	sub	sp, #176	@ 0xb0
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	605a      	str	r2, [r3, #4]
 80093f6:	609a      	str	r2, [r3, #8]
 80093f8:	60da      	str	r2, [r3, #12]
 80093fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80093fc:	f107 0314 	add.w	r3, r7, #20
 8009400:	2288      	movs	r2, #136	@ 0x88
 8009402:	2100      	movs	r1, #0
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fc2f 	bl	8009c68 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009412:	f040 8085 	bne.w	8009520 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009416:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800941a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800941c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009424:	2301      	movs	r3, #1
 8009426:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009428:	2301      	movs	r3, #1
 800942a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800942c:	2318      	movs	r3, #24
 800942e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8009430:	2307      	movs	r3, #7
 8009432:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8009434:	2302      	movs	r3, #2
 8009436:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8009438:	2302      	movs	r3, #2
 800943a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800943c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009440:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009442:	f107 0314 	add.w	r3, r7, #20
 8009446:	4618      	mov	r0, r3
 8009448:	f7fb fa4e 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8009452:	f7f7 fc17 	bl	8000c84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009456:	4b34      	ldr	r3, [pc, #208]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 8009458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800945a:	4a33      	ldr	r2, [pc, #204]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009462:	4b31      	ldr	r3, [pc, #196]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 8009464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800946e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009476:	2300      	movs	r3, #0
 8009478:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800947c:	2300      	movs	r3, #0
 800947e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009482:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8009486:	4619      	mov	r1, r3
 8009488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800948c:	f7f8 f966 	bl	800175c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8009490:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009498:	2302      	movs	r3, #2
 800949a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094a4:	2303      	movs	r3, #3
 80094a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094aa:	230a      	movs	r3, #10
 80094ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80094b4:	4619      	mov	r1, r3
 80094b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80094ba:	f7f8 f94f 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094be:	4b1a      	ldr	r3, [pc, #104]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c2:	4a19      	ldr	r2, [pc, #100]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80094c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094ca:	4b17      	ldr	r3, [pc, #92]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094d6:	4b14      	ldr	r3, [pc, #80]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d114      	bne.n	800950c <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094e2:	4b11      	ldr	r3, [pc, #68]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094e6:	4a10      	ldr	r2, [pc, #64]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 80094f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094f6:	60bb      	str	r3, [r7, #8]
 80094f8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80094fa:	f7fa fb29 	bl	8003b50 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80094fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 8009500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009502:	4a09      	ldr	r2, [pc, #36]	@ (8009528 <HAL_PCD_MspInit+0x144>)
 8009504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009508:	6593      	str	r3, [r2, #88]	@ 0x58
 800950a:	e001      	b.n	8009510 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800950c:	f7fa fb20 	bl	8003b50 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	2100      	movs	r1, #0
 8009514:	2043      	movs	r0, #67	@ 0x43
 8009516:	f7f7 ffde 	bl	80014d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800951a:	2043      	movs	r0, #67	@ 0x43
 800951c:	f7f7 fff7 	bl	800150e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009520:	bf00      	nop
 8009522:	37b0      	adds	r7, #176	@ 0xb0
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	40021000 	.word	0x40021000

0800952c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fb4d 	bl	8007be2 <USBD_LL_SetupStage>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	4619      	mov	r1, r3
 800957a:	f7fe fb87 	bl	8007c8c <USBD_LL_DataOutStage>
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	3320      	adds	r3, #32
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	4619      	mov	r1, r3
 80095ae:	f7fe fc20 	bl	8007df2 <USBD_LL_DataInStage>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fd5a 	bl	8008082 <USBD_LL_SOF>
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	79db      	ldrb	r3, [r3, #7]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d001      	beq.n	80095ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095ea:	f7f7 fb4b 	bl	8000c84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095f4:	7bfa      	ldrb	r2, [r7, #15]
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe fcfe 	bl	8007ffa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe fca6 	bl	8007f56 <USBD_LL_Reset>
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	6812      	ldr	r2, [r2, #0]
 800962a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fced 	bl	800801a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7adb      	ldrb	r3, [r3, #11]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009648:	4b04      	ldr	r3, [pc, #16]	@ (800965c <HAL_PCD_SuspendCallback+0x48>)
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	4a03      	ldr	r2, [pc, #12]	@ (800965c <HAL_PCD_SuspendCallback+0x48>)
 800964e:	f043 0306 	orr.w	r3, r3, #6
 8009652:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	e000ed00 	.word	0xe000ed00

08009660 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	6812      	ldr	r2, [r2, #0]
 8009676:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800967a:	f023 0301 	bic.w	r3, r3, #1
 800967e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7adb      	ldrb	r3, [r3, #11]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d007      	beq.n	8009698 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009688:	4b08      	ldr	r3, [pc, #32]	@ (80096ac <HAL_PCD_ResumeCallback+0x4c>)
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	4a07      	ldr	r2, [pc, #28]	@ (80096ac <HAL_PCD_ResumeCallback+0x4c>)
 800968e:	f023 0306 	bic.w	r3, r3, #6
 8009692:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009694:	f000 fae2 	bl	8009c5c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fcd7 	bl	8008052 <USBD_LL_Resume>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	e000ed00 	.word	0xe000ed00

080096b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096c2:	78fa      	ldrb	r2, [r7, #3]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe fd2d 	bl	8008126 <USBD_LL_IsoOUTIncomplete>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	460b      	mov	r3, r1
 80096de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fe fce9 	bl	80080c2 <USBD_LL_IsoINIncomplete>
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fd3f 	bl	800818a <USBD_LL_DevConnected>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe fd3c 	bl	80081a0 <USBD_LL_DevDisconnected>
}
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d13c      	bne.n	80097ba <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009740:	4a20      	ldr	r2, [pc, #128]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a1e      	ldr	r2, [pc, #120]	@ (80097c4 <USBD_LL_Init+0x94>)
 800974c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009750:	4b1c      	ldr	r3, [pc, #112]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009752:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009758:	4b1a      	ldr	r3, [pc, #104]	@ (80097c4 <USBD_LL_Init+0x94>)
 800975a:	2206      	movs	r2, #6
 800975c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800975e:	4b19      	ldr	r3, [pc, #100]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009760:	2202      	movs	r2, #2
 8009762:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009764:	4b17      	ldr	r3, [pc, #92]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009766:	2202      	movs	r2, #2
 8009768:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800976a:	4b16      	ldr	r3, [pc, #88]	@ (80097c4 <USBD_LL_Init+0x94>)
 800976c:	2200      	movs	r2, #0
 800976e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009770:	4b14      	ldr	r3, [pc, #80]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009772:	2200      	movs	r2, #0
 8009774:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009776:	4b13      	ldr	r3, [pc, #76]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009778:	2200      	movs	r2, #0
 800977a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800977c:	4b11      	ldr	r3, [pc, #68]	@ (80097c4 <USBD_LL_Init+0x94>)
 800977e:	2200      	movs	r2, #0
 8009780:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009782:	4b10      	ldr	r3, [pc, #64]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009784:	2200      	movs	r2, #0
 8009786:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009788:	4b0e      	ldr	r3, [pc, #56]	@ (80097c4 <USBD_LL_Init+0x94>)
 800978a:	2200      	movs	r2, #0
 800978c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800978e:	480d      	ldr	r0, [pc, #52]	@ (80097c4 <USBD_LL_Init+0x94>)
 8009790:	f7f8 ffeb 	bl	800276a <HAL_PCD_Init>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800979a:	f7f7 fa73 	bl	8000c84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800979e:	2180      	movs	r1, #128	@ 0x80
 80097a0:	4808      	ldr	r0, [pc, #32]	@ (80097c4 <USBD_LL_Init+0x94>)
 80097a2:	f7fa f92c 	bl	80039fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097a6:	2240      	movs	r2, #64	@ 0x40
 80097a8:	2100      	movs	r1, #0
 80097aa:	4806      	ldr	r0, [pc, #24]	@ (80097c4 <USBD_LL_Init+0x94>)
 80097ac:	f7fa f8e0 	bl	8003970 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097b0:	2280      	movs	r2, #128	@ 0x80
 80097b2:	2101      	movs	r1, #1
 80097b4:	4803      	ldr	r0, [pc, #12]	@ (80097c4 <USBD_LL_Init+0x94>)
 80097b6:	f7fa f8db 	bl	8003970 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000898 	.word	0x20000898

080097c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d0:	2300      	movs	r3, #0
 80097d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f9 f8d2 	bl	8002988 <HAL_PCD_Start>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	d816      	bhi.n	800981c <USBD_LL_Start+0x54>
 80097ee:	a201      	add	r2, pc, #4	@ (adr r2, 80097f4 <USBD_LL_Start+0x2c>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009805 	.word	0x08009805
 80097f8:	0800980b 	.word	0x0800980b
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009817 	.word	0x08009817
    case HAL_OK :
      usb_status = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e00b      	b.n	8009822 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800980a:	2303      	movs	r3, #3
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	e008      	b.n	8009822 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	e005      	b.n	8009822 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	73fb      	strb	r3, [r7, #15]
    break;
 800981a:	e002      	b.n	8009822 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	bf00      	nop
  }
  return usb_status;
 8009822:	7bfb      	ldrb	r3, [r7, #15]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	4608      	mov	r0, r1
 8009836:	4611      	mov	r1, r2
 8009838:	461a      	mov	r2, r3
 800983a:	4603      	mov	r3, r0
 800983c:	70fb      	strb	r3, [r7, #3]
 800983e:	460b      	mov	r3, r1
 8009840:	70bb      	strb	r3, [r7, #2]
 8009842:	4613      	mov	r3, r2
 8009844:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009854:	78bb      	ldrb	r3, [r7, #2]
 8009856:	883a      	ldrh	r2, [r7, #0]
 8009858:	78f9      	ldrb	r1, [r7, #3]
 800985a:	f7f9 fd7e 	bl	800335a <HAL_PCD_EP_Open>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	2b03      	cmp	r3, #3
 8009866:	d817      	bhi.n	8009898 <USBD_LL_OpenEP+0x6c>
 8009868:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <USBD_LL_OpenEP+0x44>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	08009881 	.word	0x08009881
 8009874:	08009887 	.word	0x08009887
 8009878:	0800988d 	.word	0x0800988d
 800987c:	08009893 	.word	0x08009893
    case HAL_OK :
      usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
    break;
 8009884:	e00b      	b.n	800989e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009886:	2303      	movs	r3, #3
 8009888:	73fb      	strb	r3, [r7, #15]
    break;
 800988a:	e008      	b.n	800989e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800988c:	2301      	movs	r3, #1
 800988e:	73fb      	strb	r3, [r7, #15]
    break;
 8009890:	e005      	b.n	800989e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009892:	2303      	movs	r3, #3
 8009894:	73fb      	strb	r3, [r7, #15]
    break;
 8009896:	e002      	b.n	800989e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009898:	2303      	movs	r3, #3
 800989a:	73fb      	strb	r3, [r7, #15]
    break;
 800989c:	bf00      	nop
  }
  return usb_status;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098c2:	78fa      	ldrb	r2, [r7, #3]
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7f9 fdb1 	bl	800342e <HAL_PCD_EP_Close>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80098d0:	7bbb      	ldrb	r3, [r7, #14]
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d816      	bhi.n	8009904 <USBD_LL_CloseEP+0x5c>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <USBD_LL_CloseEP+0x34>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098ed 	.word	0x080098ed
 80098e0:	080098f3 	.word	0x080098f3
 80098e4:	080098f9 	.word	0x080098f9
 80098e8:	080098ff 	.word	0x080098ff
    case HAL_OK :
      usb_status = USBD_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
    break;
 80098f0:	e00b      	b.n	800990a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098f2:	2303      	movs	r3, #3
 80098f4:	73fb      	strb	r3, [r7, #15]
    break;
 80098f6:	e008      	b.n	800990a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
    break;
 80098fc:	e005      	b.n	800990a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098fe:	2303      	movs	r3, #3
 8009900:	73fb      	strb	r3, [r7, #15]
    break;
 8009902:	e002      	b.n	800990a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	bf00      	nop
  }
  return usb_status;
 800990a:	7bfb      	ldrb	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7f9 fe28 	bl	8003588 <HAL_PCD_EP_SetStall>
 8009938:	4603      	mov	r3, r0
 800993a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	2b03      	cmp	r3, #3
 8009940:	d816      	bhi.n	8009970 <USBD_LL_StallEP+0x5c>
 8009942:	a201      	add	r2, pc, #4	@ (adr r2, 8009948 <USBD_LL_StallEP+0x34>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	08009959 	.word	0x08009959
 800994c:	0800995f 	.word	0x0800995f
 8009950:	08009965 	.word	0x08009965
 8009954:	0800996b 	.word	0x0800996b
    case HAL_OK :
      usb_status = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
    break;
 800995c:	e00b      	b.n	8009976 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800995e:	2303      	movs	r3, #3
 8009960:	73fb      	strb	r3, [r7, #15]
    break;
 8009962:	e008      	b.n	8009976 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009964:	2301      	movs	r3, #1
 8009966:	73fb      	strb	r3, [r7, #15]
    break;
 8009968:	e005      	b.n	8009976 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800996a:	2303      	movs	r3, #3
 800996c:	73fb      	strb	r3, [r7, #15]
    break;
 800996e:	e002      	b.n	8009976 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009970:	2303      	movs	r3, #3
 8009972:	73fb      	strb	r3, [r7, #15]
    break;
 8009974:	bf00      	nop
  }
  return usb_status;
 8009976:	7bfb      	ldrb	r3, [r7, #15]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800999a:	78fa      	ldrb	r2, [r7, #3]
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f7f9 fe54 	bl	800364c <HAL_PCD_EP_ClrStall>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80099a8:	7bbb      	ldrb	r3, [r7, #14]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d816      	bhi.n	80099dc <USBD_LL_ClearStallEP+0x5c>
 80099ae:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <USBD_LL_ClearStallEP+0x34>)
 80099b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b4:	080099c5 	.word	0x080099c5
 80099b8:	080099cb 	.word	0x080099cb
 80099bc:	080099d1 	.word	0x080099d1
 80099c0:	080099d7 	.word	0x080099d7
    case HAL_OK :
      usb_status = USBD_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
    break;
 80099c8:	e00b      	b.n	80099e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099ca:	2303      	movs	r3, #3
 80099cc:	73fb      	strb	r3, [r7, #15]
    break;
 80099ce:	e008      	b.n	80099e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099d0:	2301      	movs	r3, #1
 80099d2:	73fb      	strb	r3, [r7, #15]
    break;
 80099d4:	e005      	b.n	80099e2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099d6:	2303      	movs	r3, #3
 80099d8:	73fb      	strb	r3, [r7, #15]
    break;
 80099da:	e002      	b.n	80099e2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80099dc:	2303      	movs	r3, #3
 80099de:	73fb      	strb	r3, [r7, #15]
    break;
 80099e0:	bf00      	nop
  }
  return usb_status;
 80099e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	da0b      	bge.n	8009a20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	4613      	mov	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	4413      	add	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	3316      	adds	r3, #22
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	e00b      	b.n	8009a38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a26:	68f9      	ldr	r1, [r7, #12]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009a36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a5e:	78fa      	ldrb	r2, [r7, #3]
 8009a60:	4611      	mov	r1, r2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7f9 fc55 	bl	8003312 <HAL_PCD_SetAddress>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d816      	bhi.n	8009aa0 <USBD_LL_SetUSBAddress+0x5c>
 8009a72:	a201      	add	r2, pc, #4	@ (adr r2, 8009a78 <USBD_LL_SetUSBAddress+0x34>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009a8f 	.word	0x08009a8f
 8009a80:	08009a95 	.word	0x08009a95
 8009a84:	08009a9b 	.word	0x08009a9b
    case HAL_OK :
      usb_status = USBD_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8c:	e00b      	b.n	8009aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	73fb      	strb	r3, [r7, #15]
    break;
 8009a92:	e008      	b.n	8009aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a94:	2301      	movs	r3, #1
 8009a96:	73fb      	strb	r3, [r7, #15]
    break;
 8009a98:	e005      	b.n	8009aa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9e:	e002      	b.n	8009aa6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa4:	bf00      	nop
  }
  return usb_status;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	460b      	mov	r3, r1
 8009abe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009ace:	7af9      	ldrb	r1, [r7, #11]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	f7f9 fd27 	bl	8003526 <HAL_PCD_EP_Transmit>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009adc:	7dbb      	ldrb	r3, [r7, #22]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d816      	bhi.n	8009b10 <USBD_LL_Transmit+0x60>
 8009ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae8 <USBD_LL_Transmit+0x38>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009af9 	.word	0x08009af9
 8009aec:	08009aff 	.word	0x08009aff
 8009af0:	08009b05 	.word	0x08009b05
 8009af4:	08009b0b 	.word	0x08009b0b
    case HAL_OK :
      usb_status = USBD_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	75fb      	strb	r3, [r7, #23]
    break;
 8009afc:	e00b      	b.n	8009b16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009afe:	2303      	movs	r3, #3
 8009b00:	75fb      	strb	r3, [r7, #23]
    break;
 8009b02:	e008      	b.n	8009b16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
    break;
 8009b08:	e005      	b.n	8009b16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	75fb      	strb	r3, [r7, #23]
    break;
 8009b0e:	e002      	b.n	8009b16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009b10:	2303      	movs	r3, #3
 8009b12:	75fb      	strb	r3, [r7, #23]
    break;
 8009b14:	bf00      	nop
  }
  return usb_status;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	603b      	str	r3, [r7, #0]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b3e:	7af9      	ldrb	r1, [r7, #11]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	f7f9 fcbd 	bl	80034c2 <HAL_PCD_EP_Receive>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009b4c:	7dbb      	ldrb	r3, [r7, #22]
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d816      	bhi.n	8009b80 <USBD_LL_PrepareReceive+0x60>
 8009b52:	a201      	add	r2, pc, #4	@ (adr r2, 8009b58 <USBD_LL_PrepareReceive+0x38>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009b69 	.word	0x08009b69
 8009b5c:	08009b6f 	.word	0x08009b6f
 8009b60:	08009b75 	.word	0x08009b75
 8009b64:	08009b7b 	.word	0x08009b7b
    case HAL_OK :
      usb_status = USBD_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	75fb      	strb	r3, [r7, #23]
    break;
 8009b6c:	e00b      	b.n	8009b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	75fb      	strb	r3, [r7, #23]
    break;
 8009b72:	e008      	b.n	8009b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b74:	2301      	movs	r3, #1
 8009b76:	75fb      	strb	r3, [r7, #23]
    break;
 8009b78:	e005      	b.n	8009b86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	75fb      	strb	r3, [r7, #23]
    break;
 8009b7e:	e002      	b.n	8009b86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009b80:	2303      	movs	r3, #3
 8009b82:	75fb      	strb	r3, [r7, #23]
    break;
 8009b84:	bf00      	nop
  }
  return usb_status;
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <HAL_PCDEx_LPM_Callback+0x18>
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d01f      	beq.n	8009be6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009ba6:	e03b      	b.n	8009c20 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7adb      	ldrb	r3, [r3, #11]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d007      	beq.n	8009bc0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009bb0:	f000 f854 	bl	8009c5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c28 <HAL_PCDEx_LPM_Callback+0x98>)
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c28 <HAL_PCDEx_LPM_Callback+0x98>)
 8009bba:	f023 0306 	bic.w	r3, r3, #6
 8009bbe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	6812      	ldr	r2, [r2, #0]
 8009bce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bd2:	f023 0301 	bic.w	r3, r3, #1
 8009bd6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fa37 	bl	8008052 <USBD_LL_Resume>
    break;
 8009be4:	e01c      	b.n	8009c20 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe fa08 	bl	800801a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	7adb      	ldrb	r3, [r3, #11]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d005      	beq.n	8009c1e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c12:	4b05      	ldr	r3, [pc, #20]	@ (8009c28 <HAL_PCDEx_LPM_Callback+0x98>)
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	4a04      	ldr	r2, [pc, #16]	@ (8009c28 <HAL_PCDEx_LPM_Callback+0x98>)
 8009c18:	f043 0306 	orr.w	r3, r3, #6
 8009c1c:	6113      	str	r3, [r2, #16]
    break;
 8009c1e:	bf00      	nop
}
 8009c20:	bf00      	nop
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	e000ed00 	.word	0xe000ed00

08009c2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009c34:	4b03      	ldr	r3, [pc, #12]	@ (8009c44 <USBD_static_malloc+0x18>)
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000d7c 	.word	0x20000d7c

08009c48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]

}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009c60:	f7f6 fcc0 	bl	80005e4 <SystemClock_Config>
}
 8009c64:	bf00      	nop
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <memset>:
 8009c68:	4402      	add	r2, r0
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d100      	bne.n	8009c72 <memset+0xa>
 8009c70:	4770      	bx	lr
 8009c72:	f803 1b01 	strb.w	r1, [r3], #1
 8009c76:	e7f9      	b.n	8009c6c <memset+0x4>

08009c78 <__libc_init_array>:
 8009c78:	b570      	push	{r4, r5, r6, lr}
 8009c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8009cb0 <__libc_init_array+0x38>)
 8009c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8009cb4 <__libc_init_array+0x3c>)
 8009c7e:	1b64      	subs	r4, r4, r5
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	2600      	movs	r6, #0
 8009c84:	42a6      	cmp	r6, r4
 8009c86:	d109      	bne.n	8009c9c <__libc_init_array+0x24>
 8009c88:	4d0b      	ldr	r5, [pc, #44]	@ (8009cb8 <__libc_init_array+0x40>)
 8009c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8009cbc <__libc_init_array+0x44>)
 8009c8c:	f000 f818 	bl	8009cc0 <_init>
 8009c90:	1b64      	subs	r4, r4, r5
 8009c92:	10a4      	asrs	r4, r4, #2
 8009c94:	2600      	movs	r6, #0
 8009c96:	42a6      	cmp	r6, r4
 8009c98:	d105      	bne.n	8009ca6 <__libc_init_array+0x2e>
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca0:	4798      	blx	r3
 8009ca2:	3601      	adds	r6, #1
 8009ca4:	e7ee      	b.n	8009c84 <__libc_init_array+0xc>
 8009ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009caa:	4798      	blx	r3
 8009cac:	3601      	adds	r6, #1
 8009cae:	e7f2      	b.n	8009c96 <__libc_init_array+0x1e>
 8009cb0:	08009d88 	.word	0x08009d88
 8009cb4:	08009d88 	.word	0x08009d88
 8009cb8:	08009d88 	.word	0x08009d88
 8009cbc:	08009d8c 	.word	0x08009d8c

08009cc0 <_init>:
 8009cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc2:	bf00      	nop
 8009cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc6:	bc08      	pop	{r3}
 8009cc8:	469e      	mov	lr, r3
 8009cca:	4770      	bx	lr

08009ccc <_fini>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr
