
Practica2Fase3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ba0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d7c  08004d7c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d7c  08004d7c  00005d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d84  08004d84  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d84  08004d84  00005d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d88  08004d88  00005d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004d8c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000077c  2000000c  08004d98  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  08004d98  00006788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001752a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6c  00000000  00000000  0001d566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  000204d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e9  00000000  00000000  00021aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002751e  00000000  00000000  00022b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d6c  00000000  00000000  0004a0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd25  00000000  00000000  00063e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153b38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  00153b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001598b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d10 	.word	0x08004d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004d10 	.word	0x08004d10

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    // Pulse clock
    //LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c6:	f001 fcd9 	bl	8001e7c <HAL_GPIO_WritePin>
    //LL_mDelay(1);
    HAL_Delay(1);
 80004ca:	2001      	movs	r0, #1
 80004cc:	f001 f8ea 	bl	80016a4 <HAL_Delay>
    //LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004da:	f001 fccf 	bl	8001e7c <HAL_GPIO_WritePin>

    //LL_mDelay(1);
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <lcd_reset>:

void lcd_reset(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    //LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
    HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	481a      	ldr	r0, [pc, #104]	@ (8000558 <lcd_reset+0x74>)
 80004ee:	f001 fcc5 	bl	8001e7c <HAL_GPIO_WritePin>

    //LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
    HAL_GPIO_WritePin(LCD_PORT7,  LCD_7, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f001 fcbf 	bl	8001e7c <HAL_GPIO_WritePin>

    //LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
    HAL_GPIO_WritePin(LCD_PORT4,  LCD_4, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000506:	f001 fcb9 	bl	8001e7c <HAL_GPIO_WritePin>

    //LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
    HAL_GPIO_WritePin(LCD_PORT56,  LCD_5 | LCD_6, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2112      	movs	r1, #18
 800050e:	4812      	ldr	r0, [pc, #72]	@ (8000558 <lcd_reset+0x74>)
 8000510:	f001 fcb4 	bl	8001e7c <HAL_GPIO_WritePin>

    //LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK);
    HAL_GPIO_WritePin(CLOCK_PORT,  LCD_CLOCK, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051e:	f001 fcad 	bl	8001e7c <HAL_GPIO_WritePin>
    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).

    //LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	2108      	movs	r1, #8
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f001 fca7 	bl	8001e7c <HAL_GPIO_WritePin>

    //LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
    HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4809      	ldr	r0, [pc, #36]	@ (8000558 <lcd_reset+0x74>)
 8000534:	f001 fca2 	bl	8001e7c <HAL_GPIO_WritePin>

    lcd_clock();
 8000538:	f7ff ffbe 	bl	80004b8 <lcd_clock>
    lcd_clock();
 800053c:	f7ff ffbc 	bl	80004b8 <lcd_clock>
    lcd_clock();
 8000540:	f7ff ffba 	bl	80004b8 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)

    //LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2108      	movs	r1, #8
 8000548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054c:	f001 fc96 	bl	8001e7c <HAL_GPIO_WritePin>

    lcd_clock();
 8000550:	f7ff ffb2 	bl	80004b8 <lcd_clock>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000400 	.word	0x48000400

0800055c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	091b      	lsrs	r3, r3, #4
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	d006      	beq.n	8000588 <lcd_write+0x2c>
        //LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f001 fc7b 	bl	8001e7c <HAL_GPIO_WritePin>
 8000586:	e005      	b.n	8000594 <lcd_write+0x38>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f001 fc74 	bl	8001e7c <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	095b      	lsrs	r3, r3, #5
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d005      	beq.n	80005ae <lcd_write+0x52>
        //LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	4847      	ldr	r0, [pc, #284]	@ (80006c4 <lcd_write+0x168>)
 80005a8:	f001 fc68 	bl	8001e7c <HAL_GPIO_WritePin>
 80005ac:	e004      	b.n	80005b8 <lcd_write+0x5c>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	4844      	ldr	r0, [pc, #272]	@ (80006c4 <lcd_write+0x168>)
 80005b4:	f001 fc62 	bl	8001e7c <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	099b      	lsrs	r3, r3, #6
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <lcd_write+0x76>
        //LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	483e      	ldr	r0, [pc, #248]	@ (80006c4 <lcd_write+0x168>)
 80005cc:	f001 fc56 	bl	8001e7c <HAL_GPIO_WritePin>
 80005d0:	e004      	b.n	80005dc <lcd_write+0x80>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	483b      	ldr	r0, [pc, #236]	@ (80006c4 <lcd_write+0x168>)
 80005d8:	f001 fc50 	bl	8001e7c <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	09db      	lsrs	r3, r3, #7
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <lcd_write+0x9c>
        //LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2110      	movs	r1, #16
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f001 fc43 	bl	8001e7c <HAL_GPIO_WritePin>
 80005f6:	e005      	b.n	8000604 <lcd_write+0xa8>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2110      	movs	r1, #16
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f001 fc3c 	bl	8001e7c <HAL_GPIO_WritePin>

    if(rs)
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <lcd_write+0xba>
        //LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	2104      	movs	r1, #4
 800060e:	482d      	ldr	r0, [pc, #180]	@ (80006c4 <lcd_write+0x168>)
 8000610:	f001 fc34 	bl	8001e7c <HAL_GPIO_WritePin>
 8000614:	e004      	b.n	8000620 <lcd_write+0xc4>
    else
        //LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	482a      	ldr	r0, [pc, #168]	@ (80006c4 <lcd_write+0x168>)
 800061c:	f001 fc2e 	bl	8001e7c <HAL_GPIO_WritePin>

    lcd_clock();
 8000620:	f7ff ff4a 	bl	80004b8 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d006      	beq.n	800063c <lcd_write+0xe0>
        //LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	2108      	movs	r1, #8
 8000632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000636:	f001 fc21 	bl	8001e7c <HAL_GPIO_WritePin>
 800063a:	e005      	b.n	8000648 <lcd_write+0xec>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	2108      	movs	r1, #8
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f001 fc1a 	bl	8001e7c <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	085b      	lsrs	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <lcd_write+0x106>
        //LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2110      	movs	r1, #16
 800065a:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <lcd_write+0x168>)
 800065c:	f001 fc0e 	bl	8001e7c <HAL_GPIO_WritePin>
 8000660:	e004      	b.n	800066c <lcd_write+0x110>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2110      	movs	r1, #16
 8000666:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <lcd_write+0x168>)
 8000668:	f001 fc08 	bl	8001e7c <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d005      	beq.n	8000686 <lcd_write+0x12a>
        //LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <lcd_write+0x168>)
 8000680:	f001 fbfc 	bl	8001e7c <HAL_GPIO_WritePin>
 8000684:	e004      	b.n	8000690 <lcd_write+0x134>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <lcd_write+0x168>)
 800068c:	f001 fbf6 	bl	8001e7c <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <lcd_write+0x150>
        //LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 fbe9 	bl	8001e7c <HAL_GPIO_WritePin>
 80006aa:	e005      	b.n	80006b8 <lcd_write+0x15c>
    else
        //LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f001 fbe2 	bl	8001e7c <HAL_GPIO_WritePin>

    lcd_clock();
 80006b8:	f7ff fefe 	bl	80004b8 <lcd_clock>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400

080006c8 <lcd_clear>:

void lcd_clear(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff44 	bl	800055c <lcd_write>
    _lcd_char = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <lcd_clear+0x1c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <lcd_clear+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000030 	.word	0x20000030
 80006e8:	20000031 	.word	0x20000031

080006ec <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b25a      	sxtb	r2, r3
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25a      	sxtb	r2, r3
 8000714:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff1b 	bl	800055c <lcd_write>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff0a 	bl	800055c <lcd_write>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <lcd_print>:
	lcd_write(0b01000000 | address, 0);
}


void lcd_print(char string[])
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	73fb      	strb	r3, [r7, #15]
 800075c:	e055      	b.n	800080a <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 800075e:	4b30      	ldr	r3, [pc, #192]	@ (8000820 <lcd_print+0xd0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d01c      	beq.n	80007a0 <lcd_print+0x50>
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b0a      	cmp	r3, #10
 8000770:	d116      	bne.n	80007a0 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <lcd_print+0xd4>)
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	4b2a      	ldr	r3, [pc, #168]	@ (8000820 <lcd_print+0xd0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d242      	bcs.n	8000804 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <lcd_print+0xd8>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <lcd_print+0xd4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	1c59      	adds	r1, r3, #1
 8000788:	b2c8      	uxtb	r0, r1
 800078a:	4926      	ldr	r1, [pc, #152]	@ (8000824 <lcd_print+0xd4>)
 800078c:	7008      	strb	r0, [r1, #0]
 800078e:	4413      	add	r3, r2
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ffcb 	bl	800072e <lcd_display_address>
                _lcd_char = 0;
 8000798:	4b24      	ldr	r3, [pc, #144]	@ (800082c <lcd_print+0xdc>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800079e:	e031      	b.n	8000804 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80007a0:	4b23      	ldr	r3, [pc, #140]	@ (8000830 <lcd_print+0xe0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d01b      	beq.n	80007e0 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <lcd_print+0xdc>)
 80007aa:	781a      	ldrb	r2, [r3, #0]
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <lcd_print+0xe0>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d115      	bne.n	80007e0 <lcd_print+0x90>
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <lcd_print+0xd4>)
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <lcd_print+0xd0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	429a      	cmp	r2, r3
 80007be:	d20f      	bcs.n	80007e0 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80007c0:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <lcd_print+0xd8>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <lcd_print+0xd4>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	1c59      	adds	r1, r3, #1
 80007ca:	b2c8      	uxtb	r0, r1
 80007cc:	4915      	ldr	r1, [pc, #84]	@ (8000824 <lcd_print+0xd4>)
 80007ce:	7008      	strb	r0, [r1, #0]
 80007d0:	4413      	add	r3, r2
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ffaa 	bl	800072e <lcd_display_address>
                    _lcd_char = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <lcd_print+0xdc>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff feb6 	bl	800055c <lcd_write>
            if(lcd_chars) _lcd_char++;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <lcd_print+0xe0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <lcd_print+0xb4>
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <lcd_print+0xdc>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <lcd_print+0xdc>)
 8000802:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	3301      	adds	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1a3      	bne.n	800075e <lcd_print+0xe>
        }
    }
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000029 	.word	0x20000029
 8000824:	20000031 	.word	0x20000031
 8000828:	2000002c 	.word	0x2000002c
 800082c:	20000030 	.word	0x20000030
 8000830:	20000028 	.word	0x20000028

08000834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f000 febf 	bl	80015ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 f826 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f000 f9f0 	bl	8000c24 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000844:	f000 f884 	bl	8000950 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000848:	f000 f8ba 	bl	80009c0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800084c:	f000 f8f8 	bl	8000a40 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000850:	f000 f91c 	bl	8000a8c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000854:	f000 f958 	bl	8000b08 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000858:	f000 f986 	bl	8000b68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800085c:	f000 f9b4 	bl	8000bc8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000860:	2201      	movs	r2, #1
 8000862:	2104      	movs	r1, #4
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f001 fb08 	bl	8001e7c <HAL_GPIO_WritePin>
  lcd_reset();
 800086c:	f7ff fe3a 	bl	80004e4 <lcd_reset>
  lcd_display_settings(1,0,0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff ff39 	bl	80006ec <lcd_display_settings>
  lcd_clear();
 800087a:	f7ff ff25 	bl	80006c8 <lcd_clear>
  lcd_print("Hola mundo");
 800087e:	4802      	ldr	r0, [pc, #8]	@ (8000888 <main+0x54>)
 8000880:	f7ff ff66 	bl	8000750 <lcd_print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <main+0x50>
 8000888:	08004d28 	.word	0x08004d28

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	@ 0x58
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2244      	movs	r2, #68	@ 0x44
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fa0b 	bl	8004cb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008b2:	f001 fda1 	bl	80023f8 <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008bc:	f000 fb36 	bl	8000f2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008c0:	f001 fd7c 	bl	80023bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008c4:	4b21      	ldr	r3, [pc, #132]	@ (800094c <SystemClock_Config+0xc0>)
 80008c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80008ca:	4a20      	ldr	r2, [pc, #128]	@ (800094c <SystemClock_Config+0xc0>)
 80008cc:	f023 0318 	bic.w	r3, r3, #24
 80008d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008d4:	2314      	movs	r3, #20
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008dc:	2301      	movs	r3, #1
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008e4:	2360      	movs	r3, #96	@ 0x60
 80008e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008f0:	2301      	movs	r3, #1
 80008f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008f4:	2328      	movs	r3, #40	@ 0x28
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f8:	2307      	movs	r3, #7
 80008fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fe97 	bl	800263c <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000914:	f000 fb0a 	bl	8000f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000918:	230f      	movs	r3, #15
 800091a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091c:	2303      	movs	r3, #3
 800091e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	2104      	movs	r1, #4
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fa5f 	bl	8002df4 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800093c:	f000 faf6 	bl	8000f2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000940:	f002 ff66 	bl	8003810 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000944:	bf00      	nop
 8000946:	3758      	adds	r7, #88	@ 0x58
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000954:	4b18      	ldr	r3, [pc, #96]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000956:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <MX_DFSDM1_Init+0x6c>)
 8000958:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 800095c:	2201      	movs	r2, #1
 800095e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000968:	2202      	movs	r2, #2
 800096a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 800097a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800097e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000986:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000988:	2204      	movs	r2, #4
 800098a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800098c:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 8000994:	2201      	movs	r2, #1
 8000996:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800099e:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	@ (80009b8 <MX_DFSDM1_Init+0x68>)
 80009a6:	f000 ffb3 	bl	8001910 <HAL_DFSDM_ChannelInit>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80009b0:	f000 fabc 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000034 	.word	0x20000034
 80009bc:	40016020 	.word	0x40016020

080009c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a38 <MX_I2C2_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <MX_I2C2_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <MX_I2C2_Init+0x74>)
 80009fc:	f001 fa79 	bl	8001ef2 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fa91 	bl	8000f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <MX_I2C2_Init+0x74>)
 8000a0e:	f001 fb0b 	bl	8002028 <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fa88 	bl	8000f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_I2C2_Init+0x74>)
 8000a20:	f001 fb4d 	bl	80020be <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fa7f 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000006c 	.word	0x2000006c
 8000a38:	40005800 	.word	0x40005800
 8000a3c:	10d19ce4 	.word	0x10d19ce4

08000a40 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <MX_QUADSPI_Init+0x48>)
 8000a48:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a58:	2210      	movs	r2, #16
 8000a5a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a5e:	2217      	movs	r2, #23
 8000a60:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_QUADSPI_Init+0x44>)
 8000a70:	f001 fd28 	bl	80024c4 <HAL_QSPI_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000a7a:	f000 fa57 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200000c0 	.word	0x200000c0
 8000a88:	a0001000 	.word	0xa0001000

08000a8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000a92:	4a1c      	ldr	r2, [pc, #112]	@ (8000b04 <MX_SPI3_Init+0x78>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000a98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000aa6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000aaa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aac:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000abe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ada:	2207      	movs	r2, #7
 8000adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_SPI3_Init+0x74>)
 8000aec:	f003 f872 	bl	8003bd4 <HAL_SPI_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000af6:	f000 fa19 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000104 	.word	0x20000104
 8000b04:	40003c00 	.word	0x40003c00

08000b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b0e:	4a15      	ldr	r2, [pc, #84]	@ (8000b64 <MX_USART1_UART_Init+0x5c>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b4c:	f003 f8e5 	bl	8003d1a <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f9e9 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000168 	.word	0x20000168
 8000b64:	40013800 	.word	0x40013800

08000b68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	@ (8000bc4 <MX_USART3_UART_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART3_UART_Init+0x58>)
 8000bac:	f003 f8b5 	bl	8003d1a <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f9b9 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001f0 	.word	0x200001f0
 8000bc4:	40004800 	.word	0x40004800

08000bc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	2206      	movs	r2, #6
 8000bd8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be2:	2202      	movs	r2, #2
 8000be4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0c:	f001 faa3 	bl	8002156 <HAL_PCD_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f989 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000278 	.word	0x20000278

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	4bb7      	ldr	r3, [pc, #732]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4ab6      	ldr	r2, [pc, #728]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4bb4      	ldr	r3, [pc, #720]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4bb1      	ldr	r3, [pc, #708]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4ab0      	ldr	r2, [pc, #704]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4bae      	ldr	r3, [pc, #696]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4bab      	ldr	r3, [pc, #684]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4aaa      	ldr	r2, [pc, #680]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4ba8      	ldr	r3, [pc, #672]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4ba5      	ldr	r3, [pc, #660]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	4aa4      	ldr	r2, [pc, #656]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8e:	4ba2      	ldr	r3, [pc, #648]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a9e      	ldr	r2, [pc, #632]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8000f18 <MX_GPIO_Init+0x2f4>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000cb8:	4898      	ldr	r0, [pc, #608]	@ (8000f1c <MX_GPIO_Init+0x2f8>)
 8000cba:	f001 f8df 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f248 111c 	movw	r1, #33052	@ 0x811c
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f001 f8d8 	bl	8001e7c <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8000cd2:	4893      	ldr	r0, [pc, #588]	@ (8000f20 <MX_GPIO_Init+0x2fc>)
 8000cd4:	f001 f8d2 	bl	8001e7c <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000cde:	4891      	ldr	r0, [pc, #580]	@ (8000f24 <MX_GPIO_Init+0x300>)
 8000ce0:	f001 f8cc 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cea:	488e      	ldr	r0, [pc, #568]	@ (8000f24 <MX_GPIO_Init+0x300>)
 8000cec:	f001 f8c6 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000cf6:	488c      	ldr	r0, [pc, #560]	@ (8000f28 <MX_GPIO_Init+0x304>)
 8000cf8:	f001 f8c0 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	4887      	ldr	r0, [pc, #540]	@ (8000f20 <MX_GPIO_Init+0x2fc>)
 8000d02:	f001 f8bb 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4884      	ldr	r0, [pc, #528]	@ (8000f1c <MX_GPIO_Init+0x2f8>)
 8000d0c:	f001 f8b6 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000d10:	f240 1315 	movw	r3, #277	@ 0x115
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	487c      	ldr	r0, [pc, #496]	@ (8000f1c <MX_GPIO_Init+0x2f8>)
 8000d2a:	f000 fefd 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000d2e:	236a      	movs	r3, #106	@ 0x6a
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4876      	ldr	r0, [pc, #472]	@ (8000f1c <MX_GPIO_Init+0x2f8>)
 8000d44:	f000 fef0 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4872      	ldr	r0, [pc, #456]	@ (8000f28 <MX_GPIO_Init+0x304>)
 8000d60:	f000 fee2 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000d64:	233f      	movs	r3, #63	@ 0x3f
 8000d66:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	486c      	ldr	r0, [pc, #432]	@ (8000f28 <MX_GPIO_Init+0x304>)
 8000d78:	f000 fed6 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f000 fec5 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000d9e:	f248 131c 	movw	r3, #33052	@ 0x811c
 8000da2:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dba:	f000 feb5 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000dbe:	23e0      	movs	r3, #224	@ 0xe0
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dce:	2305      	movs	r3, #5
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ddc:	f000 fea4 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	484a      	ldr	r0, [pc, #296]	@ (8000f20 <MX_GPIO_Init+0x2fc>)
 8000df6:	f000 fe97 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000dfa:	f24f 0336 	movw	r3, #61494	@ 0xf036
 8000dfe:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4843      	ldr	r0, [pc, #268]	@ (8000f20 <MX_GPIO_Init+0x2fc>)
 8000e14:	f000 fe88 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000e18:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000e1c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	483d      	ldr	r0, [pc, #244]	@ (8000f24 <MX_GPIO_Init+0x300>)
 8000e30:	f000 fe7a 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000e34:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4835      	ldr	r0, [pc, #212]	@ (8000f24 <MX_GPIO_Init+0x300>)
 8000e4e:	f000 fe6b 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000e52:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482f      	ldr	r0, [pc, #188]	@ (8000f28 <MX_GPIO_Init+0x304>)
 8000e6c:	f000 fe5c 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000e70:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4828      	ldr	r0, [pc, #160]	@ (8000f28 <MX_GPIO_Init+0x304>)
 8000e88:	f000 fe4e 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	481f      	ldr	r0, [pc, #124]	@ (8000f24 <MX_GPIO_Init+0x300>)
 8000ea8:	f000 fe3e 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000eac:	2378      	movs	r3, #120	@ 0x78
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4817      	ldr	r0, [pc, #92]	@ (8000f24 <MX_GPIO_Init+0x300>)
 8000ec8:	f000 fe2e 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ecc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed2:	2312      	movs	r3, #18
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <MX_GPIO_Init+0x2fc>)
 8000eea:	f000 fe1d 	bl	8001b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2017      	movs	r0, #23
 8000ef4:	f000 fcd5 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ef8:	2017      	movs	r0, #23
 8000efa:	f000 fcee 	bl	80018da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2028      	movs	r0, #40	@ 0x28
 8000f04:	f000 fccd 	bl	80018a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f08:	2028      	movs	r0, #40	@ 0x28
 8000f0a:	f000 fce6 	bl	80018da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48001000 	.word	0x48001000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000c00 	.word	0x48000c00
 8000f28:	48000800 	.word	0x48000800

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
}
 8000f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <Error_Handler+0x8>

08000f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <HAL_MspInit+0x44>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	4a0e      	ldr	r2, [pc, #56]	@ (8000f7c <HAL_MspInit+0x44>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <HAL_MspInit+0x44>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <HAL_MspInit+0x44>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <HAL_MspInit+0x44>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_MspInit+0x44>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0ac      	sub	sp, #176	@ 0xb0
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2288      	movs	r2, #136	@ 0x88
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fe88 	bl	8004cb6 <memset>
  if(DFSDM1_Init == 0)
 8000fa6:	4b25      	ldr	r3, [pc, #148]	@ (800103c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d142      	bne.n	8001034 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 f93c 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fca:	f7ff ffaf 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fea:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ffe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001002:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001018:	2306      	movs	r3, #6
 800101a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001026:	f000 fd7f 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a02      	ldr	r2, [pc, #8]	@ (800103c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001032:	6013      	str	r3, [r2, #0]
  }

}
 8001034:	bf00      	nop
 8001036:	37b0      	adds	r7, #176	@ 0xb0
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000075c 	.word	0x2000075c
 8001040:	40021000 	.word	0x40021000
 8001044:	48001000 	.word	0x48001000

08001048 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b0ac      	sub	sp, #176	@ 0xb0
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2288      	movs	r2, #136	@ 0x88
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f003 fe24 	bl	8004cb6 <memset>
  if(hi2c->Instance==I2C2)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a21      	ldr	r2, [pc, #132]	@ (80010f8 <HAL_I2C_MspInit+0xb0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d13b      	bne.n	80010f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800107c:	2300      	movs	r3, #0
 800107e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4618      	mov	r0, r3
 8001086:	f002 f8d9 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001090:	f7ff ff4c 	bl	8000f2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <HAL_I2C_MspInit+0xb4>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001098:	4a18      	ldr	r2, [pc, #96]	@ (80010fc <HAL_I2C_MspInit+0xb4>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_I2C_MspInit+0xb4>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c0:	2303      	movs	r3, #3
 80010c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010c6:	2304      	movs	r3, #4
 80010c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	@ (8001100 <HAL_I2C_MspInit+0xb8>)
 80010d4:	f000 fd28 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <HAL_I2C_MspInit+0xb4>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <HAL_I2C_MspInit+0xb4>)
 80010de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_I2C_MspInit+0xb4>)
 80010e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80010f0:	bf00      	nop
 80010f2:	37b0      	adds	r7, #176	@ 0xb0
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40005800 	.word	0x40005800
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400

08001104 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <HAL_QSPI_MspInit+0x7c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d128      	bne.n	8001178 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_QSPI_MspInit+0x80>)
 8001128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <HAL_QSPI_MspInit+0x80>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001130:	6513      	str	r3, [r2, #80]	@ 0x50
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <HAL_QSPI_MspInit+0x80>)
 8001134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_QSPI_MspInit+0x80>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <HAL_QSPI_MspInit+0x80>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_QSPI_MspInit+0x80>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001156:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800115a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001168:	230a      	movs	r3, #10
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_QSPI_MspInit+0x84>)
 8001174:	f000 fcd8 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	@ 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	a0001000 	.word	0xa0001000
 8001184:	40021000 	.word	0x40021000
 8001188:	48001000 	.word	0x48001000

0800118c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <HAL_SPI_MspInit+0x7c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d128      	bne.n	8001200 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_SPI_MspInit+0x80>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b2:	4a16      	ldr	r2, [pc, #88]	@ (800120c <HAL_SPI_MspInit+0x80>)
 80011b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_SPI_MspInit+0x80>)
 80011bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_SPI_MspInit+0x80>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_SPI_MspInit+0x80>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_SPI_MspInit+0x80>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011de:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011f0:	2306      	movs	r3, #6
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	@ (8001210 <HAL_SPI_MspInit+0x84>)
 80011fc:	f000 fc94 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	@ 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40003c00 	.word	0x40003c00
 800120c:	40021000 	.word	0x40021000
 8001210:	48000800 	.word	0x48000800

08001214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0ae      	sub	sp, #184	@ 0xb8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	2288      	movs	r2, #136	@ 0x88
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fd3e 	bl	8004cb6 <memset>
  if(huart->Instance==USART1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <HAL_UART_MspInit+0x134>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d13b      	bne.n	80012bc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001244:	2301      	movs	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001248:	2300      	movs	r3, #0
 800124a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fff3 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800125c:	f7ff fe66 	bl	8000f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001260:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <HAL_UART_MspInit+0x138>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001264:	4a39      	ldr	r2, [pc, #228]	@ (800134c <HAL_UART_MspInit+0x138>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126a:	6613      	str	r3, [r2, #96]	@ 0x60
 800126c:	4b37      	ldr	r3, [pc, #220]	@ (800134c <HAL_UART_MspInit+0x138>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b34      	ldr	r3, [pc, #208]	@ (800134c <HAL_UART_MspInit+0x138>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a33      	ldr	r2, [pc, #204]	@ (800134c <HAL_UART_MspInit+0x138>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b31      	ldr	r3, [pc, #196]	@ (800134c <HAL_UART_MspInit+0x138>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001290:	23c0      	movs	r3, #192	@ 0xc0
 8001292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a8:	2307      	movs	r3, #7
 80012aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4826      	ldr	r0, [pc, #152]	@ (8001350 <HAL_UART_MspInit+0x13c>)
 80012b6:	f000 fc37 	bl	8001b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ba:	e040      	b.n	800133e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <HAL_UART_MspInit+0x140>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d13b      	bne.n	800133e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c6:	2304      	movs	r3, #4
 80012c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 ffb2 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80012de:	f7ff fe25 	bl	8000f2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_UART_MspInit+0x138>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_UART_MspInit+0x138>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_UART_MspInit+0x138>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_UART_MspInit+0x138>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <HAL_UART_MspInit+0x138>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UART_MspInit+0x138>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001312:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800132c:	2307      	movs	r3, #7
 800132e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001332:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	@ (8001358 <HAL_UART_MspInit+0x144>)
 800133a:	f000 fbf5 	bl	8001b28 <HAL_GPIO_Init>
}
 800133e:	bf00      	nop
 8001340:	37b8      	adds	r7, #184	@ 0xb8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40013800 	.word	0x40013800
 800134c:	40021000 	.word	0x40021000
 8001350:	48000400 	.word	0x48000400
 8001354:	40004800 	.word	0x40004800
 8001358:	48000c00 	.word	0x48000c00

0800135c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0ac      	sub	sp, #176	@ 0xb0
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2288      	movs	r2, #136	@ 0x88
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f003 fc9a 	bl	8004cb6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800138a:	d17c      	bne.n	8001486 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800138c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001390:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001392:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013a2:	2318      	movs	r3, #24
 80013a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013a6:	2307      	movs	r3, #7
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80013b2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 ff3d 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80013c8:	f7ff fdb0 	bl	8000f2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f000 fb91 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001406:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800140a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001420:	230a      	movs	r3, #10
 8001422:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800142a:	4619      	mov	r1, r3
 800142c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001430:	f000 fb7a 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001434:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 8001436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001438:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 800143a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800143e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 8001442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d114      	bne.n	8001482 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001462:	6593      	str	r3, [r2, #88]	@ 0x58
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001470:	f001 f818 	bl	80024a4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <HAL_PCD_MspInit+0x134>)
 800147a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001480:	e001      	b.n	8001486 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001482:	f001 f80f 	bl	80024a4 <HAL_PWREx_EnableVddUSB>
}
 8001486:	bf00      	nop
 8001488:	37b0      	adds	r7, #176	@ 0xb0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <NMI_Handler+0x4>

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <MemManage_Handler+0x4>

080014ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <UsageFault_Handler+0x4>

080014bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ea:	f000 f8bb 	bl	8001664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80014f6:	2020      	movs	r0, #32
 80014f8:	f000 fcd8 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80014fc:	2040      	movs	r0, #64	@ 0x40
 80014fe:	f000 fcd5 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001502:	2080      	movs	r0, #128	@ 0x80
 8001504:	f000 fcd2 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001508:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800150c:	f000 fcce 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001518:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800151c:	f000 fcc6 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001520:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001524:	f000 fcc2 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001528:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800152c:	f000 fcbe 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001530:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001534:	f000 fcba 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001538:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800153c:	f000 fcb6 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff ffea 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	@ (80015a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	@ (80015a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <LoopForever+0xe>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	@ (80015b4 <LoopForever+0x16>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f003 fb97 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff f94b 	bl	8000834 <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015ac:	08004d8c 	.word	0x08004d8c
  ldr r2, =_sbss
 80015b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015b4:	20000788 	.word	0x20000788

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>

080015ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 f961 	bl	800188c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ca:	2000      	movs	r0, #0
 80015cc:	f000 f80e 	bl	80015ec <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	71fb      	strb	r3, [r7, #7]
 80015da:	e001      	b.n	80015e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015dc:	f7ff fcac 	bl	8000f38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015e0:	79fb      	ldrb	r3, [r7, #7]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <HAL_InitTick+0x6c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d023      	beq.n	8001648 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_InitTick+0x70>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_InitTick+0x6c>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4619      	mov	r1, r3
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001612:	fbb2 f3f3 	udiv	r3, r2, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f96d 	bl	80018f6 <HAL_SYSTICK_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10f      	bne.n	8001642 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b0f      	cmp	r3, #15
 8001626:	d809      	bhi.n	800163c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001628:	2200      	movs	r2, #0
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f000 f937 	bl	80018a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001634:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <HAL_InitTick+0x74>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e007      	b.n	800164c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	e004      	b.n	800164c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e001      	b.n	800164c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <HAL_IncTick+0x20>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_IncTick+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4413      	add	r3, r2
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_IncTick+0x24>)
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000008 	.word	0x20000008
 8001688:	20000760 	.word	0x20000760

0800168c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return uwTick;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <HAL_GetTick+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000760 	.word	0x20000760

080016a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ac:	f7ff ffee 	bl	800168c <HAL_GetTick>
 80016b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d005      	beq.n	80016ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <HAL_Delay+0x44>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ca:	bf00      	nop
 80016cc:	f7ff ffde 	bl	800168c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d8f7      	bhi.n	80016cc <HAL_Delay+0x28>
  {
  }
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008

080016ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001708:	4013      	ands	r3, r2
 800170a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171e:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <__NVIC_SetPriorityGrouping+0x44>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60d3      	str	r3, [r2, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__NVIC_GetPriorityGrouping+0x18>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	f003 0307 	and.w	r3, r3, #7
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	2b00      	cmp	r3, #0
 8001760:	db0b      	blt.n	800177a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f003 021f 	and.w	r2, r3, #31
 8001768:	4907      	ldr	r1, [pc, #28]	@ (8001788 <__NVIC_EnableIRQ+0x38>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	@ (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	@ (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	@ 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	210f      	movs	r1, #15
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f7ff ff8e 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff29 	bl	80016ec <__NVIC_SetPriorityGrouping>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b4:	f7ff ff3e 	bl	8001734 <__NVIC_GetPriorityGrouping>
 80018b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7ff ff8e 	bl	80017e0 <NVIC_EncodePriority>
 80018c4:	4602      	mov	r2, r0
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff5d 	bl	800178c <__NVIC_SetPriority>
}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	4603      	mov	r3, r0
 80018e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff31 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffa2 	bl	8001848 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0ac      	b.n	8001a7c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f8b2 	bl	8001a90 <DFSDM_GetChannelFromInstance>
 800192c:	4603      	mov	r3, r0
 800192e:	4a55      	ldr	r2, [pc, #340]	@ (8001a84 <HAL_DFSDM_ChannelInit+0x174>)
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e09f      	b.n	8001a7c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fb1f 	bl	8000f80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <HAL_DFSDM_ChannelInit+0x178>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	4a4f      	ldr	r2, [pc, #316]	@ (8001a88 <HAL_DFSDM_ChannelInit+0x178>)
 800194a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <HAL_DFSDM_ChannelInit+0x178>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d125      	bne.n	80019a0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001954:	4b4d      	ldr	r3, [pc, #308]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4c      	ldr	r2, [pc, #304]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 800195a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800195e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001960:	4b4a      	ldr	r3, [pc, #296]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4948      	ldr	r1, [pc, #288]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800196e:	4b47      	ldr	r3, [pc, #284]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a46      	ldr	r2, [pc, #280]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001974:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001978:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001982:	4b42      	ldr	r3, [pc, #264]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	3b01      	subs	r3, #1
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	493f      	ldr	r1, [pc, #252]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001994:	4b3d      	ldr	r3, [pc, #244]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a3c      	ldr	r2, [pc, #240]	@ (8001a8c <HAL_DFSDM_ChannelInit+0x17c>)
 800199a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800199e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80019ae:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019be:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80019c4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 020f 	bic.w	r2, r2, #15
 80019dc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001a04:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	3b01      	subs	r3, #1
 8001a16:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f002 0207 	and.w	r2, r2, #7
 8001a30:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f810 	bl	8001a90 <DFSDM_GetChannelFromInstance>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4904      	ldr	r1, [pc, #16]	@ (8001a84 <HAL_DFSDM_ChannelInit+0x174>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000768 	.word	0x20000768
 8001a88:	20000764 	.word	0x20000764
 8001a8c:	40016000 	.word	0x40016000

08001a90 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b0c <DFSDM_GetChannelFromInstance+0x7c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d102      	bne.n	8001aa6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e02b      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a19      	ldr	r2, [pc, #100]	@ (8001b10 <DFSDM_GetChannelFromInstance+0x80>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d102      	bne.n	8001ab4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e024      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <DFSDM_GetChannelFromInstance+0x84>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d102      	bne.n	8001ac2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	e01d      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <DFSDM_GetChannelFromInstance+0x88>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d102      	bne.n	8001ad0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001aca:	2304      	movs	r3, #4
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	e016      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <DFSDM_GetChannelFromInstance+0x8c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d102      	bne.n	8001ade <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001ad8:	2305      	movs	r3, #5
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e00f      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <DFSDM_GetChannelFromInstance+0x90>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d102      	bne.n	8001aec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e008      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <DFSDM_GetChannelFromInstance+0x94>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d102      	bne.n	8001afa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001af4:	2307      	movs	r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e001      	b.n	8001afe <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40016000 	.word	0x40016000
 8001b10:	40016020 	.word	0x40016020
 8001b14:	40016040 	.word	0x40016040
 8001b18:	40016080 	.word	0x40016080
 8001b1c:	400160a0 	.word	0x400160a0
 8001b20:	400160c0 	.word	0x400160c0
 8001b24:	400160e0 	.word	0x400160e0

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e17f      	b.n	8001e38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8171 	beq.w	8001e32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d118      	bne.n	8001c08 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d017      	beq.n	8001c44 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d123      	bne.n	8001c98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	220f      	movs	r2, #15
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	6939      	ldr	r1, [r7, #16]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80ac 	beq.w	8001e32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d1c:	d025      	beq.n	8001d6a <HAL_GPIO_Init+0x242>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4f      	ldr	r2, [pc, #316]	@ (8001e60 <HAL_GPIO_Init+0x338>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d01f      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4e      	ldr	r2, [pc, #312]	@ (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d019      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4d      	ldr	r2, [pc, #308]	@ (8001e68 <HAL_GPIO_Init+0x340>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d013      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4c      	ldr	r2, [pc, #304]	@ (8001e6c <HAL_GPIO_Init+0x344>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4b      	ldr	r2, [pc, #300]	@ (8001e70 <HAL_GPIO_Init+0x348>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d007      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4a      	ldr	r2, [pc, #296]	@ (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00c      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00a      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e008      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e004      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_GPIO_Init+0x244>
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	0092      	lsls	r2, r2, #2
 8001d74:	4093      	lsls	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d7c:	4937      	ldr	r1, [pc, #220]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dae:	4a32      	ldr	r2, [pc, #200]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001db4:	4b30      	ldr	r3, [pc, #192]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dd8:	4a27      	ldr	r2, [pc, #156]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dde:	4b26      	ldr	r3, [pc, #152]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4013      	ands	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e02:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e2c:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ae78 	bne.w	8001b38 <HAL_GPIO_Init+0x10>
  }
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	371c      	adds	r7, #28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	48000400 	.word	0x48000400
 8001e64:	48000800 	.word	0x48000800
 8001e68:	48000c00 	.word	0x48000c00
 8001e6c:	48001000 	.word	0x48001000
 8001e70:	48001400 	.word	0x48001400
 8001e74:	48001800 	.word	0x48001800
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eb6:	4b08      	ldr	r3, [pc, #32]	@ (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f806 	bl	8001edc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e08d      	b.n	8002020 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff f895 	bl	8001048 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2224      	movs	r2, #36	@ 0x24
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	e006      	b.n	8001f7a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d108      	bne.n	8001f94 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	e007      	b.n	8001fa4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fb6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69d9      	ldr	r1, [r3, #28]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f042 0201 	orr.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b20      	cmp	r3, #32
 800203c:	d138      	bne.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002048:	2302      	movs	r3, #2
 800204a:	e032      	b.n	80020b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	@ 0x24
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800207a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2220      	movs	r2, #32
 80020a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d139      	bne.n	8002148 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020de:	2302      	movs	r3, #2
 80020e0:	e033      	b.n	800214a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2224      	movs	r2, #36	@ 0x24
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002110:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4313      	orrs	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002148:	2302      	movs	r3, #2
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af02      	add	r7, sp, #8
 800215c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e101      	b.n	800236c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d106      	bne.n	8002182 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff f8ed 	bl	800135c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fb0f 	bl	80047b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7c1a      	ldrb	r2, [r3, #16]
 80021a2:	f88d 2000 	strb.w	r2, [sp]
 80021a6:	3304      	adds	r3, #4
 80021a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021aa:	f002 fad8 	bl	800475e <USB_CoreInit>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0d5      	b.n	800236c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fb07 	bl	80047da <USB_SetCurrentMode>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0c6      	b.n	800236c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	e04a      	b.n	800227a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3315      	adds	r3, #21
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	3314      	adds	r3, #20
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800220c:	7bfa      	ldrb	r2, [r7, #15]
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	b298      	uxth	r0, r3
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	332e      	adds	r3, #46	@ 0x2e
 8002220:	4602      	mov	r2, r0
 8002222:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3318      	adds	r3, #24
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002238:	7bfa      	ldrb	r2, [r7, #15]
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	331c      	adds	r3, #28
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	3320      	adds	r3, #32
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	3324      	adds	r3, #36	@ 0x24
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	3301      	adds	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	791b      	ldrb	r3, [r3, #4]
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	429a      	cmp	r2, r3
 8002282:	d3af      	bcc.n	80021e4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]
 8002288:	e044      	b.n	8002314 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	3301      	adds	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	791b      	ldrb	r3, [r3, #4]
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	429a      	cmp	r2, r3
 800231c:	d3b5      	bcc.n	800228a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7c1a      	ldrb	r2, [r3, #16]
 8002326:	f88d 2000 	strb.w	r2, [sp]
 800232a:	3304      	adds	r3, #4
 800232c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800232e:	f002 faa1 	bl	8004874 <USB_DevInit>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e013      	b.n	800236c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d102      	bne.n	8002360 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f80a 	bl	8002374 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f002 fc46 	bl	8004bf6 <USB_DevDisconnect>

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	f043 0303 	orr.w	r3, r3, #3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40007000 	.word	0x40007000

080023dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023e0:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40007000 	.word	0x40007000

080023f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002406:	d130      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002414:	d038      	beq.n	8002488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800241e:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002420:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002424:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2232      	movs	r2, #50	@ 0x32
 800242c:	fb02 f303 	mul.w	r3, r2, r3
 8002430:	4a1b      	ldr	r2, [pc, #108]	@ (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800243c:	e002      	b.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b01      	subs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002444:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002450:	d102      	bne.n	8002458 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f2      	bne.n	800243e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002458:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002464:	d110      	bne.n	8002488 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e00f      	b.n	800248a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800246a:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002476:	d007      	beq.n	8002488 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002478:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002480:	4a05      	ldr	r2, [pc, #20]	@ (8002498 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002486:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40007000 	.word	0x40007000
 800249c:	20000000 	.word	0x20000000
 80024a0:	431bde83 	.word	0x431bde83

080024a4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80024ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b2:	6053      	str	r3, [r2, #4]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000

080024c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff f8de 	bl	800168c <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e063      	b.n	80025a4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7fe fe07 	bl	8001104 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80024f6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f858 	bl	80025b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	3b01      	subs	r3, #1
 8002510:	021a      	lsls	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	2120      	movs	r1, #32
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f850 	bl	80025cc <QSPI_WaitFlagStateUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d131      	bne.n	800259a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002540:	f023 0310 	bic.w	r3, r3, #16
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6852      	ldr	r2, [r2, #4]
 8002548:	0611      	lsls	r1, r2, #24
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <HAL_QSPI_Init+0xe8>)
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6912      	ldr	r2, [r2, #16]
 8002566:	0411      	lsls	r1, r2, #16
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6952      	ldr	r2, [r2, #20]
 800256c:	4311      	orrs	r1, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6992      	ldr	r2, [r2, #24]
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80025a2:	7afb      	ldrb	r3, [r7, #11]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	ffe0f8fe 	.word	0xffe0f8fe

080025b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025dc:	e01a      	b.n	8002614 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d016      	beq.n	8002614 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7ff f851 	bl	800168c <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2204      	movs	r2, #4
 8002600:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e00e      	b.n	8002632 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf14      	ite	ne
 8002622:	2301      	movne	r3, #1
 8002624:	2300      	moveq	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	429a      	cmp	r2, r3
 800262e:	d1d6      	bne.n	80025de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e3ca      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b97      	ldr	r3, [pc, #604]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002658:	4b94      	ldr	r3, [pc, #592]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0310 	and.w	r3, r3, #16
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80e4 	beq.w	8002838 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d007      	beq.n	8002686 <HAL_RCC_OscConfig+0x4a>
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	f040 808b 	bne.w	8002794 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b01      	cmp	r3, #1
 8002682:	f040 8087 	bne.w	8002794 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002686:	4b89      	ldr	r3, [pc, #548]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e3a2      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1a      	ldr	r2, [r3, #32]
 80026a2:	4b82      	ldr	r3, [pc, #520]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_RCC_OscConfig+0x7c>
 80026ae:	4b7f      	ldr	r3, [pc, #508]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b6:	e005      	b.n	80026c4 <HAL_RCC_OscConfig+0x88>
 80026b8:	4b7c      	ldr	r3, [pc, #496]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d223      	bcs.n	8002710 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fd55 	bl	800317c <RCC_SetFlashLatencyFromMSIRange>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e383      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026dc:	4b73      	ldr	r3, [pc, #460]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a72      	ldr	r2, [pc, #456]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b70      	ldr	r3, [pc, #448]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	496d      	ldr	r1, [pc, #436]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fa:	4b6c      	ldr	r3, [pc, #432]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	4968      	ldr	r1, [pc, #416]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
 800270e:	e025      	b.n	800275c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002710:	4b66      	ldr	r3, [pc, #408]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a65      	ldr	r2, [pc, #404]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002716:	f043 0308 	orr.w	r3, r3, #8
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b63      	ldr	r3, [pc, #396]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4960      	ldr	r1, [pc, #384]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272e:	4b5f      	ldr	r3, [pc, #380]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	495b      	ldr	r1, [pc, #364]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fd15 	bl	800317c <RCC_SetFlashLatencyFromMSIRange>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e343      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800275c:	f000 fc4a 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b52      	ldr	r3, [pc, #328]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	4950      	ldr	r1, [pc, #320]	@ (80028b0 <HAL_RCC_OscConfig+0x274>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	4a4e      	ldr	r2, [pc, #312]	@ (80028b4 <HAL_RCC_OscConfig+0x278>)
 800277a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800277c:	4b4e      	ldr	r3, [pc, #312]	@ (80028b8 <HAL_RCC_OscConfig+0x27c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe ff33 	bl	80015ec <HAL_InitTick>
 8002786:	4603      	mov	r3, r0
 8002788:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d052      	beq.n	8002836 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	e327      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d032      	beq.n	8002802 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800279c:	4b43      	ldr	r3, [pc, #268]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a42      	ldr	r2, [pc, #264]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a8:	f7fe ff70 	bl	800168c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027b0:	f7fe ff6c 	bl	800168c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e310      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027c2:	4b3a      	ldr	r3, [pc, #232]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a36      	ldr	r2, [pc, #216]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	4b34      	ldr	r3, [pc, #208]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4931      	ldr	r1, [pc, #196]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ec:	4b2f      	ldr	r3, [pc, #188]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	492c      	ldr	r1, [pc, #176]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
 8002800:	e01a      	b.n	8002838 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002802:	4b2a      	ldr	r3, [pc, #168]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a29      	ldr	r2, [pc, #164]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800280e:	f7fe ff3d 	bl	800168c <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002816:	f7fe ff39 	bl	800168c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e2dd      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002828:	4b20      	ldr	r3, [pc, #128]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x1da>
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002836:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d074      	beq.n	800292e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b08      	cmp	r3, #8
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x21a>
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b0c      	cmp	r3, #12
 800284e:	d10e      	bne.n	800286e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d10b      	bne.n	800286e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	4b15      	ldr	r3, [pc, #84]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d064      	beq.n	800292c <HAL_RCC_OscConfig+0x2f0>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d160      	bne.n	800292c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e2ba      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x24a>
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a0b      	ldr	r2, [pc, #44]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e026      	b.n	80028d4 <HAL_RCC_OscConfig+0x298>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800288e:	d115      	bne.n	80028bc <HAL_RCC_OscConfig+0x280>
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 8002896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	4b03      	ldr	r3, [pc, #12]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a02      	ldr	r2, [pc, #8]	@ (80028ac <HAL_RCC_OscConfig+0x270>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_OscConfig+0x298>
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004d34 	.word	0x08004d34
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004
 80028bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a9c      	ldr	r2, [pc, #624]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe fed6 	bl	800168c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fed2 	bl	800168c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	@ 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e276      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f6:	4b92      	ldr	r3, [pc, #584]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x2a8>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fec2 	bl	800168c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe febe 	bl	800168c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	@ 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e262      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800291e:	4b88      	ldr	r3, [pc, #544]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x2d0>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d060      	beq.n	80029fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d005      	beq.n	800294c <HAL_RCC_OscConfig+0x310>
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d119      	bne.n	800297a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d116      	bne.n	800297a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_OscConfig+0x328>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e23f      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b76      	ldr	r3, [pc, #472]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	4973      	ldr	r1, [pc, #460]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	e040      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d023      	beq.n	80029ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002982:	4b6f      	ldr	r3, [pc, #444]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6e      	ldr	r2, [pc, #440]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fe7d 	bl	800168c <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002996:	f7fe fe79 	bl	800168c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e21d      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	4b65      	ldr	r3, [pc, #404]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b62      	ldr	r3, [pc, #392]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	061b      	lsls	r3, r3, #24
 80029c2:	495f      	ldr	r1, [pc, #380]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e018      	b.n	80029fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80029d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fe59 	bl	800168c <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fe55 	bl	800168c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e1f9      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029f0:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d03c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a10:	4b4b      	ldr	r3, [pc, #300]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a16:	4a4a      	ldr	r2, [pc, #296]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7fe fe34 	bl	800168c <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe fe30 	bl	800168c <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e1d4      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ef      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3ec>
 8002a48:	e01b      	b.n	8002a82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a50:	4a3b      	ldr	r2, [pc, #236]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fe17 	bl	800168c <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7fe fe13 	bl	800168c <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1b7      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a74:	4b32      	ldr	r3, [pc, #200]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1ef      	bne.n	8002a62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a90:	2300      	movs	r3, #0
 8002a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a94:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b27      	ldr	r3, [pc, #156]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa4:	4a26      	ldr	r2, [pc, #152]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aac:	4b24      	ldr	r3, [pc, #144]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002abc:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_RCC_OscConfig+0x508>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d118      	bne.n	8002afa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_RCC_OscConfig+0x508>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <HAL_RCC_OscConfig+0x508>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fdda 	bl	800168c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fe fdd6 	bl	800168c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e17a      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_RCC_OscConfig+0x508>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d108      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
 8002b02:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b08:	4a0d      	ldr	r2, [pc, #52]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b12:	e029      	b.n	8002b68 <HAL_RCC_OscConfig+0x52c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b05      	cmp	r3, #5
 8002b1a:	d115      	bne.n	8002b48 <HAL_RCC_OscConfig+0x50c>
 8002b1c:	4b08      	ldr	r3, [pc, #32]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b32:	4a03      	ldr	r2, [pc, #12]	@ (8002b40 <HAL_RCC_OscConfig+0x504>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b3c:	e014      	b.n	8002b68 <HAL_RCC_OscConfig+0x52c>
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40007000 	.word	0x40007000
 8002b48:	4b9c      	ldr	r3, [pc, #624]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	4a9b      	ldr	r2, [pc, #620]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b58:	4b98      	ldr	r3, [pc, #608]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5e:	4a97      	ldr	r2, [pc, #604]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b70:	f7fe fd8c 	bl	800168c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe fd88 	bl	800168c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e12a      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0ed      	beq.n	8002b78 <HAL_RCC_OscConfig+0x53c>
 8002b9c:	e015      	b.n	8002bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7fe fd75 	bl	800168c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fe fd71 	bl	800168c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e113      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bbc:	4b7f      	ldr	r3, [pc, #508]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ed      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd0:	4b7a      	ldr	r3, [pc, #488]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	4a79      	ldr	r2, [pc, #484]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80fe 	beq.w	8002de2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f040 80d0 	bne.w	8002d90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bf0:	4b72      	ldr	r3, [pc, #456]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d130      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d127      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d11f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c30:	2a07      	cmp	r2, #7
 8002c32:	bf14      	ite	ne
 8002c34:	2201      	movne	r2, #1
 8002c36:	2200      	moveq	r2, #0
 8002c38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d113      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d109      	bne.n	8002c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d06e      	beq.n	8002d44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b0c      	cmp	r3, #12
 8002c6a:	d069      	beq.n	8002d40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c6c:	4b53      	ldr	r3, [pc, #332]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c78:	4b50      	ldr	r3, [pc, #320]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0ad      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c88:	4b4c      	ldr	r3, [pc, #304]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c94:	f7fe fcfa 	bl	800168c <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe fcf6 	bl	800168c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e09a      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cae:	4b43      	ldr	r3, [pc, #268]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cba:	4b40      	ldr	r3, [pc, #256]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	4b40      	ldr	r3, [pc, #256]	@ (8002dc0 <HAL_RCC_OscConfig+0x784>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cd4:	0212      	lsls	r2, r2, #8
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cdc:	0852      	lsrs	r2, r2, #1
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0552      	lsls	r2, r2, #21
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0652      	lsls	r2, r2, #25
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cf4:	0912      	lsrs	r2, r2, #4
 8002cf6:	0452      	lsls	r2, r2, #17
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	4930      	ldr	r1, [pc, #192]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d00:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2d      	ldr	r2, [pc, #180]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	4a2a      	ldr	r2, [pc, #168]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d18:	f7fe fcb8 	bl	800168c <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fcb4 	bl	800168c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e058      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d32:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d3e:	e050      	b.n	8002de2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e04f      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d44:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d148      	bne.n	8002de2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d50:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d5c:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d68:	f7fe fc90 	bl	800168c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe fc8c 	bl	800168c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e030      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d82:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x734>
 8002d8e:	e028      	b.n	8002de2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d023      	beq.n	8002dde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a08      	ldr	r2, [pc, #32]	@ (8002dbc <HAL_RCC_OscConfig+0x780>)
 8002d9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fc73 	bl	800168c <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da8:	e00c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fe fc6f 	bl	800168c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d905      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e013      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_OscConfig+0x7b0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ec      	bne.n	8002daa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCC_OscConfig+0x7b0>)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	4905      	ldr	r1, [pc, #20]	@ (8002dec <HAL_RCC_OscConfig+0x7b0>)
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_OscConfig+0x7b4>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60cb      	str	r3, [r1, #12]
 8002ddc:	e001      	b.n	8002de2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	feeefffc 	.word	0xfeeefffc

08002df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0e7      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e08:	4b75      	ldr	r3, [pc, #468]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d910      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b72      	ldr	r3, [pc, #456]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 0207 	bic.w	r2, r3, #7
 8002e1e:	4970      	ldr	r1, [pc, #448]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0cf      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d010      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d908      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e54:	4b63      	ldr	r3, [pc, #396]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4960      	ldr	r1, [pc, #384]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04c      	beq.n	8002f0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d121      	bne.n	8002eca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0a6      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d107      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e92:	4b54      	ldr	r3, [pc, #336]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d115      	bne.n	8002eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e09a      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d107      	bne.n	8002eba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e08e      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eba:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e086      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eca:	4b46      	ldr	r3, [pc, #280]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f023 0203 	bic.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4943      	ldr	r1, [pc, #268]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002edc:	f7fe fbd6 	bl	800168c <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee4:	f7fe fbd2 	bl	800168c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e06e      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	4b3a      	ldr	r3, [pc, #232]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 020c 	and.w	r2, r3, #12
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d1eb      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b31      	ldr	r3, [pc, #196]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d208      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	492b      	ldr	r1, [pc, #172]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3a:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d210      	bcs.n	8002f6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f48:	4b25      	ldr	r3, [pc, #148]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 0207 	bic.w	r2, r3, #7
 8002f50:	4923      	ldr	r1, [pc, #140]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f58:	4b21      	ldr	r3, [pc, #132]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e036      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	4918      	ldr	r1, [pc, #96]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4910      	ldr	r1, [pc, #64]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa8:	f000 f824 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	490b      	ldr	r1, [pc, #44]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc4:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x1f8>)
 8002fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1fc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fe fb0d 	bl	80015ec <HAL_InitTick>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08004d34 	.word	0x08004d34
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	20000004 	.word	0x20000004

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003002:	4b3e      	ldr	r3, [pc, #248]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800300c:	4b3b      	ldr	r3, [pc, #236]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x34>
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d121      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11e      	bne.n	8003066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d107      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003034:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	61fb      	str	r3, [r7, #28]
 8003042:	e005      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003044:	4b2d      	ldr	r3, [pc, #180]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003050:	4a2b      	ldr	r2, [pc, #172]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10d      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003064:	e00a      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	2b04      	cmp	r3, #4
 800306a:	d102      	bne.n	8003072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x110>)
 800306e:	61bb      	str	r3, [r7, #24]
 8003070:	e004      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b08      	cmp	r3, #8
 8003076:	d101      	bne.n	800307c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003078:	4b23      	ldr	r3, [pc, #140]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x114>)
 800307a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d134      	bne.n	80030ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003082:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d003      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0xa6>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d003      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0xac>
 8003098:	e005      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800309a:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x110>)
 800309c:	617b      	str	r3, [r7, #20]
      break;
 800309e:	e005      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x114>)
 80030a2:	617b      	str	r3, [r7, #20]
      break;
 80030a4:	e002      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	617b      	str	r3, [r7, #20]
      break;
 80030aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030ac:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	3301      	adds	r3, #1
 80030b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	fb03 f202 	mul.w	r2, r3, r2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030d2:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x108>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	0e5b      	lsrs	r3, r3, #25
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	3301      	adds	r3, #1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ec:	69bb      	ldr	r3, [r7, #24]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	@ 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	08004d4c 	.word	0x08004d4c
 8003104:	00f42400 	.word	0x00f42400
 8003108:	007a1200 	.word	0x007a1200

0800310c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003110:	4b03      	ldr	r3, [pc, #12]	@ (8003120 <HAL_RCC_GetHCLKFreq+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000000 	.word	0x20000000

08003124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003128:	f7ff fff0 	bl	800310c <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4904      	ldr	r1, [pc, #16]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x28>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	08004d44 	.word	0x08004d44

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003154:	f7ff ffda 	bl	800310c <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0adb      	lsrs	r3, r3, #11
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4904      	ldr	r1, [pc, #16]	@ (8003178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	08004d44 	.word	0x08004d44

0800317c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003184:	2300      	movs	r3, #0
 8003186:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003188:	4b2a      	ldr	r3, [pc, #168]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003194:	f7ff f922 	bl	80023dc <HAL_PWREx_GetVoltageRange>
 8003198:	6178      	str	r0, [r7, #20]
 800319a:	e014      	b.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	4a24      	ldr	r2, [pc, #144]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a8:	4b22      	ldr	r3, [pc, #136]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031b4:	f7ff f912 	bl	80023dc <HAL_PWREx_GetVoltageRange>
 80031b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031cc:	d10b      	bne.n	80031e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b80      	cmp	r3, #128	@ 0x80
 80031d2:	d919      	bls.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80031d8:	d902      	bls.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031da:	2302      	movs	r3, #2
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	e013      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	e010      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	d902      	bls.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031ec:	2303      	movs	r3, #3
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e00a      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b80      	cmp	r3, #128	@ 0x80
 80031f6:	d102      	bne.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031f8:	2302      	movs	r3, #2
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e004      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b70      	cmp	r3, #112	@ 0x70
 8003202:	d101      	bne.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003204:	2301      	movs	r3, #1
 8003206:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f023 0207 	bic.w	r2, r3, #7
 8003210:	4909      	ldr	r1, [pc, #36]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003218:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	429a      	cmp	r2, r3
 8003224:	d001      	beq.n	800322a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	40022000 	.word	0x40022000

0800323c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003244:	2300      	movs	r3, #0
 8003246:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003248:	2300      	movs	r3, #0
 800324a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003254:	2b00      	cmp	r3, #0
 8003256:	d041      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003260:	d02a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003262:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003266:	d824      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003268:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800326c:	d008      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800326e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003272:	d81e      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800327c:	d010      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800327e:	e018      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003280:	4b86      	ldr	r3, [pc, #536]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a85      	ldr	r2, [pc, #532]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800328c:	e015      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f000 facb 	bl	8003830 <RCCEx_PLLSAI1_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800329e:	e00c      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3320      	adds	r3, #32
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fbb6 	bl	8003a18 <RCCEx_PLLSAI2_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b0:	e003      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	74fb      	strb	r3, [r7, #19]
      break;
 80032b6:	e000      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10b      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c0:	4b76      	ldr	r3, [pc, #472]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ce:	4973      	ldr	r1, [pc, #460]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032d6:	e001      	b.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d041      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032f0:	d02a      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032f6:	d824      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032fc:	d008      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003302:	d81e      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800330c:	d010      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800330e:	e018      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003310:	4b62      	ldr	r3, [pc, #392]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a61      	ldr	r2, [pc, #388]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800331c:	e015      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fa83 	bl	8003830 <RCCEx_PLLSAI1_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800332e:	e00c      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3320      	adds	r3, #32
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fb6e 	bl	8003a18 <RCCEx_PLLSAI2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003340:	e003      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	74fb      	strb	r3, [r7, #19]
      break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003350:	4b52      	ldr	r3, [pc, #328]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003356:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800335e:	494f      	ldr	r1, [pc, #316]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003366:	e001      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a0 	beq.w	80034ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337a:	2300      	movs	r3, #0
 800337c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800337e:	4b47      	ldr	r3, [pc, #284]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00d      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003394:	4b41      	ldr	r3, [pc, #260]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003398:	4a40      	ldr	r2, [pc, #256]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339e:	6593      	str	r3, [r2, #88]	@ 0x58
 80033a0:	4b3e      	ldr	r3, [pc, #248]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ac:	2301      	movs	r3, #1
 80033ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b0:	4b3b      	ldr	r3, [pc, #236]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a3a      	ldr	r2, [pc, #232]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033bc:	f7fe f966 	bl	800168c <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033c2:	e009      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe f962 	bl	800168c <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d902      	bls.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	74fb      	strb	r3, [r7, #19]
        break;
 80033d6:	e005      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d8:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ef      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d15c      	bne.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ea:	4b2c      	ldr	r3, [pc, #176]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01f      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	429a      	cmp	r2, r3
 8003406:	d019      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003408:	4b24      	ldr	r3, [pc, #144]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003412:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003414:	4b21      	ldr	r3, [pc, #132]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	4a20      	ldr	r2, [pc, #128]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003424:	4b1d      	ldr	r3, [pc, #116]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003434:	4a19      	ldr	r2, [pc, #100]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe f921 	bl	800168c <HAL_GetTick>
 800344a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344c:	e00b      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fe f91d 	bl	800168c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d902      	bls.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	74fb      	strb	r3, [r7, #19]
            break;
 8003464:	e006      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003466:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ec      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800347a:	4b08      	ldr	r3, [pc, #32]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348a:	4904      	ldr	r1, [pc, #16]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003492:	e009      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003494:	7cfb      	ldrb	r3, [r7, #19]
 8003496:	74bb      	strb	r3, [r7, #18]
 8003498:	e006      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034a8:	7c7b      	ldrb	r3, [r7, #17]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	4a9d      	ldr	r2, [pc, #628]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c6:	4b98      	ldr	r3, [pc, #608]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f023 0203 	bic.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	4994      	ldr	r1, [pc, #592]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 020c 	bic.w	r2, r3, #12
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f6:	498c      	ldr	r1, [pc, #560]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800350a:	4b87      	ldr	r3, [pc, #540]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	4983      	ldr	r1, [pc, #524]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800352c:	4b7e      	ldr	r3, [pc, #504]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	497b      	ldr	r1, [pc, #492]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800354e:	4b76      	ldr	r3, [pc, #472]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800355c:	4972      	ldr	r1, [pc, #456]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003570:	4b6d      	ldr	r3, [pc, #436]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	496a      	ldr	r1, [pc, #424]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003592:	4b65      	ldr	r3, [pc, #404]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	4961      	ldr	r1, [pc, #388]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c2:	4959      	ldr	r1, [pc, #356]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d6:	4b54      	ldr	r3, [pc, #336]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e4:	4950      	ldr	r1, [pc, #320]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003606:	4948      	ldr	r1, [pc, #288]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800361a:	4b43      	ldr	r3, [pc, #268]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	493f      	ldr	r1, [pc, #252]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d028      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800363c:	4b3a      	ldr	r3, [pc, #232]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364a:	4937      	ldr	r1, [pc, #220]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003656:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800365a:	d106      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365c:	4b32      	ldr	r3, [pc, #200]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a31      	ldr	r2, [pc, #196]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003666:	60d3      	str	r3, [r2, #12]
 8003668:	e011      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003672:	d10c      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	2101      	movs	r1, #1
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f8d8 	bl	8003830 <RCCEx_PLLSAI1_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	491f      	ldr	r1, [pc, #124]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036b8:	d106      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	4a1a      	ldr	r2, [pc, #104]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036c4:	60d3      	str	r3, [r2, #12]
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036d0:	d10c      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2101      	movs	r1, #1
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 f8a9 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e2:	7cfb      	ldrb	r3, [r7, #19]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02b      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003706:	4908      	ldr	r1, [pc, #32]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003716:	d109      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003718:	4b03      	ldr	r3, [pc, #12]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4a02      	ldr	r2, [pc, #8]	@ (8003728 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003722:	60d3      	str	r3, [r2, #12]
 8003724:	e014      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f877 	bl	8003830 <RCCEx_PLLSAI1_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d02f      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376a:	4928      	ldr	r1, [pc, #160]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800377a:	d10d      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	2102      	movs	r1, #2
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f854 	bl	8003830 <RCCEx_PLLSAI1_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d014      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	74bb      	strb	r3, [r7, #18]
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800379c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3320      	adds	r3, #32
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f935 	bl	8003a18 <RCCEx_PLLSAI2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037c8:	4b10      	ldr	r3, [pc, #64]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037d6:	490d      	ldr	r1, [pc, #52]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00b      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037ea:	4b08      	ldr	r3, [pc, #32]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037fa:	4904      	ldr	r1, [pc, #16]	@ (800380c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003802:	7cbb      	ldrb	r3, [r7, #18]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003814:	4b05      	ldr	r3, [pc, #20]	@ (800382c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a04      	ldr	r2, [pc, #16]	@ (800382c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800381a:	f043 0304 	orr.w	r3, r3, #4
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383e:	4b75      	ldr	r3, [pc, #468]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800384a:	4b72      	ldr	r3, [pc, #456]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
       ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003862:	4b6c      	ldr	r3, [pc, #432]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
       ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d047      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0x86>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0x62>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI1_Config+0x74>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b60      	ldr	r3, [pc, #384]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b57      	ldr	r3, [pc, #348]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b54      	ldr	r3, [pc, #336]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	430b      	orrs	r3, r1
 8003900:	4944      	ldr	r1, [pc, #272]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d17d      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800390c:	4b41      	ldr	r3, [pc, #260]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a40      	ldr	r2, [pc, #256]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd feb8 	bl	800168c <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003920:	f7fd feb4 	bl	800168c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003934:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d160      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800394c:	4b31      	ldr	r3, [pc, #196]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	0912      	lsrs	r2, r2, #4
 8003964:	0452      	lsls	r2, r2, #17
 8003966:	430a      	orrs	r2, r1
 8003968:	492a      	ldr	r1, [pc, #168]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	610b      	str	r3, [r1, #16]
 800396e:	e027      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d112      	bne.n	800399c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003976:	4b27      	ldr	r3, [pc, #156]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800397e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6892      	ldr	r2, [r2, #8]
 8003986:	0211      	lsls	r1, r2, #8
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6912      	ldr	r2, [r2, #16]
 800398c:	0852      	lsrs	r2, r2, #1
 800398e:	3a01      	subs	r2, #1
 8003990:	0552      	lsls	r2, r2, #21
 8003992:	430a      	orrs	r2, r1
 8003994:	491f      	ldr	r1, [pc, #124]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	610b      	str	r3, [r1, #16]
 800399a:	e011      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6952      	ldr	r2, [r2, #20]
 80039b2:	0852      	lsrs	r2, r2, #1
 80039b4:	3a01      	subs	r2, #1
 80039b6:	0652      	lsls	r2, r2, #25
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4916      	ldr	r1, [pc, #88]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039c0:	4b14      	ldr	r3, [pc, #80]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039cc:	f7fd fe5e 	bl	800168c <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d4:	f7fd fe5a 	bl	800168c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
          break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0ef      	beq.n	80039d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	4904      	ldr	r1, [pc, #16]	@ (8003a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a26:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d018      	beq.n	8003a64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a32:	4b67      	ldr	r3, [pc, #412]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0203 	and.w	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d10d      	bne.n	8003a5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
       ||
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a4a:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
       ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d047      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	e044      	b.n	8003aee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d018      	beq.n	8003a9e <RCCEx_PLLSAI2_Config+0x86>
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d825      	bhi.n	8003abc <RCCEx_PLLSAI2_Config+0xa4>
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d002      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0x62>
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d009      	beq.n	8003a8c <RCCEx_PLLSAI2_Config+0x74>
 8003a78:	e020      	b.n	8003abc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a7a:	4b55      	ldr	r3, [pc, #340]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8a:	e01a      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a8c:	4b50      	ldr	r3, [pc, #320]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d116      	bne.n	8003ac6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e013      	b.n	8003ac6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aaa:	4b49      	ldr	r3, [pc, #292]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003aba:	e006      	b.n	8003aca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	e004      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6819      	ldr	r1, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	4939      	ldr	r1, [pc, #228]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d167      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af4:	4b36      	ldr	r3, [pc, #216]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a35      	ldr	r2, [pc, #212]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd fdc4 	bl	800168c <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b06:	e009      	b.n	8003b1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b08:	f7fd fdc0 	bl	800168c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1a:	e005      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ef      	bne.n	8003b08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d14a      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d111      	bne.n	8003b58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b34:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	0211      	lsls	r1, r2, #8
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	0912      	lsrs	r2, r2, #4
 8003b4c:	0452      	lsls	r2, r2, #17
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	491f      	ldr	r1, [pc, #124]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	614b      	str	r3, [r1, #20]
 8003b56:	e011      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b58:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6912      	ldr	r2, [r2, #16]
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	430a      	orrs	r2, r1
 8003b76:	4916      	ldr	r1, [pc, #88]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a13      	ldr	r2, [pc, #76]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd fd80 	bl	800168c <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b90:	f7fd fd7c 	bl	800168c <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ef      	beq.n	8003b90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bb6:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4904      	ldr	r1, [pc, #16]	@ (8003bd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e095      	b.n	8003d12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf6:	d009      	beq.n	8003c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61da      	str	r2, [r3, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fd fab0 	bl	800118c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c4c:	d902      	bls.n	8003c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e002      	b.n	8003c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c62:	d007      	beq.n	8003c74 <HAL_SPI_Init+0xa0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c6c:	d002      	beq.n	8003c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb6:	ea42 0103 	orr.w	r1, r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	f003 0204 	and.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003cf0:	ea42 0103 	orr.w	r1, r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e040      	b.n	8003dae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fd fa69 	bl	8001214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2224      	movs	r2, #36	@ 0x24
 8003d46:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fae1 	bl	8004328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f826 	bl	8003db8 <UART_SetConfig>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e01b      	b.n	8003dae <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fb60 	bl	800446c <UART_CheckIdleState>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b08a      	sub	sp, #40	@ 0x28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4ba4      	ldr	r3, [pc, #656]	@ (8004078 <UART_SetConfig+0x2c0>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a99      	ldr	r2, [pc, #612]	@ (800407c <UART_SetConfig+0x2c4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e20:	4313      	orrs	r3, r2
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e34:	430a      	orrs	r2, r1
 8003e36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a90      	ldr	r2, [pc, #576]	@ (8004080 <UART_SetConfig+0x2c8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d126      	bne.n	8003e90 <UART_SetConfig+0xd8>
 8003e42:	4b90      	ldr	r3, [pc, #576]	@ (8004084 <UART_SetConfig+0x2cc>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d81b      	bhi.n	8003e88 <UART_SetConfig+0xd0>
 8003e50:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <UART_SetConfig+0xa0>)
 8003e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e56:	bf00      	nop
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e79 	.word	0x08003e79
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e81 	.word	0x08003e81
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e116      	b.n	800409e <UART_SetConfig+0x2e6>
 8003e70:	2302      	movs	r3, #2
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e112      	b.n	800409e <UART_SetConfig+0x2e6>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7e:	e10e      	b.n	800409e <UART_SetConfig+0x2e6>
 8003e80:	2308      	movs	r3, #8
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e86:	e10a      	b.n	800409e <UART_SetConfig+0x2e6>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8e:	e106      	b.n	800409e <UART_SetConfig+0x2e6>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a7c      	ldr	r2, [pc, #496]	@ (8004088 <UART_SetConfig+0x2d0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d138      	bne.n	8003f0c <UART_SetConfig+0x154>
 8003e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8004084 <UART_SetConfig+0x2cc>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d82d      	bhi.n	8003f04 <UART_SetConfig+0x14c>
 8003ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <UART_SetConfig+0xf8>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ee5 	.word	0x08003ee5
 8003eb4:	08003f05 	.word	0x08003f05
 8003eb8:	08003f05 	.word	0x08003f05
 8003ebc:	08003f05 	.word	0x08003f05
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f05 	.word	0x08003f05
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003eed 	.word	0x08003eed
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003efd 	.word	0x08003efd
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e0d8      	b.n	800409e <UART_SetConfig+0x2e6>
 8003eec:	2302      	movs	r3, #2
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef2:	e0d4      	b.n	800409e <UART_SetConfig+0x2e6>
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003efa:	e0d0      	b.n	800409e <UART_SetConfig+0x2e6>
 8003efc:	2308      	movs	r3, #8
 8003efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f02:	e0cc      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f04:	2310      	movs	r3, #16
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0a:	e0c8      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5e      	ldr	r2, [pc, #376]	@ (800408c <UART_SetConfig+0x2d4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d125      	bne.n	8003f62 <UART_SetConfig+0x1aa>
 8003f16:	4b5b      	ldr	r3, [pc, #364]	@ (8004084 <UART_SetConfig+0x2cc>)
 8003f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f20:	2b30      	cmp	r3, #48	@ 0x30
 8003f22:	d016      	beq.n	8003f52 <UART_SetConfig+0x19a>
 8003f24:	2b30      	cmp	r3, #48	@ 0x30
 8003f26:	d818      	bhi.n	8003f5a <UART_SetConfig+0x1a2>
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d00a      	beq.n	8003f42 <UART_SetConfig+0x18a>
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d814      	bhi.n	8003f5a <UART_SetConfig+0x1a2>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <UART_SetConfig+0x182>
 8003f34:	2b10      	cmp	r3, #16
 8003f36:	d008      	beq.n	8003f4a <UART_SetConfig+0x192>
 8003f38:	e00f      	b.n	8003f5a <UART_SetConfig+0x1a2>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f40:	e0ad      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f42:	2302      	movs	r3, #2
 8003f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f48:	e0a9      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f50:	e0a5      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f52:	2308      	movs	r3, #8
 8003f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f58:	e0a1      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f60:	e09d      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	@ (8004090 <UART_SetConfig+0x2d8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d125      	bne.n	8003fb8 <UART_SetConfig+0x200>
 8003f6c:	4b45      	ldr	r3, [pc, #276]	@ (8004084 <UART_SetConfig+0x2cc>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f78:	d016      	beq.n	8003fa8 <UART_SetConfig+0x1f0>
 8003f7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f7c:	d818      	bhi.n	8003fb0 <UART_SetConfig+0x1f8>
 8003f7e:	2b80      	cmp	r3, #128	@ 0x80
 8003f80:	d00a      	beq.n	8003f98 <UART_SetConfig+0x1e0>
 8003f82:	2b80      	cmp	r3, #128	@ 0x80
 8003f84:	d814      	bhi.n	8003fb0 <UART_SetConfig+0x1f8>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <UART_SetConfig+0x1d8>
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d008      	beq.n	8003fa0 <UART_SetConfig+0x1e8>
 8003f8e:	e00f      	b.n	8003fb0 <UART_SetConfig+0x1f8>
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f96:	e082      	b.n	800409e <UART_SetConfig+0x2e6>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e07e      	b.n	800409e <UART_SetConfig+0x2e6>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fa6:	e07a      	b.n	800409e <UART_SetConfig+0x2e6>
 8003fa8:	2308      	movs	r3, #8
 8003faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fae:	e076      	b.n	800409e <UART_SetConfig+0x2e6>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb6:	e072      	b.n	800409e <UART_SetConfig+0x2e6>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a35      	ldr	r2, [pc, #212]	@ (8004094 <UART_SetConfig+0x2dc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d12a      	bne.n	8004018 <UART_SetConfig+0x260>
 8003fc2:	4b30      	ldr	r3, [pc, #192]	@ (8004084 <UART_SetConfig+0x2cc>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd0:	d01a      	beq.n	8004008 <UART_SetConfig+0x250>
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd6:	d81b      	bhi.n	8004010 <UART_SetConfig+0x258>
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fdc:	d00c      	beq.n	8003ff8 <UART_SetConfig+0x240>
 8003fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fe2:	d815      	bhi.n	8004010 <UART_SetConfig+0x258>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <UART_SetConfig+0x238>
 8003fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fec:	d008      	beq.n	8004000 <UART_SetConfig+0x248>
 8003fee:	e00f      	b.n	8004010 <UART_SetConfig+0x258>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff6:	e052      	b.n	800409e <UART_SetConfig+0x2e6>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffe:	e04e      	b.n	800409e <UART_SetConfig+0x2e6>
 8004000:	2304      	movs	r3, #4
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004006:	e04a      	b.n	800409e <UART_SetConfig+0x2e6>
 8004008:	2308      	movs	r3, #8
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400e:	e046      	b.n	800409e <UART_SetConfig+0x2e6>
 8004010:	2310      	movs	r3, #16
 8004012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004016:	e042      	b.n	800409e <UART_SetConfig+0x2e6>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a17      	ldr	r2, [pc, #92]	@ (800407c <UART_SetConfig+0x2c4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d13a      	bne.n	8004098 <UART_SetConfig+0x2e0>
 8004022:	4b18      	ldr	r3, [pc, #96]	@ (8004084 <UART_SetConfig+0x2cc>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800402c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004030:	d01a      	beq.n	8004068 <UART_SetConfig+0x2b0>
 8004032:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004036:	d81b      	bhi.n	8004070 <UART_SetConfig+0x2b8>
 8004038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403c:	d00c      	beq.n	8004058 <UART_SetConfig+0x2a0>
 800403e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004042:	d815      	bhi.n	8004070 <UART_SetConfig+0x2b8>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <UART_SetConfig+0x298>
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404c:	d008      	beq.n	8004060 <UART_SetConfig+0x2a8>
 800404e:	e00f      	b.n	8004070 <UART_SetConfig+0x2b8>
 8004050:	2300      	movs	r3, #0
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004056:	e022      	b.n	800409e <UART_SetConfig+0x2e6>
 8004058:	2302      	movs	r3, #2
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e01e      	b.n	800409e <UART_SetConfig+0x2e6>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e01a      	b.n	800409e <UART_SetConfig+0x2e6>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406e:	e016      	b.n	800409e <UART_SetConfig+0x2e6>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004076:	e012      	b.n	800409e <UART_SetConfig+0x2e6>
 8004078:	efff69f3 	.word	0xefff69f3
 800407c:	40008000 	.word	0x40008000
 8004080:	40013800 	.word	0x40013800
 8004084:	40021000 	.word	0x40021000
 8004088:	40004400 	.word	0x40004400
 800408c:	40004800 	.word	0x40004800
 8004090:	40004c00 	.word	0x40004c00
 8004094:	40005000 	.word	0x40005000
 8004098:	2310      	movs	r3, #16
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a9f      	ldr	r2, [pc, #636]	@ (8004320 <UART_SetConfig+0x568>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d17a      	bne.n	800419e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d824      	bhi.n	80040fa <UART_SetConfig+0x342>
 80040b0:	a201      	add	r2, pc, #4	@ (adr r2, 80040b8 <UART_SetConfig+0x300>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040fb 	.word	0x080040fb
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040fb 	.word	0x080040fb
 80040c8:	080040eb 	.word	0x080040eb
 80040cc:	080040fb 	.word	0x080040fb
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	080040fb 	.word	0x080040fb
 80040d8:	080040f3 	.word	0x080040f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7ff f822 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 80040e0:	61f8      	str	r0, [r7, #28]
        break;
 80040e2:	e010      	b.n	8004106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004324 <UART_SetConfig+0x56c>)
 80040e6:	61fb      	str	r3, [r7, #28]
        break;
 80040e8:	e00d      	b.n	8004106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fe ff83 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 80040ee:	61f8      	str	r0, [r7, #28]
        break;
 80040f0:	e009      	b.n	8004106 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f6:	61fb      	str	r3, [r7, #28]
        break;
 80040f8:	e005      	b.n	8004106 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80fb 	beq.w	8004304 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	429a      	cmp	r2, r3
 800411c:	d305      	bcc.n	800412a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	429a      	cmp	r2, r3
 8004128:	d903      	bls.n	8004132 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004130:	e0e8      	b.n	8004304 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2200      	movs	r2, #0
 8004136:	461c      	mov	r4, r3
 8004138:	4615      	mov	r5, r2
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	022b      	lsls	r3, r5, #8
 8004144:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004148:	0222      	lsls	r2, r4, #8
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	6849      	ldr	r1, [r1, #4]
 800414e:	0849      	lsrs	r1, r1, #1
 8004150:	2000      	movs	r0, #0
 8004152:	4688      	mov	r8, r1
 8004154:	4681      	mov	r9, r0
 8004156:	eb12 0a08 	adds.w	sl, r2, r8
 800415a:	eb43 0b09 	adc.w	fp, r3, r9
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800416c:	4650      	mov	r0, sl
 800416e:	4659      	mov	r1, fp
 8004170:	f7fc f82a 	bl	80001c8 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4613      	mov	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004182:	d308      	bcc.n	8004196 <UART_SetConfig+0x3de>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800418a:	d204      	bcs.n	8004196 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	e0b6      	b.n	8004304 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800419c:	e0b2      	b.n	8004304 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a6:	d15e      	bne.n	8004266 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80041a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d828      	bhi.n	8004202 <UART_SetConfig+0x44a>
 80041b0:	a201      	add	r2, pc, #4	@ (adr r2, 80041b8 <UART_SetConfig+0x400>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	080041e5 	.word	0x080041e5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	08004203 	.word	0x08004203
 80041c8:	080041f3 	.word	0x080041f3
 80041cc:	08004203 	.word	0x08004203
 80041d0:	08004203 	.word	0x08004203
 80041d4:	08004203 	.word	0x08004203
 80041d8:	080041fb 	.word	0x080041fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041dc:	f7fe ffa2 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 80041e0:	61f8      	str	r0, [r7, #28]
        break;
 80041e2:	e014      	b.n	800420e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7fe ffb4 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 80041e8:	61f8      	str	r0, [r7, #28]
        break;
 80041ea:	e010      	b.n	800420e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ec:	4b4d      	ldr	r3, [pc, #308]	@ (8004324 <UART_SetConfig+0x56c>)
 80041ee:	61fb      	str	r3, [r7, #28]
        break;
 80041f0:	e00d      	b.n	800420e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f2:	f7fe feff 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 80041f6:	61f8      	str	r0, [r7, #28]
        break;
 80041f8:	e009      	b.n	800420e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041fe:	61fb      	str	r3, [r7, #28]
        break;
 8004200:	e005      	b.n	800420e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800420c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d077      	beq.n	8004304 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	005a      	lsls	r2, r3, #1
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	441a      	add	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d916      	bls.n	800425e <UART_SetConfig+0x4a6>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004236:	d212      	bcs.n	800425e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f023 030f 	bic.w	r3, r3, #15
 8004240:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	b29b      	uxth	r3, r3
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	b29a      	uxth	r2, r3
 800424e:	8afb      	ldrh	r3, [r7, #22]
 8004250:	4313      	orrs	r3, r2
 8004252:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	8afa      	ldrh	r2, [r7, #22]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	e052      	b.n	8004304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004264:	e04e      	b.n	8004304 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004266:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800426a:	2b08      	cmp	r3, #8
 800426c:	d827      	bhi.n	80042be <UART_SetConfig+0x506>
 800426e:	a201      	add	r2, pc, #4	@ (adr r2, 8004274 <UART_SetConfig+0x4bc>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	08004299 	.word	0x08004299
 8004278:	080042a1 	.word	0x080042a1
 800427c:	080042a9 	.word	0x080042a9
 8004280:	080042bf 	.word	0x080042bf
 8004284:	080042af 	.word	0x080042af
 8004288:	080042bf 	.word	0x080042bf
 800428c:	080042bf 	.word	0x080042bf
 8004290:	080042bf 	.word	0x080042bf
 8004294:	080042b7 	.word	0x080042b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe ff44 	bl	8003124 <HAL_RCC_GetPCLK1Freq>
 800429c:	61f8      	str	r0, [r7, #28]
        break;
 800429e:	e014      	b.n	80042ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a0:	f7fe ff56 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 80042a4:	61f8      	str	r0, [r7, #28]
        break;
 80042a6:	e010      	b.n	80042ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004324 <UART_SetConfig+0x56c>)
 80042aa:	61fb      	str	r3, [r7, #28]
        break;
 80042ac:	e00d      	b.n	80042ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ae:	f7fe fea1 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 80042b2:	61f8      	str	r0, [r7, #28]
        break;
 80042b4:	e009      	b.n	80042ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ba:	61fb      	str	r3, [r7, #28]
        break;
 80042bc:	e005      	b.n	80042ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80042c8:	bf00      	nop
    }

    if (pclk != 0U)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d019      	beq.n	8004304 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	085a      	lsrs	r2, r3, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	441a      	add	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	d909      	bls.n	80042fe <UART_SetConfig+0x546>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f0:	d205      	bcs.n	80042fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e002      	b.n	8004304 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004310:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004314:	4618      	mov	r0, r3
 8004316:	3728      	adds	r7, #40	@ 0x28
 8004318:	46bd      	mov	sp, r7
 800431a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431e:	bf00      	nop
 8004320:	40008000 	.word	0x40008000
 8004324:	00f42400 	.word	0x00f42400

08004328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d01a      	beq.n	800443e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004426:	d10a      	bne.n	800443e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b098      	sub	sp, #96	@ 0x60
 8004470:	af02      	add	r7, sp, #8
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800447c:	f7fd f906 	bl	800168c <HAL_GetTick>
 8004480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b08      	cmp	r3, #8
 800448e:	d12e      	bne.n	80044ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004498:	2200      	movs	r2, #0
 800449a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f88c 	bl	80045bc <UART_WaitOnFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d021      	beq.n	80044ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044be:	653b      	str	r3, [r7, #80]	@ 0x50
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e062      	b.n	80045b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d149      	bne.n	8004590 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004504:	2200      	movs	r2, #0
 8004506:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f856 	bl	80045bc <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d03c      	beq.n	8004590 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	623b      	str	r3, [r7, #32]
   return(result);
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800452a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004534:	633b      	str	r3, [r7, #48]	@ 0x30
 8004536:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e6      	bne.n	8004516 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	60fb      	str	r3, [r7, #12]
   return(result);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	3308      	adds	r3, #8
 8004566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004568:	61fa      	str	r2, [r7, #28]
 800456a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	69b9      	ldr	r1, [r7, #24]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	617b      	str	r3, [r7, #20]
   return(result);
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e5      	bne.n	8004548 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e011      	b.n	80045b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3758      	adds	r7, #88	@ 0x58
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4613      	mov	r3, r2
 80045ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045cc:	e04f      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d04b      	beq.n	800466e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fd f859 	bl	800168c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <UART_WaitOnFlagUntilTimeout+0x30>
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d101      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e04e      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d037      	beq.n	800466e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b80      	cmp	r3, #128	@ 0x80
 8004602:	d034      	beq.n	800466e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b40      	cmp	r3, #64	@ 0x40
 8004608:	d031      	beq.n	800466e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d110      	bne.n	800463a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2208      	movs	r2, #8
 800461e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f838 	bl	8004696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2208      	movs	r2, #8
 800462a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e029      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004648:	d111      	bne.n	800466e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 f81e 	bl	8004696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e00f      	b.n	800468e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d0a0      	beq.n	80045ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004696:	b480      	push	{r7}
 8004698:	b095      	sub	sp, #84	@ 0x54
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	461a      	mov	r2, r3
 80046ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046be:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e6      	bne.n	800469e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3308      	adds	r3, #8
 80046d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	e853 3f00 	ldrex	r3, [r3]
 80046de:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3308      	adds	r3, #8
 80046ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f8:	e841 2300 	strex	r3, r2, [r1]
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1e5      	bne.n	80046d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004708:	2b01      	cmp	r3, #1
 800470a:	d118      	bne.n	800473e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	60bb      	str	r3, [r7, #8]
   return(result);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f023 0310 	bic.w	r3, r3, #16
 8004720:	647b      	str	r3, [r7, #68]	@ 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6979      	ldr	r1, [r7, #20]
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e6      	bne.n	800470c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004752:	bf00      	nop
 8004754:	3754      	adds	r7, #84	@ 0x54
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800475e:	b084      	sub	sp, #16
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	f107 001c 	add.w	r0, r7, #28
 800476c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fa69 	bl	8004c54 <USB_CoreReset>
 8004782:	4603      	mov	r3, r0
 8004784:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004786:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	@ 0x38
 800479a:	e005      	b.n	80047a8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047b4:	b004      	add	sp, #16
 80047b6:	4770      	bx	lr

080047b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d115      	bne.n	8004828 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004808:	200a      	movs	r0, #10
 800480a:	f7fc ff4b 	bl	80016a4 <HAL_Delay>
      ms += 10U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	330a      	adds	r3, #10
 8004812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa0f 	bl	8004c38 <USB_GetMode>
 800481a:	4603      	mov	r3, r0
 800481c:	2b01      	cmp	r3, #1
 800481e:	d01e      	beq.n	800485e <USB_SetCurrentMode+0x84>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2bc7      	cmp	r3, #199	@ 0xc7
 8004824:	d9f0      	bls.n	8004808 <USB_SetCurrentMode+0x2e>
 8004826:	e01a      	b.n	800485e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d115      	bne.n	800485a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800483a:	200a      	movs	r0, #10
 800483c:	f7fc ff32 	bl	80016a4 <HAL_Delay>
      ms += 10U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	330a      	adds	r3, #10
 8004844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f9f6 	bl	8004c38 <USB_GetMode>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <USB_SetCurrentMode+0x84>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2bc7      	cmp	r3, #199	@ 0xc7
 8004856:	d9f0      	bls.n	800483a <USB_SetCurrentMode+0x60>
 8004858:	e001      	b.n	800485e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e005      	b.n	800486a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2bc8      	cmp	r3, #200	@ 0xc8
 8004862:	d101      	bne.n	8004868 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004874:	b084      	sub	sp, #16
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e009      	b.n	80048a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	3340      	adds	r3, #64	@ 0x40
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	2200      	movs	r2, #0
 80048a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	3301      	adds	r3, #1
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b0e      	cmp	r3, #14
 80048ac:	d9f2      	bls.n	8004894 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11c      	bne.n	80048f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c4:	f043 0302 	orr.w	r3, r3, #2
 80048c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e005      	b.n	80048fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004902:	461a      	mov	r2, r3
 8004904:	2300      	movs	r3, #0
 8004906:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004908:	2103      	movs	r1, #3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f95a 	bl	8004bc4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004910:	2110      	movs	r1, #16
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f8f6 	bl	8004b04 <USB_FlushTxFifo>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f920 	bl	8004b68 <USB_FlushRxFifo>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004938:	461a      	mov	r2, r3
 800493a:	2300      	movs	r3, #0
 800493c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004944:	461a      	mov	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004950:	461a      	mov	r2, r3
 8004952:	2300      	movs	r3, #0
 8004954:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	e043      	b.n	80049e4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800496e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004972:	d118      	bne.n	80049a6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004986:	461a      	mov	r2, r3
 8004988:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e013      	b.n	80049b8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800499c:	461a      	mov	r2, r3
 800499e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e008      	b.n	80049b8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b2:	461a      	mov	r2, r3
 80049b4:	2300      	movs	r3, #0
 80049b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049c4:	461a      	mov	r2, r3
 80049c6:	2300      	movs	r3, #0
 80049c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049d6:	461a      	mov	r2, r3
 80049d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3301      	adds	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049e8:	461a      	mov	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d3b5      	bcc.n	800495c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	e043      	b.n	8004a7e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a0c:	d118      	bne.n	8004a40 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a20:	461a      	mov	r2, r3
 8004a22:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	e013      	b.n	8004a52 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	015a      	lsls	r2, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	461a      	mov	r2, r3
 8004a38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e008      	b.n	8004a52 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	461a      	mov	r2, r3
 8004a60:	2300      	movs	r3, #0
 8004a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a70:	461a      	mov	r2, r3
 8004a72:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a82:	461a      	mov	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d3b5      	bcc.n	80049f6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a9c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004aaa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f043 0210 	orr.w	r2, r3, #16
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	4b10      	ldr	r3, [pc, #64]	@ (8004b00 <USB_DevInit+0x28c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ac4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	f043 0208 	orr.w	r2, r3, #8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ad8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d107      	bne.n	8004af0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004afc:	b004      	add	sp, #16
 8004afe:	4770      	bx	lr
 8004b00:	803c3800 	.word	0x803c3800

08004b04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b1e:	d901      	bls.n	8004b24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e01b      	b.n	8004b5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	daf2      	bge.n	8004b12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	019b      	lsls	r3, r3, #6
 8004b34:	f043 0220 	orr.w	r2, r3, #32
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b48:	d901      	bls.n	8004b4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e006      	b.n	8004b5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d0f0      	beq.n	8004b3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b80:	d901      	bls.n	8004b86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e018      	b.n	8004bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	daf2      	bge.n	8004b74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2210      	movs	r2, #16
 8004b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ba4:	d901      	bls.n	8004baa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e006      	b.n	8004bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d0f0      	beq.n	8004b98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004be4:	4313      	orrs	r3, r2
 8004be6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b085      	sub	sp, #20
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004c10:	f023 0303 	bic.w	r3, r3, #3
 8004c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0301 	and.w	r3, r3, #1
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	3301      	adds	r3, #1
 8004c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c6c:	d901      	bls.n	8004c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e01b      	b.n	8004caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	daf2      	bge.n	8004c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c96:	d901      	bls.n	8004c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e006      	b.n	8004caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d0f0      	beq.n	8004c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <memset>:
 8004cb6:	4402      	add	r2, r0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d100      	bne.n	8004cc0 <memset+0xa>
 8004cbe:	4770      	bx	lr
 8004cc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc4:	e7f9      	b.n	8004cba <memset+0x4>
	...

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	@ (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	@ (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 f818 	bl	8004d10 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08004d84 	.word	0x08004d84
 8004d04:	08004d84 	.word	0x08004d84
 8004d08:	08004d84 	.word	0x08004d84
 8004d0c:	08004d88 	.word	0x08004d88

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
