
Practica7Altavoces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f078  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800f208  0800f208  00010208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f620  0800f620  0001130c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f620  0800f620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f628  0800f628  0001130c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f628  0800f628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f62c  0800f62c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000030c  20000000  0800f630  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dcc  2000030c  0800f93c  0001130c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050d8  0800f93c  000120d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001130c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cf7  00000000  00000000  0001133c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005594  00000000  00000000  0003a033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  0003f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d35  00000000  00000000  00041b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f7e9  00000000  00000000  000438ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e367  00000000  00000000  00073096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001173d7  00000000  00000000  000a13fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b87d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b404  00000000  00000000  001b8818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001c3c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000030c 	.word	0x2000030c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1f0 	.word	0x0800f1f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000310 	.word	0x20000310
 80001cc:	0800f1f0 	.word	0x0800f1f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f46:	f003 fd37 	bl	80049b8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f001 fcfe 	bl	800294c <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5a:	f003 fd2d 	bl	80049b8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f001 fcf4 	bl	800294c <HAL_Delay>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lcd_reset>:

void lcd_reset(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2104      	movs	r1, #4
 8000f70:	4820      	ldr	r0, [pc, #128]	@ (8000ff4 <lcd_reset+0x8c>)
 8000f72:	f003 fd21 	bl	80049b8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2110      	movs	r1, #16
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7e:	f003 fd1b 	bl	80049b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2108      	movs	r1, #8
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f8a:	f003 fd15 	bl	80049b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2110      	movs	r1, #16
 8000f92:	4818      	ldr	r0, [pc, #96]	@ (8000ff4 <lcd_reset+0x8c>)
 8000f94:	f003 fd10 	bl	80049b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4815      	ldr	r0, [pc, #84]	@ (8000ff4 <lcd_reset+0x8c>)
 8000f9e:	f003 fd0b 	bl	80049b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fac:	f003 fd04 	bl	80049b8 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb8:	f003 fcfe 	bl	80049b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <lcd_reset+0x8c>)
 8000fc2:	f003 fcf9 	bl	80049b8 <HAL_GPIO_WritePin>
    lcd_clock();
 8000fc6:	f7ff ffb7 	bl	8000f38 <lcd_clock>
    lcd_clock();
 8000fca:	f7ff ffb5 	bl	8000f38 <lcd_clock>
    lcd_clock();
 8000fce:	f7ff ffb3 	bl	8000f38 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fda:	f003 fced 	bl	80049b8 <HAL_GPIO_WritePin>
    lcd_clock();
 8000fde:	f7ff ffab 	bl	8000f38 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fea:	f003 fce5 	bl	80049b8 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	460a      	mov	r2, r1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	4613      	mov	r3, r2
 8001006:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001016:	2201      	movs	r2, #1
 8001018:	2108      	movs	r1, #8
 800101a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101e:	f003 fccb 	bl	80049b8 <HAL_GPIO_WritePin>
 8001022:	e005      	b.n	8001030 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2108      	movs	r1, #8
 8001028:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102c:	f003 fcc4 	bl	80049b8 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d005      	beq.n	800104a <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800103e:	2201      	movs	r2, #1
 8001040:	2110      	movs	r1, #16
 8001042:	4847      	ldr	r0, [pc, #284]	@ (8001160 <lcd_write+0x168>)
 8001044:	f003 fcb8 	bl	80049b8 <HAL_GPIO_WritePin>
 8001048:	e004      	b.n	8001054 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4844      	ldr	r0, [pc, #272]	@ (8001160 <lcd_write+0x168>)
 8001050:	f003 fcb2 	bl	80049b8 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	099b      	lsrs	r3, r3, #6
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	2102      	movs	r1, #2
 8001066:	483e      	ldr	r0, [pc, #248]	@ (8001160 <lcd_write+0x168>)
 8001068:	f003 fca6 	bl	80049b8 <HAL_GPIO_WritePin>
 800106c:	e004      	b.n	8001078 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2102      	movs	r1, #2
 8001072:	483b      	ldr	r0, [pc, #236]	@ (8001160 <lcd_write+0x168>)
 8001074:	f003 fca0 	bl	80049b8 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	09db      	lsrs	r3, r3, #7
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8001086:	2201      	movs	r2, #1
 8001088:	2110      	movs	r1, #16
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f003 fc93 	bl	80049b8 <HAL_GPIO_WritePin>
 8001092:	e005      	b.n	80010a0 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2110      	movs	r1, #16
 8001098:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109c:	f003 fc8c 	bl	80049b8 <HAL_GPIO_WritePin>

    if(rs)
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2104      	movs	r1, #4
 80010aa:	482d      	ldr	r0, [pc, #180]	@ (8001160 <lcd_write+0x168>)
 80010ac:	f003 fc84 	bl	80049b8 <HAL_GPIO_WritePin>
 80010b0:	e004      	b.n	80010bc <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2104      	movs	r1, #4
 80010b6:	482a      	ldr	r0, [pc, #168]	@ (8001160 <lcd_write+0x168>)
 80010b8:	f003 fc7e 	bl	80049b8 <HAL_GPIO_WritePin>

    lcd_clock();
 80010bc:	f7ff ff3c 	bl	8000f38 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d006      	beq.n	80010d8 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2108      	movs	r1, #8
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d2:	f003 fc71 	bl	80049b8 <HAL_GPIO_WritePin>
 80010d6:	e005      	b.n	80010e4 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2108      	movs	r1, #8
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e0:	f003 fc6a 	bl	80049b8 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2110      	movs	r1, #16
 80010f6:	481a      	ldr	r0, [pc, #104]	@ (8001160 <lcd_write+0x168>)
 80010f8:	f003 fc5e 	bl	80049b8 <HAL_GPIO_WritePin>
 80010fc:	e004      	b.n	8001108 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2110      	movs	r1, #16
 8001102:	4817      	ldr	r0, [pc, #92]	@ (8001160 <lcd_write+0x168>)
 8001104:	f003 fc58 	bl	80049b8 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	2102      	movs	r1, #2
 800111a:	4811      	ldr	r0, [pc, #68]	@ (8001160 <lcd_write+0x168>)
 800111c:	f003 fc4c 	bl	80049b8 <HAL_GPIO_WritePin>
 8001120:	e004      	b.n	800112c <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2102      	movs	r1, #2
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <lcd_write+0x168>)
 8001128:	f003 fc46 	bl	80049b8 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d006      	beq.n	8001148 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800113a:	2201      	movs	r2, #1
 800113c:	2110      	movs	r1, #16
 800113e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001142:	f003 fc39 	bl	80049b8 <HAL_GPIO_WritePin>
 8001146:	e005      	b.n	8001154 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f003 fc32 	bl	80049b8 <HAL_GPIO_WritePin>

    lcd_clock();
 8001154:	f7ff fef0 	bl	8000f38 <lcd_clock>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	48000400 	.word	0x48000400

08001164 <lcd_clear>:

void lcd_clear(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 8001168:	2100      	movs	r1, #0
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff ff44 	bl	8000ff8 <lcd_write>
    _lcd_char = 0;
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <lcd_clear+0x1c>)
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8001176:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <lcd_clear+0x20>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000330 	.word	0x20000330
 8001184:	20000331 	.word	0x20000331

08001188 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
 8001192:	460b      	mov	r3, r1
 8001194:	71bb      	strb	r3, [r7, #6]
 8001196:	4613      	mov	r3, r2
 8001198:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b25a      	sxtb	r2, r3
 80011b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff1b 	bl	8000ff8 <lcd_write>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff0a 	bl	8000ff8 <lcd_write>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e055      	b.n	80012a6 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 80011fa:	4b30      	ldr	r3, [pc, #192]	@ (80012bc <lcd_print+0xd0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d01c      	beq.n	800123c <lcd_print+0x50>
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b0a      	cmp	r3, #10
 800120c:	d116      	bne.n	800123c <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800120e:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <lcd_print+0xd4>)
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <lcd_print+0xd0>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d242      	bcs.n	80012a0 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800121a:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <lcd_print+0xd8>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <lcd_print+0xd4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	1c59      	adds	r1, r3, #1
 8001224:	b2c8      	uxtb	r0, r1
 8001226:	4926      	ldr	r1, [pc, #152]	@ (80012c0 <lcd_print+0xd4>)
 8001228:	7008      	strb	r0, [r1, #0]
 800122a:	4413      	add	r3, r2
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffcb 	bl	80011ca <lcd_display_address>
                _lcd_char = 0;
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <lcd_print+0xdc>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800123a:	e031      	b.n	80012a0 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <lcd_print+0xe0>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01b      	beq.n	800127c <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <lcd_print+0xdc>)
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <lcd_print+0xe0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d115      	bne.n	800127c <lcd_print+0x90>
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <lcd_print+0xd4>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <lcd_print+0xd0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d20f      	bcs.n	800127c <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800125c:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <lcd_print+0xd8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <lcd_print+0xd4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	1c59      	adds	r1, r3, #1
 8001266:	b2c8      	uxtb	r0, r1
 8001268:	4915      	ldr	r1, [pc, #84]	@ (80012c0 <lcd_print+0xd4>)
 800126a:	7008      	strb	r0, [r1, #0]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffaa 	bl	80011ca <lcd_display_address>
                    _lcd_char = 0;
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <lcd_print+0xdc>)
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff feb6 	bl	8000ff8 <lcd_write>
            if(lcd_chars) _lcd_char++;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <lcd_print+0xe0>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d005      	beq.n	80012a0 <lcd_print+0xb4>
 8001294:	4b0c      	ldr	r3, [pc, #48]	@ (80012c8 <lcd_print+0xdc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <lcd_print+0xdc>)
 800129e:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	3301      	adds	r3, #1
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1a3      	bne.n	80011fa <lcd_print+0xe>
        }
    }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000329 	.word	0x20000329
 80012c0:	20000331 	.word	0x20000331
 80012c4:	2000032c 	.word	0x2000032c
 80012c8:	20000330 	.word	0x20000330
 80012cc:	20000328 	.word	0x20000328

080012d0 <writeIntegerToLCD>:

void writeIntegerToLCD(int integer)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	//	Break down the original number into the thousands, hundreds, tens,
	//	and ones places and then immediately write that value to the LCD
	unsigned char thousands = integer / 1000;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a32      	ldr	r2, [pc, #200]	@ (80013a4 <writeIntegerToLCD+0xd4>)
 80012dc:	fb82 1203 	smull	r1, r2, r2, r3
 80012e0:	1192      	asrs	r2, r2, #6
 80012e2:	17db      	asrs	r3, r3, #31
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	73fb      	strb	r3, [r7, #15]
	lcd_write( thousands + 0x30,1);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	3330      	adds	r3, #48	@ 0x30
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2101      	movs	r1, #1
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe81 	bl	8000ff8 <lcd_write>

	unsigned char hundreds = (integer - thousands*1000) / 100;
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	4a2b      	ldr	r2, [pc, #172]	@ (80013a8 <writeIntegerToLCD+0xd8>)
 80012fa:	fb03 f202 	mul.w	r2, r3, r2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a2a      	ldr	r2, [pc, #168]	@ (80013ac <writeIntegerToLCD+0xdc>)
 8001304:	fb82 1203 	smull	r1, r2, r2, r3
 8001308:	1152      	asrs	r2, r2, #5
 800130a:	17db      	asrs	r3, r3, #31
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	73bb      	strb	r3, [r7, #14]
	lcd_write( hundreds + 0x30,1);
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	3330      	adds	r3, #48	@ 0x30
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2101      	movs	r1, #1
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe6d 	bl	8000ff8 <lcd_write>

	unsigned char tens = (integer - thousands*1000 - hundreds*100 ) / 10;
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	4a21      	ldr	r2, [pc, #132]	@ (80013a8 <writeIntegerToLCD+0xd8>)
 8001322:	fb03 f202 	mul.w	r2, r3, r2
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	441a      	add	r2, r3
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	4413      	add	r3, r2
 8001336:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <writeIntegerToLCD+0xe0>)
 8001338:	fb82 1203 	smull	r1, r2, r2, r3
 800133c:	1092      	asrs	r2, r2, #2
 800133e:	17db      	asrs	r3, r3, #31
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	737b      	strb	r3, [r7, #13]
	lcd_write( tens + 0x30,1);
 8001344:	7b7b      	ldrb	r3, [r7, #13]
 8001346:	3330      	adds	r3, #48	@ 0x30
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2101      	movs	r1, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe53 	bl	8000ff8 <lcd_write>

	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	461a      	mov	r2, r3
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	7bbb      	ldrb	r3, [r7, #14]
 8001360:	4619      	mov	r1, r3
 8001362:	0089      	lsls	r1, r1, #2
 8001364:	4419      	add	r1, r3
 8001366:	00c9      	lsls	r1, r1, #3
 8001368:	1acb      	subs	r3, r1, r3
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4413      	add	r3, r2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	7b7b      	ldrb	r3, [r7, #13]
 800137c:	4619      	mov	r1, r3
 800137e:	0149      	lsls	r1, r1, #5
 8001380:	1ac9      	subs	r1, r1, r3
 8001382:	0089      	lsls	r1, r1, #2
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	733b      	strb	r3, [r7, #12]
	lcd_write( ones + 0x30,1);
 800138e:	7b3b      	ldrb	r3, [r7, #12]
 8001390:	3330      	adds	r3, #48	@ 0x30
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2101      	movs	r1, #1
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe2e 	bl	8000ff8 <lcd_write>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	10624dd3 	.word	0x10624dd3
 80013a8:	fffffc18 	.word	0xfffffc18
 80013ac:	51eb851f 	.word	0x51eb851f
 80013b0:	66666667 	.word	0x66666667

080013b4 <moveToXY>:

void moveToXY(unsigned char row, unsigned char column)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	460a      	mov	r2, r1
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	011a      	lsls	r2, r3, #4
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	dc0a      	bgt.n	80013ea <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013dc:	b25b      	sxtb	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe08 	bl	8000ff8 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80013e8:	e059      	b.n	800149e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	dd17      	ble.n	8001420 <moveToXY+0x6c>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b1f      	cmp	r3, #31
 80013f4:	dc14      	bgt.n	8001420 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	425a      	negs	r2, r3
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	f002 020f 	and.w	r2, r2, #15
 8001402:	bf58      	it	pl
 8001404:	4253      	negpl	r3, r2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	3340      	adds	r3, #64	@ 0x40
 800140a:	b2db      	uxtb	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001412:	b25b      	sxtb	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fded 	bl	8000ff8 <lcd_write>
 800141e:	e03e      	b.n	800149e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b28      	cmp	r3, #40	@ 0x28
 8001424:	dd1b      	ble.n	800145e <moveToXY+0xaa>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b3b      	cmp	r3, #59	@ 0x3b
 800142a:	dc18      	bgt.n	800145e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <moveToXY+0xf4>)
 8001430:	fb83 1302 	smull	r1, r3, r3, r2
 8001434:	1119      	asrs	r1, r3, #4
 8001436:	17d3      	asrs	r3, r2, #31
 8001438:	1ac9      	subs	r1, r1, r3
 800143a:	460b      	mov	r3, r1
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	1ad1      	subs	r1, r2, r3
 8001444:	b2cb      	uxtb	r3, r1
 8001446:	3314      	adds	r3, #20
 8001448:	b2db      	uxtb	r3, r3
 800144a:	b25b      	sxtb	r3, r3
 800144c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001450:	b25b      	sxtb	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fdce 	bl	8000ff8 <lcd_write>
 800145c:	e01f      	b.n	800149e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b13      	cmp	r3, #19
 8001462:	dd1c      	ble.n	800149e <moveToXY+0xea>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b27      	cmp	r3, #39	@ 0x27
 8001468:	dc19      	bgt.n	800149e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <moveToXY+0xf8>)
 800146e:	fb83 1302 	smull	r1, r3, r3, r2
 8001472:	4413      	add	r3, r2
 8001474:	1159      	asrs	r1, r3, #5
 8001476:	17d3      	asrs	r3, r2, #31
 8001478:	1ac9      	subs	r1, r1, r3
 800147a:	460b      	mov	r3, r1
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	1a5b      	subs	r3, r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	1ad1      	subs	r1, r2, r3
 8001484:	b2cb      	uxtb	r3, r1
 8001486:	3354      	adds	r3, #84	@ 0x54
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b25b      	sxtb	r3, r3
 800148c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001490:	b25b      	sxtb	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fdae 	bl	8000ff8 <lcd_write>
}
 800149c:	e7ff      	b.n	800149e <moveToXY+0xea>
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	66666667 	.word	0x66666667
 80014ac:	88888889 	.word	0x88888889

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f001 f9d5 	bl	8002862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f83a 	bl	8001530 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014bc:	f000 f89a 	bl	80015f4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c0:	f000 fae0 	bl	8001a84 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80014c4:	f000 f96c 	bl	80017a0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80014c8:	f000 f9a2 	bl	8001810 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80014cc:	f000 f9e0 	bl	8001890 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80014d0:	f000 fa04 	bl	80018dc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80014d4:	f000 fa76 	bl	80019c4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80014d8:	f000 faa4 	bl	8001a24 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 80014dc:	f000 f92e 	bl	800173c <MX_DAC1_Init>
  MX_TIM7_Init();
 80014e0:	f000 fa3a 	bl	8001958 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 80014e4:	f00a fa3c 	bl	800b960 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80014e8:	f000 f8b2 	bl	8001650 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80014ec:	2110      	movs	r1, #16
 80014ee:	480e      	ldr	r0, [pc, #56]	@ (8001528 <main+0x78>)
 80014f0:	f002 fda5 	bl	800403e <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <main+0x7c>)
 80014f6:	f006 fa69 	bl	80079cc <HAL_TIM_Base_Start_IT>
  lcd_reset();
 80014fa:	f7ff fd35 	bl	8000f68 <lcd_reset>
  lcd_display_settings(1,0,0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff fe40 	bl	8001188 <lcd_display_settings>
  lcd_clear();
 8001508:	f7ff fe2c 	bl	8001164 <lcd_clear>
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin, 1);
 800150c:	2201      	movs	r2, #1
 800150e:	2104      	movs	r1, #4
 8001510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001514:	f003 fa50 	bl	80049b8 <HAL_GPIO_WritePin>
    writeIntegerToLCD(HAL_ADC_GetValue (&hadc1));
    HAL_Delay(300);*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    my_button();
 8001518:	f000 fc2e 	bl	8001d78 <my_button>
    HAL_Delay(200);
 800151c:	20c8      	movs	r0, #200	@ 0xc8
 800151e:	f001 fa15 	bl	800294c <HAL_Delay>
    my_button();
 8001522:	bf00      	nop
 8001524:	e7f8      	b.n	8001518 <main+0x68>
 8001526:	bf00      	nop
 8001528:	20000398 	.word	0x20000398
 800152c:	200004e0 	.word	0x200004e0

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b096      	sub	sp, #88	@ 0x58
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2244      	movs	r2, #68	@ 0x44
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f00b fd8d 	bl	800d05e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001552:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001556:	f004 fd51 	bl	8005ffc <HAL_PWREx_ControlVoltageScaling>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001560:	f000 fca4 	bl	8001eac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001564:	f004 fd2c 	bl	8005fc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001568:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <SystemClock_Config+0xc0>)
 800156a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800156e:	4a20      	ldr	r2, [pc, #128]	@ (80015f0 <SystemClock_Config+0xc0>)
 8001570:	f023 0318 	bic.w	r3, r3, #24
 8001574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001578:	2314      	movs	r3, #20
 800157a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001580:	2301      	movs	r3, #1
 8001582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001588:	2360      	movs	r3, #96	@ 0x60
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158c:	2302      	movs	r3, #2
 800158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001590:	2301      	movs	r3, #1
 8001592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001594:	2301      	movs	r3, #1
 8001596:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001598:	2328      	movs	r3, #40	@ 0x28
 800159a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800159c:	2307      	movs	r3, #7
 800159e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 fe47 	bl	8006240 <HAL_RCC_OscConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015b8:	f000 fc78 	bl	8001eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015bc:	230f      	movs	r3, #15
 80015be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c0:	2303      	movs	r3, #3
 80015c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	2104      	movs	r1, #4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f005 fa0f 	bl	80069f8 <HAL_RCC_ClockConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015e0:	f000 fc64 	bl	8001eac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015e4:	f005 ff16 	bl	8007414 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015e8:	bf00      	nop
 80015ea:	3758      	adds	r7, #88	@ 0x58
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000

080015f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0a2      	sub	sp, #136	@ 0x88
 80015f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fa:	463b      	mov	r3, r7
 80015fc:	2288      	movs	r2, #136	@ 0x88
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f00b fd2c 	bl	800d05e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001606:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800160a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800160c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001610:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001612:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001616:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001618:	2301      	movs	r3, #1
 800161a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001620:	2318      	movs	r3, #24
 8001622:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001624:	2307      	movs	r3, #7
 8001626:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001630:	f04f 7388 	mov.w	r3, #17825792	@ 0x1100000
 8001634:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001636:	463b      	mov	r3, r7
 8001638:	4618      	mov	r0, r3
 800163a:	f005 fc01 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001644:	f000 fc32 	bl	8001eac <Error_Handler>
  }
}
 8001648:	bf00      	nop
 800164a:	3788      	adds	r7, #136	@ 0x88
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001672:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <MX_ADC1_Init+0xe0>)
 8001674:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <MX_ADC1_Init+0xe4>)
 8001676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <MX_ADC1_Init+0xe0>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167e:	4b2c      	ldr	r3, [pc, #176]	@ (8001730 <MX_ADC1_Init+0xe0>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001684:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <MX_ADC1_Init+0xe0>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168a:	4b29      	ldr	r3, [pc, #164]	@ (8001730 <MX_ADC1_Init+0xe0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <MX_ADC1_Init+0xe0>)
 8001692:	2204      	movs	r2, #4
 8001694:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <MX_ADC1_Init+0xe0>)
 8001698:	2200      	movs	r2, #0
 800169a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <MX_ADC1_Init+0xe0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d2:	4817      	ldr	r0, [pc, #92]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016d4:	f001 fb42 	bl	8002d5c <HAL_ADC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016de:	f000 fbe5 	bl	8001eac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4810      	ldr	r0, [pc, #64]	@ (8001730 <MX_ADC1_Init+0xe0>)
 80016ee:	f002 fac3 	bl	8003c78 <HAL_ADCEx_MultiModeConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016f8:	f000 fbd8 	bl	8001eac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_ADC1_Init+0xe8>)
 80016fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001700:	2306      	movs	r3, #6
 8001702:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001708:	237f      	movs	r3, #127	@ 0x7f
 800170a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800170c:	2304      	movs	r3, #4
 800170e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_ADC1_Init+0xe0>)
 800171a:	f001 fe0f 	bl	800333c <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001724:	f000 fbc2 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	@ 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000334 	.word	0x20000334
 8001734:	50040000 	.word	0x50040000
 8001738:	3ac04000 	.word	0x3ac04000

0800173c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2224      	movs	r2, #36	@ 0x24
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00b fc88 	bl	800d05e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <MX_DAC1_Init+0x5c>)
 8001750:	4a12      	ldr	r2, [pc, #72]	@ (800179c <MX_DAC1_Init+0x60>)
 8001752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001754:	4810      	ldr	r0, [pc, #64]	@ (8001798 <MX_DAC1_Init+0x5c>)
 8001756:	f002 fc50 	bl	8003ffa <HAL_DAC_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001760:	f000 fba4 	bl	8001eac <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2210      	movs	r2, #16
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <MX_DAC1_Init+0x5c>)
 8001780:	f002 fd33 	bl	80041ea <HAL_DAC_ConfigChannel>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800178a:	f000 fb8f 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	@ 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000398 	.word	0x20000398
 800179c:	40007400 	.word	0x40007400

080017a0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80017a4:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017a6:	4a19      	ldr	r2, [pc, #100]	@ (800180c <MX_DFSDM1_Init+0x6c>)
 80017a8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80017aa:	4b17      	ldr	r3, [pc, #92]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017b0:	4b15      	ldr	r3, [pc, #84]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ce:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017d8:	2204      	movs	r2, #4
 80017da:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <MX_DFSDM1_Init+0x68>)
 80017f6:	f002 fe29 	bl	800444c <HAL_DFSDM_ChannelInit>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001800:	f000 fb54 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200003ac 	.word	0x200003ac
 800180c:	40016020 	.word	0x40016020

08001810 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001814:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001816:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <MX_I2C2_Init+0x78>)
 8001818:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <MX_I2C2_Init+0x74>)
 800181c:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <MX_I2C2_Init+0x7c>)
 800181e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001820:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001826:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001828:	2201      	movs	r2, #1
 800182a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <MX_I2C2_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <MX_I2C2_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800183e:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001844:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800184a:	480e      	ldr	r0, [pc, #56]	@ (8001884 <MX_I2C2_Init+0x74>)
 800184c:	f003 f8ef 	bl	8004a2e <HAL_I2C_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001856:	f000 fb29 	bl	8001eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800185a:	2100      	movs	r1, #0
 800185c:	4809      	ldr	r0, [pc, #36]	@ (8001884 <MX_I2C2_Init+0x74>)
 800185e:	f003 f981 	bl	8004b64 <HAL_I2CEx_ConfigAnalogFilter>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001868:	f000 fb20 	bl	8001eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800186c:	2100      	movs	r1, #0
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_I2C2_Init+0x74>)
 8001870:	f003 f9c3 	bl	8004bfa <HAL_I2CEx_ConfigDigitalFilter>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800187a:	f000 fb17 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	200003e4 	.word	0x200003e4
 8001888:	40005800 	.word	0x40005800
 800188c:	10d19ce4 	.word	0x10d19ce4

08001890 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001894:	4b0f      	ldr	r3, [pc, #60]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 8001896:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <MX_QUADSPI_Init+0x48>)
 8001898:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 800189c:	2202      	movs	r2, #2
 800189e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 80018a8:	2210      	movs	r2, #16
 80018aa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 80018ae:	2217      	movs	r2, #23
 80018b0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <MX_QUADSPI_Init+0x44>)
 80018c0:	f004 fc02 	bl	80060c8 <HAL_QSPI_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80018ca:	f000 faef 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000438 	.word	0x20000438
 80018d8:	a0001000 	.word	0xa0001000

080018dc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_SPI3_Init+0x74>)
 80018e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001954 <MX_SPI3_Init+0x78>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001950 <MX_SPI3_Init+0x74>)
 80018e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018ee:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <MX_SPI3_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <MX_SPI3_Init+0x74>)
 80018f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fc:	4b14      	ldr	r3, [pc, #80]	@ (8001950 <MX_SPI3_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001902:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <MX_SPI3_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_SPI3_Init+0x74>)
 800190a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <MX_SPI3_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <MX_SPI3_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <MX_SPI3_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <MX_SPI3_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <MX_SPI3_Init+0x74>)
 800192a:	2207      	movs	r2, #7
 800192c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <MX_SPI3_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <MX_SPI3_Init+0x74>)
 8001936:	2208      	movs	r2, #8
 8001938:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_SPI3_Init+0x74>)
 800193c:	f005 ff4c 	bl	80077d8 <HAL_SPI_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001946:	f000 fab1 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	2000047c 	.word	0x2000047c
 8001954:	40003c00 	.word	0x40003c00

08001958 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_TIM7_Init+0x64>)
 800196a:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <MX_TIM7_Init+0x68>)
 800196c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800196e:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <MX_TIM7_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <MX_TIM7_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3300;
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <MX_TIM7_Init+0x64>)
 800197c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001980:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_TIM7_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <MX_TIM7_Init+0x64>)
 800198a:	f005 ffc8 	bl	800791e <HAL_TIM_Base_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001994:	f000 fa8a 	bl	8001eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019a0:	1d3b      	adds	r3, r7, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_TIM7_Init+0x64>)
 80019a6:	f006 f927 	bl	8007bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80019b0:	f000 fa7c 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200004e0 	.word	0x200004e0
 80019c0:	40001400 	.word	0x40001400

080019c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019ca:	4a15      	ldr	r2, [pc, #84]	@ (8001a20 <MX_USART1_UART_Init+0x5c>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019ce:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <MX_USART1_UART_Init+0x58>)
 8001a08:	f006 f97e 	bl	8007d08 <HAL_UART_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a12:	f000 fa4b 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000052c 	.word	0x2000052c
 8001a20:	40013800 	.word	0x40013800

08001a24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a28:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a2a:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <MX_USART3_UART_Init+0x5c>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MX_USART3_UART_Init+0x58>)
 8001a68:	f006 f94e 	bl	8007d08 <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001a72:	f000 fa1b 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200005b4 	.word	0x200005b4
 8001a80:	40004800 	.word	0x40004800

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9a:	4bb1      	ldr	r3, [pc, #708]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	4ab0      	ldr	r2, [pc, #704]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa6:	4bae      	ldr	r3, [pc, #696]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4bab      	ldr	r3, [pc, #684]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4aaa      	ldr	r2, [pc, #680]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4ba8      	ldr	r3, [pc, #672]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	4ba5      	ldr	r3, [pc, #660]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4aa4      	ldr	r2, [pc, #656]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	4b9f      	ldr	r3, [pc, #636]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a9e      	ldr	r2, [pc, #632]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b9c      	ldr	r3, [pc, #624]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	4b99      	ldr	r3, [pc, #612]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afe:	4a98      	ldr	r2, [pc, #608]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b06:	4b96      	ldr	r3, [pc, #600]	@ (8001d60 <MX_GPIO_Init+0x2dc>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001b18:	4892      	ldr	r0, [pc, #584]	@ (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b1a:	f002 ff4d 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b28:	f002 ff46 	bl	80049b8 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8001b32:	488d      	ldr	r0, [pc, #564]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b34:	f002 ff40 	bl	80049b8 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001b3e:	488b      	ldr	r0, [pc, #556]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001b40:	f002 ff3a 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b4a:	4888      	ldr	r0, [pc, #544]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001b4c:	f002 ff34 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001b56:	4886      	ldr	r0, [pc, #536]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001b58:	f002 ff2e 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2120      	movs	r1, #32
 8001b60:	4881      	ldr	r0, [pc, #516]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b62:	f002 ff29 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2101      	movs	r1, #1
 8001b6a:	487e      	ldr	r0, [pc, #504]	@ (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b6c:	f002 ff24 	bl	80049b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001b70:	f240 1315 	movw	r3, #277	@ 0x115
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4876      	ldr	r0, [pc, #472]	@ (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b8a:	f002 fd6b 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001b8e:	236a      	movs	r3, #106	@ 0x6a
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4870      	ldr	r0, [pc, #448]	@ (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ba4:	f002 fd5e 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	486c      	ldr	r0, [pc, #432]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001bc0:	f002 fd50 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f002 fd3f 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001be6:	f248 131c 	movw	r3, #33052	@ 0x811c
 8001bea:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c02:	f002 fd2f 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001c06:	23c0      	movs	r3, #192	@ 0xc0
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c16:	2305      	movs	r3, #5
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c24:	f002 fd1e 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	484a      	ldr	r0, [pc, #296]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001c3e:	f002 fd11 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001c42:	f24f 0336 	movw	r3, #61494	@ 0xf036
 8001c46:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4843      	ldr	r0, [pc, #268]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001c5c:	f002 fd02 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001c60:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001c64:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	483d      	ldr	r0, [pc, #244]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001c78:	f002 fcf4 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001c7c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4835      	ldr	r0, [pc, #212]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001c96:	f002 fce5 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001c9a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	482f      	ldr	r0, [pc, #188]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001cb4:	f002 fcd6 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001cb8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cbe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4828      	ldr	r0, [pc, #160]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001cd0:	f002 fcc8 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ce4:	2305      	movs	r3, #5
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	481f      	ldr	r0, [pc, #124]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001cf0:	f002 fcb8 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001cf4:	2378      	movs	r3, #120	@ 0x78
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d04:	2307      	movs	r3, #7
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4817      	ldr	r0, [pc, #92]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001d10:	f002 fca8 	bl	8004664 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001d14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1a:	2312      	movs	r3, #18
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d26:	2304      	movs	r3, #4
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480d      	ldr	r0, [pc, #52]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001d32:	f002 fc97 	bl	8004664 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2100      	movs	r1, #0
 8001d3a:	2017      	movs	r0, #23
 8001d3c:	f002 f927 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d40:	2017      	movs	r0, #23
 8001d42:	f002 f940 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2028      	movs	r0, #40	@ 0x28
 8001d4c:	f002 f91f 	bl	8003f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d50:	2028      	movs	r0, #40	@ 0x28
 8001d52:	f002 f938 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	@ 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48001000 	.word	0x48001000
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	48000c00 	.word	0x48000c00
 8001d70:	48000800 	.word	0x48000800
 8001d74:	00000000 	.word	0x00000000

08001d78 <my_button>:

/* USER CODE BEGIN 4 */
  extern float gain;
  extern uint8_t effect;
  void my_button(void)
  {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
	uint16_t button;
	char str[16];
	HAL_ADC_Start(&hadc1);
 8001d7e:	4846      	ldr	r0, [pc, #280]	@ (8001e98 <my_button+0x120>)
 8001d80:	f001 f93c 	bl	8002ffc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001d84:	2164      	movs	r1, #100	@ 0x64
 8001d86:	4844      	ldr	r0, [pc, #272]	@ (8001e98 <my_button+0x120>)
 8001d88:	f001 f9f2 	bl	8003170 <HAL_ADC_PollForConversion>
	button = HAL_ADC_GetValue(&hadc1);
 8001d8c:	4842      	ldr	r0, [pc, #264]	@ (8001e98 <my_button+0x120>)
 8001d8e:	f001 fac7 	bl	8003320 <HAL_ADC_GetValue>
 8001d92:	4603      	mov	r3, r0
 8001d94:	82fb      	strh	r3, [r7, #22]
	if (button < 3000)
 8001d96:	8afb      	ldrh	r3, [r7, #22]
 8001d98:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d870      	bhi.n	8001e82 <my_button+0x10a>
	{
		if (button < 2500 && 2000 < button) //boton LEFT
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d809      	bhi.n	8001dbe <my_button+0x46>
 8001daa:	8afb      	ldrh	r3, [r7, #22]
 8001dac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001db0:	d905      	bls.n	8001dbe <my_button+0x46>
			effect = effect - 5;
 8001db2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <my_button+0x124>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3b05      	subs	r3, #5
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b38      	ldr	r3, [pc, #224]	@ (8001e9c <my_button+0x124>)
 8001dbc:	701a      	strb	r2, [r3, #0]

		if(button < 10)                     //boton RIGHT
 8001dbe:	8afb      	ldrh	r3, [r7, #22]
 8001dc0:	2b09      	cmp	r3, #9
 8001dc2:	d805      	bhi.n	8001dd0 <my_button+0x58>
			effect = effect + 5;
 8001dc4:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <my_button+0x124>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	3305      	adds	r3, #5
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b33      	ldr	r3, [pc, #204]	@ (8001e9c <my_button+0x124>)
 8001dce:	701a      	strb	r2, [r3, #0]

		if(button < 1900 && 1300 < button)  //Boton DOWN
 8001dd0:	8afb      	ldrh	r3, [r7, #22]
 8001dd2:	f240 726b 	movw	r2, #1899	@ 0x76b
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d817      	bhi.n	8001e0a <my_button+0x92>
 8001dda:	8afb      	ldrh	r3, [r7, #22]
 8001ddc:	f240 5214 	movw	r2, #1300	@ 0x514
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d912      	bls.n	8001e0a <my_button+0x92>
			gain = gain - 0.1;
 8001de4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <my_button+0x128>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fbad 	bl	8000548 <__aeabi_f2d>
 8001dee:	a328      	add	r3, pc, #160	@ (adr r3, 8001e90 <my_button+0x118>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fa48 	bl	8000288 <__aeabi_dsub>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fed2 	bl	8000ba8 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4a26      	ldr	r2, [pc, #152]	@ (8001ea0 <my_button+0x128>)
 8001e08:	6013      	str	r3, [r2, #0]

		if(button < 750 && 650 < button)    //Boton UP
 8001e0a:	8afb      	ldrh	r3, [r7, #22]
 8001e0c:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d817      	bhi.n	8001e44 <my_button+0xcc>
 8001e14:	8afb      	ldrh	r3, [r7, #22]
 8001e16:	f240 228a 	movw	r2, #650	@ 0x28a
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d912      	bls.n	8001e44 <my_button+0xcc>
			gain = gain + 0.1;
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <my_button+0x128>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb90 	bl	8000548 <__aeabi_f2d>
 8001e28:	a319      	add	r3, pc, #100	@ (adr r3, 8001e90 <my_button+0x118>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fa2d 	bl	800028c <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe feb5 	bl	8000ba8 <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <my_button+0x128>)
 8001e42:	6013      	str	r3, [r2, #0]

		moveToXY(0,0);
 8001e44:	2100      	movs	r1, #0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fab4 	bl	80013b4 <moveToXY>
		lcd_print("Effect= ");
 8001e4c:	4815      	ldr	r0, [pc, #84]	@ (8001ea4 <my_button+0x12c>)
 8001e4e:	f7ff f9cd 	bl	80011ec <lcd_print>
		writeIntegerToLCD(effect);
 8001e52:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <my_button+0x124>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fa3a 	bl	80012d0 <writeIntegerToLCD>
		moveToXY(1,0);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f7ff faa8 	bl	80013b4 <moveToXY>
		sprintf(str, "Gain= %f", gain);
 8001e64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <my_button+0x128>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb6d 	bl	8000548 <__aeabi_f2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	1d38      	adds	r0, r7, #4
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <my_button+0x130>)
 8001e76:	f00b f88f 	bl	800cf98 <siprintf>
		lcd_print(str);
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f9b5 	bl	80011ec <lcd_print>
	}
  }
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	9999999a 	.word	0x9999999a
 8001e94:	3fb99999 	.word	0x3fb99999
 8001e98:	20000334 	.word	0x20000334
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	0800f208 	.word	0x0800f208
 8001ea8:	0800f214 	.word	0x0800f214

08001eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb0:	b672      	cpsid	i
}
 8001eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <Error_Handler+0x8>

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <HAL_MspInit+0x44>)
 8001ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8001efc <HAL_MspInit+0x44>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <HAL_MspInit+0x44>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_MspInit+0x44>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_MspInit+0x44>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_MspInit+0x44>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000

08001f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a15      	ldr	r2, [pc, #84]	@ (8001f74 <HAL_ADC_MspInit+0x74>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d123      	bne.n	8001f6a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_ADC_MspInit+0x78>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <HAL_ADC_MspInit+0x78>)
 8001f28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_ADC_MspInit+0x78>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_ADC_MspInit+0x78>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_ADC_MspInit+0x78>)
 8001f40:	f043 0304 	orr.w	r3, r3, #4
 8001f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_ADC_MspInit+0x78>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001f52:	233f      	movs	r3, #63	@ 0x3f
 8001f54:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f56:	230b      	movs	r3, #11
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5e:	f107 0314 	add.w	r3, r7, #20
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <HAL_ADC_MspInit+0x7c>)
 8001f66:	f002 fb7d 	bl	8004664 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	@ 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	50040000 	.word	0x50040000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48000800 	.word	0x48000800

08001f80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <HAL_DAC_MspInit+0x74>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d124      	bne.n	8001fec <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001fa2:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <HAL_DAC_MspInit+0x78>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <HAL_DAC_MspInit+0x78>)
 8001fa8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fae:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_DAC_MspInit+0x78>)
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <HAL_DAC_MspInit+0x78>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff8 <HAL_DAC_MspInit+0x78>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <HAL_DAC_MspInit+0x78>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe8:	f002 fb3c 	bl	8004664 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40007400 	.word	0x40007400
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b0ac      	sub	sp, #176	@ 0xb0
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2288      	movs	r2, #136	@ 0x88
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f00b f81e 	bl	800d05e <memset>
  if(DFSDM1_Init == 0)
 8002022:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d142      	bne.n	80020b0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800202a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800202e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4618      	mov	r0, r3
 800203c:	f004 ff00 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002046:	f7ff ff31 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800204a:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002050:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002054:	6613      	str	r3, [r2, #96]	@ 0x60
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002062:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002066:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206e:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800207a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800207e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002094:	2306      	movs	r3, #6
 8002096:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800209a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	@ (80020c0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80020a2:	f002 fadf 	bl	8004664 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	4a02      	ldr	r2, [pc, #8]	@ (80020b8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80020ae:	6013      	str	r3, [r2, #0]
  }

}
 80020b0:	bf00      	nop
 80020b2:	37b0      	adds	r7, #176	@ 0xb0
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	2000063c 	.word	0x2000063c
 80020bc:	40021000 	.word	0x40021000
 80020c0:	48001000 	.word	0x48001000

080020c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b0ac      	sub	sp, #176	@ 0xb0
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2288      	movs	r2, #136	@ 0x88
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00a ffba 	bl	800d05e <memset>
  if(hi2c->Instance==I2C2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a21      	ldr	r2, [pc, #132]	@ (8002174 <HAL_I2C_MspInit+0xb0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d13b      	bne.n	800216c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fe9d 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800210c:	f7ff fece 	bl	8001eac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_I2C_MspInit+0xb4>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_I2C_MspInit+0xb4>)
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_I2C_MspInit+0xb4>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002128:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800212c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002130:	2312      	movs	r3, #18
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002136:	2301      	movs	r3, #1
 8002138:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002142:	2304      	movs	r3, #4
 8002144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800214c:	4619      	mov	r1, r3
 800214e:	480b      	ldr	r0, [pc, #44]	@ (800217c <HAL_I2C_MspInit+0xb8>)
 8002150:	f002 fa88 	bl	8004664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_I2C_MspInit+0xb4>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_I2C_MspInit+0xb4>)
 800215a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800215e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_I2C_MspInit+0xb4>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800216c:	bf00      	nop
 800216e:	37b0      	adds	r7, #176	@ 0xb0
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40005800 	.word	0x40005800
 8002178:	40021000 	.word	0x40021000
 800217c:	48000400 	.word	0x48000400

08002180 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	@ 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_QSPI_MspInit+0x7c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d128      	bne.n	80021f4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_QSPI_MspInit+0x80>)
 80021a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a6:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <HAL_QSPI_MspInit+0x80>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80021ae:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <HAL_QSPI_MspInit+0x80>)
 80021b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_QSPI_MspInit+0x80>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	4a10      	ldr	r2, [pc, #64]	@ (8002200 <HAL_QSPI_MspInit+0x80>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <HAL_QSPI_MspInit+0x80>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80021d2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80021d6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d8:	2302      	movs	r3, #2
 80021da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021e4:	230a      	movs	r3, #10
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	4619      	mov	r1, r3
 80021ee:	4805      	ldr	r0, [pc, #20]	@ (8002204 <HAL_QSPI_MspInit+0x84>)
 80021f0:	f002 fa38 	bl	8004664 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80021f4:	bf00      	nop
 80021f6:	3728      	adds	r7, #40	@ 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	a0001000 	.word	0xa0001000
 8002200:	40021000 	.word	0x40021000
 8002204:	48001000 	.word	0x48001000

08002208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	@ 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <HAL_SPI_MspInit+0x7c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d128      	bne.n	800227c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_SPI_MspInit+0x80>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	4a16      	ldr	r2, [pc, #88]	@ (8002288 <HAL_SPI_MspInit+0x80>)
 8002230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002234:	6593      	str	r3, [r2, #88]	@ 0x58
 8002236:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_SPI_MspInit+0x80>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <HAL_SPI_MspInit+0x80>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	4a10      	ldr	r2, [pc, #64]	@ (8002288 <HAL_SPI_MspInit+0x80>)
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <HAL_SPI_MspInit+0x80>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800225a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800226c:	2306      	movs	r3, #6
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <HAL_SPI_MspInit+0x84>)
 8002278:	f002 f9f4 	bl	8004664 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	@ 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40003c00 	.word	0x40003c00
 8002288:	40021000 	.word	0x40021000
 800228c:	48000800 	.word	0x48000800

08002290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0d      	ldr	r2, [pc, #52]	@ (80022d4 <HAL_TIM_Base_MspInit+0x44>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d113      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022a2:	4b0d      	ldr	r3, [pc, #52]	@ (80022d8 <HAL_TIM_Base_MspInit+0x48>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <HAL_TIM_Base_MspInit+0x48>)
 80022a8:	f043 0320 	orr.w	r3, r3, #32
 80022ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ae:	4b0a      	ldr	r3, [pc, #40]	@ (80022d8 <HAL_TIM_Base_MspInit+0x48>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2037      	movs	r0, #55	@ 0x37
 80022c0:	f001 fe65 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022c4:	2037      	movs	r0, #55	@ 0x37
 80022c6:	f001 fe7e 	bl	8003fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40001400 	.word	0x40001400
 80022d8:	40021000 	.word	0x40021000

080022dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0ae      	sub	sp, #184	@ 0xb8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2288      	movs	r2, #136	@ 0x88
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00a feae 	bl	800d05e <memset>
  if(huart->Instance==USART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a42      	ldr	r2, [pc, #264]	@ (8002410 <HAL_UART_MspInit+0x134>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d13b      	bne.n	8002384 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800230c:	2301      	movs	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002310:	2300      	movs	r3, #0
 8002312:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	4618      	mov	r0, r3
 800231a:	f004 fd91 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002324:	f7ff fdc2 	bl	8001eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002328:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_UART_MspInit+0x138>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232c:	4a39      	ldr	r2, [pc, #228]	@ (8002414 <HAL_UART_MspInit+0x138>)
 800232e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002332:	6613      	str	r3, [r2, #96]	@ 0x60
 8002334:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_UART_MspInit+0x138>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_UART_MspInit+0x138>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	4a33      	ldr	r2, [pc, #204]	@ (8002414 <HAL_UART_MspInit+0x138>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234c:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <HAL_UART_MspInit+0x138>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002358:	23c0      	movs	r3, #192	@ 0xc0
 800235a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002370:	2307      	movs	r3, #7
 8002372:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800237a:	4619      	mov	r1, r3
 800237c:	4826      	ldr	r0, [pc, #152]	@ (8002418 <HAL_UART_MspInit+0x13c>)
 800237e:	f002 f971 	bl	8004664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002382:	e040      	b.n	8002406 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a24      	ldr	r2, [pc, #144]	@ (800241c <HAL_UART_MspInit+0x140>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d13b      	bne.n	8002406 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800238e:	2304      	movs	r3, #4
 8002390:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002392:	2300      	movs	r3, #0
 8002394:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002396:	f107 031c 	add.w	r3, r7, #28
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fd50 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_UART_MspInit+0xce>
      Error_Handler();
 80023a6:	f7ff fd81 	bl	8001eac <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <HAL_UART_MspInit+0x138>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	4a19      	ldr	r2, [pc, #100]	@ (8002414 <HAL_UART_MspInit+0x138>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b6:	4b17      	ldr	r3, [pc, #92]	@ (8002414 <HAL_UART_MspInit+0x138>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_UART_MspInit+0x138>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	4a13      	ldr	r2, [pc, #76]	@ (8002414 <HAL_UART_MspInit+0x138>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_UART_MspInit+0x138>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80023da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f4:	2307      	movs	r3, #7
 80023f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80023fe:	4619      	mov	r1, r3
 8002400:	4807      	ldr	r0, [pc, #28]	@ (8002420 <HAL_UART_MspInit+0x144>)
 8002402:	f002 f92f 	bl	8004664 <HAL_GPIO_Init>
}
 8002406:	bf00      	nop
 8002408:	37b8      	adds	r7, #184	@ 0xb8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40013800 	.word	0x40013800
 8002414:	40021000 	.word	0x40021000
 8002418:	48000400 	.word	0x48000400
 800241c:	40004800 	.word	0x40004800
 8002420:	48000c00 	.word	0x48000c00

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <NMI_Handler+0x4>

0800242c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <MemManage_Handler+0x4>

0800243c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <UsageFault_Handler+0x4>

0800244c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800247a:	f000 fa47 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}

08002482 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002486:	2020      	movs	r0, #32
 8002488:	f002 faae 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800248c:	2040      	movs	r0, #64	@ 0x40
 800248e:	f002 faab 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002492:	2080      	movs	r0, #128	@ 0x80
 8002494:	f002 faa8 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002498:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800249c:	f002 faa4 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80024a8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80024ac:	f002 fa9c 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80024b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80024b4:	f002 fa98 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80024b8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024bc:	f002 fa94 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80024c0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80024c4:	f002 fa90 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80024c8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80024cc:	f002 fa8c 	bl	80049e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <TIM6_DAC_IRQHandler+0x10>)
 80024da:	f001 fdfd 	bl	80040d8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000398 	.word	0x20000398

080024e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  static int i = 0; // explicar por qué static
  float data;
  if (available == 1)
 80024ee:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <TIM7_IRQHandler+0x134>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	f040 8088 	bne.w	8002608 <TIM7_IRQHandler+0x120>
  {
	  data = ((float) audiobuf[i] + (float)(gain*queue[(uint8_t)(queue_idx - effect)][i]) +
 80024f8:	4b49      	ldr	r3, [pc, #292]	@ (8002620 <TIM7_IRQHandler+0x138>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	4413      	add	r3, r2
 8002504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <TIM7_IRQHandler+0x140>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	4b45      	ldr	r3, [pc, #276]	@ (800262c <TIM7_IRQHandler+0x144>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4618      	mov	r0, r3
 800251e:	4b41      	ldr	r3, [pc, #260]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4943      	ldr	r1, [pc, #268]	@ (8002630 <TIM7_IRQHandler+0x148>)
 8002524:	4603      	mov	r3, r0
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4403      	add	r3, r0
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800253a:	4b3e      	ldr	r3, [pc, #248]	@ (8002634 <TIM7_IRQHandler+0x14c>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002544:	ee37 7a27 	vadd.f32	s14, s14, s15
			  (float) (gain*queue[(uint8_t)(queue_idx - effect - 1)][i])) / 3;
 8002548:	4b37      	ldr	r3, [pc, #220]	@ (8002628 <TIM7_IRQHandler+0x140>)
 800254a:	781a      	ldrb	r2, [r3, #0]
 800254c:	4b37      	ldr	r3, [pc, #220]	@ (800262c <TIM7_IRQHandler+0x144>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4934      	ldr	r1, [pc, #208]	@ (8002630 <TIM7_IRQHandler+0x148>)
 8002560:	4603      	mov	r3, r0
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4403      	add	r3, r0
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002576:	4b2f      	ldr	r3, [pc, #188]	@ (8002634 <TIM7_IRQHandler+0x14c>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	  data = ((float) audiobuf[i] + (float)(gain*queue[(uint8_t)(queue_idx - effect)][i]) +
 8002580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002584:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800258c:	edc7 7a01 	vstr	s15, [r7, #4]
	  data = data * 2048.0 / 32768; // escalado de 16 -> 12 bits
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fd ffd9 	bl	8000548 <__aeabi_f2d>
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <TIM7_IRQHandler+0x150>)
 800259c:	f7fe f82c 	bl	80005f8 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b23      	ldr	r3, [pc, #140]	@ (800263c <TIM7_IRQHandler+0x154>)
 80025ae:	f7fe f94d 	bl	800084c <__aeabi_ddiv>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe faf5 	bl	8000ba8 <__aeabi_d2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	607b      	str	r3, [r7, #4]
	  data = data + 2048; // centrar en 2048
 80025c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002640 <TIM7_IRQHandler+0x158>
 80025ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ce:	edc7 7a01 	vstr	s15, [r7, #4]
	  i++;
 80025d2:	4b14      	ldr	r3, [pc, #80]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a12      	ldr	r2, [pc, #72]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 80025da:	6013      	str	r3, [r2, #0]

	  if (i >= 24)
 80025dc:	4b11      	ldr	r3, [pc, #68]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b17      	cmp	r3, #23
 80025e2:	dd05      	ble.n	80025f0 <TIM7_IRQHandler+0x108>
	  {
		  i = 0;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002624 <TIM7_IRQHandler+0x13c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
		  available = 0;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <TIM7_IRQHandler+0x134>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
			  (unsigned short int) data);
 80025f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025f8:	ee17 3a90 	vmov	r3, s15
 80025fc:	b29b      	uxth	r3, r3
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
 80025fe:	2200      	movs	r2, #0
 8002600:	2110      	movs	r1, #16
 8002602:	4810      	ldr	r0, [pc, #64]	@ (8002644 <TIM7_IRQHandler+0x15c>)
 8002604:	f001 fdc2 	bl	800418c <HAL_DAC_SetValue>
  }
  __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8002608:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <TIM7_IRQHandler+0x160>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0201 	mvn.w	r2, #1
 8002610:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM7_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim7);
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20003955 	.word	0x20003955
 8002620:	20000950 	.word	0x20000950
 8002624:	20000640 	.word	0x20000640
 8002628:	20003954 	.word	0x20003954
 800262c:	20000004 	.word	0x20000004
 8002630:	20000954 	.word	0x20000954
 8002634:	20000000 	.word	0x20000000
 8002638:	40a00000 	.word	0x40a00000
 800263c:	40e00000 	.word	0x40e00000
 8002640:	45000000 	.word	0x45000000
 8002644:	20000398 	.word	0x20000398
 8002648:	200004e0 	.word	0x200004e0

0800264c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <OTG_FS_IRQHandler+0x10>)
 8002652:	f002 fc5c 	bl	8004f0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20003b58 	.word	0x20003b58

08002660 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return 1;
 8002664:	2301      	movs	r3, #1
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_kill>:

int _kill(int pid, int sig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800267a:	f00a fd43 	bl	800d104 <__errno>
 800267e:	4603      	mov	r3, r0
 8002680:	2216      	movs	r2, #22
 8002682:	601a      	str	r2, [r3, #0]
  return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <_exit>:

void _exit (int status)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002698:	f04f 31ff 	mov.w	r1, #4294967295
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ffe7 	bl	8002670 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026a2:	bf00      	nop
 80026a4:	e7fd      	b.n	80026a2 <_exit+0x12>

080026a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e00a      	b.n	80026ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b8:	f3af 8000 	nop.w
 80026bc:	4601      	mov	r1, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	60ba      	str	r2, [r7, #8]
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	3301      	adds	r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	dbf0      	blt.n	80026b8 <_read+0x12>
  }

  return len;
 80026d6:	687b      	ldr	r3, [r7, #4]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	e009      	b.n	8002706 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	60ba      	str	r2, [r7, #8]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3301      	adds	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	dbf1      	blt.n	80026f2 <_write+0x12>
  }
  return len;
 800270e:	687b      	ldr	r3, [r7, #4]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_close>:

int _close(int file)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002740:	605a      	str	r2, [r3, #4]
  return 0;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <_isatty>:

int _isatty(int file)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002758:	2301      	movs	r3, #1
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <_sbrk+0x5c>)
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <_sbrk+0x60>)
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <_sbrk+0x64>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <_sbrk+0x64>)
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <_sbrk+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <_sbrk+0x64>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d207      	bcs.n	80027c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b0:	f00a fca8 	bl	800d104 <__errno>
 80027b4:	4603      	mov	r3, r0
 80027b6:	220c      	movs	r2, #12
 80027b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e009      	b.n	80027d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c0:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <_sbrk+0x64>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <_sbrk+0x64>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	4a05      	ldr	r2, [pc, #20]	@ (80027e4 <_sbrk+0x64>)
 80027d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027d2:	68fb      	ldr	r3, [r7, #12]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20018000 	.word	0x20018000
 80027e0:	00000400 	.word	0x00000400
 80027e4:	20000644 	.word	0x20000644
 80027e8:	200050d8 	.word	0x200050d8

080027ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <SystemInit+0x20>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	4a05      	ldr	r2, [pc, #20]	@ (800280c <SystemInit+0x20>)
 80027f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002848 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002814:	f7ff ffea 	bl	80027ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002818:	480c      	ldr	r0, [pc, #48]	@ (800284c <LoopForever+0x6>)
  ldr r1, =_edata
 800281a:	490d      	ldr	r1, [pc, #52]	@ (8002850 <LoopForever+0xa>)
  ldr r2, =_sidata
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <LoopForever+0xe>)
  movs r3, #0
 800281e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002820:	e002      	b.n	8002828 <LoopCopyDataInit>

08002822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002826:	3304      	adds	r3, #4

08002828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800282c:	d3f9      	bcc.n	8002822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002830:	4c0a      	ldr	r4, [pc, #40]	@ (800285c <LoopForever+0x16>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002834:	e001      	b.n	800283a <LoopFillZerobss>

08002836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002838:	3204      	adds	r2, #4

0800283a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800283c:	d3fb      	bcc.n	8002836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800283e:	f00a fc67 	bl	800d110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002842:	f7fe fe35 	bl	80014b0 <main>

08002846 <LoopForever>:

LoopForever:
    b LoopForever
 8002846:	e7fe      	b.n	8002846 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002848:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800284c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002850:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8002854:	0800f630 	.word	0x0800f630
  ldr r2, =_sbss
 8002858:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 800285c:	200050d8 	.word	0x200050d8

08002860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002860:	e7fe      	b.n	8002860 <ADC1_2_IRQHandler>

08002862 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286c:	2003      	movs	r0, #3
 800286e:	f001 fb83 	bl	8003f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002872:	2000      	movs	r0, #0
 8002874:	f000 f80e 	bl	8002894 <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	71fb      	strb	r3, [r7, #7]
 8002882:	e001      	b.n	8002888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002884:	f7ff fb18 	bl	8001eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002888:	79fb      	ldrb	r3, [r7, #7]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028a0:	4b17      	ldr	r3, [pc, #92]	@ (8002900 <HAL_InitTick+0x6c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d023      	beq.n	80028f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028a8:	4b16      	ldr	r3, [pc, #88]	@ (8002904 <HAL_InitTick+0x70>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_InitTick+0x6c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fb8f 	bl	8003fe2 <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10f      	bne.n	80028ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b0f      	cmp	r3, #15
 80028ce:	d809      	bhi.n	80028e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d0:	2200      	movs	r2, #0
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f001 fb59 	bl	8003f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002908 <HAL_InitTick+0x74>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e007      	b.n	80028f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	e004      	b.n	80028f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
 80028ee:	e001      	b.n	80028f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000010 	.word	0x20000010
 8002904:	20000008 	.word	0x20000008
 8002908:	2000000c 	.word	0x2000000c

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	@ (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000010 	.word	0x20000010
 8002930:	20000648 	.word	0x20000648

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	@ (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000648 	.word	0x20000648

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002966:	4b0a      	ldr	r3, [pc, #40]	@ (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000010 	.word	0x20000010

08002994 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	609a      	str	r2, [r3, #8]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3360      	adds	r3, #96	@ 0x60
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <LL_ADC_SetOffset+0x44>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	03fff000 	.word	0x03fff000

08002a44 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3360      	adds	r3, #96	@ 0x60
 8002a52:	461a      	mov	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	3360      	adds	r3, #96	@ 0x60
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3330      	adds	r3, #48	@ 0x30
 8002adc:	461a      	mov	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	211f      	movs	r1, #31
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	401a      	ands	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 011f 	and.w	r1, r3, #31
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	431a      	orrs	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3314      	adds	r3, #20
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	0e5b      	lsrs	r3, r3, #25
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	4413      	add	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	0d1b      	lsrs	r3, r3, #20
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	2107      	movs	r1, #7
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0d1b      	lsrs	r3, r3, #20
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b6e:	bf00      	nop
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	43db      	mvns	r3, r3
 8002b96:	401a      	ands	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0318 	and.w	r3, r3, #24
 8002b9e:	4908      	ldr	r1, [pc, #32]	@ (8002bc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ba0:	40d9      	lsrs	r1, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	0007ffff 	.word	0x0007ffff

08002bc4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6093      	str	r3, [r2, #8]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c34:	d101      	bne.n	8002c3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <LL_ADC_IsEnabled+0x18>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_ADC_IsEnabled+0x1a>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d101      	bne.n	8002d4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e130      	b.n	8002fd8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff f8bb 	bl	8001f00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff3f 	bl	8002c20 <LL_ADC_IsDeepPowerDownEnabled>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d004      	beq.n	8002db2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff25 	bl	8002bfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff ff5a 	bl	8002c70 <LL_ADC_IsInternalRegulatorEnabled>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d115      	bne.n	8002dee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff ff3e 	bl	8002c48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dcc:	4b84      	ldr	r3, [pc, #528]	@ (8002fe0 <HAL_ADC_Init+0x284>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	4a84      	ldr	r2, [pc, #528]	@ (8002fe4 <HAL_ADC_Init+0x288>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002de0:	e002      	b.n	8002de8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f9      	bne.n	8002de2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff3c 	bl	8002c70 <LL_ADC_IsInternalRegulatorEnabled>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff75 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8002e24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 80c9 	bne.w	8002fc6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 80c5 	bne.w	8002fc6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff35 	bl	8002cc0 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d115      	bne.n	8002e88 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e5c:	4862      	ldr	r0, [pc, #392]	@ (8002fe8 <HAL_ADC_Init+0x28c>)
 8002e5e:	f7ff ff2f 	bl	8002cc0 <LL_ADC_IsEnabled>
 8002e62:	4604      	mov	r4, r0
 8002e64:	4861      	ldr	r0, [pc, #388]	@ (8002fec <HAL_ADC_Init+0x290>)
 8002e66:	f7ff ff2b 	bl	8002cc0 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	431c      	orrs	r4, r3
 8002e6e:	4860      	ldr	r0, [pc, #384]	@ (8002ff0 <HAL_ADC_Init+0x294>)
 8002e70:	f7ff ff26 	bl	8002cc0 <LL_ADC_IsEnabled>
 8002e74:	4603      	mov	r3, r0
 8002e76:	4323      	orrs	r3, r4
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4619      	mov	r1, r3
 8002e82:	485c      	ldr	r0, [pc, #368]	@ (8002ff4 <HAL_ADC_Init+0x298>)
 8002e84:	f7ff fd86 	bl	8002994 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7e5b      	ldrb	r3, [r3, #25]
 8002e8c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e92:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e98:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e9e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d106      	bne.n	8002ec4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	045b      	lsls	r3, r3, #17
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d009      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	4b44      	ldr	r3, [pc, #272]	@ (8002ff8 <HAL_ADC_Init+0x29c>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff1b 	bl	8002d34 <LL_ADC_INJ_IsConversionOngoing>
 8002efe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d13d      	bne.n	8002f82 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d13a      	bne.n	8002f82 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f10:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f18:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f28:	f023 0302 	bic.w	r3, r3, #2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	69b9      	ldr	r1, [r7, #24]
 8002f32:	430b      	orrs	r3, r1
 8002f34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d118      	bne.n	8002f72 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f4a:	f023 0304 	bic.w	r3, r3, #4
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f56:	4311      	orrs	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f62:	430a      	orrs	r2, r1
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]
 8002f70:	e007      	b.n	8002f82 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0201 	bic.w	r2, r2, #1
 8002f80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d10c      	bne.n	8002fa4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	f023 010f 	bic.w	r1, r3, #15
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fa2:	e007      	b.n	8002fb4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020f 	bic.w	r2, r2, #15
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	f023 0303 	bic.w	r3, r3, #3
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fc4:	e007      	b.n	8002fd6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3724      	adds	r7, #36	@ 0x24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd90      	pop	{r4, r7, pc}
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	053e2d63 	.word	0x053e2d63
 8002fe8:	50040000 	.word	0x50040000
 8002fec:	50040100 	.word	0x50040100
 8002ff0:	50040200 	.word	0x50040200
 8002ff4:	50040300 	.word	0x50040300
 8002ff8:	fff0c007 	.word	0xfff0c007

08002ffc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003004:	4857      	ldr	r0, [pc, #348]	@ (8003164 <HAL_ADC_Start+0x168>)
 8003006:	f7ff fddd 	bl	8002bc4 <LL_ADC_GetMultimode>
 800300a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fe7c 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 809c 	bne.w	8003156 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_ADC_Start+0x30>
 8003028:	2302      	movs	r3, #2
 800302a:	e097      	b.n	800315c <HAL_ADC_Start+0x160>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fd73 	bl	8003b20 <ADC_Enable>
 800303a:	4603      	mov	r3, r0
 800303c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f040 8083 	bne.w	800314c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a42      	ldr	r2, [pc, #264]	@ (8003168 <HAL_ADC_Start+0x16c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d002      	beq.n	800306a <HAL_ADC_Start+0x6e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	e000      	b.n	800306c <HAL_ADC_Start+0x70>
 800306a:	4b40      	ldr	r3, [pc, #256]	@ (800316c <HAL_ADC_Start+0x170>)
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	4293      	cmp	r3, r2
 8003072:	d002      	beq.n	800307a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800308e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003092:	d106      	bne.n	80030a2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	f023 0206 	bic.w	r2, r3, #6
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	659a      	str	r2, [r3, #88]	@ 0x58
 80030a0:	e002      	b.n	80030a8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	221c      	movs	r2, #28
 80030ae:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003168 <HAL_ADC_Start+0x16c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d002      	beq.n	80030c8 <HAL_ADC_Start+0xcc>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e000      	b.n	80030ca <HAL_ADC_Start+0xce>
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_ADC_Start+0x170>)
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d008      	beq.n	80030e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d002      	beq.n	80030e4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	d114      	bne.n	800310e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fded 	bl	8002ce6 <LL_ADC_REG_StartConversion>
 800310c:	e025      	b.n	800315a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <HAL_ADC_Start+0x16c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d002      	beq.n	800312a <HAL_ADC_Start+0x12e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	e000      	b.n	800312c <HAL_ADC_Start+0x130>
 800312a:	4b10      	ldr	r3, [pc, #64]	@ (800316c <HAL_ADC_Start+0x170>)
 800312c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00f      	beq.n	800315a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003142:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
 800314a:	e006      	b.n	800315a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003154:	e001      	b.n	800315a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800315a:	7dfb      	ldrb	r3, [r7, #23]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	50040300 	.word	0x50040300
 8003168:	50040100 	.word	0x50040100
 800316c:	50040000 	.word	0x50040000

08003170 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800317a:	4866      	ldr	r0, [pc, #408]	@ (8003314 <HAL_ADC_PollForConversion+0x1a4>)
 800317c:	f7ff fd22 	bl	8002bc4 <LL_ADC_GetMultimode>
 8003180:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	2b08      	cmp	r3, #8
 8003188:	d102      	bne.n	8003190 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800318a:	2308      	movs	r3, #8
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e02a      	b.n	80031e6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b05      	cmp	r3, #5
 800319a:	d002      	beq.n	80031a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b09      	cmp	r3, #9
 80031a0:	d111      	bne.n	80031c6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0a4      	b.n	800330a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031c0:	2304      	movs	r3, #4
 80031c2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80031c4:	e00f      	b.n	80031e6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80031c6:	4853      	ldr	r0, [pc, #332]	@ (8003314 <HAL_ADC_PollForConversion+0x1a4>)
 80031c8:	f7ff fd0a 	bl	8002be0 <LL_ADC_GetMultiDMATransfer>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e093      	b.n	800330a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80031e2:	2304      	movs	r3, #4
 80031e4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031e6:	f7ff fba5 	bl	8002934 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80031ec:	e021      	b.n	8003232 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d01d      	beq.n	8003232 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031f6:	f7ff fb9d 	bl	8002934 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d302      	bcc.n	800320c <HAL_ADC_PollForConversion+0x9c>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d112      	bne.n	8003232 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e06b      	b.n	800330a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0d6      	beq.n	80031ee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fc28 	bl	8002aa6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01c      	beq.n	8003296 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7e5b      	ldrb	r3, [r3, #25]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d118      	bne.n	8003296 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b08      	cmp	r3, #8
 8003270:	d111      	bne.n	8003296 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1f      	ldr	r2, [pc, #124]	@ (8003318 <HAL_ADC_PollForConversion+0x1a8>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d002      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x136>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_PollForConversion+0x138>
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_ADC_PollForConversion+0x1ac>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d008      	beq.n	80032c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b05      	cmp	r3, #5
 80032ba:	d002      	beq.n	80032c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b09      	cmp	r3, #9
 80032c0:	d104      	bne.n	80032cc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e00c      	b.n	80032e6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <HAL_ADC_PollForConversion+0x1a8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d002      	beq.n	80032dc <HAL_ADC_PollForConversion+0x16c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e000      	b.n	80032de <HAL_ADC_PollForConversion+0x16e>
 80032dc:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_ADC_PollForConversion+0x1ac>)
 80032de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d104      	bne.n	80032f6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e008      	b.n	8003308 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	220c      	movs	r2, #12
 8003306:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	50040300 	.word	0x50040300
 8003318:	50040100 	.word	0x50040100
 800331c:	50040000 	.word	0x50040000

08003320 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0b6      	sub	sp, #216	@ 0xd8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADC_ConfigChannel+0x22>
 800335a:	2302      	movs	r3, #2
 800335c:	e3c9      	b.n	8003af2 <HAL_ADC_ConfigChannel+0x7b6>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fccf 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 83aa 	bne.w	8003acc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b05      	cmp	r3, #5
 8003386:	d824      	bhi.n	80033d2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	3b02      	subs	r3, #2
 800338e:	2b03      	cmp	r3, #3
 8003390:	d81b      	bhi.n	80033ca <HAL_ADC_ConfigChannel+0x8e>
 8003392:	a201      	add	r2, pc, #4	@ (adr r2, 8003398 <HAL_ADC_ConfigChannel+0x5c>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033b1 	.word	0x080033b1
 80033a0:	080033b9 	.word	0x080033b9
 80033a4:	080033c1 	.word	0x080033c1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80033a8:	230c      	movs	r3, #12
 80033aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033ae:	e010      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80033b0:	2312      	movs	r3, #18
 80033b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033b6:	e00c      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80033b8:	2318      	movs	r3, #24
 80033ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033be:	e008      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80033c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80033ca:	2306      	movs	r3, #6
 80033cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80033d0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80033e0:	f7ff fb74 	bl	8002acc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fc90 	bl	8002d0e <LL_ADC_REG_IsConversionOngoing>
 80033ee:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fc9c 	bl	8002d34 <LL_ADC_INJ_IsConversionOngoing>
 80033fc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 81a4 	bne.w	8003752 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800340a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 819f 	bne.w	8003752 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	461a      	mov	r2, r3
 8003422:	f7ff fb7f 	bl	8002b24 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b04      	cmp	r3, #4
 8003446:	d00a      	beq.n	800345e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6919      	ldr	r1, [r3, #16]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003458:	f7ff fad0 	bl	80029fc <LL_ADC_SetOffset>
 800345c:	e179      	b.n	8003752 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff faed 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_ADC_ConfigChannel+0x14e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fae2 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003480:	4603      	mov	r3, r0
 8003482:	0e9b      	lsrs	r3, r3, #26
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	e01e      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x18c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fad7 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e004      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80034bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d105      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x1a4>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	e018      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1d6>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80034f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80034fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e004      	b.n	8003512 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003512:	429a      	cmp	r2, r3
 8003514:	d106      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2200      	movs	r2, #0
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff faa6 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fa8a 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003530:	4603      	mov	r3, r0
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x214>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fa7f 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003546:	4603      	mov	r3, r0
 8003548:	0e9b      	lsrs	r3, r3, #26
 800354a:	f003 021f 	and.w	r2, r3, #31
 800354e:	e01e      	b.n	800358e <HAL_ADC_ConfigChannel+0x252>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fa74 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800355c:	4603      	mov	r3, r0
 800355e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800356e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800357e:	2320      	movs	r3, #32
 8003580:	e004      	b.n	800358c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x26a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	0e9b      	lsrs	r3, r3, #26
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	e018      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x29c>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80035ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80035c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e004      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80035ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035d8:	429a      	cmp	r2, r3
 80035da:	d106      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fa43 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2102      	movs	r1, #2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fa27 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x2da>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fa1c 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 800360c:	4603      	mov	r3, r0
 800360e:	0e9b      	lsrs	r3, r3, #26
 8003610:	f003 021f 	and.w	r2, r3, #31
 8003614:	e01e      	b.n	8003654 <HAL_ADC_ConfigChannel+0x318>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fa11 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 8003622:	4603      	mov	r3, r0
 8003624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800363c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003644:	2320      	movs	r3, #32
 8003646:	e004      	b.n	8003652 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <HAL_ADC_ConfigChannel+0x330>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	e014      	b.n	8003696 <HAL_ADC_ConfigChannel+0x35a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800367a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800367c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003680:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e004      	b.n	8003696 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800368c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003696:	429a      	cmp	r2, r3
 8003698:	d106      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2200      	movs	r2, #0
 80036a0:	2102      	movs	r1, #2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff f9e4 	bl	8002a70 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2103      	movs	r1, #3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff f9c8 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <HAL_ADC_ConfigChannel+0x398>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2103      	movs	r1, #3
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff f9bd 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80036ca:	4603      	mov	r3, r0
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	e017      	b.n	8003704 <HAL_ADC_ConfigChannel+0x3c8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2103      	movs	r1, #3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f9b2 	bl	8002a44 <LL_ADC_GetOffsetChannel>
 80036e0:	4603      	mov	r3, r0
 80036e2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036e6:	fa93 f3a3 	rbit	r3, r3
 80036ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80036ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ee:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80036f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80036f6:	2320      	movs	r3, #32
 80036f8:	e003      	b.n	8003702 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80036fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036fc:	fab3 f383 	clz	r3, r3
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_ADC_ConfigChannel+0x3e0>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0e9b      	lsrs	r3, r3, #26
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	e011      	b.n	8003740 <HAL_ADC_ConfigChannel+0x404>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800372a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800372c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800372e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003740:	429a      	cmp	r2, r3
 8003742:	d106      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	2103      	movs	r1, #3
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff f98f 	bl	8002a70 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fab2 	bl	8002cc0 <LL_ADC_IsEnabled>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 8140 	bne.w	80039e4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6819      	ldr	r1, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	461a      	mov	r2, r3
 8003772:	f7ff fa03 	bl	8002b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4a8f      	ldr	r2, [pc, #572]	@ (80039b8 <HAL_ADC_ConfigChannel+0x67c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	f040 8131 	bne.w	80039e4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10b      	bne.n	80037aa <HAL_ADC_ConfigChannel+0x46e>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	3301      	adds	r3, #1
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2b09      	cmp	r3, #9
 80037a0:	bf94      	ite	ls
 80037a2:	2301      	movls	r3, #1
 80037a4:	2300      	movhi	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e019      	b.n	80037de <HAL_ADC_ConfigChannel+0x4a2>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80037b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80037bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80037c2:	2320      	movs	r3, #32
 80037c4:	e003      	b.n	80037ce <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80037c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d079      	beq.n	80038d6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d107      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x4c2>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0e9b      	lsrs	r3, r3, #26
 80037f4:	3301      	adds	r3, #1
 80037f6:	069b      	lsls	r3, r3, #26
 80037f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037fc:	e015      	b.n	800382a <HAL_ADC_ConfigChannel+0x4ee>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800380c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003816:	2320      	movs	r3, #32
 8003818:	e003      	b.n	8003822 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800381a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	3301      	adds	r3, #1
 8003824:	069b      	lsls	r3, r3, #26
 8003826:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_ADC_ConfigChannel+0x50e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	3301      	adds	r3, #1
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2101      	movs	r1, #1
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	e017      	b.n	800387a <HAL_ADC_ConfigChannel+0x53e>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800385c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003862:	2320      	movs	r3, #32
 8003864:	e003      	b.n	800386e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003868:	fab3 f383 	clz	r3, r3
 800386c:	b2db      	uxtb	r3, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	ea42 0103 	orr.w	r1, r2, r3
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x564>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	0e9b      	lsrs	r3, r3, #26
 8003890:	3301      	adds	r3, #1
 8003892:	f003 021f 	and.w	r2, r3, #31
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	051b      	lsls	r3, r3, #20
 800389e:	e018      	b.n	80038d2 <HAL_ADC_ConfigChannel+0x596>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80038b8:	2320      	movs	r3, #32
 80038ba:	e003      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	fab3 f383 	clz	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	f003 021f 	and.w	r2, r3, #31
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038d2:	430b      	orrs	r3, r1
 80038d4:	e081      	b.n	80039da <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x5b6>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	0e9b      	lsrs	r3, r3, #26
 80038e8:	3301      	adds	r3, #1
 80038ea:	069b      	lsls	r3, r3, #26
 80038ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038f0:	e015      	b.n	800391e <HAL_ADC_ConfigChannel+0x5e2>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800390a:	2320      	movs	r3, #32
 800390c:	e003      	b.n	8003916 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3301      	adds	r3, #1
 8003918:	069b      	lsls	r3, r3, #26
 800391a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_ADC_ConfigChannel+0x602>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0e9b      	lsrs	r3, r3, #26
 8003930:	3301      	adds	r3, #1
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	e017      	b.n	800396e <HAL_ADC_ConfigChannel+0x632>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	61bb      	str	r3, [r7, #24]
  return result;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003956:	2320      	movs	r3, #32
 8003958:	e003      	b.n	8003962 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	2101      	movs	r1, #1
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	ea42 0103 	orr.w	r1, r2, r3
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10d      	bne.n	800399a <HAL_ADC_ConfigChannel+0x65e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0e9b      	lsrs	r3, r3, #26
 8003984:	3301      	adds	r3, #1
 8003986:	f003 021f 	and.w	r2, r3, #31
 800398a:	4613      	mov	r3, r2
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4413      	add	r3, r2
 8003990:	3b1e      	subs	r3, #30
 8003992:	051b      	lsls	r3, r3, #20
 8003994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003998:	e01e      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x69c>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	60fb      	str	r3, [r7, #12]
  return result;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e006      	b.n	80039c4 <HAL_ADC_ConfigChannel+0x688>
 80039b6:	bf00      	nop
 80039b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	3301      	adds	r3, #1
 80039c6:	f003 021f 	and.w	r2, r3, #31
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	3b1e      	subs	r3, #30
 80039d2:	051b      	lsls	r3, r3, #20
 80039d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039de:	4619      	mov	r1, r3
 80039e0:	f7ff f8a0 	bl	8002b24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b44      	ldr	r3, [pc, #272]	@ (8003afc <HAL_ADC_ConfigChannel+0x7c0>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d07a      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039f0:	4843      	ldr	r0, [pc, #268]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7c4>)
 80039f2:	f7fe fff5 	bl	80029e0 <LL_ADC_GetCommonPathInternalCh>
 80039f6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a41      	ldr	r2, [pc, #260]	@ (8003b04 <HAL_ADC_ConfigChannel+0x7c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d12c      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d126      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a3c      	ldr	r2, [pc, #240]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_ADC_ConfigChannel+0x6e8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7d0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d15d      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4834      	ldr	r0, [pc, #208]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a30:	f7fe ffc3 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a34:	4b36      	ldr	r3, [pc, #216]	@ (8003b10 <HAL_ADC_ConfigChannel+0x7d4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	4a36      	ldr	r2, [pc, #216]	@ (8003b14 <HAL_ADC_ConfigChannel+0x7d8>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f9      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a5c:	e040      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2d      	ldr	r2, [pc, #180]	@ (8003b18 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d118      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d112      	bne.n	8003a9a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7cc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x74c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <HAL_ADC_ConfigChannel+0x7d0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d12d      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a90:	4619      	mov	r1, r3
 8003a92:	481b      	ldr	r0, [pc, #108]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7c4>)
 8003a94:	f7fe ff91 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a98:	e024      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b1c <HAL_ADC_ConfigChannel+0x7e0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d120      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d11a      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	@ (8003b08 <HAL_ADC_ConfigChannel+0x7cc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d115      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003abe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	480e      	ldr	r0, [pc, #56]	@ (8003b00 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ac6:	f7fe ff78 	bl	80029ba <LL_ADC_SetCommonPathInternalCh>
 8003aca:	e00c      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003ade:	e002      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ae4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	37d8      	adds	r7, #216	@ 0xd8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	80080000 	.word	0x80080000
 8003b00:	50040300 	.word	0x50040300
 8003b04:	c7520000 	.word	0xc7520000
 8003b08:	50040000 	.word	0x50040000
 8003b0c:	50040200 	.word	0x50040200
 8003b10:	20000008 	.word	0x20000008
 8003b14:	053e2d63 	.word	0x053e2d63
 8003b18:	cb840000 	.word	0xcb840000
 8003b1c:	80000001 	.word	0x80000001

08003b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff f8c5 	bl	8002cc0 <LL_ADC_IsEnabled>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d169      	bne.n	8003c10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <ADC_Enable+0xfc>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	f043 0210 	orr.w	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e055      	b.n	8003c12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff f894 	bl	8002c98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b70:	482b      	ldr	r0, [pc, #172]	@ (8003c20 <ADC_Enable+0x100>)
 8003b72:	f7fe ff35 	bl	80029e0 <LL_ADC_GetCommonPathInternalCh>
 8003b76:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d013      	beq.n	8003ba8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b80:	4b28      	ldr	r3, [pc, #160]	@ (8003c24 <ADC_Enable+0x104>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	4a28      	ldr	r2, [pc, #160]	@ (8003c28 <ADC_Enable+0x108>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b9a:	e002      	b.n	8003ba2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f9      	bne.n	8003b9c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ba8:	f7fe fec4 	bl	8002934 <HAL_GetTick>
 8003bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bae:	e028      	b.n	8003c02 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff f883 	bl	8002cc0 <LL_ADC_IsEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff f867 	bl	8002c98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bca:	f7fe feb3 	bl	8002934 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d914      	bls.n	8003c02 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d00d      	beq.n	8003c02 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e007      	b.n	8003c12 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d1cf      	bne.n	8003bb0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	8000003f 	.word	0x8000003f
 8003c20:	50040300 	.word	0x50040300
 8003c24:	20000008 	.word	0x20000008
 8003c28:	053e2d63 	.word	0x053e2d63

08003c2c <LL_ADC_IsEnabled>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <LL_ADC_IsEnabled+0x18>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_ADC_IsEnabled+0x1a>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d101      	bne.n	8003c6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b09f      	sub	sp, #124	@ 0x7c
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e093      	b.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a47      	ldr	r2, [pc, #284]	@ (8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d102      	bne.n	8003cb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003cb0:	4b46      	ldr	r3, [pc, #280]	@ (8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	e001      	b.n	8003cba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc4:	f043 0220 	orr.w	r2, r3, #32
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e072      	b.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ffb9 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003ce0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ffb3 	bl	8003c52 <LL_ADC_REG_IsConversionOngoing>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d154      	bne.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d151      	bne.n	8003d9c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cf8:	4b35      	ldr	r3, [pc, #212]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003cfa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d02c      	beq.n	8003d5e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d16:	035b      	lsls	r3, r3, #13
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d20:	4829      	ldr	r0, [pc, #164]	@ (8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d22:	f7ff ff83 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d26:	4604      	mov	r4, r0
 8003d28:	4828      	ldr	r0, [pc, #160]	@ (8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d2a:	f7ff ff7f 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	431c      	orrs	r4, r3
 8003d32:	4828      	ldr	r0, [pc, #160]	@ (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003d34:	f7ff ff7a 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4323      	orrs	r3, r4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d137      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d48:	f023 030f 	bic.w	r3, r3, #15
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	6811      	ldr	r1, [r2, #0]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	6892      	ldr	r2, [r2, #8]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	431a      	orrs	r2, r3
 8003d58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d5a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d5c:	e028      	b.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d6a:	4817      	ldr	r0, [pc, #92]	@ (8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d6c:	f7ff ff5e 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d70:	4604      	mov	r4, r0
 8003d72:	4816      	ldr	r0, [pc, #88]	@ (8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d74:	f7ff ff5a 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	431c      	orrs	r4, r3
 8003d7c:	4815      	ldr	r0, [pc, #84]	@ (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003d7e:	f7ff ff55 	bl	8003c2c <LL_ADC_IsEnabled>
 8003d82:	4603      	mov	r3, r0
 8003d84:	4323      	orrs	r3, r4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d112      	bne.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d92:	f023 030f 	bic.w	r3, r3, #15
 8003d96:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d9a:	e009      	b.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da0:	f043 0220 	orr.w	r2, r3, #32
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003dae:	e000      	b.n	8003db2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003db0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	377c      	adds	r7, #124	@ 0x7c
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	50040000 	.word	0x50040000
 8003dcc:	50040100 	.word	0x50040100
 8003dd0:	50040300 	.word	0x50040300
 8003dd4:	50040200 	.word	0x50040200

08003dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e0a:	4a04      	ldr	r2, [pc, #16]	@ (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60d3      	str	r3, [r2, #12]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e24:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <__NVIC_GetPriorityGrouping+0x18>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	f003 0307 	and.w	r3, r3, #7
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db0b      	blt.n	8003e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4907      	ldr	r1, [pc, #28]	@ (8003e74 <__NVIC_EnableIRQ+0x38>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000e100 	.word	0xe000e100

08003e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	6039      	str	r1, [r7, #0]
 8003e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db0a      	blt.n	8003ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	490c      	ldr	r1, [pc, #48]	@ (8003ec4 <__NVIC_SetPriority+0x4c>)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	0112      	lsls	r2, r2, #4
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea0:	e00a      	b.n	8003eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4908      	ldr	r1, [pc, #32]	@ (8003ec8 <__NVIC_SetPriority+0x50>)
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	3b04      	subs	r3, #4
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	761a      	strb	r2, [r3, #24]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000e100 	.word	0xe000e100
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	@ 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f1c3 0307 	rsb	r3, r3, #7
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	bf28      	it	cs
 8003eea:	2304      	movcs	r3, #4
 8003eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d902      	bls.n	8003efc <NVIC_EncodePriority+0x30>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3b03      	subs	r3, #3
 8003efa:	e000      	b.n	8003efe <NVIC_EncodePriority+0x32>
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	401a      	ands	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f14:	f04f 31ff 	mov.w	r1, #4294967295
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	43d9      	mvns	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f24:	4313      	orrs	r3, r2
         );
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3724      	adds	r7, #36	@ 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f44:	d301      	bcc.n	8003f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f46:	2301      	movs	r3, #1
 8003f48:	e00f      	b.n	8003f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <SysTick_Config+0x40>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f52:	210f      	movs	r1, #15
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	f7ff ff8e 	bl	8003e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <SysTick_Config+0x40>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f62:	4b04      	ldr	r3, [pc, #16]	@ (8003f74 <SysTick_Config+0x40>)
 8003f64:	2207      	movs	r2, #7
 8003f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	e000e010 	.word	0xe000e010

08003f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ff29 	bl	8003dd8 <__NVIC_SetPriorityGrouping>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa0:	f7ff ff3e 	bl	8003e20 <__NVIC_GetPriorityGrouping>
 8003fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	6978      	ldr	r0, [r7, #20]
 8003fac:	f7ff ff8e 	bl	8003ecc <NVIC_EncodePriority>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff5d 	bl	8003e78 <__NVIC_SetPriority>
}
 8003fbe:	bf00      	nop
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	4603      	mov	r3, r0
 8003fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff31 	bl	8003e3c <__NVIC_EnableIRQ>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffa2 	bl	8003f34 <SysTick_Config>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e014      	b.n	8004036 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	791b      	ldrb	r3, [r3, #4]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d105      	bne.n	8004022 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7fd ffaf 	bl	8001f80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	795b      	ldrb	r3, [r3, #5]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_DAC_Start+0x16>
 8004050:	2302      	movs	r3, #2
 8004052:	e03b      	b.n	80040cc <HAL_DAC_Start+0x8e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004088:	2b04      	cmp	r3, #4
 800408a:	d118      	bne.n	80040be <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	e00f      	b.n	80040be <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80040a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ac:	d107      	bne.n	80040be <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0202 	orr.w	r2, r2, #2
 80040bc:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ee:	d120      	bne.n	8004132 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040fe:	d118      	bne.n	8004132 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2204      	movs	r2, #4
 8004104:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800411a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800412a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f852 	bl	80041d6 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800413c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004140:	d120      	bne.n	8004184 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004150:	d118      	bne.n	8004184 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f043 0202 	orr.w	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800416c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800417c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f95a 	bl	8004438 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d105      	bne.n	80041b6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	3308      	adds	r3, #8
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e004      	b.n	80041c0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3314      	adds	r3, #20
 80041be:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	461a      	mov	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b088      	sub	sp, #32
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	795b      	ldrb	r3, [r3, #5]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_DAC_ConfigChannel+0x1c>
 8004202:	2302      	movs	r3, #2
 8004204:	e114      	b.n	8004430 <HAL_DAC_ConfigChannel+0x246>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2202      	movs	r2, #2
 8004210:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b04      	cmp	r3, #4
 8004218:	f040 8081 	bne.w	800431e <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800421c:	f7fe fb8a 	bl	8002934 <HAL_GetTick>
 8004220:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d140      	bne.n	80042aa <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004228:	e018      	b.n	800425c <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800422a:	f7fe fb83 	bl	8002934 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d911      	bls.n	800425c <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800423e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f043 0208 	orr.w	r2, r3, #8
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2203      	movs	r2, #3
 8004256:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0e9      	b.n	8004430 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1df      	bne.n	800422a <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800426a:	2001      	movs	r0, #1
 800426c:	f7fe fb6e 	bl	800294c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	6992      	ldr	r2, [r2, #24]
 8004278:	641a      	str	r2, [r3, #64]	@ 0x40
 800427a:	e023      	b.n	80042c4 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800427c:	f7fe fb5a 	bl	8002934 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b01      	cmp	r3, #1
 8004288:	d90f      	bls.n	80042aa <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	da0a      	bge.n	80042aa <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f043 0208 	orr.w	r2, r3, #8
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2203      	movs	r2, #3
 80042a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0c2      	b.n	8004430 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dbe3      	blt.n	800427c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80042b4:	2001      	movs	r0, #1
 80042b6:	f7fe fb49 	bl	800294c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	6992      	ldr	r2, [r2, #24]
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	ea02 0103 	and.w	r1, r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	69da      	ldr	r2, [r3, #28]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	409a      	lsls	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	21ff      	movs	r1, #255	@ 0xff
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	ea02 0103 	and.w	r1, r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	409a      	lsls	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d11d      	bne.n	8004362 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	221f      	movs	r2, #31
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2207      	movs	r2, #7
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	431a      	orrs	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0310 	and.w	r3, r3, #16
 80043b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	400a      	ands	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	22c0      	movs	r2, #192	@ 0xc0
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	43da      	mvns	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	400a      	ands	r2, r1
 8004420:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0ac      	b.n	80045b8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f8b2 	bl	80045cc <DFSDM_GetChannelFromInstance>
 8004468:	4603      	mov	r3, r0
 800446a:	4a55      	ldr	r2, [pc, #340]	@ (80045c0 <HAL_DFSDM_ChannelInit+0x174>)
 800446c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e09f      	b.n	80045b8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7fd fdbf 	bl	8001ffc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800447e:	4b51      	ldr	r3, [pc, #324]	@ (80045c4 <HAL_DFSDM_ChannelInit+0x178>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a4f      	ldr	r2, [pc, #316]	@ (80045c4 <HAL_DFSDM_ChannelInit+0x178>)
 8004486:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8004488:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <HAL_DFSDM_ChannelInit+0x178>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d125      	bne.n	80044dc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004490:	4b4d      	ldr	r3, [pc, #308]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a4c      	ldr	r2, [pc, #304]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004496:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800449a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800449c:	4b4a      	ldr	r3, [pc, #296]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4948      	ldr	r1, [pc, #288]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80044aa:	4b47      	ldr	r3, [pc, #284]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a46      	ldr	r2, [pc, #280]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044b0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80044b4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	791b      	ldrb	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d108      	bne.n	80044d0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80044be:	4b42      	ldr	r3, [pc, #264]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	493f      	ldr	r1, [pc, #252]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80044d0:	4b3d      	ldr	r3, [pc, #244]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3c      	ldr	r2, [pc, #240]	@ (80045c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80044d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044da:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80044ea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6819      	ldr	r1, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80044fa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004500:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 020f 	bic.w	r2, r2, #15
 8004518:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004540:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	3b01      	subs	r3, #1
 8004552:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f002 0207 	and.w	r2, r2, #7
 800456c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004598:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f810 	bl	80045cc <DFSDM_GetChannelFromInstance>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4904      	ldr	r1, [pc, #16]	@ (80045c0 <HAL_DFSDM_ChannelInit+0x174>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000650 	.word	0x20000650
 80045c4:	2000064c 	.word	0x2000064c
 80045c8:	40016000 	.word	0x40016000

080045cc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004648 <DFSDM_GetChannelFromInstance+0x7c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d102      	bne.n	80045e2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e02b      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a19      	ldr	r2, [pc, #100]	@ (800464c <DFSDM_GetChannelFromInstance+0x80>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d102      	bne.n	80045f0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e024      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a17      	ldr	r2, [pc, #92]	@ (8004650 <DFSDM_GetChannelFromInstance+0x84>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d102      	bne.n	80045fe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80045f8:	2302      	movs	r3, #2
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e01d      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a14      	ldr	r2, [pc, #80]	@ (8004654 <DFSDM_GetChannelFromInstance+0x88>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d102      	bne.n	800460c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004606:	2304      	movs	r3, #4
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e016      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a12      	ldr	r2, [pc, #72]	@ (8004658 <DFSDM_GetChannelFromInstance+0x8c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d102      	bne.n	800461a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004614:	2305      	movs	r3, #5
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e00f      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a0f      	ldr	r2, [pc, #60]	@ (800465c <DFSDM_GetChannelFromInstance+0x90>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d102      	bne.n	8004628 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004622:	2306      	movs	r3, #6
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e008      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a0d      	ldr	r2, [pc, #52]	@ (8004660 <DFSDM_GetChannelFromInstance+0x94>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d102      	bne.n	8004636 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004630:	2307      	movs	r3, #7
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e001      	b.n	800463a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004636:	2303      	movs	r3, #3
 8004638:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800463a:	68fb      	ldr	r3, [r7, #12]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	40016000 	.word	0x40016000
 800464c:	40016020 	.word	0x40016020
 8004650:	40016040 	.word	0x40016040
 8004654:	40016080 	.word	0x40016080
 8004658:	400160a0 	.word	0x400160a0
 800465c:	400160c0 	.word	0x400160c0
 8004660:	400160e0 	.word	0x400160e0

08004664 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004672:	e17f      	b.n	8004974 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	2101      	movs	r1, #1
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	fa01 f303 	lsl.w	r3, r1, r3
 8004680:	4013      	ands	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8171 	beq.w	800496e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d005      	beq.n	80046a4 <HAL_GPIO_Init+0x40>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d130      	bne.n	8004706 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046da:	2201      	movs	r2, #1
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0201 	and.w	r2, r3, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b03      	cmp	r3, #3
 8004710:	d118      	bne.n	8004744 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004716:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004718:	2201      	movs	r2, #1
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0201 	and.w	r2, r3, #1
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b03      	cmp	r3, #3
 800474e:	d017      	beq.n	8004780 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d123      	bne.n	80047d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	08da      	lsrs	r2, r3, #3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3208      	adds	r2, #8
 8004794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	220f      	movs	r2, #15
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	08da      	lsrs	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3208      	adds	r2, #8
 80047ce:	6939      	ldr	r1, [r7, #16]
 80047d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	2203      	movs	r2, #3
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 80ac 	beq.w	800496e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	4b5f      	ldr	r3, [pc, #380]	@ (8004994 <HAL_GPIO_Init+0x330>)
 8004818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800481a:	4a5e      	ldr	r2, [pc, #376]	@ (8004994 <HAL_GPIO_Init+0x330>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6613      	str	r3, [r2, #96]	@ 0x60
 8004822:	4b5c      	ldr	r3, [pc, #368]	@ (8004994 <HAL_GPIO_Init+0x330>)
 8004824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
 800482c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800482e:	4a5a      	ldr	r2, [pc, #360]	@ (8004998 <HAL_GPIO_Init+0x334>)
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	3302      	adds	r3, #2
 8004836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	220f      	movs	r2, #15
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004858:	d025      	beq.n	80048a6 <HAL_GPIO_Init+0x242>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a4f      	ldr	r2, [pc, #316]	@ (800499c <HAL_GPIO_Init+0x338>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <HAL_GPIO_Init+0x23e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a4e      	ldr	r2, [pc, #312]	@ (80049a0 <HAL_GPIO_Init+0x33c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d019      	beq.n	800489e <HAL_GPIO_Init+0x23a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4d      	ldr	r2, [pc, #308]	@ (80049a4 <HAL_GPIO_Init+0x340>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <HAL_GPIO_Init+0x236>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4c      	ldr	r2, [pc, #304]	@ (80049a8 <HAL_GPIO_Init+0x344>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00d      	beq.n	8004896 <HAL_GPIO_Init+0x232>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4b      	ldr	r2, [pc, #300]	@ (80049ac <HAL_GPIO_Init+0x348>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d007      	beq.n	8004892 <HAL_GPIO_Init+0x22e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4a      	ldr	r2, [pc, #296]	@ (80049b0 <HAL_GPIO_Init+0x34c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d101      	bne.n	800488e <HAL_GPIO_Init+0x22a>
 800488a:	2306      	movs	r3, #6
 800488c:	e00c      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 800488e:	2307      	movs	r3, #7
 8004890:	e00a      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 8004892:	2305      	movs	r3, #5
 8004894:	e008      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 8004896:	2304      	movs	r3, #4
 8004898:	e006      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 800489a:	2303      	movs	r3, #3
 800489c:	e004      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 800489e:	2302      	movs	r3, #2
 80048a0:	e002      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <HAL_GPIO_Init+0x244>
 80048a6:	2300      	movs	r3, #0
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	f002 0203 	and.w	r2, r2, #3
 80048ae:	0092      	lsls	r2, r2, #2
 80048b0:	4093      	lsls	r3, r2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048b8:	4937      	ldr	r1, [pc, #220]	@ (8004998 <HAL_GPIO_Init+0x334>)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	089b      	lsrs	r3, r3, #2
 80048be:	3302      	adds	r3, #2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c6:	4b3b      	ldr	r3, [pc, #236]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ea:	4a32      	ldr	r2, [pc, #200]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048f0:	4b30      	ldr	r3, [pc, #192]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004914:	4a27      	ldr	r2, [pc, #156]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800491a:	4b26      	ldr	r3, [pc, #152]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800493e:	4a1d      	ldr	r2, [pc, #116]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004944:	4b1b      	ldr	r3, [pc, #108]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4013      	ands	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004968:	4a12      	ldr	r2, [pc, #72]	@ (80049b4 <HAL_GPIO_Init+0x350>)
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fa22 f303 	lsr.w	r3, r2, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	f47f ae78 	bne.w	8004674 <HAL_GPIO_Init+0x10>
  }
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	40010000 	.word	0x40010000
 800499c:	48000400 	.word	0x48000400
 80049a0:	48000800 	.word	0x48000800
 80049a4:	48000c00 	.word	0x48000c00
 80049a8:	48001000 	.word	0x48001000
 80049ac:	48001400 	.word	0x48001400
 80049b0:	48001800 	.word	0x48001800
 80049b4:	40010400 	.word	0x40010400

080049b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	807b      	strh	r3, [r7, #2]
 80049c4:	4613      	mov	r3, r2
 80049c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049c8:	787b      	ldrb	r3, [r7, #1]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049ce:	887a      	ldrh	r2, [r7, #2]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d4:	e002      	b.n	80049dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049d6:	887a      	ldrh	r2, [r7, #2]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049f2:	4b08      	ldr	r3, [pc, #32]	@ (8004a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f4:	695a      	ldr	r2, [r3, #20]
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d006      	beq.n	8004a0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049fe:	4a05      	ldr	r2, [pc, #20]	@ (8004a14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f806 	bl	8004a18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40010400 	.word	0x40010400

08004a18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e08d      	b.n	8004b5c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7fd fb35 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2224      	movs	r2, #36	@ 0x24
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d107      	bne.n	8004aa8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	e006      	b.n	8004ab6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004ab4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d108      	bne.n	8004ad0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e007      	b.n	8004ae0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ade:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004af2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69d9      	ldr	r1, [r3, #28]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1a      	ldr	r2, [r3, #32]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d138      	bne.n	8004bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e032      	b.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2224      	movs	r2, #36	@ 0x24
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0201 	bic.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b085      	sub	sp, #20
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d139      	bne.n	8004c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d101      	bne.n	8004c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e033      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2224      	movs	r2, #36	@ 0x24
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0201 	bic.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b086      	sub	sp, #24
 8004c96:	af02      	add	r7, sp, #8
 8004c98:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e101      	b.n	8004ea8 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d106      	bne.n	8004cbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f007 f82d 	bl	800bd18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f003 fe14 	bl	80088fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	7c1a      	ldrb	r2, [r3, #16]
 8004cde:	f88d 2000 	strb.w	r2, [sp]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ce6:	f003 fd30 	bl	800874a <USB_CoreInit>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e0d5      	b.n	8004ea8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 fe0c 	bl	8008920 <USB_SetCurrentMode>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e0c6      	b.n	8004ea8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
 8004d1e:	e04a      	b.n	8004db6 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	3315      	adds	r3, #21
 8004d30:	2201      	movs	r2, #1
 8004d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	3314      	adds	r3, #20
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	7bfb      	ldrb	r3, [r7, #15]
 8004d4c:	b298      	uxth	r0, r3
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	332e      	adds	r3, #46	@ 0x2e
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3318      	adds	r3, #24
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	331c      	adds	r3, #28
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3320      	adds	r3, #32
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d9c:	7bfa      	ldrb	r2, [r7, #15]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	3324      	adds	r3, #36	@ 0x24
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	3301      	adds	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	791b      	ldrb	r3, [r3, #4]
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d3af      	bcc.n	8004d20 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	e044      	b.n	8004e50 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004dee:	7bfa      	ldrb	r2, [r7, #15]
 8004df0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004df2:	7bfa      	ldrb	r2, [r7, #15]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e08:	7bfa      	ldrb	r2, [r7, #15]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e34:	7bfa      	ldrb	r2, [r7, #15]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	791b      	ldrb	r3, [r3, #4]
 8004e54:	7bfa      	ldrb	r2, [r7, #15]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3b5      	bcc.n	8004dc6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7c1a      	ldrb	r2, [r3, #16]
 8004e62:	f88d 2000 	strb.w	r2, [sp]
 8004e66:	3304      	adds	r3, #4
 8004e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e6a:	f003 fda5 	bl	80089b8 <USB_DevInit>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e013      	b.n	8004ea8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	7b1b      	ldrb	r3, [r3, #12]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d102      	bne.n	8004e9c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 f86e 	bl	8005f78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f004 fd5c 	bl	800995e <USB_DevDisconnect>

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_PCD_Start+0x1c>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e01c      	b.n	8004f06 <HAL_PCD_Start+0x56>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7b5b      	ldrb	r3, [r3, #13]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f003 fcf5 	bl	80088dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f004 fd10 	bl	800991c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f0e:	b590      	push	{r4, r7, lr}
 8004f10:	b08d      	sub	sp, #52	@ 0x34
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f004 fdce 	bl	8009ac6 <USB_GetMode>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f040 8481 	bne.w	8005834 <HAL_PCD_IRQHandler+0x926>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f004 fd32 	bl	80099a0 <USB_ReadInterrupts>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8477 	beq.w	8005832 <HAL_PCD_IRQHandler+0x924>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	0a1b      	lsrs	r3, r3, #8
 8004f4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f004 fd1f 	bl	80099a0 <USB_ReadInterrupts>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d107      	bne.n	8004f7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f002 0202 	and.w	r2, r2, #2
 8004f7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 fd0d 	bl	80099a0 <USB_ReadInterrupts>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d161      	bne.n	8005054 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0210 	bic.w	r2, r2, #16
 8004f9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	0c5b      	lsrs	r3, r3, #17
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d124      	bne.n	8005016 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d035      	beq.n	8005044 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	091b      	lsrs	r3, r3, #4
 8004fe0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6a38      	ldr	r0, [r7, #32]
 8004fec:	f004 fb44 	bl	8009678 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ffc:	441a      	add	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800500e:	441a      	add	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	615a      	str	r2, [r3, #20]
 8005014:	e016      	b.n	8005044 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	0c5b      	lsrs	r3, r3, #17
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	2b06      	cmp	r3, #6
 8005020:	d110      	bne.n	8005044 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005028:	2208      	movs	r2, #8
 800502a:	4619      	mov	r1, r3
 800502c:	6a38      	ldr	r0, [r7, #32]
 800502e:	f004 fb23 	bl	8009678 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800503e:	441a      	add	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0210 	orr.w	r2, r2, #16
 8005052:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f004 fca1 	bl	80099a0 <USB_ReadInterrupts>
 800505e:	4603      	mov	r3, r0
 8005060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005064:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005068:	f040 80a7 	bne.w	80051ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f004 fca6 	bl	80099c6 <USB_ReadDevAllOutEpInterrupt>
 800507a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800507c:	e099      	b.n	80051b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800507e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 808e 	beq.w	80051a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	4611      	mov	r1, r2
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fcca 	bl	8009a2e <USB_ReadDevOutEPInterrupt>
 800509a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b2:	461a      	mov	r2, r3
 80050b4:	2301      	movs	r3, #1
 80050b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fe82 	bl	8005dc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00c      	beq.n	80050e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d6:	461a      	mov	r2, r3
 80050d8:	2308      	movs	r3, #8
 80050da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 febe 	bl	8005e60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fa:	461a      	mov	r2, r3
 80050fc:	2310      	movs	r3, #16
 80050fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d030      	beq.n	800516c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b80      	cmp	r3, #128	@ 0x80
 8005114:	d109      	bne.n	800512a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005124:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005128:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800512a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512c:	4613      	mov	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4413      	add	r3, r2
 800513c:	3304      	adds	r3, #4
 800513e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	78db      	ldrb	r3, [r3, #3]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2200      	movs	r2, #0
 800514c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	b2db      	uxtb	r3, r3
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f006 ff15 	bl	800bf84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	2302      	movs	r3, #2
 800516a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005182:	461a      	mov	r2, r3
 8005184:	2320      	movs	r3, #32
 8005186:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80051a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	3301      	adds	r3, #1
 80051aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80051ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f47f af62 	bne.w	800507e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fbee 	bl	80099a0 <USB_ReadInterrupts>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ce:	f040 80a4 	bne.w	800531a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 fc0f 	bl	80099fa <USB_ReadDevAllInEpInterrupt>
 80051dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80051e2:	e096      	b.n	8005312 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 808b 	beq.w	8005306 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	4611      	mov	r1, r2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f004 fc35 	bl	8009a6a <USB_ReadDevInEPInterrupt>
 8005200:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	2201      	movs	r2, #1
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	43db      	mvns	r3, r3
 8005226:	69f9      	ldr	r1, [r7, #28]
 8005228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800522c:	4013      	ands	r3, r2
 800522e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523c:	461a      	mov	r2, r3
 800523e:	2301      	movs	r3, #1
 8005240:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	b2db      	uxtb	r3, r3
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f006 fe06 	bl	800be5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005264:	461a      	mov	r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	2310      	movs	r3, #16
 8005284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529c:	461a      	mov	r2, r3
 800529e:	2340      	movs	r3, #64	@ 0x40
 80052a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d023      	beq.n	80052f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80052ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80052ae:	6a38      	ldr	r0, [r7, #32]
 80052b0:	f003 fcca 	bl	8008c48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80052b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b6:	4613      	mov	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	3310      	adds	r3, #16
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	3304      	adds	r3, #4
 80052c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	78db      	ldrb	r3, [r3, #3]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d108      	bne.n	80052e2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	2200      	movs	r2, #0
 80052d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	4619      	mov	r1, r3
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f006 fe63 	bl	800bfa8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ee:	461a      	mov	r2, r3
 80052f0:	2302      	movs	r3, #2
 80052f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80052fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fcd6 	bl	8005cb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	3301      	adds	r3, #1
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800530c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530e:	085b      	lsrs	r3, r3, #1
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	f47f af65 	bne.w	80051e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f004 fb3e 	bl	80099a0 <USB_ReadInterrupts>
 8005324:	4603      	mov	r3, r0
 8005326:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800532a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800532e:	d122      	bne.n	8005376 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800534a:	2b01      	cmp	r3, #1
 800534c:	d108      	bne.n	8005360 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005356:	2100      	movs	r1, #0
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f007 f897 	bl	800c48c <HAL_PCDEx_LPM_Callback>
 800535e:	e002      	b.n	8005366 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f006 fde7 	bl	800bf34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f004 fb10 	bl	80099a0 <USB_ReadInterrupts>
 8005380:	4603      	mov	r3, r0
 8005382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800538a:	d112      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b01      	cmp	r3, #1
 800539a:	d102      	bne.n	80053a2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f006 fda3 	bl	800bee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695a      	ldr	r2, [r3, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80053b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 faf2 	bl	80099a0 <USB_ReadInterrupts>
 80053bc:	4603      	mov	r3, r0
 80053be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053c6:	d121      	bne.n	800540c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695a      	ldr	r2, [r3, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80053d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d111      	bne.n	8005406 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f0:	089b      	lsrs	r3, r3, #2
 80053f2:	f003 020f 	and.w	r2, r3, #15
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80053fc:	2101      	movs	r1, #1
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f007 f844 	bl	800c48c <HAL_PCDEx_LPM_Callback>
 8005404:	e002      	b.n	800540c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f006 fd6e 	bl	800bee8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f004 fac5 	bl	80099a0 <USB_ReadInterrupts>
 8005416:	4603      	mov	r3, r0
 8005418:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005420:	f040 80b6 	bne.w	8005590 <HAL_PCD_IRQHandler+0x682>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2110      	movs	r1, #16
 800543e:	4618      	mov	r0, r3
 8005440:	f003 fc02 	bl	8008c48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005444:	2300      	movs	r3, #0
 8005446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005448:	e046      	b.n	80054d8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005456:	461a      	mov	r2, r3
 8005458:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800545c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800545e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005478:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800547c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548a:	461a      	mov	r2, r3
 800548c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005490:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d4:	3301      	adds	r3, #1
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	791b      	ldrb	r3, [r3, #4]
 80054dc:	461a      	mov	r2, r3
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d3b2      	bcc.n	800544a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054f2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80054f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7bdb      	ldrb	r3, [r3, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d016      	beq.n	800552e <HAL_PCD_IRQHandler+0x620>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005510:	f043 030b 	orr.w	r3, r3, #11
 8005514:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005526:	f043 030b 	orr.w	r3, r3, #11
 800552a:	6453      	str	r3, [r2, #68]	@ 0x44
 800552c:	e015      	b.n	800555a <HAL_PCD_IRQHandler+0x64c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	69fa      	ldr	r2, [r7, #28]
 8005538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800553c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005540:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005544:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005554:	f043 030b 	orr.w	r3, r3, #11
 8005558:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005568:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800556c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f004 fad4 	bl	8009b28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695a      	ldr	r2, [r3, #20]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800558e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f004 fa03 	bl	80099a0 <USB_ReadInterrupts>
 800559a:	4603      	mov	r3, r0
 800559c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055a4:	d123      	bne.n	80055ee <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f004 fa99 	bl	8009ae2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 fbc0 	bl	8008d3a <USB_GetDevSpeed>
 80055ba:	4603      	mov	r3, r0
 80055bc:	461a      	mov	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681c      	ldr	r4, [r3, #0]
 80055c6:	f001 fba3 	bl	8006d10 <HAL_RCC_GetHCLKFreq>
 80055ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80055d0:	461a      	mov	r2, r3
 80055d2:	4620      	mov	r0, r4
 80055d4:	f003 f8e6 	bl	80087a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f006 fc66 	bl	800beaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695a      	ldr	r2, [r3, #20]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80055ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f004 f9d4 	bl	80099a0 <USB_ReadInterrupts>
 80055f8:	4603      	mov	r3, r0
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d10a      	bne.n	8005618 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f006 fc43 	bl	800be8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f002 0208 	and.w	r2, r2, #8
 8005616:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f004 f9bf 	bl	80099a0 <USB_ReadInterrupts>
 8005622:	4603      	mov	r3, r0
 8005624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005628:	2b80      	cmp	r3, #128	@ 0x80
 800562a:	d123      	bne.n	8005674 <HAL_PCD_IRQHandler+0x766>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005638:	2301      	movs	r3, #1
 800563a:	627b      	str	r3, [r7, #36]	@ 0x24
 800563c:	e014      	b.n	8005668 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d105      	bne.n	8005662 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	b2db      	uxtb	r3, r3
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 faf7 	bl	8005c50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	3301      	adds	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	791b      	ldrb	r3, [r3, #4]
 800566c:	461a      	mov	r2, r3
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	4293      	cmp	r3, r2
 8005672:	d3e4      	bcc.n	800563e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f004 f991 	bl	80099a0 <USB_ReadInterrupts>
 800567e:	4603      	mov	r3, r0
 8005680:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005688:	d13c      	bne.n	8005704 <HAL_PCD_IRQHandler+0x7f6>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800568a:	2301      	movs	r3, #1
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
 800568e:	e02b      	b.n	80056e8 <HAL_PCD_IRQHandler+0x7da>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3318      	adds	r3, #24
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d115      	bne.n	80056e2 <HAL_PCD_IRQHandler+0x7d4>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80056b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	da12      	bge.n	80056e2 <HAL_PCD_IRQHandler+0x7d4>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	3317      	adds	r3, #23
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fab7 	bl	8005c50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	3301      	adds	r3, #1
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	791b      	ldrb	r3, [r3, #4]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d3cd      	bcc.n	8005690 <HAL_PCD_IRQHandler+0x782>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695a      	ldr	r2, [r3, #20]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4618      	mov	r0, r3
 800570a:	f004 f949 	bl	80099a0 <USB_ReadInterrupts>
 800570e:	4603      	mov	r3, r0
 8005710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005718:	d156      	bne.n	80057c8 <HAL_PCD_IRQHandler+0x8ba>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800571a:	2301      	movs	r3, #1
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	e045      	b.n	80057ac <HAL_PCD_IRQHandler+0x89e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d12e      	bne.n	80057a6 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005748:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800574a:	2b00      	cmp	r3, #0
 800574c:	da2b      	bge.n	80057a6 <HAL_PCD_IRQHandler+0x898>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800575a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800575e:	429a      	cmp	r2, r3
 8005760:	d121      	bne.n	80057a6 <HAL_PCD_IRQHandler+0x898>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005774:	2201      	movs	r2, #1
 8005776:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <HAL_PCD_IRQHandler+0x898>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800579e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80057a2:	6053      	str	r3, [r2, #4]
            break;
 80057a4:	e008      	b.n	80057b8 <HAL_PCD_IRQHandler+0x8aa>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	3301      	adds	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	791b      	ldrb	r3, [r3, #4]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d3b3      	bcc.n	8005720 <HAL_PCD_IRQHandler+0x812>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80057c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f004 f8e7 	bl	80099a0 <USB_ReadInterrupts>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057dc:	d10a      	bne.n	80057f4 <HAL_PCD_IRQHandler+0x8e6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f006 fbf4 	bl	800bfcc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80057f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f004 f8d1 	bl	80099a0 <USB_ReadInterrupts>
 80057fe:	4603      	mov	r3, r0
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b04      	cmp	r3, #4
 8005806:	d115      	bne.n	8005834 <HAL_PCD_IRQHandler+0x926>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_PCD_IRQHandler+0x912>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f006 fbe4 	bl	800bfe8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6859      	ldr	r1, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	430a      	orrs	r2, r1
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	e000      	b.n	8005834 <HAL_PCD_IRQHandler+0x926>
      return;
 8005832:	bf00      	nop
    }
  }
}
 8005834:	3734      	adds	r7, #52	@ 0x34
 8005836:	46bd      	mov	sp, r7
 8005838:	bd90      	pop	{r4, r7, pc}

0800583a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	460b      	mov	r3, r1
 8005844:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_PCD_SetAddress+0x1a>
 8005850:	2302      	movs	r3, #2
 8005852:	e012      	b.n	800587a <HAL_PCD_SetAddress+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f004 f830 	bl	80098d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	461a      	mov	r2, r3
 8005890:	4603      	mov	r3, r0
 8005892:	70fb      	strb	r3, [r7, #3]
 8005894:	460b      	mov	r3, r1
 8005896:	803b      	strh	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	da0f      	bge.n	80058c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	f003 020f 	and.w	r2, r3, #15
 80058ae:	4613      	mov	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	3310      	adds	r3, #16
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	4413      	add	r3, r2
 80058bc:	3304      	adds	r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	705a      	strb	r2, [r3, #1]
 80058c6:	e00f      	b.n	80058e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c8:	78fb      	ldrb	r3, [r7, #3]
 80058ca:	f003 020f 	and.w	r2, r3, #15
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	3304      	adds	r3, #4
 80058e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80058f4:	883b      	ldrh	r3, [r7, #0]
 80058f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	78ba      	ldrb	r2, [r7, #2]
 8005902:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d004      	beq.n	8005916 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005916:	78bb      	ldrb	r3, [r7, #2]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d102      	bne.n	8005922 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_PCD_EP_Open+0xae>
 800592c:	2302      	movs	r3, #2
 800592e:	e00e      	b.n	800594e <HAL_PCD_EP_Open+0xcc>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	4618      	mov	r0, r3
 8005940:	f003 fa1a 	bl	8008d78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800594c:	7afb      	ldrb	r3, [r7, #11]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	460b      	mov	r3, r1
 8005960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da0f      	bge.n	800598a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	3310      	adds	r3, #16
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	3304      	adds	r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	705a      	strb	r2, [r3, #1]
 8005988:	e00f      	b.n	80059aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	3304      	adds	r3, #4
 80059a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 030f 	and.w	r3, r3, #15
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_PCD_EP_Close+0x6e>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e00e      	b.n	80059e2 <HAL_PCD_EP_Close+0x8c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f003 fa58 	bl	8008e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	60f8      	str	r0, [r7, #12]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
 80059f6:	460b      	mov	r3, r1
 80059f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059fa:	7afb      	ldrb	r3, [r7, #11]
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	4613      	mov	r3, r2
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	3304      	adds	r3, #4
 8005a12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a2c:	7afb      	ldrb	r3, [r7, #11]
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6979      	ldr	r1, [r7, #20]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f003 fafe 	bl	8009040 <USB_EPStartXfer>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	460b      	mov	r3, r1
 8005a58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	f003 020f 	and.w	r2, r3, #15
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005a70:	681b      	ldr	r3, [r3, #0]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	f003 020f 	and.w	r2, r3, #15
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2201      	movs	r2, #1
 8005abc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005abe:	7afb      	ldrb	r3, [r7, #11]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f003 fab5 	bl	8009040 <USB_EPStartXfer>

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	7912      	ldrb	r2, [r2, #4]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e04e      	b.n	8005b9c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da0f      	bge.n	8005b26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	3310      	adds	r3, #16
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	705a      	strb	r2, [r3, #1]
 8005b24:	e00d      	b.n	8005b42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	3304      	adds	r3, #4
 8005b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_PCD_EP_SetStall+0x82>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e01c      	b.n	8005b9c <HAL_PCD_EP_SetStall+0xbc>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68f9      	ldr	r1, [r7, #12]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f003 fdd9 	bl	8009728 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	f003 ffcb 	bl	8009b28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	7912      	ldrb	r2, [r2, #4]
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e042      	b.n	8005c48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da0f      	bge.n	8005bea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	f003 020f 	and.w	r2, r3, #15
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	3310      	adds	r3, #16
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	3304      	adds	r3, #4
 8005be0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2201      	movs	r2, #1
 8005be6:	705a      	strb	r2, [r3, #1]
 8005be8:	e00f      	b.n	8005c0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	f003 020f 	and.w	r2, r3, #15
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	3304      	adds	r3, #4
 8005c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_PCD_EP_ClrStall+0x86>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e00e      	b.n	8005c48 <HAL_PCD_EP_ClrStall+0xa4>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fde3 	bl	8009804 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0c      	bge.n	8005c7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 020f 	and.w	r2, r3, #15
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3310      	adds	r3, #16
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	3304      	adds	r3, #4
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	e00c      	b.n	8005c98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f003 fc06 	bl	80094b0 <USB_EPStopXfer>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ca8:	7afb      	ldrb	r3, [r7, #11]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b088      	sub	sp, #32
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	3310      	adds	r3, #16
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d901      	bls.n	8005cea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e067      	b.n	8005dba <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d902      	bls.n	8005d06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d0e:	e026      	b.n	8005d5e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	691a      	ldr	r2, [r3, #16]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d902      	bls.n	8005d2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	3303      	adds	r3, #3
 8005d30:	089b      	lsrs	r3, r3, #2
 8005d32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	6978      	ldr	r0, [r7, #20]
 8005d42:	f003 fc5f 	bl	8009604 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	441a      	add	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d809      	bhi.n	8005d88 <PCD_WriteEmptyTxFifo+0xd6>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d203      	bcs.n	8005d88 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1c3      	bne.n	8005d10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d811      	bhi.n	8005db8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	6939      	ldr	r1, [r7, #16]
 8005db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db4:	4013      	ands	r3, r2
 8005db6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	333c      	adds	r3, #60	@ 0x3c
 8005ddc:	3304      	adds	r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <PCD_EP_OutXfrComplete_int+0x98>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d124      	bne.n	8005e44 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e10:	461a      	mov	r2, r3
 8005e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e16:	6093      	str	r3, [r2, #8]
 8005e18:	e01a      	b.n	8005e50 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	2320      	movs	r3, #32
 8005e34:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f005 fff1 	bl	800be24 <HAL_PCD_DataOutStageCallback>
 8005e42:	e005      	b.n	8005e50 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	4619      	mov	r1, r3
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f005 ffea 	bl	800be24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3718      	adds	r7, #24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	4f54310a 	.word	0x4f54310a

08005e60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	333c      	adds	r3, #60	@ 0x3c
 8005e78:	3304      	adds	r3, #4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec4 <PCD_EP_OutSetupPacket_int+0x64>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d90e      	bls.n	8005eb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	461a      	mov	r2, r3
 8005eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f005 ffa3 	bl	800be00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	4f54300a 	.word	0x4f54300a

08005ec8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d107      	bne.n	8005ef6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ee6:	883b      	ldrh	r3, [r7, #0]
 8005ee8:	0419      	lsls	r1, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ef4:	e028      	b.n	8005f48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	4413      	add	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f04:	2300      	movs	r3, #0
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e00d      	b.n	8005f26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	3340      	adds	r3, #64	@ 0x40
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	3301      	adds	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d3ec      	bcc.n	8005f0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f30:	883b      	ldrh	r3, [r7, #0]
 8005f32:	0418      	lsls	r0, r3, #16
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6819      	ldr	r1, [r3, #0]
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4302      	orrs	r2, r0
 8005f40:	3340      	adds	r3, #64	@ 0x40
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	440b      	add	r3, r1
 8005f46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b083      	sub	sp, #12
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	887a      	ldrh	r2, [r7, #2]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005faa:	f043 0303 	orr.w	r3, r3, #3
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fc4:	4b05      	ldr	r3, [pc, #20]	@ (8005fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a04      	ldr	r2, [pc, #16]	@ (8005fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fce:	6013      	str	r3, [r2, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40007000 	.word	0x40007000

08005fe0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005fe4:	4b04      	ldr	r3, [pc, #16]	@ (8005ff8 <HAL_PWREx_GetVoltageRange+0x18>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40007000 	.word	0x40007000

08005ffc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800600a:	d130      	bne.n	800606e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800600c:	4b23      	ldr	r3, [pc, #140]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006018:	d038      	beq.n	800608c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800601a:	4b20      	ldr	r3, [pc, #128]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006022:	4a1e      	ldr	r2, [pc, #120]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006024:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006028:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800602a:	4b1d      	ldr	r3, [pc, #116]	@ (80060a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2232      	movs	r2, #50	@ 0x32
 8006030:	fb02 f303 	mul.w	r3, r2, r3
 8006034:	4a1b      	ldr	r2, [pc, #108]	@ (80060a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	0c9b      	lsrs	r3, r3, #18
 800603c:	3301      	adds	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006040:	e002      	b.n	8006048 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3b01      	subs	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006048:	4b14      	ldr	r3, [pc, #80]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006054:	d102      	bne.n	800605c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f2      	bne.n	8006042 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800605c:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006068:	d110      	bne.n	800608c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e00f      	b.n	800608e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800606e:	4b0b      	ldr	r3, [pc, #44]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607a:	d007      	beq.n	800608c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800607c:	4b07      	ldr	r3, [pc, #28]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006084:	4a05      	ldr	r2, [pc, #20]	@ (800609c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800608a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40007000 	.word	0x40007000
 80060a0:	20000008 	.word	0x20000008
 80060a4:	431bde83 	.word	0x431bde83

080060a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80060b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060b6:	6053      	str	r3, [r2, #4]
}
 80060b8:	bf00      	nop
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40007000 	.word	0x40007000

080060c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80060d0:	f7fc fc30 	bl	8002934 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e063      	b.n	80061a8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fc f843 	bl	8002180 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80060fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f858 	bl	80061b4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	3b01      	subs	r3, #1
 8006114:	021a      	lsls	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	2120      	movs	r1, #32
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f850 	bl	80061d0 <QSPI_WaitFlagStateUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006134:	7afb      	ldrb	r3, [r7, #11]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d131      	bne.n	800619e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006144:	f023 0310 	bic.w	r3, r3, #16
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6852      	ldr	r2, [r2, #4]
 800614c:	0611      	lsls	r1, r2, #24
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	4311      	orrs	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	430b      	orrs	r3, r1
 800615a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	4b13      	ldr	r3, [pc, #76]	@ (80061b0 <HAL_QSPI_Init+0xe8>)
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6912      	ldr	r2, [r2, #16]
 800616a:	0411      	lsls	r1, r2, #16
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6952      	ldr	r2, [r2, #20]
 8006170:	4311      	orrs	r1, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6992      	ldr	r2, [r2, #24]
 8006176:	4311      	orrs	r1, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6812      	ldr	r2, [r2, #0]
 800617c:	430b      	orrs	r3, r1
 800617e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80061a6:	7afb      	ldrb	r3, [r7, #11]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	ffe0f8fe 	.word	0xffe0f8fe

080061b4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80061e0:	e01a      	b.n	8006218 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d016      	beq.n	8006218 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ea:	f7fc fba3 	bl	8002934 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d302      	bcc.n	8006200 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10b      	bne.n	8006218 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2204      	movs	r2, #4
 8006204:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620c:	f043 0201 	orr.w	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e00e      	b.n	8006236 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d1d6      	bne.n	80061e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e3ca      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006252:	4b97      	ldr	r3, [pc, #604]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 030c 	and.w	r3, r3, #12
 800625a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800625c:	4b94      	ldr	r3, [pc, #592]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0310 	and.w	r3, r3, #16
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80e4 	beq.w	800643c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <HAL_RCC_OscConfig+0x4a>
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	f040 808b 	bne.w	8006398 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b01      	cmp	r3, #1
 8006286:	f040 8087 	bne.w	8006398 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800628a:	4b89      	ldr	r3, [pc, #548]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_RCC_OscConfig+0x62>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e3a2      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1a      	ldr	r2, [r3, #32]
 80062a6:	4b82      	ldr	r3, [pc, #520]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d004      	beq.n	80062bc <HAL_RCC_OscConfig+0x7c>
 80062b2:	4b7f      	ldr	r3, [pc, #508]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062ba:	e005      	b.n	80062c8 <HAL_RCC_OscConfig+0x88>
 80062bc:	4b7c      	ldr	r3, [pc, #496]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d223      	bcs.n	8006314 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f000 fd55 	bl	8006d80 <RCC_SetFlashLatencyFromMSIRange>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e383      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062e0:	4b73      	ldr	r3, [pc, #460]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a72      	ldr	r2, [pc, #456]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062e6:	f043 0308 	orr.w	r3, r3, #8
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	4b70      	ldr	r3, [pc, #448]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a1b      	ldr	r3, [r3, #32]
 80062f8:	496d      	ldr	r1, [pc, #436]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062fe:	4b6c      	ldr	r3, [pc, #432]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	4968      	ldr	r1, [pc, #416]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800630e:	4313      	orrs	r3, r2
 8006310:	604b      	str	r3, [r1, #4]
 8006312:	e025      	b.n	8006360 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006314:	4b66      	ldr	r3, [pc, #408]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a65      	ldr	r2, [pc, #404]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800631a:	f043 0308 	orr.w	r3, r3, #8
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	4b63      	ldr	r3, [pc, #396]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	4960      	ldr	r1, [pc, #384]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006332:	4b5f      	ldr	r3, [pc, #380]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	495b      	ldr	r1, [pc, #364]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fd15 	bl	8006d80 <RCC_SetFlashLatencyFromMSIRange>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e343      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006360:	f000 fc4a 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8006364:	4602      	mov	r2, r0
 8006366:	4b52      	ldr	r3, [pc, #328]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	4950      	ldr	r1, [pc, #320]	@ (80064b4 <HAL_RCC_OscConfig+0x274>)
 8006372:	5ccb      	ldrb	r3, [r1, r3]
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	fa22 f303 	lsr.w	r3, r2, r3
 800637c:	4a4e      	ldr	r2, [pc, #312]	@ (80064b8 <HAL_RCC_OscConfig+0x278>)
 800637e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006380:	4b4e      	ldr	r3, [pc, #312]	@ (80064bc <HAL_RCC_OscConfig+0x27c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f7fc fa85 	bl	8002894 <HAL_InitTick>
 800638a:	4603      	mov	r3, r0
 800638c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d052      	beq.n	800643a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	e327      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d032      	beq.n	8006406 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80063a0:	4b43      	ldr	r3, [pc, #268]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a42      	ldr	r2, [pc, #264]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063ac:	f7fc fac2 	bl	8002934 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063b4:	f7fc fabe 	bl	8002934 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e310      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80063c6:	4b3a      	ldr	r3, [pc, #232]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063d2:	4b37      	ldr	r3, [pc, #220]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a36      	ldr	r2, [pc, #216]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063d8:	f043 0308 	orr.w	r3, r3, #8
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	4931      	ldr	r1, [pc, #196]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063f0:	4b2f      	ldr	r3, [pc, #188]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69db      	ldr	r3, [r3, #28]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	492c      	ldr	r1, [pc, #176]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006400:	4313      	orrs	r3, r2
 8006402:	604b      	str	r3, [r1, #4]
 8006404:	e01a      	b.n	800643c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006406:	4b2a      	ldr	r3, [pc, #168]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a29      	ldr	r2, [pc, #164]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800640c:	f023 0301 	bic.w	r3, r3, #1
 8006410:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006412:	f7fc fa8f 	bl	8002934 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800641a:	f7fc fa8b 	bl	8002934 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e2dd      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800642c:	4b20      	ldr	r3, [pc, #128]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <HAL_RCC_OscConfig+0x1da>
 8006438:	e000      	b.n	800643c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800643a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d074      	beq.n	8006532 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	2b08      	cmp	r3, #8
 800644c:	d005      	beq.n	800645a <HAL_RCC_OscConfig+0x21a>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b0c      	cmp	r3, #12
 8006452:	d10e      	bne.n	8006472 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b03      	cmp	r3, #3
 8006458:	d10b      	bne.n	8006472 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800645a:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d064      	beq.n	8006530 <HAL_RCC_OscConfig+0x2f0>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d160      	bne.n	8006530 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e2ba      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647a:	d106      	bne.n	800648a <HAL_RCC_OscConfig+0x24a>
 800647c:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0b      	ldr	r2, [pc, #44]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e026      	b.n	80064d8 <HAL_RCC_OscConfig+0x298>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006492:	d115      	bne.n	80064c0 <HAL_RCC_OscConfig+0x280>
 8006494:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a05      	ldr	r2, [pc, #20]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 800649a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	4b03      	ldr	r3, [pc, #12]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a02      	ldr	r2, [pc, #8]	@ (80064b0 <HAL_RCC_OscConfig+0x270>)
 80064a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e014      	b.n	80064d8 <HAL_RCC_OscConfig+0x298>
 80064ae:	bf00      	nop
 80064b0:	40021000 	.word	0x40021000
 80064b4:	0800f268 	.word	0x0800f268
 80064b8:	20000008 	.word	0x20000008
 80064bc:	2000000c 	.word	0x2000000c
 80064c0:	4ba0      	ldr	r3, [pc, #640]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a9f      	ldr	r2, [pc, #636]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80064c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ca:	6013      	str	r3, [r2, #0]
 80064cc:	4b9d      	ldr	r3, [pc, #628]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a9c      	ldr	r2, [pc, #624]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80064d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d013      	beq.n	8006508 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fc fa28 	bl	8002934 <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fc fa24 	bl	8002934 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	@ 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e276      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064fa:	4b92      	ldr	r3, [pc, #584]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x2a8>
 8006506:	e014      	b.n	8006532 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006508:	f7fc fa14 	bl	8002934 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006510:	f7fc fa10 	bl	8002934 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b64      	cmp	r3, #100	@ 0x64
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e262      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006522:	4b88      	ldr	r3, [pc, #544]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1f0      	bne.n	8006510 <HAL_RCC_OscConfig+0x2d0>
 800652e:	e000      	b.n	8006532 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d060      	beq.n	8006600 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b04      	cmp	r3, #4
 8006542:	d005      	beq.n	8006550 <HAL_RCC_OscConfig+0x310>
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b0c      	cmp	r3, #12
 8006548:	d119      	bne.n	800657e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d116      	bne.n	800657e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006550:	4b7c      	ldr	r3, [pc, #496]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_RCC_OscConfig+0x328>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e23f      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b76      	ldr	r3, [pc, #472]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	4973      	ldr	r1, [pc, #460]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657c:	e040      	b.n	8006600 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d023      	beq.n	80065ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006586:	4b6f      	ldr	r3, [pc, #444]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a6e      	ldr	r2, [pc, #440]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 800658c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006592:	f7fc f9cf 	bl	8002934 <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800659a:	f7fc f9cb 	bl	8002934 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e21d      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065ac:	4b65      	ldr	r3, [pc, #404]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b8:	4b62      	ldr	r3, [pc, #392]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	495f      	ldr	r1, [pc, #380]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	604b      	str	r3, [r1, #4]
 80065cc:	e018      	b.n	8006600 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a5c      	ldr	r2, [pc, #368]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80065d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065da:	f7fc f9ab 	bl	8002934 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065e2:	f7fc f9a7 	bl	8002934 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e1f9      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065f4:	4b53      	ldr	r3, [pc, #332]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f0      	bne.n	80065e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0308 	and.w	r3, r3, #8
 8006608:	2b00      	cmp	r3, #0
 800660a:	d03c      	beq.n	8006686 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01c      	beq.n	800664e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006614:	4b4b      	ldr	r3, [pc, #300]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800661a:	4a4a      	ldr	r2, [pc, #296]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006624:	f7fc f986 	bl	8002934 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800662c:	f7fc f982 	bl	8002934 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e1d4      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800663e:	4b41      	ldr	r3, [pc, #260]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0ef      	beq.n	800662c <HAL_RCC_OscConfig+0x3ec>
 800664c:	e01b      	b.n	8006686 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800664e:	4b3d      	ldr	r3, [pc, #244]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006654:	4a3b      	ldr	r2, [pc, #236]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006656:	f023 0301 	bic.w	r3, r3, #1
 800665a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800665e:	f7fc f969 	bl	8002934 <HAL_GetTick>
 8006662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006664:	e008      	b.n	8006678 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006666:	f7fc f965 	bl	8002934 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e1b7      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006678:	4b32      	ldr	r3, [pc, #200]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 800667a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1ef      	bne.n	8006666 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 80a6 	beq.w	80067e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006694:	2300      	movs	r3, #0
 8006696:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006698:	4b2a      	ldr	r3, [pc, #168]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 800669a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800669c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10d      	bne.n	80066c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066a4:	4b27      	ldr	r3, [pc, #156]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80066a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066a8:	4a26      	ldr	r2, [pc, #152]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80066aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80066b0:	4b24      	ldr	r3, [pc, #144]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 80066b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066bc:	2301      	movs	r3, #1
 80066be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066c0:	4b21      	ldr	r3, [pc, #132]	@ (8006748 <HAL_RCC_OscConfig+0x508>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d118      	bne.n	80066fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006748 <HAL_RCC_OscConfig+0x508>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <HAL_RCC_OscConfig+0x508>)
 80066d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066d8:	f7fc f92c 	bl	8002934 <HAL_GetTick>
 80066dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066de:	e008      	b.n	80066f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e0:	f7fc f928 	bl	8002934 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d901      	bls.n	80066f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80066ee:	2303      	movs	r3, #3
 80066f0:	e17a      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066f2:	4b15      	ldr	r3, [pc, #84]	@ (8006748 <HAL_RCC_OscConfig+0x508>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0f0      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d108      	bne.n	8006718 <HAL_RCC_OscConfig+0x4d8>
 8006706:	4b0f      	ldr	r3, [pc, #60]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670c:	4a0d      	ldr	r2, [pc, #52]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 800670e:	f043 0301 	orr.w	r3, r3, #1
 8006712:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006716:	e029      	b.n	800676c <HAL_RCC_OscConfig+0x52c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b05      	cmp	r3, #5
 800671e:	d115      	bne.n	800674c <HAL_RCC_OscConfig+0x50c>
 8006720:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006726:	4a07      	ldr	r2, [pc, #28]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006728:	f043 0304 	orr.w	r3, r3, #4
 800672c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006730:	4b04      	ldr	r3, [pc, #16]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006736:	4a03      	ldr	r2, [pc, #12]	@ (8006744 <HAL_RCC_OscConfig+0x504>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006740:	e014      	b.n	800676c <HAL_RCC_OscConfig+0x52c>
 8006742:	bf00      	nop
 8006744:	40021000 	.word	0x40021000
 8006748:	40007000 	.word	0x40007000
 800674c:	4b9c      	ldr	r3, [pc, #624]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006752:	4a9b      	ldr	r2, [pc, #620]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800675c:	4b98      	ldr	r3, [pc, #608]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006762:	4a97      	ldr	r2, [pc, #604]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d016      	beq.n	80067a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fc f8de 	bl	8002934 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800677a:	e00a      	b.n	8006792 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677c:	f7fc f8da 	bl	8002934 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e12a      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006792:	4b8b      	ldr	r3, [pc, #556]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0ed      	beq.n	800677c <HAL_RCC_OscConfig+0x53c>
 80067a0:	e015      	b.n	80067ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a2:	f7fc f8c7 	bl	8002934 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fc f8c3 	bl	8002934 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e113      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067c0:	4b7f      	ldr	r3, [pc, #508]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80067c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1ed      	bne.n	80067aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d105      	bne.n	80067e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d4:	4b7a      	ldr	r3, [pc, #488]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80067d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d8:	4a79      	ldr	r2, [pc, #484]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80fe 	beq.w	80069e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	f040 80d0 	bne.w	8006994 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80067f4:	4b72      	ldr	r3, [pc, #456]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f003 0203 	and.w	r2, r3, #3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	429a      	cmp	r2, r3
 8006806:	d130      	bne.n	800686a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	3b01      	subs	r3, #1
 8006814:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d127      	bne.n	800686a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006824:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d11f      	bne.n	800686a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006834:	2a07      	cmp	r2, #7
 8006836:	bf14      	ite	ne
 8006838:	2201      	movne	r2, #1
 800683a:	2200      	moveq	r2, #0
 800683c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800683e:	4293      	cmp	r3, r2
 8006840:	d113      	bne.n	800686a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	3b01      	subs	r3, #1
 8006850:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006852:	429a      	cmp	r2, r3
 8006854:	d109      	bne.n	800686a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	3b01      	subs	r3, #1
 8006864:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d06e      	beq.n	8006948 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b0c      	cmp	r3, #12
 800686e:	d069      	beq.n	8006944 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006870:	4b53      	ldr	r3, [pc, #332]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800687c:	4b50      	ldr	r3, [pc, #320]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0ad      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800688c:	4b4c      	ldr	r3, [pc, #304]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a4b      	ldr	r2, [pc, #300]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006892:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006896:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006898:	f7fc f84c 	bl	8002934 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a0:	f7fc f848 	bl	8002934 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e09a      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068b2:	4b43      	ldr	r3, [pc, #268]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f0      	bne.n	80068a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068be:	4b40      	ldr	r3, [pc, #256]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	4b40      	ldr	r3, [pc, #256]	@ (80069c4 <HAL_RCC_OscConfig+0x784>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80068ce:	3a01      	subs	r2, #1
 80068d0:	0112      	lsls	r2, r2, #4
 80068d2:	4311      	orrs	r1, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068d8:	0212      	lsls	r2, r2, #8
 80068da:	4311      	orrs	r1, r2
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80068e0:	0852      	lsrs	r2, r2, #1
 80068e2:	3a01      	subs	r2, #1
 80068e4:	0552      	lsls	r2, r2, #21
 80068e6:	4311      	orrs	r1, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80068ec:	0852      	lsrs	r2, r2, #1
 80068ee:	3a01      	subs	r2, #1
 80068f0:	0652      	lsls	r2, r2, #25
 80068f2:	4311      	orrs	r1, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80068f8:	0912      	lsrs	r2, r2, #4
 80068fa:	0452      	lsls	r2, r2, #17
 80068fc:	430a      	orrs	r2, r1
 80068fe:	4930      	ldr	r1, [pc, #192]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006900:	4313      	orrs	r3, r2
 8006902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006904:	4b2e      	ldr	r3, [pc, #184]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a2d      	ldr	r2, [pc, #180]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800690a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800690e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006910:	4b2b      	ldr	r3, [pc, #172]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4a2a      	ldr	r2, [pc, #168]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800691a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800691c:	f7fc f80a 	bl	8002934 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006924:	f7fc f806 	bl	8002934 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e058      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006936:	4b22      	ldr	r3, [pc, #136]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006942:	e050      	b.n	80069e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e04f      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006948:	4b1d      	ldr	r3, [pc, #116]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d148      	bne.n	80069e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006954:	4b1a      	ldr	r3, [pc, #104]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a19      	ldr	r2, [pc, #100]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800695a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006960:	4b17      	ldr	r3, [pc, #92]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	4a16      	ldr	r2, [pc, #88]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800696a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800696c:	f7fb ffe2 	bl	8002934 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006974:	f7fb ffde 	bl	8002934 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e030      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006986:	4b0e      	ldr	r3, [pc, #56]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x734>
 8006992:	e028      	b.n	80069e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b0c      	cmp	r3, #12
 8006998:	d023      	beq.n	80069e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800699a:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a08      	ldr	r2, [pc, #32]	@ (80069c0 <HAL_RCC_OscConfig+0x780>)
 80069a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a6:	f7fb ffc5 	bl	8002934 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ac:	e00c      	b.n	80069c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ae:	f7fb ffc1 	bl	8002934 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d905      	bls.n	80069c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e013      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
 80069c0:	40021000 	.word	0x40021000
 80069c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c8:	4b09      	ldr	r3, [pc, #36]	@ (80069f0 <HAL_RCC_OscConfig+0x7b0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1ec      	bne.n	80069ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80069d4:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <HAL_RCC_OscConfig+0x7b0>)
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	4905      	ldr	r1, [pc, #20]	@ (80069f0 <HAL_RCC_OscConfig+0x7b0>)
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_RCC_OscConfig+0x7b4>)
 80069dc:	4013      	ands	r3, r2
 80069de:	60cb      	str	r3, [r1, #12]
 80069e0:	e001      	b.n	80069e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40021000 	.word	0x40021000
 80069f4:	feeefffc 	.word	0xfeeefffc

080069f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e0e7      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a0c:	4b75      	ldr	r3, [pc, #468]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d910      	bls.n	8006a3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a1a:	4b72      	ldr	r3, [pc, #456]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f023 0207 	bic.w	r2, r3, #7
 8006a22:	4970      	ldr	r1, [pc, #448]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d001      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0cf      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d010      	beq.n	8006a6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	4b66      	ldr	r3, [pc, #408]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d908      	bls.n	8006a6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a58:	4b63      	ldr	r3, [pc, #396]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	4960      	ldr	r1, [pc, #384]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d04c      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d107      	bne.n	8006a8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d121      	bne.n	8006ace <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e0a6      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d107      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a96:	4b54      	ldr	r3, [pc, #336]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d115      	bne.n	8006ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e09a      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006aae:	4b4e      	ldr	r3, [pc, #312]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e08e      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006abe:	4b4a      	ldr	r3, [pc, #296]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e086      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ace:	4b46      	ldr	r3, [pc, #280]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f023 0203 	bic.w	r2, r3, #3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4943      	ldr	r1, [pc, #268]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fb ff28 	bl	8002934 <HAL_GetTick>
 8006ae4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ae6:	e00a      	b.n	8006afe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae8:	f7fb ff24 	bl	8002934 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e06e      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006afe:	4b3a      	ldr	r3, [pc, #232]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 020c 	and.w	r2, r3, #12
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d1eb      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	4b31      	ldr	r3, [pc, #196]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d208      	bcs.n	8006b3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	492b      	ldr	r1, [pc, #172]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b3e:	4b29      	ldr	r3, [pc, #164]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d210      	bcs.n	8006b6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b4c:	4b25      	ldr	r3, [pc, #148]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 0207 	bic.w	r2, r3, #7
 8006b54:	4923      	ldr	r1, [pc, #140]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b5c:	4b21      	ldr	r3, [pc, #132]	@ (8006be4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d001      	beq.n	8006b6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e036      	b.n	8006bdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	4918      	ldr	r1, [pc, #96]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d009      	beq.n	8006bac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b98:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	4910      	ldr	r1, [pc, #64]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006bac:	f000 f824 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006be8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	f003 030f 	and.w	r3, r3, #15
 8006bbc:	490b      	ldr	r1, [pc, #44]	@ (8006bec <HAL_RCC_ClockConfig+0x1f4>)
 8006bbe:	5ccb      	ldrb	r3, [r1, r3]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	4a09      	ldr	r2, [pc, #36]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1f8>)
 8006bca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bcc:	4b09      	ldr	r3, [pc, #36]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1fc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fb fe5f 	bl	8002894 <HAL_InitTick>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40022000 	.word	0x40022000
 8006be8:	40021000 	.word	0x40021000
 8006bec:	0800f268 	.word	0x0800f268
 8006bf0:	20000008 	.word	0x20000008
 8006bf4:	2000000c 	.word	0x2000000c

08006bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b089      	sub	sp, #36	@ 0x24
 8006bfc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c06:	4b3e      	ldr	r3, [pc, #248]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c10:	4b3b      	ldr	r3, [pc, #236]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_RCC_GetSysClockFreq+0x34>
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b0c      	cmp	r3, #12
 8006c24:	d121      	bne.n	8006c6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d11e      	bne.n	8006c6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006c2c:	4b34      	ldr	r3, [pc, #208]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d107      	bne.n	8006c48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006c38:	4b31      	ldr	r3, [pc, #196]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	e005      	b.n	8006c54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006c48:	4b2d      	ldr	r3, [pc, #180]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	091b      	lsrs	r3, r3, #4
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006c54:	4a2b      	ldr	r2, [pc, #172]	@ (8006d04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10d      	bne.n	8006c80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c68:	e00a      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d102      	bne.n	8006c76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c70:	4b25      	ldr	r3, [pc, #148]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006c72:	61bb      	str	r3, [r7, #24]
 8006c74:	e004      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	d101      	bne.n	8006c80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006c7c:	4b23      	ldr	r3, [pc, #140]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8006c7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b0c      	cmp	r3, #12
 8006c84:	d134      	bne.n	8006cf0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c86:	4b1e      	ldr	r3, [pc, #120]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d003      	beq.n	8006c9e <HAL_RCC_GetSysClockFreq+0xa6>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d003      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0xac>
 8006c9c:	e005      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ca0:	617b      	str	r3, [r7, #20]
      break;
 8006ca2:	e005      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006ca4:	4b19      	ldr	r3, [pc, #100]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x114>)
 8006ca6:	617b      	str	r3, [r7, #20]
      break;
 8006ca8:	e002      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	617b      	str	r3, [r7, #20]
      break;
 8006cae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cb0:	4b13      	ldr	r3, [pc, #76]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	091b      	lsrs	r3, r3, #4
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	3301      	adds	r3, #1
 8006cbc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006cbe:	4b10      	ldr	r3, [pc, #64]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	0a1b      	lsrs	r3, r3, #8
 8006cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	fb03 f202 	mul.w	r2, r3, r2
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	0e5b      	lsrs	r3, r3, #25
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3724      	adds	r7, #36	@ 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40021000 	.word	0x40021000
 8006d04:	0800f280 	.word	0x0800f280
 8006d08:	00f42400 	.word	0x00f42400
 8006d0c:	007a1200 	.word	0x007a1200

08006d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d14:	4b03      	ldr	r3, [pc, #12]	@ (8006d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d16:	681b      	ldr	r3, [r3, #0]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20000008 	.word	0x20000008

08006d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d2c:	f7ff fff0 	bl	8006d10 <HAL_RCC_GetHCLKFreq>
 8006d30:	4602      	mov	r2, r0
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	4904      	ldr	r1, [pc, #16]	@ (8006d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d3e:	5ccb      	ldrb	r3, [r1, r3]
 8006d40:	f003 031f 	and.w	r3, r3, #31
 8006d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40021000 	.word	0x40021000
 8006d50:	0800f278 	.word	0x0800f278

08006d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006d58:	f7ff ffda 	bl	8006d10 <HAL_RCC_GetHCLKFreq>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	0adb      	lsrs	r3, r3, #11
 8006d64:	f003 0307 	and.w	r3, r3, #7
 8006d68:	4904      	ldr	r1, [pc, #16]	@ (8006d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d6a:	5ccb      	ldrb	r3, [r1, r3]
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	0800f278 	.word	0x0800f278

08006d80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006d88:	2300      	movs	r3, #0
 8006d8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d98:	f7ff f922 	bl	8005fe0 <HAL_PWREx_GetVoltageRange>
 8006d9c:	6178      	str	r0, [r7, #20]
 8006d9e:	e014      	b.n	8006dca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006da0:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da4:	4a24      	ldr	r2, [pc, #144]	@ (8006e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8006dac:	4b22      	ldr	r3, [pc, #136]	@ (8006e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006db8:	f7ff f912 	bl	8005fe0 <HAL_PWREx_GetVoltageRange>
 8006dbc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8006e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd0:	d10b      	bne.n	8006dea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b80      	cmp	r3, #128	@ 0x80
 8006dd6:	d919      	bls.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2ba0      	cmp	r3, #160	@ 0xa0
 8006ddc:	d902      	bls.n	8006de4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dde:	2302      	movs	r3, #2
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	e013      	b.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006de4:	2301      	movs	r3, #1
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	e010      	b.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b80      	cmp	r3, #128	@ 0x80
 8006dee:	d902      	bls.n	8006df6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006df0:	2303      	movs	r3, #3
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e00a      	b.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b80      	cmp	r3, #128	@ 0x80
 8006dfa:	d102      	bne.n	8006e02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	e004      	b.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b70      	cmp	r3, #112	@ 0x70
 8006e06:	d101      	bne.n	8006e0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006e08:	2301      	movs	r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f023 0207 	bic.w	r2, r3, #7
 8006e14:	4909      	ldr	r1, [pc, #36]	@ (8006e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006e1c:	4b07      	ldr	r3, [pc, #28]	@ (8006e3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d001      	beq.n	8006e2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40022000 	.word	0x40022000

08006e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d041      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e64:	d02a      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e6a:	d824      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e70:	d008      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e76:	d81e      	bhi.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e80:	d010      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e82:	e018      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e84:	4b86      	ldr	r3, [pc, #536]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	4a85      	ldr	r2, [pc, #532]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e8e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006e90:	e015      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3304      	adds	r3, #4
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 facb 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ea2:	e00c      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3320      	adds	r3, #32
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fbb6 	bl	800761c <RCCEx_PLLSAI2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006eb4:	e003      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	74fb      	strb	r3, [r7, #19]
      break;
 8006eba:	e000      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ebe:	7cfb      	ldrb	r3, [r7, #19]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10b      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ec4:	4b76      	ldr	r3, [pc, #472]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed2:	4973      	ldr	r1, [pc, #460]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006eda:	e001      	b.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	7cfb      	ldrb	r3, [r7, #19]
 8006ede:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d041      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ef4:	d02a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006ef6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006efa:	d824      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f00:	d008      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f06:	d81e      	bhi.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f10:	d010      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006f12:	e018      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f14:	4b62      	ldr	r3, [pc, #392]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	4a61      	ldr	r2, [pc, #388]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f1e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f20:	e015      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	2100      	movs	r1, #0
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fa83 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f32:	e00c      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3320      	adds	r3, #32
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb6e 	bl	800761c <RCCEx_PLLSAI2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006f44:	e003      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	74fb      	strb	r3, [r7, #19]
      break;
 8006f4a:	e000      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4e:	7cfb      	ldrb	r3, [r7, #19]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f54:	4b52      	ldr	r3, [pc, #328]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f62:	494f      	ldr	r1, [pc, #316]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006f6a:	e001      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6c:	7cfb      	ldrb	r3, [r7, #19]
 8006f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80a0 	beq.w	80070be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006f82:	4b47      	ldr	r3, [pc, #284]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e000      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006f92:	2300      	movs	r3, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f98:	4b41      	ldr	r3, [pc, #260]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9c:	4a40      	ldr	r2, [pc, #256]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fc0:	f7fb fcb8 	bl	8002934 <HAL_GetTick>
 8006fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fc6:	e009      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc8:	f7fb fcb4 	bl	8002934 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d902      	bls.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8006fda:	e005      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fdc:	4b31      	ldr	r3, [pc, #196]	@ (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d0ef      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006fe8:	7cfb      	ldrb	r3, [r7, #19]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d15c      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fee:	4b2c      	ldr	r3, [pc, #176]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01f      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	429a      	cmp	r2, r3
 800700a:	d019      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800700c:	4b24      	ldr	r3, [pc, #144]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007016:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007018:	4b21      	ldr	r3, [pc, #132]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800701e:	4a20      	ldr	r2, [pc, #128]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007028:	4b1d      	ldr	r3, [pc, #116]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702e:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007038:	4a19      	ldr	r2, [pc, #100]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d016      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704a:	f7fb fc73 	bl	8002934 <HAL_GetTick>
 800704e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007050:	e00b      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007052:	f7fb fc6f 	bl	8002934 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007060:	4293      	cmp	r3, r2
 8007062:	d902      	bls.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	74fb      	strb	r3, [r7, #19]
            break;
 8007068:	e006      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800706c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0ec      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007078:	7cfb      	ldrb	r3, [r7, #19]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10c      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800707e:	4b08      	ldr	r3, [pc, #32]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007084:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800708e:	4904      	ldr	r1, [pc, #16]	@ (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007096:	e009      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007098:	7cfb      	ldrb	r3, [r7, #19]
 800709a:	74bb      	strb	r3, [r7, #18]
 800709c:	e006      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800709e:	bf00      	nop
 80070a0:	40021000 	.word	0x40021000
 80070a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a8:	7cfb      	ldrb	r3, [r7, #19]
 80070aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070ac:	7c7b      	ldrb	r3, [r7, #17]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d105      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b2:	4b9e      	ldr	r3, [pc, #632]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b6:	4a9d      	ldr	r2, [pc, #628]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ca:	4b98      	ldr	r3, [pc, #608]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d0:	f023 0203 	bic.w	r2, r3, #3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	4994      	ldr	r1, [pc, #592]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070ec:	4b8f      	ldr	r3, [pc, #572]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f2:	f023 020c 	bic.w	r2, r3, #12
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fa:	498c      	ldr	r1, [pc, #560]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800710e:	4b87      	ldr	r3, [pc, #540]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007114:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711c:	4983      	ldr	r1, [pc, #524]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007130:	4b7e      	ldr	r3, [pc, #504]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800713e:	497b      	ldr	r1, [pc, #492]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007152:	4b76      	ldr	r3, [pc, #472]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007158:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007160:	4972      	ldr	r1, [pc, #456]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007174:	4b6d      	ldr	r3, [pc, #436]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007182:	496a      	ldr	r1, [pc, #424]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007196:	4b65      	ldr	r3, [pc, #404]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a4:	4961      	ldr	r1, [pc, #388]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071b8:	4b5c      	ldr	r3, [pc, #368]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071c6:	4959      	ldr	r1, [pc, #356]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071da:	4b54      	ldr	r3, [pc, #336]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	4950      	ldr	r1, [pc, #320]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071fc:	4b4b      	ldr	r3, [pc, #300]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007202:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720a:	4948      	ldr	r1, [pc, #288]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800721e:	4b43      	ldr	r3, [pc, #268]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007224:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800722c:	493f      	ldr	r1, [pc, #252]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d028      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007240:	4b3a      	ldr	r3, [pc, #232]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007246:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800724e:	4937      	ldr	r1, [pc, #220]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800725a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800725e:	d106      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007260:	4b32      	ldr	r3, [pc, #200]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	4a31      	ldr	r2, [pc, #196]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800726a:	60d3      	str	r3, [r2, #12]
 800726c:	e011      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007272:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007276:	d10c      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3304      	adds	r3, #4
 800727c:	2101      	movs	r1, #1
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f8d8 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8007284:	4603      	mov	r3, r0
 8007286:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007288:	7cfb      	ldrb	r3, [r7, #19]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800728e:	7cfb      	ldrb	r3, [r7, #19]
 8007290:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d028      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800729e:	4b23      	ldr	r3, [pc, #140]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ac:	491f      	ldr	r1, [pc, #124]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072bc:	d106      	bne.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072be:	4b1b      	ldr	r3, [pc, #108]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	4a1a      	ldr	r2, [pc, #104]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c8:	60d3      	str	r3, [r2, #12]
 80072ca:	e011      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072d4:	d10c      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3304      	adds	r3, #4
 80072da:	2101      	movs	r1, #1
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f8a9 	bl	8007434 <RCCEx_PLLSAI1_Config>
 80072e2:	4603      	mov	r3, r0
 80072e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072e6:	7cfb      	ldrb	r3, [r7, #19]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80072ec:	7cfb      	ldrb	r3, [r7, #19]
 80072ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02b      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007302:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800730a:	4908      	ldr	r1, [pc, #32]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800731a:	d109      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800731c:	4b03      	ldr	r3, [pc, #12]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4a02      	ldr	r2, [pc, #8]	@ (800732c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007322:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007326:	60d3      	str	r3, [r2, #12]
 8007328:	e014      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800732a:	bf00      	nop
 800732c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007334:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007338:	d10c      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	2101      	movs	r1, #1
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f877 	bl	8007434 <RCCEx_PLLSAI1_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800734a:	7cfb      	ldrb	r3, [r7, #19]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007350:	7cfb      	ldrb	r3, [r7, #19]
 8007352:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d02f      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007360:	4b2b      	ldr	r3, [pc, #172]	@ (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007366:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800736e:	4928      	ldr	r1, [pc, #160]	@ (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007370:	4313      	orrs	r3, r2
 8007372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800737a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800737e:	d10d      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3304      	adds	r3, #4
 8007384:	2102      	movs	r1, #2
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f854 	bl	8007434 <RCCEx_PLLSAI1_Config>
 800738c:	4603      	mov	r3, r0
 800738e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d014      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007396:	7cfb      	ldrb	r3, [r7, #19]
 8007398:	74bb      	strb	r3, [r7, #18]
 800739a:	e011      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3320      	adds	r3, #32
 80073aa:	2102      	movs	r1, #2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 f935 	bl	800761c <RCCEx_PLLSAI2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073b6:	7cfb      	ldrb	r3, [r7, #19]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80073bc:	7cfb      	ldrb	r3, [r7, #19]
 80073be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073cc:	4b10      	ldr	r3, [pc, #64]	@ (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073da:	490d      	ldr	r1, [pc, #52]	@ (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80073ee:	4b08      	ldr	r3, [pc, #32]	@ (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80073f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fe:	4904      	ldr	r1, [pc, #16]	@ (8007410 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007406:	7cbb      	ldrb	r3, [r7, #18]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40021000 	.word	0x40021000

08007414 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a04      	ldr	r2, [pc, #16]	@ (8007430 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40021000 	.word	0x40021000

08007434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007442:	4b75      	ldr	r3, [pc, #468]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800744e:	4b72      	ldr	r3, [pc, #456]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f003 0203 	and.w	r2, r3, #3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d10d      	bne.n	800747a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
       ||
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007466:	4b6c      	ldr	r3, [pc, #432]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	091b      	lsrs	r3, r3, #4
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
       ||
 8007476:	429a      	cmp	r2, r3
 8007478:	d047      	beq.n	800750a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
 800747e:	e044      	b.n	800750a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b03      	cmp	r3, #3
 8007486:	d018      	beq.n	80074ba <RCCEx_PLLSAI1_Config+0x86>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d825      	bhi.n	80074d8 <RCCEx_PLLSAI1_Config+0xa4>
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <RCCEx_PLLSAI1_Config+0x62>
 8007490:	2b02      	cmp	r3, #2
 8007492:	d009      	beq.n	80074a8 <RCCEx_PLLSAI1_Config+0x74>
 8007494:	e020      	b.n	80074d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007496:	4b60      	ldr	r3, [pc, #384]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11d      	bne.n	80074de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074a6:	e01a      	b.n	80074de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d116      	bne.n	80074e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074b8:	e013      	b.n	80074e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074ba:	4b57      	ldr	r3, [pc, #348]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10f      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074c6:	4b54      	ldr	r3, [pc, #336]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d109      	bne.n	80074e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80074d6:	e006      	b.n	80074e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	73fb      	strb	r3, [r7, #15]
      break;
 80074dc:	e004      	b.n	80074e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074de:	bf00      	nop
 80074e0:	e002      	b.n	80074e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074e2:	bf00      	nop
 80074e4:	e000      	b.n	80074e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80074e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10d      	bne.n	800750a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6819      	ldr	r1, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	3b01      	subs	r3, #1
 8007500:	011b      	lsls	r3, r3, #4
 8007502:	430b      	orrs	r3, r1
 8007504:	4944      	ldr	r1, [pc, #272]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007506:	4313      	orrs	r3, r2
 8007508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d17d      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007510:	4b41      	ldr	r3, [pc, #260]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a40      	ldr	r2, [pc, #256]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007516:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800751a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800751c:	f7fb fa0a 	bl	8002934 <HAL_GetTick>
 8007520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007522:	e009      	b.n	8007538 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007524:	f7fb fa06 	bl	8002934 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d902      	bls.n	8007538 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	73fb      	strb	r3, [r7, #15]
        break;
 8007536:	e005      	b.n	8007544 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007538:	4b37      	ldr	r3, [pc, #220]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ef      	bne.n	8007524 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d160      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d111      	bne.n	8007574 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007550:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6892      	ldr	r2, [r2, #8]
 8007560:	0211      	lsls	r1, r2, #8
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	68d2      	ldr	r2, [r2, #12]
 8007566:	0912      	lsrs	r2, r2, #4
 8007568:	0452      	lsls	r2, r2, #17
 800756a:	430a      	orrs	r2, r1
 800756c:	492a      	ldr	r1, [pc, #168]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800756e:	4313      	orrs	r3, r2
 8007570:	610b      	str	r3, [r1, #16]
 8007572:	e027      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d112      	bne.n	80075a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800757a:	4b27      	ldr	r3, [pc, #156]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6892      	ldr	r2, [r2, #8]
 800758a:	0211      	lsls	r1, r2, #8
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6912      	ldr	r2, [r2, #16]
 8007590:	0852      	lsrs	r2, r2, #1
 8007592:	3a01      	subs	r2, #1
 8007594:	0552      	lsls	r2, r2, #21
 8007596:	430a      	orrs	r2, r1
 8007598:	491f      	ldr	r1, [pc, #124]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 800759a:	4313      	orrs	r3, r2
 800759c:	610b      	str	r3, [r1, #16]
 800759e:	e011      	b.n	80075c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80075a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6892      	ldr	r2, [r2, #8]
 80075b0:	0211      	lsls	r1, r2, #8
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6952      	ldr	r2, [r2, #20]
 80075b6:	0852      	lsrs	r2, r2, #1
 80075b8:	3a01      	subs	r2, #1
 80075ba:	0652      	lsls	r2, r2, #25
 80075bc:	430a      	orrs	r2, r1
 80075be:	4916      	ldr	r1, [pc, #88]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075c4:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a13      	ldr	r2, [pc, #76]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d0:	f7fb f9b0 	bl	8002934 <HAL_GetTick>
 80075d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075d6:	e009      	b.n	80075ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075d8:	f7fb f9ac 	bl	8002934 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d902      	bls.n	80075ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	73fb      	strb	r3, [r7, #15]
          break;
 80075ea:	e005      	b.n	80075f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ef      	beq.n	80075d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075fe:	4b06      	ldr	r3, [pc, #24]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	4904      	ldr	r1, [pc, #16]	@ (8007618 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007608:	4313      	orrs	r3, r2
 800760a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000

0800761c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800762a:	4b6a      	ldr	r3, [pc, #424]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d018      	beq.n	8007668 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007636:	4b67      	ldr	r3, [pc, #412]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0203 	and.w	r2, r3, #3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d10d      	bne.n	8007662 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
       ||
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800764e:	4b61      	ldr	r3, [pc, #388]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	091b      	lsrs	r3, r3, #4
 8007654:	f003 0307 	and.w	r3, r3, #7
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
       ||
 800765e:	429a      	cmp	r2, r3
 8007660:	d047      	beq.n	80076f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	73fb      	strb	r3, [r7, #15]
 8007666:	e044      	b.n	80076f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b03      	cmp	r3, #3
 800766e:	d018      	beq.n	80076a2 <RCCEx_PLLSAI2_Config+0x86>
 8007670:	2b03      	cmp	r3, #3
 8007672:	d825      	bhi.n	80076c0 <RCCEx_PLLSAI2_Config+0xa4>
 8007674:	2b01      	cmp	r3, #1
 8007676:	d002      	beq.n	800767e <RCCEx_PLLSAI2_Config+0x62>
 8007678:	2b02      	cmp	r3, #2
 800767a:	d009      	beq.n	8007690 <RCCEx_PLLSAI2_Config+0x74>
 800767c:	e020      	b.n	80076c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800767e:	4b55      	ldr	r3, [pc, #340]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11d      	bne.n	80076c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800768e:	e01a      	b.n	80076c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007690:	4b50      	ldr	r3, [pc, #320]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007698:	2b00      	cmp	r3, #0
 800769a:	d116      	bne.n	80076ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a0:	e013      	b.n	80076ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076a2:	4b4c      	ldr	r3, [pc, #304]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10f      	bne.n	80076ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076ae:	4b49      	ldr	r3, [pc, #292]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076be:	e006      	b.n	80076ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
      break;
 80076c4:	e004      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80076c6:	bf00      	nop
 80076c8:	e002      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80076ca:	bf00      	nop
 80076cc:	e000      	b.n	80076d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80076ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10d      	bne.n	80076f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076d6:	4b3f      	ldr	r3, [pc, #252]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6819      	ldr	r1, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	011b      	lsls	r3, r3, #4
 80076ea:	430b      	orrs	r3, r1
 80076ec:	4939      	ldr	r1, [pc, #228]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d167      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076f8:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a35      	ldr	r2, [pc, #212]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80076fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007704:	f7fb f916 	bl	8002934 <HAL_GetTick>
 8007708:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800770a:	e009      	b.n	8007720 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800770c:	f7fb f912 	bl	8002934 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d902      	bls.n	8007720 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
        break;
 800771e:	e005      	b.n	800772c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007720:	4b2c      	ldr	r3, [pc, #176]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1ef      	bne.n	800770c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d14a      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d111      	bne.n	800775c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007738:	4b26      	ldr	r3, [pc, #152]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6892      	ldr	r2, [r2, #8]
 8007748:	0211      	lsls	r1, r2, #8
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68d2      	ldr	r2, [r2, #12]
 800774e:	0912      	lsrs	r2, r2, #4
 8007750:	0452      	lsls	r2, r2, #17
 8007752:	430a      	orrs	r2, r1
 8007754:	491f      	ldr	r1, [pc, #124]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007756:	4313      	orrs	r3, r2
 8007758:	614b      	str	r3, [r1, #20]
 800775a:	e011      	b.n	8007780 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800775c:	4b1d      	ldr	r3, [pc, #116]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800775e:	695b      	ldr	r3, [r3, #20]
 8007760:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007764:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6892      	ldr	r2, [r2, #8]
 800776c:	0211      	lsls	r1, r2, #8
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6912      	ldr	r2, [r2, #16]
 8007772:	0852      	lsrs	r2, r2, #1
 8007774:	3a01      	subs	r2, #1
 8007776:	0652      	lsls	r2, r2, #25
 8007778:	430a      	orrs	r2, r1
 800777a:	4916      	ldr	r1, [pc, #88]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800777c:	4313      	orrs	r3, r2
 800777e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007780:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a13      	ldr	r2, [pc, #76]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800778a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778c:	f7fb f8d2 	bl	8002934 <HAL_GetTick>
 8007790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007792:	e009      	b.n	80077a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007794:	f7fb f8ce 	bl	8002934 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d902      	bls.n	80077a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	73fb      	strb	r3, [r7, #15]
          break;
 80077a6:	e005      	b.n	80077b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077a8:	4b0a      	ldr	r3, [pc, #40]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ef      	beq.n	8007794 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80077ba:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077bc:	695a      	ldr	r2, [r3, #20]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	4904      	ldr	r1, [pc, #16]	@ (80077d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40021000 	.word	0x40021000

080077d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e095      	b.n	8007916 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d108      	bne.n	8007804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077fa:	d009      	beq.n	8007810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	e005      	b.n	8007810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fa fcec 	bl	8002208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007850:	d902      	bls.n	8007858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e002      	b.n	800785e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800785c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007866:	d007      	beq.n	8007878 <HAL_SPI_Init+0xa0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007870:	d002      	beq.n	8007878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ba:	ea42 0103 	orr.w	r1, r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 0204 	and.w	r2, r3, #4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078f4:	ea42 0103 	orr.w	r1, r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b082      	sub	sp, #8
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e049      	b.n	80079c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d106      	bne.n	800794a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fa fca3 	bl	8002290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3304      	adds	r3, #4
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f000 f8a5 	bl	8007aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d001      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e04f      	b.n	8007a84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a23      	ldr	r2, [pc, #140]	@ (8007a90 <HAL_TIM_Base_Start_IT+0xc4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d01d      	beq.n	8007a42 <HAL_TIM_Base_Start_IT+0x76>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0e:	d018      	beq.n	8007a42 <HAL_TIM_Base_Start_IT+0x76>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1f      	ldr	r2, [pc, #124]	@ (8007a94 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d013      	beq.n	8007a42 <HAL_TIM_Base_Start_IT+0x76>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007a98 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00e      	beq.n	8007a42 <HAL_TIM_Base_Start_IT+0x76>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1c      	ldr	r2, [pc, #112]	@ (8007a9c <HAL_TIM_Base_Start_IT+0xd0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d009      	beq.n	8007a42 <HAL_TIM_Base_Start_IT+0x76>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a1b      	ldr	r2, [pc, #108]	@ (8007aa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_TIM_Base_Start_IT+0x76>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a19      	ldr	r2, [pc, #100]	@ (8007aa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d115      	bne.n	8007a6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	4b17      	ldr	r3, [pc, #92]	@ (8007aa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b06      	cmp	r3, #6
 8007a52:	d015      	beq.n	8007a80 <HAL_TIM_Base_Start_IT+0xb4>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a5a:	d011      	beq.n	8007a80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6c:	e008      	b.n	8007a80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0201 	orr.w	r2, r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
 8007a7e:	e000      	b.n	8007a82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40012c00 	.word	0x40012c00
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40013400 	.word	0x40013400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	00010007 	.word	0x00010007

08007aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a46      	ldr	r2, [pc, #280]	@ (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d013      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aca:	d00f      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a43      	ldr	r2, [pc, #268]	@ (8007bdc <TIM_Base_SetConfig+0x130>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d00b      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a42      	ldr	r2, [pc, #264]	@ (8007be0 <TIM_Base_SetConfig+0x134>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d007      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a41      	ldr	r2, [pc, #260]	@ (8007be4 <TIM_Base_SetConfig+0x138>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_Base_SetConfig+0x40>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a40      	ldr	r2, [pc, #256]	@ (8007be8 <TIM_Base_SetConfig+0x13c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d108      	bne.n	8007afe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a35      	ldr	r2, [pc, #212]	@ (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d01f      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b0c:	d01b      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a32      	ldr	r2, [pc, #200]	@ (8007bdc <TIM_Base_SetConfig+0x130>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d017      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a31      	ldr	r2, [pc, #196]	@ (8007be0 <TIM_Base_SetConfig+0x134>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a30      	ldr	r2, [pc, #192]	@ (8007be4 <TIM_Base_SetConfig+0x138>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00f      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2f      	ldr	r2, [pc, #188]	@ (8007be8 <TIM_Base_SetConfig+0x13c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00b      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2e      	ldr	r2, [pc, #184]	@ (8007bec <TIM_Base_SetConfig+0x140>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d007      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2d      	ldr	r2, [pc, #180]	@ (8007bf0 <TIM_Base_SetConfig+0x144>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_Base_SetConfig+0x9a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf4 <TIM_Base_SetConfig+0x148>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d108      	bne.n	8007b58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a16      	ldr	r2, [pc, #88]	@ (8007bd8 <TIM_Base_SetConfig+0x12c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a18      	ldr	r2, [pc, #96]	@ (8007be8 <TIM_Base_SetConfig+0x13c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a17      	ldr	r2, [pc, #92]	@ (8007bec <TIM_Base_SetConfig+0x140>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a16      	ldr	r2, [pc, #88]	@ (8007bf0 <TIM_Base_SetConfig+0x144>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0xf8>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a15      	ldr	r2, [pc, #84]	@ (8007bf4 <TIM_Base_SetConfig+0x148>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d103      	bne.n	8007bac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d105      	bne.n	8007bca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]
  }
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40012c00 	.word	0x40012c00
 8007bdc:	40000400 	.word	0x40000400
 8007be0:	40000800 	.word	0x40000800
 8007be4:	40000c00 	.word	0x40000c00
 8007be8:	40013400 	.word	0x40013400
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40014400 	.word	0x40014400
 8007bf4:	40014800 	.word	0x40014800

08007bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d101      	bne.n	8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c0c:	2302      	movs	r3, #2
 8007c0e:	e068      	b.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d108      	bne.n	8007c56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01d      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c82:	d018      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d013      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a1a      	ldr	r2, [pc, #104]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d00e      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d009      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a13      	ldr	r2, [pc, #76]	@ (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d004      	beq.n	8007cb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a14      	ldr	r2, [pc, #80]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d10c      	bne.n	8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	68ba      	ldr	r2, [r7, #8]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40013400 	.word	0x40013400
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	40000800 	.word	0x40000800
 8007d00:	40000c00 	.word	0x40000c00
 8007d04:	40014000 	.word	0x40014000

08007d08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e040      	b.n	8007d9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d106      	bne.n	8007d30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fa fad6 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2224      	movs	r2, #36	@ 0x24
 8007d34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fae0 	bl	8008314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f825 	bl	8007da4 <UART_SetConfig>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e01b      	b.n	8007d9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fb5f 	bl	8008458 <UART_CheckIdleState>
 8007d9a:	4603      	mov	r3, r0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3708      	adds	r7, #8
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da8:	b08a      	sub	sp, #40	@ 0x28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4ba4      	ldr	r3, [pc, #656]	@ (8008064 <UART_SetConfig+0x2c0>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a99      	ldr	r2, [pc, #612]	@ (8008068 <UART_SetConfig+0x2c4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d004      	beq.n	8007e10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e20:	430a      	orrs	r2, r1
 8007e22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a90      	ldr	r2, [pc, #576]	@ (800806c <UART_SetConfig+0x2c8>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d126      	bne.n	8007e7c <UART_SetConfig+0xd8>
 8007e2e:	4b90      	ldr	r3, [pc, #576]	@ (8008070 <UART_SetConfig+0x2cc>)
 8007e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e34:	f003 0303 	and.w	r3, r3, #3
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d81b      	bhi.n	8007e74 <UART_SetConfig+0xd0>
 8007e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <UART_SetConfig+0xa0>)
 8007e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e42:	bf00      	nop
 8007e44:	08007e55 	.word	0x08007e55
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e6d 	.word	0x08007e6d
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e5a:	e116      	b.n	800808a <UART_SetConfig+0x2e6>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e62:	e112      	b.n	800808a <UART_SetConfig+0x2e6>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e6a:	e10e      	b.n	800808a <UART_SetConfig+0x2e6>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e72:	e10a      	b.n	800808a <UART_SetConfig+0x2e6>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007e7a:	e106      	b.n	800808a <UART_SetConfig+0x2e6>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a7c      	ldr	r2, [pc, #496]	@ (8008074 <UART_SetConfig+0x2d0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d138      	bne.n	8007ef8 <UART_SetConfig+0x154>
 8007e86:	4b7a      	ldr	r3, [pc, #488]	@ (8008070 <UART_SetConfig+0x2cc>)
 8007e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e8c:	f003 030c 	and.w	r3, r3, #12
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d82d      	bhi.n	8007ef0 <UART_SetConfig+0x14c>
 8007e94:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <UART_SetConfig+0xf8>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007ef1 	.word	0x08007ef1
 8007ea8:	08007ef1 	.word	0x08007ef1
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007ef1 	.word	0x08007ef1
 8007eb4:	08007ef1 	.word	0x08007ef1
 8007eb8:	08007ef1 	.word	0x08007ef1
 8007ebc:	08007ed9 	.word	0x08007ed9
 8007ec0:	08007ef1 	.word	0x08007ef1
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ee9 	.word	0x08007ee9
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ed6:	e0d8      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ede:	e0d4      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ee6:	e0d0      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ee8:	2308      	movs	r3, #8
 8007eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007eee:	e0cc      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ef6:	e0c8      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a5e      	ldr	r2, [pc, #376]	@ (8008078 <UART_SetConfig+0x2d4>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d125      	bne.n	8007f4e <UART_SetConfig+0x1aa>
 8007f02:	4b5b      	ldr	r3, [pc, #364]	@ (8008070 <UART_SetConfig+0x2cc>)
 8007f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f0c:	2b30      	cmp	r3, #48	@ 0x30
 8007f0e:	d016      	beq.n	8007f3e <UART_SetConfig+0x19a>
 8007f10:	2b30      	cmp	r3, #48	@ 0x30
 8007f12:	d818      	bhi.n	8007f46 <UART_SetConfig+0x1a2>
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d00a      	beq.n	8007f2e <UART_SetConfig+0x18a>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d814      	bhi.n	8007f46 <UART_SetConfig+0x1a2>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <UART_SetConfig+0x182>
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d008      	beq.n	8007f36 <UART_SetConfig+0x192>
 8007f24:	e00f      	b.n	8007f46 <UART_SetConfig+0x1a2>
 8007f26:	2300      	movs	r3, #0
 8007f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f2c:	e0ad      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f34:	e0a9      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f36:	2304      	movs	r3, #4
 8007f38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f3c:	e0a5      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f3e:	2308      	movs	r3, #8
 8007f40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f44:	e0a1      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f46:	2310      	movs	r3, #16
 8007f48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f4c:	e09d      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a4a      	ldr	r2, [pc, #296]	@ (800807c <UART_SetConfig+0x2d8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d125      	bne.n	8007fa4 <UART_SetConfig+0x200>
 8007f58:	4b45      	ldr	r3, [pc, #276]	@ (8008070 <UART_SetConfig+0x2cc>)
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f64:	d016      	beq.n	8007f94 <UART_SetConfig+0x1f0>
 8007f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f68:	d818      	bhi.n	8007f9c <UART_SetConfig+0x1f8>
 8007f6a:	2b80      	cmp	r3, #128	@ 0x80
 8007f6c:	d00a      	beq.n	8007f84 <UART_SetConfig+0x1e0>
 8007f6e:	2b80      	cmp	r3, #128	@ 0x80
 8007f70:	d814      	bhi.n	8007f9c <UART_SetConfig+0x1f8>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <UART_SetConfig+0x1d8>
 8007f76:	2b40      	cmp	r3, #64	@ 0x40
 8007f78:	d008      	beq.n	8007f8c <UART_SetConfig+0x1e8>
 8007f7a:	e00f      	b.n	8007f9c <UART_SetConfig+0x1f8>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f82:	e082      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f84:	2302      	movs	r3, #2
 8007f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f8a:	e07e      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f92:	e07a      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f94:	2308      	movs	r3, #8
 8007f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f9a:	e076      	b.n	800808a <UART_SetConfig+0x2e6>
 8007f9c:	2310      	movs	r3, #16
 8007f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fa2:	e072      	b.n	800808a <UART_SetConfig+0x2e6>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a35      	ldr	r2, [pc, #212]	@ (8008080 <UART_SetConfig+0x2dc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d12a      	bne.n	8008004 <UART_SetConfig+0x260>
 8007fae:	4b30      	ldr	r3, [pc, #192]	@ (8008070 <UART_SetConfig+0x2cc>)
 8007fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fbc:	d01a      	beq.n	8007ff4 <UART_SetConfig+0x250>
 8007fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fc2:	d81b      	bhi.n	8007ffc <UART_SetConfig+0x258>
 8007fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fc8:	d00c      	beq.n	8007fe4 <UART_SetConfig+0x240>
 8007fca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fce:	d815      	bhi.n	8007ffc <UART_SetConfig+0x258>
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d003      	beq.n	8007fdc <UART_SetConfig+0x238>
 8007fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd8:	d008      	beq.n	8007fec <UART_SetConfig+0x248>
 8007fda:	e00f      	b.n	8007ffc <UART_SetConfig+0x258>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fe2:	e052      	b.n	800808a <UART_SetConfig+0x2e6>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fea:	e04e      	b.n	800808a <UART_SetConfig+0x2e6>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ff2:	e04a      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ffa:	e046      	b.n	800808a <UART_SetConfig+0x2e6>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008002:	e042      	b.n	800808a <UART_SetConfig+0x2e6>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a17      	ldr	r2, [pc, #92]	@ (8008068 <UART_SetConfig+0x2c4>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d13a      	bne.n	8008084 <UART_SetConfig+0x2e0>
 800800e:	4b18      	ldr	r3, [pc, #96]	@ (8008070 <UART_SetConfig+0x2cc>)
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008014:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008018:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800801c:	d01a      	beq.n	8008054 <UART_SetConfig+0x2b0>
 800801e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008022:	d81b      	bhi.n	800805c <UART_SetConfig+0x2b8>
 8008024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008028:	d00c      	beq.n	8008044 <UART_SetConfig+0x2a0>
 800802a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800802e:	d815      	bhi.n	800805c <UART_SetConfig+0x2b8>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d003      	beq.n	800803c <UART_SetConfig+0x298>
 8008034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008038:	d008      	beq.n	800804c <UART_SetConfig+0x2a8>
 800803a:	e00f      	b.n	800805c <UART_SetConfig+0x2b8>
 800803c:	2300      	movs	r3, #0
 800803e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008042:	e022      	b.n	800808a <UART_SetConfig+0x2e6>
 8008044:	2302      	movs	r3, #2
 8008046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800804a:	e01e      	b.n	800808a <UART_SetConfig+0x2e6>
 800804c:	2304      	movs	r3, #4
 800804e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008052:	e01a      	b.n	800808a <UART_SetConfig+0x2e6>
 8008054:	2308      	movs	r3, #8
 8008056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800805a:	e016      	b.n	800808a <UART_SetConfig+0x2e6>
 800805c:	2310      	movs	r3, #16
 800805e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008062:	e012      	b.n	800808a <UART_SetConfig+0x2e6>
 8008064:	efff69f3 	.word	0xefff69f3
 8008068:	40008000 	.word	0x40008000
 800806c:	40013800 	.word	0x40013800
 8008070:	40021000 	.word	0x40021000
 8008074:	40004400 	.word	0x40004400
 8008078:	40004800 	.word	0x40004800
 800807c:	40004c00 	.word	0x40004c00
 8008080:	40005000 	.word	0x40005000
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a9f      	ldr	r2, [pc, #636]	@ (800830c <UART_SetConfig+0x568>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d17a      	bne.n	800818a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008098:	2b08      	cmp	r3, #8
 800809a:	d824      	bhi.n	80080e6 <UART_SetConfig+0x342>
 800809c:	a201      	add	r2, pc, #4	@ (adr r2, 80080a4 <UART_SetConfig+0x300>)
 800809e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a2:	bf00      	nop
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080e7 	.word	0x080080e7
 80080ac:	080080d1 	.word	0x080080d1
 80080b0:	080080e7 	.word	0x080080e7
 80080b4:	080080d7 	.word	0x080080d7
 80080b8:	080080e7 	.word	0x080080e7
 80080bc:	080080e7 	.word	0x080080e7
 80080c0:	080080e7 	.word	0x080080e7
 80080c4:	080080df 	.word	0x080080df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c8:	f7fe fe2e 	bl	8006d28 <HAL_RCC_GetPCLK1Freq>
 80080cc:	61f8      	str	r0, [r7, #28]
        break;
 80080ce:	e010      	b.n	80080f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080d0:	4b8f      	ldr	r3, [pc, #572]	@ (8008310 <UART_SetConfig+0x56c>)
 80080d2:	61fb      	str	r3, [r7, #28]
        break;
 80080d4:	e00d      	b.n	80080f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080d6:	f7fe fd8f 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 80080da:	61f8      	str	r0, [r7, #28]
        break;
 80080dc:	e009      	b.n	80080f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080e2:	61fb      	str	r3, [r7, #28]
        break;
 80080e4:	e005      	b.n	80080f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80080f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80fb 	beq.w	80082f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	4413      	add	r3, r2
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	429a      	cmp	r2, r3
 8008108:	d305      	bcc.n	8008116 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	429a      	cmp	r2, r3
 8008114:	d903      	bls.n	800811e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800811c:	e0e8      	b.n	80082f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	2200      	movs	r2, #0
 8008122:	461c      	mov	r4, r3
 8008124:	4615      	mov	r5, r2
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	f04f 0300 	mov.w	r3, #0
 800812e:	022b      	lsls	r3, r5, #8
 8008130:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008134:	0222      	lsls	r2, r4, #8
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	6849      	ldr	r1, [r1, #4]
 800813a:	0849      	lsrs	r1, r1, #1
 800813c:	2000      	movs	r0, #0
 800813e:	4688      	mov	r8, r1
 8008140:	4681      	mov	r9, r0
 8008142:	eb12 0a08 	adds.w	sl, r2, r8
 8008146:	eb43 0b09 	adc.w	fp, r3, r9
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	603b      	str	r3, [r7, #0]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008158:	4650      	mov	r0, sl
 800815a:	4659      	mov	r1, fp
 800815c:	f7f8 fd74 	bl	8000c48 <__aeabi_uldivmod>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4613      	mov	r3, r2
 8008166:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800816e:	d308      	bcc.n	8008182 <UART_SetConfig+0x3de>
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008176:	d204      	bcs.n	8008182 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	60da      	str	r2, [r3, #12]
 8008180:	e0b6      	b.n	80082f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008188:	e0b2      	b.n	80082f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008192:	d15e      	bne.n	8008252 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008198:	2b08      	cmp	r3, #8
 800819a:	d828      	bhi.n	80081ee <UART_SetConfig+0x44a>
 800819c:	a201      	add	r2, pc, #4	@ (adr r2, 80081a4 <UART_SetConfig+0x400>)
 800819e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a2:	bf00      	nop
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081d1 	.word	0x080081d1
 80081ac:	080081d9 	.word	0x080081d9
 80081b0:	080081ef 	.word	0x080081ef
 80081b4:	080081df 	.word	0x080081df
 80081b8:	080081ef 	.word	0x080081ef
 80081bc:	080081ef 	.word	0x080081ef
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	080081e7 	.word	0x080081e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081c8:	f7fe fdae 	bl	8006d28 <HAL_RCC_GetPCLK1Freq>
 80081cc:	61f8      	str	r0, [r7, #28]
        break;
 80081ce:	e014      	b.n	80081fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d0:	f7fe fdc0 	bl	8006d54 <HAL_RCC_GetPCLK2Freq>
 80081d4:	61f8      	str	r0, [r7, #28]
        break;
 80081d6:	e010      	b.n	80081fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081d8:	4b4d      	ldr	r3, [pc, #308]	@ (8008310 <UART_SetConfig+0x56c>)
 80081da:	61fb      	str	r3, [r7, #28]
        break;
 80081dc:	e00d      	b.n	80081fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081de:	f7fe fd0b 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 80081e2:	61f8      	str	r0, [r7, #28]
        break;
 80081e4:	e009      	b.n	80081fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ea:	61fb      	str	r3, [r7, #28]
        break;
 80081ec:	e005      	b.n	80081fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80081f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d077      	beq.n	80082f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	005a      	lsls	r2, r3, #1
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	085b      	lsrs	r3, r3, #1
 800820a:	441a      	add	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b0f      	cmp	r3, #15
 800821a:	d916      	bls.n	800824a <UART_SetConfig+0x4a6>
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008222:	d212      	bcs.n	800824a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	b29b      	uxth	r3, r3
 8008228:	f023 030f 	bic.w	r3, r3, #15
 800822c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	b29b      	uxth	r3, r3
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	b29a      	uxth	r2, r3
 800823a:	8afb      	ldrh	r3, [r7, #22]
 800823c:	4313      	orrs	r3, r2
 800823e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	8afa      	ldrh	r2, [r7, #22]
 8008246:	60da      	str	r2, [r3, #12]
 8008248:	e052      	b.n	80082f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008250:	e04e      	b.n	80082f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008252:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008256:	2b08      	cmp	r3, #8
 8008258:	d827      	bhi.n	80082aa <UART_SetConfig+0x506>
 800825a:	a201      	add	r2, pc, #4	@ (adr r2, 8008260 <UART_SetConfig+0x4bc>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008295 	.word	0x08008295
 800826c:	080082ab 	.word	0x080082ab
 8008270:	0800829b 	.word	0x0800829b
 8008274:	080082ab 	.word	0x080082ab
 8008278:	080082ab 	.word	0x080082ab
 800827c:	080082ab 	.word	0x080082ab
 8008280:	080082a3 	.word	0x080082a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fe fd50 	bl	8006d28 <HAL_RCC_GetPCLK1Freq>
 8008288:	61f8      	str	r0, [r7, #28]
        break;
 800828a:	e014      	b.n	80082b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800828c:	f7fe fd62 	bl	8006d54 <HAL_RCC_GetPCLK2Freq>
 8008290:	61f8      	str	r0, [r7, #28]
        break;
 8008292:	e010      	b.n	80082b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008294:	4b1e      	ldr	r3, [pc, #120]	@ (8008310 <UART_SetConfig+0x56c>)
 8008296:	61fb      	str	r3, [r7, #28]
        break;
 8008298:	e00d      	b.n	80082b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829a:	f7fe fcad 	bl	8006bf8 <HAL_RCC_GetSysClockFreq>
 800829e:	61f8      	str	r0, [r7, #28]
        break;
 80082a0:	e009      	b.n	80082b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a6:	61fb      	str	r3, [r7, #28]
        break;
 80082a8:	e005      	b.n	80082b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80082b4:	bf00      	nop
    }

    if (pclk != 0U)
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d019      	beq.n	80082f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	085a      	lsrs	r2, r3, #1
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	441a      	add	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b0f      	cmp	r3, #15
 80082d4:	d909      	bls.n	80082ea <UART_SetConfig+0x546>
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082dc:	d205      	bcs.n	80082ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60da      	str	r2, [r3, #12]
 80082e8:	e002      	b.n	80082f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80082fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008300:	4618      	mov	r0, r3
 8008302:	3728      	adds	r7, #40	@ 0x28
 8008304:	46bd      	mov	sp, r7
 8008306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800830a:	bf00      	nop
 800830c:	40008000 	.word	0x40008000
 8008310:	00f42400 	.word	0x00f42400

08008314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	f003 0308 	and.w	r3, r3, #8
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00a      	beq.n	8008382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008386:	f003 0304 	and.w	r3, r3, #4
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01a      	beq.n	800842a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008412:	d10a      	bne.n	800842a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	430a      	orrs	r2, r1
 800844a:	605a      	str	r2, [r3, #4]
  }
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b098      	sub	sp, #96	@ 0x60
 800845c:	af02      	add	r7, sp, #8
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008468:	f7fa fa64 	bl	8002934 <HAL_GetTick>
 800846c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b08      	cmp	r3, #8
 800847a:	d12e      	bne.n	80084da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800847c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008484:	2200      	movs	r2, #0
 8008486:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 f88c 	bl	80085a8 <UART_WaitOnFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d021      	beq.n	80084da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849e:	e853 3f00 	ldrex	r3, [r3]
 80084a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	461a      	mov	r2, r3
 80084b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084bc:	e841 2300 	strex	r3, r2, [r1]
 80084c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1e6      	bne.n	8008496 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e062      	b.n	80085a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d149      	bne.n	800857c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084f0:	2200      	movs	r2, #0
 80084f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f856 	bl	80085a8 <UART_WaitOnFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d03c      	beq.n	800857c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	623b      	str	r3, [r7, #32]
   return(result);
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008520:	633b      	str	r3, [r7, #48]	@ 0x30
 8008522:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	60fb      	str	r3, [r7, #12]
   return(result);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008554:	61fa      	str	r2, [r7, #28]
 8008556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	69b9      	ldr	r1, [r7, #24]
 800855a:	69fa      	ldr	r2, [r7, #28]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	617b      	str	r3, [r7, #20]
   return(result);
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e5      	bne.n	8008534 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e011      	b.n	80085a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2220      	movs	r2, #32
 8008580:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3758      	adds	r7, #88	@ 0x58
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	4613      	mov	r3, r2
 80085b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085b8:	e04f      	b.n	800865a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c0:	d04b      	beq.n	800865a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085c2:	f7fa f9b7 	bl	8002934 <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	69ba      	ldr	r2, [r7, #24]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d302      	bcc.n	80085d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e04e      	b.n	800867a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0304 	and.w	r3, r3, #4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d037      	beq.n	800865a <UART_WaitOnFlagUntilTimeout+0xb2>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b80      	cmp	r3, #128	@ 0x80
 80085ee:	d034      	beq.n	800865a <UART_WaitOnFlagUntilTimeout+0xb2>
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b40      	cmp	r3, #64	@ 0x40
 80085f4:	d031      	beq.n	800865a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f003 0308 	and.w	r3, r3, #8
 8008600:	2b08      	cmp	r3, #8
 8008602:	d110      	bne.n	8008626 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2208      	movs	r2, #8
 800860a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f838 	bl	8008682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2208      	movs	r2, #8
 8008616:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e029      	b.n	800867a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008634:	d111      	bne.n	800865a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800863e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f81e 	bl	8008682 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e00f      	b.n	800867a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4013      	ands	r3, r2
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	429a      	cmp	r2, r3
 8008668:	bf0c      	ite	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2300      	movne	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	461a      	mov	r2, r3
 8008672:	79fb      	ldrb	r3, [r7, #7]
 8008674:	429a      	cmp	r2, r3
 8008676:	d0a0      	beq.n	80085ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008682:	b480      	push	{r7}
 8008684:	b095      	sub	sp, #84	@ 0x54
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800869e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	461a      	mov	r2, r3
 80086a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80086aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e6      	bne.n	800868a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3308      	adds	r3, #8
 80086c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f023 0301 	bic.w	r3, r3, #1
 80086d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3308      	adds	r3, #8
 80086da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e5      	bne.n	80086bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d118      	bne.n	800872a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	60bb      	str	r3, [r7, #8]
   return(result);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f023 0310 	bic.w	r3, r3, #16
 800870c:	647b      	str	r3, [r7, #68]	@ 0x44
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008716:	61bb      	str	r3, [r7, #24]
 8008718:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871a:	6979      	ldr	r1, [r7, #20]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	e841 2300 	strex	r3, r2, [r1]
 8008722:	613b      	str	r3, [r7, #16]
   return(result);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1e6      	bne.n	80086f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800873e:	bf00      	nop
 8008740:	3754      	adds	r7, #84	@ 0x54
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800874a:	b084      	sub	sp, #16
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	f107 001c 	add.w	r0, r7, #28
 8008758:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fa25 	bl	8009bb8 <USB_CoreReset>
 800876e:	4603      	mov	r3, r0
 8008770:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008772:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008776:	2b00      	cmp	r3, #0
 8008778:	d106      	bne.n	8008788 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	639a      	str	r2, [r3, #56]	@ 0x38
 8008786:	e005      	b.n	8008794 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087a0:	b004      	add	sp, #16
 80087a2:	4770      	bx	lr

080087a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d165      	bne.n	8008884 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4a3e      	ldr	r2, [pc, #248]	@ (80088b4 <USB_SetTurnaroundTime+0x110>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d906      	bls.n	80087ce <USB_SetTurnaroundTime+0x2a>
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4a3d      	ldr	r2, [pc, #244]	@ (80088b8 <USB_SetTurnaroundTime+0x114>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d202      	bcs.n	80087ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80087c8:	230f      	movs	r3, #15
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e05c      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4a39      	ldr	r2, [pc, #228]	@ (80088b8 <USB_SetTurnaroundTime+0x114>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d306      	bcc.n	80087e4 <USB_SetTurnaroundTime+0x40>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4a38      	ldr	r2, [pc, #224]	@ (80088bc <USB_SetTurnaroundTime+0x118>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d202      	bcs.n	80087e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80087de:	230e      	movs	r3, #14
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e051      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4a35      	ldr	r2, [pc, #212]	@ (80088bc <USB_SetTurnaroundTime+0x118>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d306      	bcc.n	80087fa <USB_SetTurnaroundTime+0x56>
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4a34      	ldr	r2, [pc, #208]	@ (80088c0 <USB_SetTurnaroundTime+0x11c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d202      	bcs.n	80087fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80087f4:	230d      	movs	r3, #13
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e046      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4a30      	ldr	r2, [pc, #192]	@ (80088c0 <USB_SetTurnaroundTime+0x11c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d306      	bcc.n	8008810 <USB_SetTurnaroundTime+0x6c>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4a2f      	ldr	r2, [pc, #188]	@ (80088c4 <USB_SetTurnaroundTime+0x120>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d802      	bhi.n	8008810 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800880a:	230c      	movs	r3, #12
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e03b      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4a2c      	ldr	r2, [pc, #176]	@ (80088c4 <USB_SetTurnaroundTime+0x120>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d906      	bls.n	8008826 <USB_SetTurnaroundTime+0x82>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4a2b      	ldr	r2, [pc, #172]	@ (80088c8 <USB_SetTurnaroundTime+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d802      	bhi.n	8008826 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008820:	230b      	movs	r3, #11
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	e030      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4a27      	ldr	r2, [pc, #156]	@ (80088c8 <USB_SetTurnaroundTime+0x124>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d906      	bls.n	800883c <USB_SetTurnaroundTime+0x98>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4a26      	ldr	r2, [pc, #152]	@ (80088cc <USB_SetTurnaroundTime+0x128>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d802      	bhi.n	800883c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008836:	230a      	movs	r3, #10
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	e025      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4a23      	ldr	r2, [pc, #140]	@ (80088cc <USB_SetTurnaroundTime+0x128>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d906      	bls.n	8008852 <USB_SetTurnaroundTime+0xae>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4a22      	ldr	r2, [pc, #136]	@ (80088d0 <USB_SetTurnaroundTime+0x12c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d202      	bcs.n	8008852 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800884c:	2309      	movs	r3, #9
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	e01a      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	4a1e      	ldr	r2, [pc, #120]	@ (80088d0 <USB_SetTurnaroundTime+0x12c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d306      	bcc.n	8008868 <USB_SetTurnaroundTime+0xc4>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <USB_SetTurnaroundTime+0x130>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d802      	bhi.n	8008868 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008862:	2308      	movs	r3, #8
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	e00f      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4a1a      	ldr	r2, [pc, #104]	@ (80088d4 <USB_SetTurnaroundTime+0x130>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d906      	bls.n	800887e <USB_SetTurnaroundTime+0xda>
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	4a19      	ldr	r2, [pc, #100]	@ (80088d8 <USB_SetTurnaroundTime+0x134>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d202      	bcs.n	800887e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008878:	2307      	movs	r3, #7
 800887a:	617b      	str	r3, [r7, #20]
 800887c:	e004      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800887e:	2306      	movs	r3, #6
 8008880:	617b      	str	r3, [r7, #20]
 8008882:	e001      	b.n	8008888 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008884:	2309      	movs	r3, #9
 8008886:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	029b      	lsls	r3, r3, #10
 800889c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80088a0:	431a      	orrs	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	00d8acbf 	.word	0x00d8acbf
 80088b8:	00e4e1c0 	.word	0x00e4e1c0
 80088bc:	00f42400 	.word	0x00f42400
 80088c0:	01067380 	.word	0x01067380
 80088c4:	011a499f 	.word	0x011a499f
 80088c8:	01312cff 	.word	0x01312cff
 80088cc:	014ca43f 	.word	0x014ca43f
 80088d0:	016e3600 	.word	0x016e3600
 80088d4:	01a6ab1f 	.word	0x01a6ab1f
 80088d8:	01e84800 	.word	0x01e84800

080088dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f043 0201 	orr.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f023 0201 	bic.w	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	460b      	mov	r3, r1
 800892a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d115      	bne.n	800896e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800894e:	200a      	movs	r0, #10
 8008950:	f7f9 fffc 	bl	800294c <HAL_Delay>
      ms += 10U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	330a      	adds	r3, #10
 8008958:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 f8b3 	bl	8009ac6 <USB_GetMode>
 8008960:	4603      	mov	r3, r0
 8008962:	2b01      	cmp	r3, #1
 8008964:	d01e      	beq.n	80089a4 <USB_SetCurrentMode+0x84>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2bc7      	cmp	r3, #199	@ 0xc7
 800896a:	d9f0      	bls.n	800894e <USB_SetCurrentMode+0x2e>
 800896c:	e01a      	b.n	80089a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d115      	bne.n	80089a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008980:	200a      	movs	r0, #10
 8008982:	f7f9 ffe3 	bl	800294c <HAL_Delay>
      ms += 10U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	330a      	adds	r3, #10
 800898a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f001 f89a 	bl	8009ac6 <USB_GetMode>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <USB_SetCurrentMode+0x84>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2bc7      	cmp	r3, #199	@ 0xc7
 800899c:	d9f0      	bls.n	8008980 <USB_SetCurrentMode+0x60>
 800899e:	e001      	b.n	80089a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e005      	b.n	80089b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80089a8:	d101      	bne.n	80089ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089b8:	b084      	sub	sp, #16
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80089c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089d2:	2300      	movs	r3, #0
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	e009      	b.n	80089ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3340      	adds	r3, #64	@ 0x40
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	613b      	str	r3, [r7, #16]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	2b0e      	cmp	r3, #14
 80089f0:	d9f2      	bls.n	80089d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d11c      	bne.n	8008a34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a08:	f043 0302 	orr.w	r3, r3, #2
 8008a0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e005      	b.n	8008a40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a46:	461a      	mov	r2, r3
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a4c:	2103      	movs	r1, #3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f95a 	bl	8008d08 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a54:	2110      	movs	r1, #16
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f8f6 	bl	8008c48 <USB_FlushTxFifo>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d001      	beq.n	8008a66 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f920 	bl	8008cac <USB_FlushRxFifo>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	2300      	movs	r3, #0
 8008a80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a88:	461a      	mov	r2, r3
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a94:	461a      	mov	r2, r3
 8008a96:	2300      	movs	r3, #0
 8008a98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	e043      	b.n	8008b28 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ab6:	d118      	bne.n	8008aea <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10a      	bne.n	8008ad4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aca:	461a      	mov	r2, r3
 8008acc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	e013      	b.n	8008afc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	e008      	b.n	8008afc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af6:	461a      	mov	r2, r3
 8008af8:	2300      	movs	r3, #0
 8008afa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b08:	461a      	mov	r2, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3301      	adds	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
 8008b28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d3b5      	bcc.n	8008aa0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b34:	2300      	movs	r3, #0
 8008b36:	613b      	str	r3, [r7, #16]
 8008b38:	e043      	b.n	8008bc2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b50:	d118      	bne.n	8008b84 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10a      	bne.n	8008b6e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	461a      	mov	r2, r3
 8008b66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	e013      	b.n	8008b96 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	e008      	b.n	8008b96 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b90:	461a      	mov	r2, r3
 8008b92:	2300      	movs	r3, #0
 8008b94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008bba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	613b      	str	r3, [r7, #16]
 8008bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d3b5      	bcc.n	8008b3a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008be0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008bee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f043 0210 	orr.w	r2, r3, #16
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	699a      	ldr	r2, [r3, #24]
 8008c00:	4b10      	ldr	r3, [pc, #64]	@ (8008c44 <USB_DevInit+0x28c>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d005      	beq.n	8008c1c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	f043 0208 	orr.w	r2, r3, #8
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c2c:	f043 0304 	orr.w	r3, r3, #4
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c40:	b004      	add	sp, #16
 8008c42:	4770      	bx	lr
 8008c44:	803c3800 	.word	0x803c3800

08008c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c62:	d901      	bls.n	8008c68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e01b      	b.n	8008ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	daf2      	bge.n	8008c56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	019b      	lsls	r3, r3, #6
 8008c78:	f043 0220 	orr.w	r2, r3, #32
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	3301      	adds	r3, #1
 8008c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c8c:	d901      	bls.n	8008c92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e006      	b.n	8008ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0320 	and.w	r3, r3, #32
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d0f0      	beq.n	8008c80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008cc4:	d901      	bls.n	8008cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e018      	b.n	8008cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	daf2      	bge.n	8008cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2210      	movs	r2, #16
 8008cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ce8:	d901      	bls.n	8008cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e006      	b.n	8008cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d0f0      	beq.n	8008cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b087      	sub	sp, #28
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f003 0306 	and.w	r3, r3, #6
 8008d52:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d002      	beq.n	8008d60 <USB_GetDevSpeed+0x26>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b06      	cmp	r3, #6
 8008d5e:	d102      	bne.n	8008d66 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d60:	2302      	movs	r3, #2
 8008d62:	75fb      	strb	r3, [r7, #23]
 8008d64:	e001      	b.n	8008d6a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008d66:	230f      	movs	r3, #15
 8008d68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d13a      	bne.n	8008e0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d9a:	69da      	ldr	r2, [r3, #28]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	2101      	movs	r1, #1
 8008da6:	fa01 f303 	lsl.w	r3, r1, r3
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	68f9      	ldr	r1, [r7, #12]
 8008dae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008db2:	4313      	orrs	r3, r2
 8008db4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d155      	bne.n	8008e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	015a      	lsls	r2, r3, #5
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	791b      	ldrb	r3, [r3, #4]
 8008de6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008de8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	059b      	lsls	r3, r3, #22
 8008dee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008df0:	4313      	orrs	r3, r2
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	0151      	lsls	r1, r2, #5
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	440a      	add	r2, r1
 8008dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	e036      	b.n	8008e78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e10:	69da      	ldr	r2, [r3, #28]
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e20:	041b      	lsls	r3, r3, #16
 8008e22:	68f9      	ldr	r1, [r7, #12]
 8008e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d11a      	bne.n	8008e78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	791b      	ldrb	r3, [r3, #4]
 8008e5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	4313      	orrs	r3, r2
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	0151      	lsls	r1, r2, #5
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	440a      	add	r2, r1
 8008e6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d161      	bne.n	8008f68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eba:	d11f      	bne.n	8008efc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ed6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	43db      	mvns	r3, r3
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f26:	69da      	ldr	r2, [r3, #28]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	2101      	movs	r1, #1
 8008f32:	fa01 f303 	lsl.w	r3, r1, r3
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	43db      	mvns	r3, r3
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f40:	4013      	ands	r3, r2
 8008f42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	0159      	lsls	r1, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	440b      	add	r3, r1
 8008f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4b35      	ldr	r3, [pc, #212]	@ (8009038 <USB_DeactivateEndpoint+0x1b0>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	600b      	str	r3, [r1, #0]
 8008f66:	e060      	b.n	800902a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f7e:	d11f      	bne.n	8008fc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	0151      	lsls	r1, r2, #5
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	440a      	add	r2, r1
 8008fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	f003 030f 	and.w	r3, r3, #15
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd6:	041b      	lsls	r3, r3, #16
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	68f9      	ldr	r1, [r7, #12]
 8008fdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fea:	69da      	ldr	r2, [r3, #28]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffa:	041b      	lsls	r3, r3, #16
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009004:	4013      	ands	r3, r2
 8009006:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	0159      	lsls	r1, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	440b      	add	r3, r1
 800901e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009022:	4619      	mov	r1, r3
 8009024:	4b05      	ldr	r3, [pc, #20]	@ (800903c <USB_DeactivateEndpoint+0x1b4>)
 8009026:	4013      	ands	r3, r2
 8009028:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	ec337800 	.word	0xec337800
 800903c:	eff37800 	.word	0xeff37800

08009040 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	785b      	ldrb	r3, [r3, #1]
 8009058:	2b01      	cmp	r3, #1
 800905a:	f040 812d 	bne.w	80092b8 <USB_EPStartXfer+0x278>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d132      	bne.n	80090cc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009080:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009084:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009088:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	693a      	ldr	r2, [r7, #16]
 800909a:	0151      	lsls	r1, r2, #5
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	440a      	add	r2, r1
 80090a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	0151      	lsls	r1, r2, #5
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	440a      	add	r2, r1
 80090c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090c4:	0cdb      	lsrs	r3, r3, #19
 80090c6:	04db      	lsls	r3, r3, #19
 80090c8:	6113      	str	r3, [r2, #16]
 80090ca:	e097      	b.n	80091fc <USB_EPStartXfer+0x1bc>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	015a      	lsls	r2, r3, #5
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	0151      	lsls	r1, r2, #5
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	440a      	add	r2, r1
 80090e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090e6:	0cdb      	lsrs	r3, r3, #19
 80090e8:	04db      	lsls	r3, r3, #19
 80090ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	440a      	add	r2, r1
 8009102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009106:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800910a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800910e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d11a      	bne.n	800914c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	691a      	ldr	r2, [r3, #16]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	429a      	cmp	r2, r3
 8009120:	d903      	bls.n	800912a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009144:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009148:	6113      	str	r3, [r2, #16]
 800914a:	e044      	b.n	80091d6 <USB_EPStartXfer+0x196>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	4413      	add	r3, r2
 8009156:	1e5a      	subs	r2, r3, #1
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009160:	81fb      	strh	r3, [r7, #14]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800916e:	691a      	ldr	r2, [r3, #16]
 8009170:	89fb      	ldrh	r3, [r7, #14]
 8009172:	04d9      	lsls	r1, r3, #19
 8009174:	4b8f      	ldr	r3, [pc, #572]	@ (80093b4 <USB_EPStartXfer+0x374>)
 8009176:	400b      	ands	r3, r1
 8009178:	6939      	ldr	r1, [r7, #16]
 800917a:	0148      	lsls	r0, r1, #5
 800917c:	6979      	ldr	r1, [r7, #20]
 800917e:	4401      	add	r1, r0
 8009180:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009184:	4313      	orrs	r3, r2
 8009186:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	791b      	ldrb	r3, [r3, #4]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d122      	bne.n	80091d6 <USB_EPStartXfer+0x196>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80091ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	89fb      	ldrh	r3, [r7, #14]
 80091c0:	075b      	lsls	r3, r3, #29
 80091c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80091c6:	6939      	ldr	r1, [r7, #16]
 80091c8:	0148      	lsls	r0, r1, #5
 80091ca:	6979      	ldr	r1, [r7, #20]
 80091cc:	4401      	add	r1, r0
 80091ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091d2:	4313      	orrs	r3, r2
 80091d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091e2:	691a      	ldr	r2, [r3, #16]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ec:	6939      	ldr	r1, [r7, #16]
 80091ee:	0148      	lsls	r0, r1, #5
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	4401      	add	r1, r0
 80091f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091f8:	4313      	orrs	r3, r2
 80091fa:	610b      	str	r3, [r1, #16]
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009216:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800921a:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	791b      	ldrb	r3, [r3, #4]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d015      	beq.n	8009250 <USB_EPStartXfer+0x210>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 813a 	beq.w	80094a2 <USB_EPStartXfer+0x462>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	2101      	movs	r1, #1
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	6979      	ldr	r1, [r7, #20]
 8009246:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800924a:	4313      	orrs	r3, r2
 800924c:	634b      	str	r3, [r1, #52]	@ 0x34
 800924e:	e128      	b.n	80094a2 <USB_EPStartXfer+0x462>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925c:	2b00      	cmp	r3, #0
 800925e:	d110      	bne.n	8009282 <USB_EPStartXfer+0x242>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	e00f      	b.n	80092a2 <USB_EPStartXfer+0x262>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800929c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092a0:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68d9      	ldr	r1, [r3, #12]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f9a7 	bl	8009604 <USB_WritePacket>
 80092b6:	e0f4      	b.n	80094a2 <USB_EPStartXfer+0x462>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	015a      	lsls	r2, r3, #5
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	4413      	add	r3, r2
 80092c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	0151      	lsls	r1, r2, #5
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	440a      	add	r2, r1
 80092ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d2:	0cdb      	lsrs	r3, r3, #19
 80092d4:	04db      	lsls	r3, r3, #19
 80092d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	0151      	lsls	r1, r2, #5
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	440a      	add	r2, r1
 80092ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80092fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d12f      	bne.n	8009362 <USB_EPStartXfer+0x322>
    {
      if (ep->xfer_len > 0U)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <USB_EPStartXfer+0x2d2>
      {
        ep->xfer_len = ep->maxpacket;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009330:	6939      	ldr	r1, [r7, #16]
 8009332:	0148      	lsls	r0, r1, #5
 8009334:	6979      	ldr	r1, [r7, #20]
 8009336:	4401      	add	r1, r0
 8009338:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800933c:	4313      	orrs	r3, r2
 800933e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	440a      	add	r2, r1
 8009356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800935a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800935e:	6113      	str	r3, [r2, #16]
 8009360:	e062      	b.n	8009428 <USB_EPStartXfer+0x3e8>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d126      	bne.n	80093b8 <USB_EPStartXfer+0x378>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009380:	6939      	ldr	r1, [r7, #16]
 8009382:	0148      	lsls	r0, r1, #5
 8009384:	6979      	ldr	r1, [r7, #20]
 8009386:	4401      	add	r1, r0
 8009388:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800938c:	4313      	orrs	r3, r2
 800938e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4413      	add	r3, r2
 8009398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	697a      	ldr	r2, [r7, #20]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093ae:	6113      	str	r3, [r2, #16]
 80093b0:	e03a      	b.n	8009428 <USB_EPStartXfer+0x3e8>
 80093b2:	bf00      	nop
 80093b4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	691a      	ldr	r2, [r3, #16]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	4413      	add	r3, r2
 80093c2:	1e5a      	subs	r2, r3, #1
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093cc:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	89fa      	ldrh	r2, [r7, #14]
 80093d4:	fb03 f202 	mul.w	r2, r3, r2
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	89fb      	ldrh	r3, [r7, #14]
 80093ec:	04d9      	lsls	r1, r3, #19
 80093ee:	4b2f      	ldr	r3, [pc, #188]	@ (80094ac <USB_EPStartXfer+0x46c>)
 80093f0:	400b      	ands	r3, r1
 80093f2:	6939      	ldr	r1, [r7, #16]
 80093f4:	0148      	lsls	r0, r1, #5
 80093f6:	6979      	ldr	r1, [r7, #20]
 80093f8:	4401      	add	r1, r0
 80093fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093fe:	4313      	orrs	r3, r2
 8009400:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800940e:	691a      	ldr	r2, [r3, #16]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009418:	6939      	ldr	r1, [r7, #16]
 800941a:	0148      	lsls	r0, r1, #5
 800941c:	6979      	ldr	r1, [r7, #20]
 800941e:	4401      	add	r1, r0
 8009420:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009424:	4313      	orrs	r3, r2
 8009426:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d128      	bne.n	8009482 <USB_EPStartXfer+0x442>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800943c:	2b00      	cmp	r3, #0
 800943e:	d110      	bne.n	8009462 <USB_EPStartXfer+0x422>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800945a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	e00f      	b.n	8009482 <USB_EPStartXfer+0x442>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	4413      	add	r3, r2
 800946a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800947c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009480:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	015a      	lsls	r2, r3, #5
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	4413      	add	r3, r2
 800948a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	0151      	lsls	r1, r2, #5
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	440a      	add	r2, r1
 8009498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800949c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80094a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3718      	adds	r7, #24
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	1ff80000 	.word	0x1ff80000

080094b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b087      	sub	sp, #28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d14a      	bne.n	8009564 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094e6:	f040 8086 	bne.w	80095f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	015a      	lsls	r2, r3, #5
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	4413      	add	r3, r2
 80094f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	7812      	ldrb	r2, [r2, #0]
 80094fe:	0151      	lsls	r1, r2, #5
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	440a      	add	r2, r1
 8009504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009508:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800950c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	7812      	ldrb	r2, [r2, #0]
 8009522:	0151      	lsls	r1, r2, #5
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	440a      	add	r2, r1
 8009528:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800952c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800953e:	4293      	cmp	r3, r2
 8009540:	d902      	bls.n	8009548 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	75fb      	strb	r3, [r7, #23]
          break;
 8009546:	e056      	b.n	80095f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	4413      	add	r3, r2
 8009552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800955c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009560:	d0e7      	beq.n	8009532 <USB_EPStopXfer+0x82>
 8009562:	e048      	b.n	80095f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009578:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800957c:	d13b      	bne.n	80095f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	015a      	lsls	r2, r3, #5
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	4413      	add	r3, r2
 8009588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	7812      	ldrb	r2, [r2, #0]
 8009592:	0151      	lsls	r1, r2, #5
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	440a      	add	r2, r1
 8009598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800959c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80095a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	7812      	ldrb	r2, [r2, #0]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d902      	bls.n	80095dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	75fb      	strb	r3, [r7, #23]
          break;
 80095da:	e00c      	b.n	80095f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f4:	d0e7      	beq.n	80095c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009604:	b480      	push	{r7}
 8009606:	b089      	sub	sp, #36	@ 0x24
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	4611      	mov	r1, r2
 8009610:	461a      	mov	r2, r3
 8009612:	460b      	mov	r3, r1
 8009614:	71fb      	strb	r3, [r7, #7]
 8009616:	4613      	mov	r3, r2
 8009618:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009622:	88bb      	ldrh	r3, [r7, #4]
 8009624:	3303      	adds	r3, #3
 8009626:	089b      	lsrs	r3, r3, #2
 8009628:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800962a:	2300      	movs	r3, #0
 800962c:	61bb      	str	r3, [r7, #24]
 800962e:	e018      	b.n	8009662 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	031a      	lsls	r2, r3, #12
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	4413      	add	r3, r2
 8009638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800963c:	461a      	mov	r2, r3
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	3301      	adds	r3, #1
 8009648:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	3301      	adds	r3, #1
 800964e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	3301      	adds	r3, #1
 8009654:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	3301      	adds	r3, #1
 800965a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	3301      	adds	r3, #1
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	429a      	cmp	r2, r3
 8009668:	d3e2      	bcc.n	8009630 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3724      	adds	r7, #36	@ 0x24
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009678:	b480      	push	{r7}
 800967a:	b08b      	sub	sp, #44	@ 0x2c
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	089b      	lsrs	r3, r3, #2
 8009692:	b29b      	uxth	r3, r3
 8009694:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800969e:	2300      	movs	r3, #0
 80096a0:	623b      	str	r3, [r7, #32]
 80096a2:	e014      	b.n	80096ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	3301      	adds	r3, #1
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b8:	3301      	adds	r3, #1
 80096ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096be:	3301      	adds	r3, #1
 80096c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	3301      	adds	r3, #1
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	3301      	adds	r3, #1
 80096cc:	623b      	str	r3, [r7, #32]
 80096ce:	6a3a      	ldr	r2, [r7, #32]
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d3e6      	bcc.n	80096a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80096d6:	8bfb      	ldrh	r3, [r7, #30]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01e      	beq.n	800971a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096e6:	461a      	mov	r2, r3
 80096e8:	f107 0310 	add.w	r3, r7, #16
 80096ec:	6812      	ldr	r2, [r2, #0]
 80096ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	00db      	lsls	r3, r3, #3
 80096f8:	fa22 f303 	lsr.w	r3, r2, r3
 80096fc:	b2da      	uxtb	r2, r3
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	701a      	strb	r2, [r3, #0]
      i++;
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	3301      	adds	r3, #1
 8009706:	623b      	str	r3, [r7, #32]
      pDest++;
 8009708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970a:	3301      	adds	r3, #1
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800970e:	8bfb      	ldrh	r3, [r7, #30]
 8009710:	3b01      	subs	r3, #1
 8009712:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009714:	8bfb      	ldrh	r3, [r7, #30]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1ea      	bne.n	80096f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800971c:	4618      	mov	r0, r3
 800971e:	372c      	adds	r7, #44	@ 0x2c
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	785b      	ldrb	r3, [r3, #1]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d12c      	bne.n	800979e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	db12      	blt.n	800977c <USB_EPSetStall+0x54>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00f      	beq.n	800977c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	0151      	lsls	r1, r2, #5
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	440a      	add	r2, r1
 8009772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009776:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800977a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	0151      	lsls	r1, r2, #5
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	440a      	add	r2, r1
 8009792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009796:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	e02b      	b.n	80097f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db12      	blt.n	80097d6 <USB_EPSetStall+0xae>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	0151      	lsls	r1, r2, #5
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	440a      	add	r2, r1
 80097ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	785b      	ldrb	r3, [r3, #1]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d128      	bne.n	8009872 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	0151      	lsls	r1, r2, #5
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	440a      	add	r2, r1
 8009836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800983a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800983e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	791b      	ldrb	r3, [r3, #4]
 8009844:	2b03      	cmp	r3, #3
 8009846:	d003      	beq.n	8009850 <USB_EPClearStall+0x4c>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	791b      	ldrb	r3, [r3, #4]
 800984c:	2b02      	cmp	r3, #2
 800984e:	d138      	bne.n	80098c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	0151      	lsls	r1, r2, #5
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	440a      	add	r2, r1
 8009866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800986a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	e027      	b.n	80098c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	440a      	add	r2, r1
 8009888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800988c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009890:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	791b      	ldrb	r3, [r3, #4]
 8009896:	2b03      	cmp	r3, #3
 8009898:	d003      	beq.n	80098a2 <USB_EPClearStall+0x9e>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	791b      	ldrb	r3, [r3, #4]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d10f      	bne.n	80098c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80098f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	011b      	lsls	r3, r3, #4
 8009900:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009904:	68f9      	ldr	r1, [r7, #12]
 8009906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800990a:	4313      	orrs	r3, r2
 800990c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009936:	f023 0303 	bic.w	r3, r3, #3
 800993a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800994a:	f023 0302 	bic.w	r3, r3, #2
 800994e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009978:	f023 0303 	bic.w	r3, r3, #3
 800997c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	4013      	ands	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b085      	sub	sp, #20
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	4013      	ands	r3, r2
 80099e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	0c1b      	lsrs	r3, r3, #16
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	b29b      	uxth	r3, r3
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	015a      	lsls	r2, r3, #5
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4413      	add	r3, r2
 8009a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3714      	adds	r7, #20
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b087      	sub	sp, #28
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9a:	01db      	lsls	r3, r3, #7
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	693a      	ldr	r2, [r7, #16]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009aa4:	78fb      	ldrb	r3, [r7, #3]
 8009aa6:	015a      	lsls	r2, r3, #5
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	4413      	add	r3, r2
 8009aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	f003 0301 	and.w	r3, r3, #1
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009afc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009b00:	f023 0307 	bic.w	r3, r3, #7
 8009b04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	333c      	adds	r3, #60	@ 0x3c
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4a1c      	ldr	r2, [pc, #112]	@ (8009bb4 <USB_EP0_OutStart+0x8c>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d90a      	bls.n	8009b5e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b58:	d101      	bne.n	8009b5e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e024      	b.n	8009ba8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b64:	461a      	mov	r2, r3
 8009b66:	2300      	movs	r3, #0
 8009b68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b8c:	f043 0318 	orr.w	r3, r3, #24
 8009b90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ba0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009ba4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	4f54300a 	.word	0x4f54300a

08009bb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bd0:	d901      	bls.n	8009bd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e01b      	b.n	8009c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	daf2      	bge.n	8009bc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f043 0201 	orr.w	r2, r3, #1
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bfa:	d901      	bls.n	8009c00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e006      	b.n	8009c0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d0f0      	beq.n	8009bee <USB_CoreReset+0x36>

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	460b      	mov	r3, r1
 8009c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8009c28:	f44f 6075 	mov.w	r0, #3920	@ 0xf50
 8009c2c:	f002 fc7c 	bl	800c528 <USBD_static_malloc>
 8009c30:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d109      	bne.n	8009c4c <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	32b0      	adds	r2, #176	@ 0xb0
 8009c42:	2100      	movs	r1, #0
 8009c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e076      	b.n	8009d3a <USBD_AUDIO_Init+0x11e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	32b0      	adds	r2, #176	@ 0xb0
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	32b0      	adds	r2, #176	@ 0xb0
 8009c66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7c1b      	ldrb	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10e      	bne.n	8009c96 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8009c78:	4b32      	ldr	r3, [pc, #200]	@ (8009d44 <USBD_AUDIO_Init+0x128>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	f003 020f 	and.w	r2, r3, #15
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009c90:	2201      	movs	r2, #1
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	e00d      	b.n	8009cb2 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8009c96:	4b2b      	ldr	r3, [pc, #172]	@ (8009d44 <USBD_AUDIO_Init+0x128>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009cae:	2201      	movs	r2, #1
 8009cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8009cb2:	4b24      	ldr	r3, [pc, #144]	@ (8009d44 <USBD_AUDIO_Init+0x128>)
 8009cb4:	7819      	ldrb	r1, [r3, #0]
 8009cb6:	2330      	movs	r3, #48	@ 0x30
 8009cb8:	2201      	movs	r2, #1
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f002 fa20 	bl	800c100 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8009cc0:	4b20      	ldr	r3, [pc, #128]	@ (8009d44 <USBD_AUDIO_Init+0x128>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 020f 	and.w	r2, r3, #15
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cd8:	2201      	movs	r2, #1
 8009cda:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	f883 2f04 	strb.w	r2, [r3, #3844]	@ 0xf04
  haudio->wr_ptr = 0U;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f8a3 2f08 	strh.w	r2, [r3, #3848]	@ 0xf08
  haudio->rd_ptr = 0U;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f8a3 2f06 	strh.w	r2, [r3, #3846]	@ 0xf06
  haudio->rd_enable = 0U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2f05 	strb.w	r2, [r3, #3845]	@ 0xf05

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	33b0      	adds	r3, #176	@ 0xb0
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2200      	movs	r2, #0
 8009d16:	2146      	movs	r1, #70	@ 0x46
 8009d18:	f645 50c0 	movw	r0, #24000	@ 0x5dc0
 8009d1c:	4798      	blx	r3
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBD_AUDIO_Init+0x10c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e008      	b.n	8009d3a <USBD_AUDIO_Init+0x11e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 8009d28:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <USBD_AUDIO_Init+0x128>)
 8009d2a:	7819      	ldrb	r1, [r3, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	2330      	movs	r3, #48	@ 0x30
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f002 fb5e 	bl	800c3f4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	200000c6 	.word	0x200000c6

08009d48 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 8009d54:	4b28      	ldr	r3, [pc, #160]	@ (8009df8 <USBD_AUDIO_DeInit+0xb0>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f002 fa0e 	bl	800c17c <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 8009d60:	4b25      	ldr	r3, [pc, #148]	@ (8009df8 <USBD_AUDIO_DeInit+0xb0>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	f003 020f 	and.w	r2, r3, #15
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d78:	2200      	movs	r2, #0
 8009d7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 8009d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8009df8 <USBD_AUDIO_DeInit+0xb0>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	f003 020f 	and.w	r2, r3, #15
 8009d84:	6879      	ldr	r1, [r7, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009d94:	2200      	movs	r2, #0
 8009d96:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	32b0      	adds	r2, #176	@ 0xb0
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d020      	beq.n	8009dec <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	33b0      	adds	r3, #176	@ 0xb0
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32b0      	adds	r2, #176	@ 0xb0
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f002 fbb8 	bl	800c544 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32b0      	adds	r2, #176	@ 0xb0
 8009dde:	2100      	movs	r1, #0
 8009de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	200000c6 	.word	0x200000c6

08009dfc <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	32b0      	adds	r2, #176	@ 0xb0
 8009e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1c:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e0c1      	b.n	8009fac <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01a      	beq.n	8009e6a <USBD_AUDIO_Setup+0x6e>
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	f040 80b1 	bne.w	8009f9c <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d006      	beq.n	8009e50 <USBD_AUDIO_Setup+0x54>
 8009e42:	2b81      	cmp	r3, #129	@ 0x81
 8009e44:	d109      	bne.n	8009e5a <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f9d3 	bl	800a1f4 <AUDIO_REQ_GetCurrent>
          break;
 8009e4e:	e00b      	b.n	8009e68 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f9f8 	bl	800a248 <AUDIO_REQ_SetCurrent>
          break;
 8009e58:	e006      	b.n	8009e68 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f001 fc82 	bl	800b766 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e62:	2303      	movs	r3, #3
 8009e64:	75fb      	strb	r3, [r7, #23]
          break;
 8009e66:	bf00      	nop
      }
      break;
 8009e68:	e09f      	b.n	8009faa <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	785b      	ldrb	r3, [r3, #1]
 8009e6e:	2b0b      	cmp	r3, #11
 8009e70:	f200 8089 	bhi.w	8009f86 <USBD_AUDIO_Setup+0x18a>
 8009e74:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <USBD_AUDIO_Setup+0x80>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009ead 	.word	0x08009ead
 8009e80:	08009f95 	.word	0x08009f95
 8009e84:	08009f87 	.word	0x08009f87
 8009e88:	08009f87 	.word	0x08009f87
 8009e8c:	08009f87 	.word	0x08009f87
 8009e90:	08009f87 	.word	0x08009f87
 8009e94:	08009ed7 	.word	0x08009ed7
 8009e98:	08009f87 	.word	0x08009f87
 8009e9c:	08009f87 	.word	0x08009f87
 8009ea0:	08009f87 	.word	0x08009f87
 8009ea4:	08009f1f 	.word	0x08009f1f
 8009ea8:	08009f47 	.word	0x08009f47
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d107      	bne.n	8009ec8 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009eb8:	f107 0308 	add.w	r3, r7, #8
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f001 fccd 	bl	800b860 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ec6:	e068      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 fc4b 	bl	800b766 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	75fb      	strb	r3, [r7, #23]
          break;
 8009ed4:	e061      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	885b      	ldrh	r3, [r3, #2]
 8009eda:	0a1b      	lsrs	r3, r3, #8
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	2b21      	cmp	r3, #33	@ 0x21
 8009ee0:	d15a      	bne.n	8009f98 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fa13 	bl	800a314 <USBD_AUDIO_GetAudioHeaderDesc>
 8009eee:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00c      	beq.n	8009f10 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	88db      	ldrh	r3, [r3, #6]
 8009efa:	2b09      	cmp	r3, #9
 8009efc:	bf28      	it	cs
 8009efe:	2309      	movcs	r3, #9
 8009f00:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8009f02:	897b      	ldrh	r3, [r7, #10]
 8009f04:	461a      	mov	r2, r3
 8009f06:	68f9      	ldr	r1, [r7, #12]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 fca9 	bl	800b860 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8009f0e:	e043      	b.n	8009f98 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 fc27 	bl	800b766 <USBD_CtlError>
              ret = USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f1c:	e03c      	b.n	8009f98 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d106      	bne.n	8009f38 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f001 fc95 	bl	800b860 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f36:	e030      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 fc13 	bl	800b766 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f40:	2303      	movs	r3, #3
 8009f42:	75fb      	strb	r3, [r7, #23]
          break;
 8009f44:	e029      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d112      	bne.n	8009f78 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	885b      	ldrh	r3, [r3, #2]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d806      	bhi.n	8009f6a <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	885b      	ldrh	r3, [r3, #2]
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	461a      	mov	r2, r3
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f68:	e017      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 8009f6a:	6839      	ldr	r1, [r7, #0]
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 fbfa 	bl	800b766 <USBD_CtlError>
              ret = USBD_FAIL;
 8009f72:	2303      	movs	r3, #3
 8009f74:	75fb      	strb	r3, [r7, #23]
          break;
 8009f76:	e010      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fbf3 	bl	800b766 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	75fb      	strb	r3, [r7, #23]
          break;
 8009f84:	e009      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f001 fbec 	bl	800b766 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	75fb      	strb	r3, [r7, #23]
          break;
 8009f92:	e002      	b.n	8009f9a <USBD_AUDIO_Setup+0x19e>
          break;
 8009f94:	bf00      	nop
 8009f96:	e008      	b.n	8009faa <USBD_AUDIO_Setup+0x1ae>
          break;
 8009f98:	bf00      	nop
      }
      break;
 8009f9a:	e006      	b.n	8009faa <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f001 fbe1 	bl	800b766 <USBD_CtlError>
      ret = USBD_FAIL;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	226d      	movs	r2, #109	@ 0x6d
 8009fc0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8009fc2:	4b03      	ldr	r3, [pc, #12]	@ (8009fd0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	2000004c 	.word	0x2000004c

08009fd4 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	32b0      	adds	r2, #176	@ 0xb0
 800a000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a004:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e020      	b.n	800a052 <USBD_AUDIO_EP0_RxReady+0x64>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f893 3f0a 	ldrb.w	r3, [r3, #3850]	@ 0xf0a
 800a016:	2b01      	cmp	r3, #1
 800a018:	d11a      	bne.n	800a050 <USBD_AUDIO_EP0_RxReady+0x62>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	@ 0xf4c
 800a020:	2b02      	cmp	r3, #2
 800a022:	d115      	bne.n	800a050 <USBD_AUDIO_EP0_RxReady+0x62>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	33b0      	adds	r3, #176	@ 0xb0
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	f892 2f0b 	ldrb.w	r2, [r2, #3851]	@ 0xf0b
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
      haudio->control.cmd = 0U;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2f0a 	strb.w	r2, [r3, #3850]	@ 0xf0a
      haudio->control.len = 0U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2f4b 	strb.w	r2, [r3, #3915]	@ 0xf4b
    }
  }

  return (uint8_t)USBD_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b083      	sub	sp, #12
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	370c      	adds	r7, #12
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef *haudio;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	32b0      	adds	r2, #176	@ 0xb0
 800a0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <USBD_AUDIO_IsoOutIncomplete+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e014      	b.n	800a0ec <USBD_AUDIO_IsoOutIncomplete+0x4c>
  }

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	32b0      	adds	r2, #176	@ 0xb0
 800a0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Prepare Out endpoint to receive next audio packet */
  (void)USBD_LL_PrepareReceive(pdev, epnum,
                               &haudio->buffer[haudio->wr_ptr],
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8b3 3f08 	ldrh.w	r3, [r3, #3848]	@ 0xf08
 800a0d8:	461a      	mov	r2, r3
  (void)USBD_LL_PrepareReceive(pdev, epnum,
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4413      	add	r3, r2
 800a0de:	1d1a      	adds	r2, r3, #4
 800a0e0:	78f9      	ldrb	r1, [r7, #3]
 800a0e2:	2330      	movs	r3, #48	@ 0x30
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f002 f985 	bl	800c3f4 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	32b0      	adds	r2, #176	@ 0xb0
 800a10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d101      	bne.n	800a11a <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a116:	2303      	movs	r3, #3
 800a118:	e066      	b.n	800a1e8 <USBD_AUDIO_DataOut+0xf4>
  }

  if (epnum == AUDIOOutEpAdd)
 800a11a:	4b35      	ldr	r3, [pc, #212]	@ (800a1f0 <USBD_AUDIO_DataOut+0xfc>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	78fa      	ldrb	r2, [r7, #3]
 800a120:	429a      	cmp	r2, r3
 800a122:	d160      	bne.n	800a1e6 <USBD_AUDIO_DataOut+0xf2>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	4619      	mov	r1, r3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f002 f99b 	bl	800c464 <USBD_LL_GetRxDataSize>
 800a12e:	4603      	mov	r3, r0
 800a130:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	33b0      	adds	r3, #176	@ 0xb0
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	f8b2 2f08 	ldrh.w	r2, [r2, #3848]	@ 0xf08
 800a14a:	4611      	mov	r1, r2
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	440a      	add	r2, r1
 800a150:	1d10      	adds	r0, r2, #4
 800a152:	8979      	ldrh	r1, [r7, #10]
 800a154:	2201      	movs	r2, #1
 800a156:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8b3 2f08 	ldrh.w	r2, [r3, #3848]	@ 0xf08
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	4413      	add	r3, r2
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f8a3 2f08 	strh.w	r2, [r3, #3848]	@ 0xf08

    if (haudio->wr_ptr >= AUDIO_TOTAL_BUF_SIZE)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8b3 3f08 	ldrh.w	r3, [r3, #3848]	@ 0xf08
 800a170:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a174:	d31b      	bcc.n	800a1ae <USBD_AUDIO_DataOut+0xba>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f8a3 2f08 	strh.w	r2, [r3, #3848]	@ 0xf08

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f893 3f04 	ldrb.w	r3, [r3, #3844]	@ 0xf04
 800a184:	2b03      	cmp	r3, #3
 800a186:	d112      	bne.n	800a1ae <USBD_AUDIO_DataOut+0xba>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	33b0      	adds	r3, #176	@ 0xb0
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	1d10      	adds	r0, r2, #4
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 800a1a4:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2f04 	strb.w	r2, [r3, #3844]	@ 0xf04
      }
    }

    if (haudio->rd_enable == 0U)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f893 3f05 	ldrb.w	r3, [r3, #3845]	@ 0xf05
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d109      	bne.n	800a1cc <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 3f08 	ldrh.w	r3, [r3, #3848]	@ 0xf08
 800a1be:	f5b3 6ff0 	cmp.w	r3, #1920	@ 0x780
 800a1c2:	d103      	bne.n	800a1cc <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 2f05 	strb.w	r2, [r3, #3845]	@ 0xf05
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a1cc:	4b08      	ldr	r3, [pc, #32]	@ (800a1f0 <USBD_AUDIO_DataOut+0xfc>)
 800a1ce:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8b3 3f08 	ldrh.w	r3, [r3, #3848]	@ 0xf08
 800a1d6:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	2330      	movs	r3, #48	@ 0x30
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f002 f907 	bl	800c3f4 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200000c6 	.word	0x200000c6

0800a1f4 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	32b0      	adds	r2, #176	@ 0xb0
 800a208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d015      	beq.n	800a240 <AUDIO_REQ_GetCurrent+0x4c>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f603 730b 	addw	r3, r3, #3851	@ 0xf0b
 800a21a:	2240      	movs	r2, #64	@ 0x40
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f002 ff1d 	bl	800d05e <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f603 710b 	addw	r1, r3, #3851	@ 0xf0b
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	88db      	ldrh	r3, [r3, #6]
 800a22e:	2b40      	cmp	r3, #64	@ 0x40
 800a230:	bf28      	it	cs
 800a232:	2340      	movcs	r3, #64	@ 0x40
 800a234:	b29b      	uxth	r3, r3
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 800a236:	461a      	mov	r2, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 fb11 	bl	800b860 <USBD_CtlSendData>
 800a23e:	e000      	b.n	800a242 <AUDIO_REQ_GetCurrent+0x4e>
    return;
 800a240:	bf00      	nop
}
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	32b0      	adds	r2, #176	@ 0xb0
 800a25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a260:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d026      	beq.n	800a2b6 <AUDIO_REQ_SetCurrent+0x6e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	88db      	ldrh	r3, [r3, #6]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d023      	beq.n	800a2b8 <AUDIO_REQ_SetCurrent+0x70>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2f0a 	strb.w	r2, [r3, #3850]	@ 0xf0a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	88db      	ldrh	r3, [r3, #6]
 800a27c:	2b3f      	cmp	r3, #63	@ 0x3f
 800a27e:	d803      	bhi.n	800a288 <AUDIO_REQ_SetCurrent+0x40>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	88db      	ldrh	r3, [r3, #6]
 800a284:	b2da      	uxtb	r2, r3
 800a286:	e000      	b.n	800a28a <AUDIO_REQ_SetCurrent+0x42>
 800a288:	2240      	movs	r2, #64	@ 0x40
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f883 2f4b 	strb.w	r2, [r3, #3915]	@ 0xf4b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	889b      	ldrh	r3, [r3, #4]
 800a294:	0a1b      	lsrs	r3, r3, #8
 800a296:	b29b      	uxth	r3, r3
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f883 2f4c 	strb.w	r2, [r3, #3916]	@ 0xf4c

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f603 710b 	addw	r1, r3, #3851	@ 0xf0b
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f893 3f4b 	ldrb.w	r3, [r3, #3915]	@ 0xf4b
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f001 fb02 	bl	800b8b8 <USBD_CtlPrepareRx>
 800a2b4:	e000      	b.n	800a2b8 <AUDIO_REQ_SetCurrent+0x70>
    return;
 800a2b6:	bf00      	nop
  }
}
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	220a      	movs	r2, #10
 800a2cc:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800a2ce:	4b03      	ldr	r3, [pc, #12]	@ (800a2dc <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	200000bc 	.word	0x200000bc

0800a2e0 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e009      	b.n	800a308 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	33b0      	adds	r3, #176	@ 0xb0
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 800a324:	2300      	movs	r3, #0
 800a326:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	885b      	ldrh	r3, [r3, #2]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	7812      	ldrb	r2, [r2, #0]
 800a332:	4293      	cmp	r3, r2
 800a334:	d91b      	bls.n	800a36e <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
  {
    ptr = desc->bLength;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a33c:	e011      	b.n	800a362 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a33e:	f107 030a 	add.w	r3, r7, #10
 800a342:	4619      	mov	r1, r3
 800a344:	6978      	ldr	r0, [r7, #20]
 800a346:	f000 fbe6 	bl	800ab16 <USBD_GetNextDesc>
 800a34a:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	785b      	ldrb	r3, [r3, #1]
 800a350:	2b24      	cmp	r3, #36	@ 0x24
 800a352:	d106      	bne.n	800a362 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d102      	bne.n	800a362 <USBD_AUDIO_GetAudioHeaderDesc+0x4e>
      {
        pAudioDesc = (uint8_t *)pdesc;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	613b      	str	r3, [r7, #16]
        break;
 800a360:	e005      	b.n	800a36e <USBD_AUDIO_GetAudioHeaderDesc+0x5a>
    while (ptr < desc->wTotalLength)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	b29a      	uxth	r2, r3
 800a368:	897b      	ldrh	r3, [r7, #10]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d8e7      	bhi.n	800a33e <USBD_AUDIO_GetAudioHeaderDesc+0x2a>
      }
    }
  }
  return pAudioDesc;
 800a36e:	693b      	ldr	r3, [r7, #16]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d101      	bne.n	800a390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a38c:	2303      	movs	r3, #3
 800a38e:	e01f      	b.n	800a3d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d003      	beq.n	800a3b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	79fa      	ldrb	r2, [r7, #7]
 800a3c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f001 fe1d 	bl	800c004 <USBD_LL_Init>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3718      	adds	r7, #24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e025      	b.n	800a43c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	32ae      	adds	r2, #174	@ 0xae
 800a402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00f      	beq.n	800a42c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	32ae      	adds	r2, #174	@ 0xae
 800a416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	f107 020e 	add.w	r2, r7, #14
 800a420:	4610      	mov	r0, r2
 800a422:	4798      	blx	r3
 800a424:	4602      	mov	r2, r0
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 fe25 	bl	800c09c <USBD_LL_Start>
 800a452:	4603      	mov	r3, r0
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	460b      	mov	r3, r1
 800a47c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d009      	beq.n	800a4a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	78fa      	ldrb	r2, [r7, #3]
 800a496:	4611      	mov	r1, r2
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	4798      	blx	r3
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d001      	beq.n	800a4d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a4d0:	2303      	movs	r3, #3
 800a4d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f001 f8fe 	bl	800b6f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a504:	461a      	mov	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a512:	f003 031f 	and.w	r3, r3, #31
 800a516:	2b02      	cmp	r3, #2
 800a518:	d01a      	beq.n	800a550 <USBD_LL_SetupStage+0x72>
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d822      	bhi.n	800a564 <USBD_LL_SetupStage+0x86>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <USBD_LL_SetupStage+0x4a>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d00a      	beq.n	800a53c <USBD_LL_SetupStage+0x5e>
 800a526:	e01d      	b.n	800a564 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fb2b 	bl	800ab8c <USBD_StdDevReq>
 800a536:	4603      	mov	r3, r0
 800a538:	73fb      	strb	r3, [r7, #15]
      break;
 800a53a:	e020      	b.n	800a57e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fb93 	bl	800ac70 <USBD_StdItfReq>
 800a54a:	4603      	mov	r3, r0
 800a54c:	73fb      	strb	r3, [r7, #15]
      break;
 800a54e:	e016      	b.n	800a57e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fbf5 	bl	800ad48 <USBD_StdEPReq>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]
      break;
 800a562:	e00c      	b.n	800a57e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a56a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 fe38 	bl	800c1e8 <USBD_LL_StallEP>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
      break;
 800a57c:	bf00      	nop
  }

  return ret;
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	460b      	mov	r3, r1
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a59a:	7afb      	ldrb	r3, [r7, #11]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d16e      	bne.n	800a67e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a5a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	f040 8098 	bne.w	800a6e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d913      	bls.n	800a5e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	1ad2      	subs	r2, r2, r3
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	bf28      	it	cs
 800a5da:	4613      	movcs	r3, r2
 800a5dc:	461a      	mov	r2, r3
 800a5de:	6879      	ldr	r1, [r7, #4]
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f001 f986 	bl	800b8f2 <USBD_CtlContinueRx>
 800a5e6:	e07d      	b.n	800a6e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5ee:	f003 031f 	and.w	r3, r3, #31
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d014      	beq.n	800a620 <USBD_LL_DataOutStage+0x98>
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d81d      	bhi.n	800a636 <USBD_LL_DataOutStage+0xae>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d002      	beq.n	800a604 <USBD_LL_DataOutStage+0x7c>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d003      	beq.n	800a60a <USBD_LL_DataOutStage+0x82>
 800a602:	e018      	b.n	800a636 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	75bb      	strb	r3, [r7, #22]
            break;
 800a608:	e018      	b.n	800a63c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a610:	b2db      	uxtb	r3, r3
 800a612:	4619      	mov	r1, r3
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 fa64 	bl	800aae2 <USBD_CoreFindIF>
 800a61a:	4603      	mov	r3, r0
 800a61c:	75bb      	strb	r3, [r7, #22]
            break;
 800a61e:	e00d      	b.n	800a63c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a626:	b2db      	uxtb	r3, r3
 800a628:	4619      	mov	r1, r3
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f000 fa66 	bl	800aafc <USBD_CoreFindEP>
 800a630:	4603      	mov	r3, r0
 800a632:	75bb      	strb	r3, [r7, #22]
            break;
 800a634:	e002      	b.n	800a63c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a636:	2300      	movs	r3, #0
 800a638:	75bb      	strb	r3, [r7, #22]
            break;
 800a63a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a63c:	7dbb      	ldrb	r3, [r7, #22]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d119      	bne.n	800a676 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	2b03      	cmp	r3, #3
 800a64c:	d113      	bne.n	800a676 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a64e:	7dba      	ldrb	r2, [r7, #22]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	32ae      	adds	r2, #174	@ 0xae
 800a654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a65e:	7dba      	ldrb	r2, [r7, #22]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a666:	7dba      	ldrb	r2, [r7, #22]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	32ae      	adds	r2, #174	@ 0xae
 800a66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f001 f94c 	bl	800b914 <USBD_CtlSendStatus>
 800a67c:	e032      	b.n	800a6e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a684:	b2db      	uxtb	r3, r3
 800a686:	4619      	mov	r1, r3
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 fa37 	bl	800aafc <USBD_CoreFindEP>
 800a68e:	4603      	mov	r3, r0
 800a690:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a692:	7dbb      	ldrb	r3, [r7, #22]
 800a694:	2bff      	cmp	r3, #255	@ 0xff
 800a696:	d025      	beq.n	800a6e4 <USBD_LL_DataOutStage+0x15c>
 800a698:	7dbb      	ldrb	r3, [r7, #22]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d122      	bne.n	800a6e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	d117      	bne.n	800a6da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a6aa:	7dba      	ldrb	r2, [r7, #22]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	32ae      	adds	r2, #174	@ 0xae
 800a6b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00f      	beq.n	800a6da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a6ba:	7dba      	ldrb	r2, [r7, #22]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a6c2:	7dba      	ldrb	r2, [r7, #22]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	32ae      	adds	r2, #174	@ 0xae
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	7afa      	ldrb	r2, [r7, #11]
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	4798      	blx	r3
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	e000      	b.n	800a6e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3718      	adds	r7, #24
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b086      	sub	sp, #24
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a6fc:	7afb      	ldrb	r3, [r7, #11]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d16f      	bne.n	800a7e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3314      	adds	r3, #20
 800a706:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d15a      	bne.n	800a7c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d914      	bls.n	800a748 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	689a      	ldr	r2, [r3, #8]
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	1ad2      	subs	r2, r2, r3
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	461a      	mov	r2, r3
 800a732:	6879      	ldr	r1, [r7, #4]
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f001 f8ae 	bl	800b896 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a73a:	2300      	movs	r3, #0
 800a73c:	2200      	movs	r2, #0
 800a73e:	2100      	movs	r1, #0
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f001 fe57 	bl	800c3f4 <USBD_LL_PrepareReceive>
 800a746:	e03f      	b.n	800a7c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	429a      	cmp	r2, r3
 800a752:	d11c      	bne.n	800a78e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d316      	bcc.n	800a78e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	685a      	ldr	r2, [r3, #4]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d20f      	bcs.n	800a78e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a76e:	2200      	movs	r2, #0
 800a770:	2100      	movs	r1, #0
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f001 f88f 	bl	800b896 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a780:	2300      	movs	r3, #0
 800a782:	2200      	movs	r2, #0
 800a784:	2100      	movs	r1, #0
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f001 fe34 	bl	800c3f4 <USBD_LL_PrepareReceive>
 800a78c:	e01c      	b.n	800a7c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b03      	cmp	r3, #3
 800a798:	d10f      	bne.n	800a7ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d009      	beq.n	800a7ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	68f8      	ldr	r0, [r7, #12]
 800a7b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ba:	2180      	movs	r1, #128	@ 0x80
 800a7bc:	68f8      	ldr	r0, [r7, #12]
 800a7be:	f001 fd13 	bl	800c1e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f001 f8b9 	bl	800b93a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d03a      	beq.n	800a848 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff fe42 	bl	800a45c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a7e0:	e032      	b.n	800a848 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f000 f985 	bl	800aafc <USBD_CoreFindEP>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2bff      	cmp	r3, #255	@ 0xff
 800a7fa:	d025      	beq.n	800a848 <USBD_LL_DataInStage+0x15a>
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d122      	bne.n	800a848 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	2b03      	cmp	r3, #3
 800a80c:	d11c      	bne.n	800a848 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a80e:	7dfa      	ldrb	r2, [r7, #23]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	32ae      	adds	r2, #174	@ 0xae
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d014      	beq.n	800a848 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a81e:	7dfa      	ldrb	r2, [r7, #23]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a826:	7dfa      	ldrb	r2, [r7, #23]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	32ae      	adds	r2, #174	@ 0xae
 800a82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	7afa      	ldrb	r2, [r7, #11]
 800a834:	4611      	mov	r1, r2
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	4798      	blx	r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a83e:	7dbb      	ldrb	r3, [r7, #22]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a844:	7dbb      	ldrb	r3, [r7, #22]
 800a846:	e000      	b.n	800a84a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3718      	adds	r7, #24
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d014      	beq.n	800a8b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00e      	beq.n	800a8b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	6852      	ldr	r2, [r2, #4]
 800a8a6:	b2d2      	uxtb	r2, r2
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8b8:	2340      	movs	r3, #64	@ 0x40
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	2100      	movs	r1, #0
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f001 fc1e 	bl	800c100 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2240      	movs	r2, #64	@ 0x40
 800a8d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a8d4:	2340      	movs	r3, #64	@ 0x40
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2180      	movs	r1, #128	@ 0x80
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f001 fc10 	bl	800c100 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2240      	movs	r2, #64	@ 0x40
 800a8ea:	621a      	str	r2, [r3, #32]

  return ret;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	460b      	mov	r3, r1
 800a900:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	78fa      	ldrb	r2, [r7, #3]
 800a906:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	370c      	adds	r7, #12
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b04      	cmp	r3, #4
 800a928:	d006      	beq.n	800a938 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a930:	b2da      	uxtb	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2204      	movs	r2, #4
 800a93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b04      	cmp	r3, #4
 800a960:	d106      	bne.n	800a970 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b082      	sub	sp, #8
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d110      	bne.n	800a9b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d00b      	beq.n	800a9b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d005      	beq.n	800a9b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ae:	69db      	ldr	r3, [r3, #28]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	32ae      	adds	r2, #174	@ 0xae
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d101      	bne.n	800a9e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e01c      	b.n	800aa1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e6:	b2db      	uxtb	r3, r3
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d115      	bne.n	800aa18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	32ae      	adds	r2, #174	@ 0xae
 800a9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00b      	beq.n	800aa18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	32ae      	adds	r2, #174	@ 0xae
 800aa0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	4611      	mov	r1, r2
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	32ae      	adds	r2, #174	@ 0xae
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d101      	bne.n	800aa44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e01c      	b.n	800aa7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b03      	cmp	r3, #3
 800aa4e:	d115      	bne.n	800aa7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	32ae      	adds	r2, #174	@ 0xae
 800aa5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00b      	beq.n	800aa7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32ae      	adds	r2, #174	@ 0xae
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa74:	78fa      	ldrb	r2, [r7, #3]
 800aa76:	4611      	mov	r1, r2
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b083      	sub	sp, #12
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b084      	sub	sp, #16
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00e      	beq.n	800aad8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6852      	ldr	r2, [r2, #4]
 800aac6:	b2d2      	uxtb	r2, r2
 800aac8:	4611      	mov	r1, r2
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3710      	adds	r7, #16
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	460b      	mov	r3, r1
 800aaec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aaee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b085      	sub	sp, #20
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	7812      	ldrb	r2, [r2, #0]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	b29a      	uxth	r2, r3
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab40:	68fb      	ldr	r3, [r7, #12]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b087      	sub	sp, #28
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	3301      	adds	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab6c:	8a3b      	ldrh	r3, [r7, #16]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	b21a      	sxth	r2, r3
 800ab72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	b21b      	sxth	r3, r3
 800ab7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab7c:	89fb      	ldrh	r3, [r7, #14]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
	...

0800ab8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab96:	2300      	movs	r3, #0
 800ab98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aba2:	2b40      	cmp	r3, #64	@ 0x40
 800aba4:	d005      	beq.n	800abb2 <USBD_StdDevReq+0x26>
 800aba6:	2b40      	cmp	r3, #64	@ 0x40
 800aba8:	d857      	bhi.n	800ac5a <USBD_StdDevReq+0xce>
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00f      	beq.n	800abce <USBD_StdDevReq+0x42>
 800abae:	2b20      	cmp	r3, #32
 800abb0:	d153      	bne.n	800ac5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	32ae      	adds	r2, #174	@ 0xae
 800abbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	4798      	blx	r3
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]
      break;
 800abcc:	e04a      	b.n	800ac64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	785b      	ldrb	r3, [r3, #1]
 800abd2:	2b09      	cmp	r3, #9
 800abd4:	d83b      	bhi.n	800ac4e <USBD_StdDevReq+0xc2>
 800abd6:	a201      	add	r2, pc, #4	@ (adr r2, 800abdc <USBD_StdDevReq+0x50>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800ac45 	.word	0x0800ac45
 800abe4:	0800ac4f 	.word	0x0800ac4f
 800abe8:	0800ac3b 	.word	0x0800ac3b
 800abec:	0800ac4f 	.word	0x0800ac4f
 800abf0:	0800ac0f 	.word	0x0800ac0f
 800abf4:	0800ac05 	.word	0x0800ac05
 800abf8:	0800ac4f 	.word	0x0800ac4f
 800abfc:	0800ac27 	.word	0x0800ac27
 800ac00:	0800ac19 	.word	0x0800ac19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fa3c 	bl	800b084 <USBD_GetDescriptor>
          break;
 800ac0c:	e024      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fbcb 	bl	800b3ac <USBD_SetAddress>
          break;
 800ac16:	e01f      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fc0a 	bl	800b434 <USBD_SetConfig>
 800ac20:	4603      	mov	r3, r0
 800ac22:	73fb      	strb	r3, [r7, #15]
          break;
 800ac24:	e018      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fcad 	bl	800b588 <USBD_GetConfig>
          break;
 800ac2e:	e013      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fcde 	bl	800b5f4 <USBD_GetStatus>
          break;
 800ac38:	e00e      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac3a:	6839      	ldr	r1, [r7, #0]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 fd0d 	bl	800b65c <USBD_SetFeature>
          break;
 800ac42:	e009      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 fd31 	bl	800b6ae <USBD_ClrFeature>
          break;
 800ac4c:	e004      	b.n	800ac58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fd88 	bl	800b766 <USBD_CtlError>
          break;
 800ac56:	bf00      	nop
      }
      break;
 800ac58:	e004      	b.n	800ac64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fd82 	bl	800b766 <USBD_CtlError>
      break;
 800ac62:	bf00      	nop
  }

  return ret;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop

0800ac70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac86:	2b40      	cmp	r3, #64	@ 0x40
 800ac88:	d005      	beq.n	800ac96 <USBD_StdItfReq+0x26>
 800ac8a:	2b40      	cmp	r3, #64	@ 0x40
 800ac8c:	d852      	bhi.n	800ad34 <USBD_StdItfReq+0xc4>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <USBD_StdItfReq+0x26>
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	d14e      	bne.n	800ad34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d840      	bhi.n	800ad26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	889b      	ldrh	r3, [r3, #4]
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d836      	bhi.n	800ad1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	889b      	ldrh	r3, [r3, #4]
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff ff13 	bl	800aae2 <USBD_CoreFindIF>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2bff      	cmp	r3, #255	@ 0xff
 800acc4:	d01d      	beq.n	800ad02 <USBD_StdItfReq+0x92>
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d11a      	bne.n	800ad02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800accc:	7bba      	ldrb	r2, [r7, #14]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	32ae      	adds	r2, #174	@ 0xae
 800acd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00f      	beq.n	800acfc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800acdc:	7bba      	ldrb	r2, [r7, #14]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ace4:	7bba      	ldrb	r2, [r7, #14]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	32ae      	adds	r2, #174	@ 0xae
 800acea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acfa:	e004      	b.n	800ad06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800acfc:	2303      	movs	r3, #3
 800acfe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad00:	e001      	b.n	800ad06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ad02:	2303      	movs	r3, #3
 800ad04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	88db      	ldrh	r3, [r3, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d110      	bne.n	800ad30 <USBD_StdItfReq+0xc0>
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10d      	bne.n	800ad30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fdfd 	bl	800b914 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad1a:	e009      	b.n	800ad30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ad1c:	6839      	ldr	r1, [r7, #0]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fd21 	bl	800b766 <USBD_CtlError>
          break;
 800ad24:	e004      	b.n	800ad30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ad26:	6839      	ldr	r1, [r7, #0]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fd1c 	bl	800b766 <USBD_CtlError>
          break;
 800ad2e:	e000      	b.n	800ad32 <USBD_StdItfReq+0xc2>
          break;
 800ad30:	bf00      	nop
      }
      break;
 800ad32:	e004      	b.n	800ad3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fd15 	bl	800b766 <USBD_CtlError>
      break;
 800ad3c:	bf00      	nop
  }

  return ret;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	889b      	ldrh	r3, [r3, #4]
 800ad5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad64:	2b40      	cmp	r3, #64	@ 0x40
 800ad66:	d007      	beq.n	800ad78 <USBD_StdEPReq+0x30>
 800ad68:	2b40      	cmp	r3, #64	@ 0x40
 800ad6a:	f200 817f 	bhi.w	800b06c <USBD_StdEPReq+0x324>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02a      	beq.n	800adc8 <USBD_StdEPReq+0x80>
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	f040 817a 	bne.w	800b06c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad78:	7bbb      	ldrb	r3, [r7, #14]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff febd 	bl	800aafc <USBD_CoreFindEP>
 800ad82:	4603      	mov	r3, r0
 800ad84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad86:	7b7b      	ldrb	r3, [r7, #13]
 800ad88:	2bff      	cmp	r3, #255	@ 0xff
 800ad8a:	f000 8174 	beq.w	800b076 <USBD_StdEPReq+0x32e>
 800ad8e:	7b7b      	ldrb	r3, [r7, #13]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f040 8170 	bne.w	800b076 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad96:	7b7a      	ldrb	r2, [r7, #13]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad9e:	7b7a      	ldrb	r2, [r7, #13]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	32ae      	adds	r2, #174	@ 0xae
 800ada4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 8163 	beq.w	800b076 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800adb0:	7b7a      	ldrb	r2, [r7, #13]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	@ 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	4798      	blx	r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800adc6:	e156      	b.n	800b076 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	785b      	ldrb	r3, [r3, #1]
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d008      	beq.n	800ade2 <USBD_StdEPReq+0x9a>
 800add0:	2b03      	cmp	r3, #3
 800add2:	f300 8145 	bgt.w	800b060 <USBD_StdEPReq+0x318>
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 809b 	beq.w	800af12 <USBD_StdEPReq+0x1ca>
 800addc:	2b01      	cmp	r3, #1
 800adde:	d03c      	beq.n	800ae5a <USBD_StdEPReq+0x112>
 800ade0:	e13e      	b.n	800b060 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b02      	cmp	r3, #2
 800adec:	d002      	beq.n	800adf4 <USBD_StdEPReq+0xac>
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d016      	beq.n	800ae20 <USBD_StdEPReq+0xd8>
 800adf2:	e02c      	b.n	800ae4e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <USBD_StdEPReq+0xce>
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b80      	cmp	r3, #128	@ 0x80
 800adfe:	d00a      	beq.n	800ae16 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f001 f9ef 	bl	800c1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae0a:	2180      	movs	r1, #128	@ 0x80
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f001 f9eb 	bl	800c1e8 <USBD_LL_StallEP>
 800ae12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae14:	e020      	b.n	800ae58 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fca4 	bl	800b766 <USBD_CtlError>
              break;
 800ae1e:	e01b      	b.n	800ae58 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	885b      	ldrh	r3, [r3, #2]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10e      	bne.n	800ae46 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <USBD_StdEPReq+0xfe>
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b80      	cmp	r3, #128	@ 0x80
 800ae32:	d008      	beq.n	800ae46 <USBD_StdEPReq+0xfe>
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	88db      	ldrh	r3, [r3, #6]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d104      	bne.n	800ae46 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 f9d1 	bl	800c1e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fd64 	bl	800b914 <USBD_CtlSendStatus>

              break;
 800ae4c:	e004      	b.n	800ae58 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fc88 	bl	800b766 <USBD_CtlError>
              break;
 800ae56:	bf00      	nop
          }
          break;
 800ae58:	e107      	b.n	800b06a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d002      	beq.n	800ae6c <USBD_StdEPReq+0x124>
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d016      	beq.n	800ae98 <USBD_StdEPReq+0x150>
 800ae6a:	e04b      	b.n	800af04 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <USBD_StdEPReq+0x146>
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b80      	cmp	r3, #128	@ 0x80
 800ae76:	d00a      	beq.n	800ae8e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 f9b3 	bl	800c1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae82:	2180      	movs	r1, #128	@ 0x80
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 f9af 	bl	800c1e8 <USBD_LL_StallEP>
 800ae8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae8c:	e040      	b.n	800af10 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fc68 	bl	800b766 <USBD_CtlError>
              break;
 800ae96:	e03b      	b.n	800af10 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	885b      	ldrh	r3, [r3, #2]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d136      	bne.n	800af0e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d004      	beq.n	800aeb4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aeaa:	7bbb      	ldrb	r3, [r7, #14]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 f9d0 	bl	800c254 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fd2d 	bl	800b914 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff fe1c 	bl	800aafc <USBD_CoreFindEP>
 800aec4:	4603      	mov	r3, r0
 800aec6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aec8:	7b7b      	ldrb	r3, [r7, #13]
 800aeca:	2bff      	cmp	r3, #255	@ 0xff
 800aecc:	d01f      	beq.n	800af0e <USBD_StdEPReq+0x1c6>
 800aece:	7b7b      	ldrb	r3, [r7, #13]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d11c      	bne.n	800af0e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aed4:	7b7a      	ldrb	r2, [r7, #13]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aedc:	7b7a      	ldrb	r2, [r7, #13]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32ae      	adds	r2, #174	@ 0xae
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aeec:	7b7a      	ldrb	r2, [r7, #13]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	32ae      	adds	r2, #174	@ 0xae
 800aef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
 800aefe:	4603      	mov	r3, r0
 800af00:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800af02:	e004      	b.n	800af0e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fc2d 	bl	800b766 <USBD_CtlError>
              break;
 800af0c:	e000      	b.n	800af10 <USBD_StdEPReq+0x1c8>
              break;
 800af0e:	bf00      	nop
          }
          break;
 800af10:	e0ab      	b.n	800b06a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0x1dc>
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d032      	beq.n	800af88 <USBD_StdEPReq+0x240>
 800af22:	e097      	b.n	800b054 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <USBD_StdEPReq+0x1f2>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	@ 0x80
 800af2e:	d004      	beq.n	800af3a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fc17 	bl	800b766 <USBD_CtlError>
                break;
 800af38:	e091      	b.n	800b05e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	da0b      	bge.n	800af5a <USBD_StdEPReq+0x212>
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af48:	4613      	mov	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	4413      	add	r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	3310      	adds	r3, #16
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	4413      	add	r3, r2
 800af56:	3304      	adds	r3, #4
 800af58:	e00b      	b.n	800af72 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af60:	4613      	mov	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	4413      	add	r3, r2
 800af70:	3304      	adds	r3, #4
 800af72:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	2202      	movs	r2, #2
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fc6d 	bl	800b860 <USBD_CtlSendData>
              break;
 800af86:	e06a      	b.n	800b05e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	da11      	bge.n	800afb4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af90:	7bbb      	ldrb	r3, [r7, #14]
 800af92:	f003 020f 	and.w	r2, r3, #15
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	440b      	add	r3, r1
 800afa2:	3324      	adds	r3, #36	@ 0x24
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d117      	bne.n	800afda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afaa:	6839      	ldr	r1, [r7, #0]
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 fbda 	bl	800b766 <USBD_CtlError>
                  break;
 800afb2:	e054      	b.n	800b05e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afb4:	7bbb      	ldrb	r3, [r7, #14]
 800afb6:	f003 020f 	and.w	r2, r3, #15
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	440b      	add	r3, r1
 800afc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afd0:	6839      	ldr	r1, [r7, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fbc7 	bl	800b766 <USBD_CtlError>
                  break;
 800afd8:	e041      	b.n	800b05e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	da0b      	bge.n	800affa <USBD_StdEPReq+0x2b2>
 800afe2:	7bbb      	ldrb	r3, [r7, #14]
 800afe4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afe8:	4613      	mov	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	3310      	adds	r3, #16
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	4413      	add	r3, r2
 800aff6:	3304      	adds	r3, #4
 800aff8:	e00b      	b.n	800b012 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b000:	4613      	mov	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	4413      	add	r3, r2
 800b010:	3304      	adds	r3, #4
 800b012:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b014:	7bbb      	ldrb	r3, [r7, #14]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d002      	beq.n	800b020 <USBD_StdEPReq+0x2d8>
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	2b80      	cmp	r3, #128	@ 0x80
 800b01e:	d103      	bne.n	800b028 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	e00e      	b.n	800b046 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b028:	7bbb      	ldrb	r3, [r7, #14]
 800b02a:	4619      	mov	r1, r3
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 f947 	bl	800c2c0 <USBD_LL_IsStallEP>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d003      	beq.n	800b040 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2201      	movs	r2, #1
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	e002      	b.n	800b046 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2202      	movs	r2, #2
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fc07 	bl	800b860 <USBD_CtlSendData>
              break;
 800b052:	e004      	b.n	800b05e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fb85 	bl	800b766 <USBD_CtlError>
              break;
 800b05c:	bf00      	nop
          }
          break;
 800b05e:	e004      	b.n	800b06a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fb7f 	bl	800b766 <USBD_CtlError>
          break;
 800b068:	bf00      	nop
      }
      break;
 800b06a:	e005      	b.n	800b078 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb79 	bl	800b766 <USBD_CtlError>
      break;
 800b074:	e000      	b.n	800b078 <USBD_StdEPReq+0x330>
      break;
 800b076:	bf00      	nop
  }

  return ret;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
	...

0800b084 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b08e:	2300      	movs	r3, #0
 800b090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	0a1b      	lsrs	r3, r3, #8
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	2b0e      	cmp	r3, #14
 800b0a6:	f200 8152 	bhi.w	800b34e <USBD_GetDescriptor+0x2ca>
 800b0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b0 <USBD_GetDescriptor+0x2c>)
 800b0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b0:	0800b121 	.word	0x0800b121
 800b0b4:	0800b139 	.word	0x0800b139
 800b0b8:	0800b179 	.word	0x0800b179
 800b0bc:	0800b34f 	.word	0x0800b34f
 800b0c0:	0800b34f 	.word	0x0800b34f
 800b0c4:	0800b2ef 	.word	0x0800b2ef
 800b0c8:	0800b31b 	.word	0x0800b31b
 800b0cc:	0800b34f 	.word	0x0800b34f
 800b0d0:	0800b34f 	.word	0x0800b34f
 800b0d4:	0800b34f 	.word	0x0800b34f
 800b0d8:	0800b34f 	.word	0x0800b34f
 800b0dc:	0800b34f 	.word	0x0800b34f
 800b0e0:	0800b34f 	.word	0x0800b34f
 800b0e4:	0800b34f 	.word	0x0800b34f
 800b0e8:	0800b0ed 	.word	0x0800b0ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00b      	beq.n	800b110 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	7c12      	ldrb	r2, [r2, #16]
 800b104:	f107 0108 	add.w	r1, r7, #8
 800b108:	4610      	mov	r0, r2
 800b10a:	4798      	blx	r3
 800b10c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b10e:	e126      	b.n	800b35e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fb27 	bl	800b766 <USBD_CtlError>
        err++;
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	3301      	adds	r3, #1
 800b11c:	72fb      	strb	r3, [r7, #11]
      break;
 800b11e:	e11e      	b.n	800b35e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	7c12      	ldrb	r2, [r2, #16]
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
      break;
 800b136:	e112      	b.n	800b35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7c1b      	ldrb	r3, [r3, #16]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10d      	bne.n	800b15c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b148:	f107 0208 	add.w	r2, r7, #8
 800b14c:	4610      	mov	r0, r2
 800b14e:	4798      	blx	r3
 800b150:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	2202      	movs	r2, #2
 800b158:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b15a:	e100      	b.n	800b35e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b164:	f107 0208 	add.w	r2, r7, #8
 800b168:	4610      	mov	r0, r2
 800b16a:	4798      	blx	r3
 800b16c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	2202      	movs	r2, #2
 800b174:	701a      	strb	r2, [r3, #0]
      break;
 800b176:	e0f2      	b.n	800b35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	885b      	ldrh	r3, [r3, #2]
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	2b05      	cmp	r3, #5
 800b180:	f200 80ac 	bhi.w	800b2dc <USBD_GetDescriptor+0x258>
 800b184:	a201      	add	r2, pc, #4	@ (adr r2, 800b18c <USBD_GetDescriptor+0x108>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1a5 	.word	0x0800b1a5
 800b190:	0800b1d9 	.word	0x0800b1d9
 800b194:	0800b20d 	.word	0x0800b20d
 800b198:	0800b241 	.word	0x0800b241
 800b19c:	0800b275 	.word	0x0800b275
 800b1a0:	0800b2a9 	.word	0x0800b2a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00b      	beq.n	800b1c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	7c12      	ldrb	r2, [r2, #16]
 800b1bc:	f107 0108 	add.w	r1, r7, #8
 800b1c0:	4610      	mov	r0, r2
 800b1c2:	4798      	blx	r3
 800b1c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1c6:	e091      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 facb 	bl	800b766 <USBD_CtlError>
            err++;
 800b1d0:	7afb      	ldrb	r3, [r7, #11]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1d6:	e089      	b.n	800b2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d00b      	beq.n	800b1fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	7c12      	ldrb	r2, [r2, #16]
 800b1f0:	f107 0108 	add.w	r1, r7, #8
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1fa:	e077      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fab1 	bl	800b766 <USBD_CtlError>
            err++;
 800b204:	7afb      	ldrb	r3, [r7, #11]
 800b206:	3301      	adds	r3, #1
 800b208:	72fb      	strb	r3, [r7, #11]
          break;
 800b20a:	e06f      	b.n	800b2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00b      	beq.n	800b230 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	7c12      	ldrb	r2, [r2, #16]
 800b224:	f107 0108 	add.w	r1, r7, #8
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b22e:	e05d      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fa97 	bl	800b766 <USBD_CtlError>
            err++;
 800b238:	7afb      	ldrb	r3, [r7, #11]
 800b23a:	3301      	adds	r3, #1
 800b23c:	72fb      	strb	r3, [r7, #11]
          break;
 800b23e:	e055      	b.n	800b2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00b      	beq.n	800b264 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	7c12      	ldrb	r2, [r2, #16]
 800b258:	f107 0108 	add.w	r1, r7, #8
 800b25c:	4610      	mov	r0, r2
 800b25e:	4798      	blx	r3
 800b260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b262:	e043      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fa7d 	bl	800b766 <USBD_CtlError>
            err++;
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	3301      	adds	r3, #1
 800b270:	72fb      	strb	r3, [r7, #11]
          break;
 800b272:	e03b      	b.n	800b2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	7c12      	ldrb	r2, [r2, #16]
 800b28c:	f107 0108 	add.w	r1, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b296:	e029      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b298:	6839      	ldr	r1, [r7, #0]
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa63 	bl	800b766 <USBD_CtlError>
            err++;
 800b2a0:	7afb      	ldrb	r3, [r7, #11]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2a6:	e021      	b.n	800b2ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00b      	beq.n	800b2cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	7c12      	ldrb	r2, [r2, #16]
 800b2c0:	f107 0108 	add.w	r1, r7, #8
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	4798      	blx	r3
 800b2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ca:	e00f      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2cc:	6839      	ldr	r1, [r7, #0]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 fa49 	bl	800b766 <USBD_CtlError>
            err++;
 800b2d4:	7afb      	ldrb	r3, [r7, #11]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b2da:	e007      	b.n	800b2ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fa41 	bl	800b766 <USBD_CtlError>
          err++;
 800b2e4:	7afb      	ldrb	r3, [r7, #11]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b2ea:	bf00      	nop
      }
      break;
 800b2ec:	e037      	b.n	800b35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7c1b      	ldrb	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d109      	bne.n	800b30a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2fe:	f107 0208 	add.w	r2, r7, #8
 800b302:	4610      	mov	r0, r2
 800b304:	4798      	blx	r3
 800b306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b308:	e029      	b.n	800b35e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b30a:	6839      	ldr	r1, [r7, #0]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa2a 	bl	800b766 <USBD_CtlError>
        err++;
 800b312:	7afb      	ldrb	r3, [r7, #11]
 800b314:	3301      	adds	r3, #1
 800b316:	72fb      	strb	r3, [r7, #11]
      break;
 800b318:	e021      	b.n	800b35e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	7c1b      	ldrb	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10d      	bne.n	800b33e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b32a:	f107 0208 	add.w	r2, r7, #8
 800b32e:	4610      	mov	r0, r2
 800b330:	4798      	blx	r3
 800b332:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	2207      	movs	r2, #7
 800b33a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b33c:	e00f      	b.n	800b35e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 fa10 	bl	800b766 <USBD_CtlError>
        err++;
 800b346:	7afb      	ldrb	r3, [r7, #11]
 800b348:	3301      	adds	r3, #1
 800b34a:	72fb      	strb	r3, [r7, #11]
      break;
 800b34c:	e007      	b.n	800b35e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fa08 	bl	800b766 <USBD_CtlError>
      err++;
 800b356:	7afb      	ldrb	r3, [r7, #11]
 800b358:	3301      	adds	r3, #1
 800b35a:	72fb      	strb	r3, [r7, #11]
      break;
 800b35c:	bf00      	nop
  }

  if (err != 0U)
 800b35e:	7afb      	ldrb	r3, [r7, #11]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d11e      	bne.n	800b3a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	88db      	ldrh	r3, [r3, #6]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d016      	beq.n	800b39a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b36c:	893b      	ldrh	r3, [r7, #8]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00e      	beq.n	800b390 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	88da      	ldrh	r2, [r3, #6]
 800b376:	893b      	ldrh	r3, [r7, #8]
 800b378:	4293      	cmp	r3, r2
 800b37a:	bf28      	it	cs
 800b37c:	4613      	movcs	r3, r2
 800b37e:	b29b      	uxth	r3, r3
 800b380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b382:	893b      	ldrh	r3, [r7, #8]
 800b384:	461a      	mov	r2, r3
 800b386:	68f9      	ldr	r1, [r7, #12]
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f000 fa69 	bl	800b860 <USBD_CtlSendData>
 800b38e:	e009      	b.n	800b3a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b390:	6839      	ldr	r1, [r7, #0]
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f9e7 	bl	800b766 <USBD_CtlError>
 800b398:	e004      	b.n	800b3a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 faba 	bl	800b914 <USBD_CtlSendStatus>
 800b3a0:	e000      	b.n	800b3a4 <USBD_GetDescriptor+0x320>
    return;
 800b3a2:	bf00      	nop
  }
}
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop

0800b3ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	889b      	ldrh	r3, [r3, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d131      	bne.n	800b422 <USBD_SetAddress+0x76>
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	88db      	ldrh	r3, [r3, #6]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d12d      	bne.n	800b422 <USBD_SetAddress+0x76>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	885b      	ldrh	r3, [r3, #2]
 800b3ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3cc:	d829      	bhi.n	800b422 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d104      	bne.n	800b3f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f9bc 	bl	800b766 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ee:	e01d      	b.n	800b42c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7bfa      	ldrb	r2, [r7, #15]
 800b3f4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 ff8b 	bl	800c318 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 fa86 	bl	800b914 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b408:	7bfb      	ldrb	r3, [r7, #15]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d004      	beq.n	800b418 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2202      	movs	r2, #2
 800b412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b416:	e009      	b.n	800b42c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b420:	e004      	b.n	800b42c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f99e 	bl	800b766 <USBD_CtlError>
  }
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	885b      	ldrh	r3, [r3, #2]
 800b446:	b2da      	uxtb	r2, r3
 800b448:	4b4e      	ldr	r3, [pc, #312]	@ (800b584 <USBD_SetConfig+0x150>)
 800b44a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b44c:	4b4d      	ldr	r3, [pc, #308]	@ (800b584 <USBD_SetConfig+0x150>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d905      	bls.n	800b460 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f985 	bl	800b766 <USBD_CtlError>
    return USBD_FAIL;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e08c      	b.n	800b57a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d002      	beq.n	800b472 <USBD_SetConfig+0x3e>
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d029      	beq.n	800b4c4 <USBD_SetConfig+0x90>
 800b470:	e075      	b.n	800b55e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b472:	4b44      	ldr	r3, [pc, #272]	@ (800b584 <USBD_SetConfig+0x150>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d020      	beq.n	800b4bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b47a:	4b42      	ldr	r3, [pc, #264]	@ (800b584 <USBD_SetConfig+0x150>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b484:	4b3f      	ldr	r3, [pc, #252]	@ (800b584 <USBD_SetConfig+0x150>)
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7fe fff1 	bl	800a472 <USBD_SetClassConfig>
 800b490:	4603      	mov	r3, r0
 800b492:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d008      	beq.n	800b4ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 f962 	bl	800b766 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4aa:	e065      	b.n	800b578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fa31 	bl	800b914 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2203      	movs	r2, #3
 800b4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4ba:	e05d      	b.n	800b578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f000 fa29 	bl	800b914 <USBD_CtlSendStatus>
      break;
 800b4c2:	e059      	b.n	800b578 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4c4:	4b2f      	ldr	r3, [pc, #188]	@ (800b584 <USBD_SetConfig+0x150>)
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d112      	bne.n	800b4f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800b584 <USBD_SetConfig+0x150>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4de:	4b29      	ldr	r3, [pc, #164]	@ (800b584 <USBD_SetConfig+0x150>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7fe ffe0 	bl	800a4aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fa12 	bl	800b914 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4f0:	e042      	b.n	800b578 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b4f2:	4b24      	ldr	r3, [pc, #144]	@ (800b584 <USBD_SetConfig+0x150>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d02a      	beq.n	800b556 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	b2db      	uxtb	r3, r3
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7fe ffce 	bl	800a4aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b50e:	4b1d      	ldr	r3, [pc, #116]	@ (800b584 <USBD_SetConfig+0x150>)
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b518:	4b1a      	ldr	r3, [pc, #104]	@ (800b584 <USBD_SetConfig+0x150>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7fe ffa7 	bl	800a472 <USBD_SetClassConfig>
 800b524:	4603      	mov	r3, r0
 800b526:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00f      	beq.n	800b54e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f918 	bl	800b766 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7fe ffb3 	bl	800a4aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b54c:	e014      	b.n	800b578 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f9e0 	bl	800b914 <USBD_CtlSendStatus>
      break;
 800b554:	e010      	b.n	800b578 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f9dc 	bl	800b914 <USBD_CtlSendStatus>
      break;
 800b55c:	e00c      	b.n	800b578 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f900 	bl	800b766 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b566:	4b07      	ldr	r3, [pc, #28]	@ (800b584 <USBD_SetConfig+0x150>)
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	4619      	mov	r1, r3
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7fe ff9c 	bl	800a4aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b572:	2303      	movs	r3, #3
 800b574:	73fb      	strb	r3, [r7, #15]
      break;
 800b576:	bf00      	nop
  }

  return ret;
 800b578:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20000670 	.word	0x20000670

0800b588 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	88db      	ldrh	r3, [r3, #6]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d004      	beq.n	800b5a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 f8e2 	bl	800b766 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5a2:	e023      	b.n	800b5ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	dc02      	bgt.n	800b5b6 <USBD_GetConfig+0x2e>
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	dc03      	bgt.n	800b5bc <USBD_GetConfig+0x34>
 800b5b4:	e015      	b.n	800b5e2 <USBD_GetConfig+0x5a>
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d00b      	beq.n	800b5d2 <USBD_GetConfig+0x4a>
 800b5ba:	e012      	b.n	800b5e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f948 	bl	800b860 <USBD_CtlSendData>
        break;
 800b5d0:	e00c      	b.n	800b5ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	4619      	mov	r1, r3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f940 	bl	800b860 <USBD_CtlSendData>
        break;
 800b5e0:	e004      	b.n	800b5ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f8be 	bl	800b766 <USBD_CtlError>
        break;
 800b5ea:	bf00      	nop
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b604:	b2db      	uxtb	r3, r3
 800b606:	3b01      	subs	r3, #1
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d81e      	bhi.n	800b64a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	88db      	ldrh	r3, [r3, #6]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d004      	beq.n	800b61e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f8a5 	bl	800b766 <USBD_CtlError>
        break;
 800b61c:	e01a      	b.n	800b654 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d005      	beq.n	800b63a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f043 0202 	orr.w	r2, r3, #2
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	330c      	adds	r3, #12
 800b63e:	2202      	movs	r2, #2
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f90c 	bl	800b860 <USBD_CtlSendData>
      break;
 800b648:	e004      	b.n	800b654 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b64a:	6839      	ldr	r1, [r7, #0]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f88a 	bl	800b766 <USBD_CtlError>
      break;
 800b652:	bf00      	nop
  }
}
 800b654:	bf00      	nop
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	885b      	ldrh	r3, [r3, #2]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d107      	bne.n	800b67e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f94c 	bl	800b914 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b67c:	e013      	b.n	800b6a6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	885b      	ldrh	r3, [r3, #2]
 800b682:	2b02      	cmp	r3, #2
 800b684:	d10b      	bne.n	800b69e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	889b      	ldrh	r3, [r3, #4]
 800b68a:	0a1b      	lsrs	r3, r3, #8
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f93c 	bl	800b914 <USBD_CtlSendStatus>
}
 800b69c:	e003      	b.n	800b6a6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f860 	bl	800b766 <USBD_CtlError>
}
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d80b      	bhi.n	800b6de <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	885b      	ldrh	r3, [r3, #2]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d10c      	bne.n	800b6e8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f91c 	bl	800b914 <USBD_CtlSendStatus>
      }
      break;
 800b6dc:	e004      	b.n	800b6e8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f840 	bl	800b766 <USBD_CtlError>
      break;
 800b6e6:	e000      	b.n	800b6ea <USBD_ClrFeature+0x3c>
      break;
 800b6e8:	bf00      	nop
  }
}
 800b6ea:	bf00      	nop
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	781a      	ldrb	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3301      	adds	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	781a      	ldrb	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f7ff fa16 	bl	800ab4e <SWAPBYTE>
 800b722:	4603      	mov	r3, r0
 800b724:	461a      	mov	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	3301      	adds	r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	3301      	adds	r3, #1
 800b734:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff fa09 	bl	800ab4e <SWAPBYTE>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f7ff f9fc 	bl	800ab4e <SWAPBYTE>
 800b756:	4603      	mov	r3, r0
 800b758:	461a      	mov	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	80da      	strh	r2, [r3, #6]
}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b082      	sub	sp, #8
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b770:	2180      	movs	r1, #128	@ 0x80
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fd38 	bl	800c1e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b778:	2100      	movs	r1, #0
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fd34 	bl	800c1e8 <USBD_LL_StallEP>
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b086      	sub	sp, #24
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b794:	2300      	movs	r3, #0
 800b796:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d042      	beq.n	800b824 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b7a2:	6938      	ldr	r0, [r7, #16]
 800b7a4:	f000 f842 	bl	800b82c <USBD_GetLen>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	005b      	lsls	r3, r3, #1
 800b7ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b2:	d808      	bhi.n	800b7c6 <USBD_GetString+0x3e>
 800b7b4:	6938      	ldr	r0, [r7, #16]
 800b7b6:	f000 f839 	bl	800b82c <USBD_GetLen>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	3301      	adds	r3, #1
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	e001      	b.n	800b7ca <USBD_GetString+0x42>
 800b7c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7ce:	7dfb      	ldrb	r3, [r7, #23]
 800b7d0:	68ba      	ldr	r2, [r7, #8]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7da:	7dfb      	ldrb	r3, [r7, #23]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b7f0:	e013      	b.n	800b81a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	7812      	ldrb	r2, [r2, #0]
 800b7fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3301      	adds	r3, #1
 800b802:	613b      	str	r3, [r7, #16]
    idx++;
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	3301      	adds	r3, #1
 800b808:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b80a:	7dfb      	ldrb	r3, [r7, #23]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	4413      	add	r3, r2
 800b810:	2200      	movs	r2, #0
 800b812:	701a      	strb	r2, [r3, #0]
    idx++;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	3301      	adds	r3, #1
 800b818:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1e7      	bne.n	800b7f2 <USBD_GetString+0x6a>
 800b822:	e000      	b.n	800b826 <USBD_GetString+0x9e>
    return;
 800b824:	bf00      	nop
  }
}
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b83c:	e005      	b.n	800b84a <USBD_GetLen+0x1e>
  {
    len++;
 800b83e:	7bfb      	ldrb	r3, [r7, #15]
 800b840:	3301      	adds	r3, #1
 800b842:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	3301      	adds	r3, #1
 800b848:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1f5      	bne.n	800b83e <USBD_GetLen+0x12>
  }

  return len;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2202      	movs	r2, #2
 800b870:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68ba      	ldr	r2, [r7, #8]
 800b884:	2100      	movs	r1, #0
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 fd7c 	bl	800c384 <USBD_LL_Transmit>

  return USBD_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f000 fd6b 	bl	800c384 <USBD_LL_Transmit>

  return USBD_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3710      	adds	r7, #16
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f000 fd86 	bl	800c3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	60f8      	str	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	2100      	movs	r1, #0
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f000 fd75 	bl	800c3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3710      	adds	r7, #16
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2204      	movs	r2, #4
 800b920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b924:	2300      	movs	r3, #0
 800b926:	2200      	movs	r2, #0
 800b928:	2100      	movs	r1, #0
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fd2a 	bl	800c384 <USBD_LL_Transmit>

  return USBD_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b082      	sub	sp, #8
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2205      	movs	r2, #5
 800b946:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b94a:	2300      	movs	r3, #0
 800b94c:	2200      	movs	r2, #0
 800b94e:	2100      	movs	r1, #0
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fd4f 	bl	800c3f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b964:	2200      	movs	r2, #0
 800b966:	4912      	ldr	r1, [pc, #72]	@ (800b9b0 <MX_USB_DEVICE_Init+0x50>)
 800b968:	4812      	ldr	r0, [pc, #72]	@ (800b9b4 <MX_USB_DEVICE_Init+0x54>)
 800b96a:	f7fe fd05 	bl	800a378 <USBD_Init>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b974:	f7f6 fa9a 	bl	8001eac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800b978:	490f      	ldr	r1, [pc, #60]	@ (800b9b8 <MX_USB_DEVICE_Init+0x58>)
 800b97a:	480e      	ldr	r0, [pc, #56]	@ (800b9b4 <MX_USB_DEVICE_Init+0x54>)
 800b97c:	f7fe fd2c 	bl	800a3d8 <USBD_RegisterClass>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b986:	f7f6 fa91 	bl	8001eac <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800b98a:	490c      	ldr	r1, [pc, #48]	@ (800b9bc <MX_USB_DEVICE_Init+0x5c>)
 800b98c:	4809      	ldr	r0, [pc, #36]	@ (800b9b4 <MX_USB_DEVICE_Init+0x54>)
 800b98e:	f7fe fca7 	bl	800a2e0 <USBD_AUDIO_RegisterInterface>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b998:	f7f6 fa88 	bl	8001eac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b99c:	4805      	ldr	r0, [pc, #20]	@ (800b9b4 <MX_USB_DEVICE_Init+0x54>)
 800b99e:	f7fe fd51 	bl	800a444 <USBD_Start>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b9a8:	f7f6 fa80 	bl	8001eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9ac:	bf00      	nop
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	200000e4 	.word	0x200000e4
 800b9b4:	20000674 	.word	0x20000674
 800b9b8:	20000014 	.word	0x20000014
 800b9bc:	200000c8 	.word	0x200000c8

0800b9c0 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800b9cc:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800b9e2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d001      	beq.n	800ba08 <AUDIO_AudioCmd_FS+0x18>
 800ba04:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800ba06:	e000      	b.n	800ba0a <AUDIO_AudioCmd_FS+0x1a>
    break;
 800ba08:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800ba0a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b083      	sub	sp, #12
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800ba22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800ba3a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	4613      	mov	r3, r2
 800ba54:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  /*audiobuf = (int16_t*) pbuf;
  available = 1;
  return (USBD_OK);*/
  int i;
  audiobuf = (int16_t*) pbuf;
 800ba56:	4a17      	ldr	r2, [pc, #92]	@ (800bab4 <AUDIO_PeriodicTC_FS+0x6c>)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6013      	str	r3, [r2, #0]
  for (i = 0; i < 24; i++)
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	617b      	str	r3, [r7, #20]
 800ba60:	e015      	b.n	800ba8e <AUDIO_PeriodicTC_FS+0x46>
  {
	  queue[queue_idx][i]=audiobuf[i];
 800ba62:	4b14      	ldr	r3, [pc, #80]	@ (800bab4 <AUDIO_PeriodicTC_FS+0x6c>)
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	4413      	add	r3, r2
 800ba6c:	4a12      	ldr	r2, [pc, #72]	@ (800bab8 <AUDIO_PeriodicTC_FS+0x70>)
 800ba6e:	7812      	ldrb	r2, [r2, #0]
 800ba70:	f9b3 0000 	ldrsh.w	r0, [r3]
 800ba74:	4911      	ldr	r1, [pc, #68]	@ (800babc <AUDIO_PeriodicTC_FS+0x74>)
 800ba76:	4613      	mov	r3, r2
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	4413      	add	r3, r2
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	4413      	add	r3, r2
 800ba82:	4602      	mov	r2, r0
 800ba84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (i = 0; i < 24; i++)
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	2b17      	cmp	r3, #23
 800ba92:	dde6      	ble.n	800ba62 <AUDIO_PeriodicTC_FS+0x1a>
  }
  queue_idx++;
 800ba94:	4b08      	ldr	r3, [pc, #32]	@ (800bab8 <AUDIO_PeriodicTC_FS+0x70>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	4b06      	ldr	r3, [pc, #24]	@ (800bab8 <AUDIO_PeriodicTC_FS+0x70>)
 800ba9e:	701a      	strb	r2, [r3, #0]
  available = 1;
 800baa0:	4b07      	ldr	r3, [pc, #28]	@ (800bac0 <AUDIO_PeriodicTC_FS+0x78>)
 800baa2:	2201      	movs	r2, #1
 800baa4:	701a      	strb	r2, [r3, #0]


  /* USER CODE END 5 */
}
 800baa6:	bf00      	nop
 800baa8:	4618      	mov	r0, r3
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	20000950 	.word	0x20000950
 800bab8:	20003954 	.word	0x20003954
 800babc:	20000954 	.word	0x20000954
 800bac0:	20003955 	.word	0x20003955

0800bac4 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bac8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800baca:	4618      	mov	r0, r3
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	4603      	mov	r3, r0
 800badc:	6039      	str	r1, [r7, #0]
 800bade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2212      	movs	r2, #18
 800bae4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bae6:	4b03      	ldr	r3, [pc, #12]	@ (800baf4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bae8:	4618      	mov	r0, r3
 800baea:	370c      	adds	r7, #12
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	20000104 	.word	0x20000104

0800baf8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	4603      	mov	r3, r0
 800bb00:	6039      	str	r1, [r7, #0]
 800bb02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2204      	movs	r2, #4
 800bb08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb0a:	4b03      	ldr	r3, [pc, #12]	@ (800bb18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr
 800bb18:	20000124 	.word	0x20000124

0800bb1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	6039      	str	r1, [r7, #0]
 800bb26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb28:	79fb      	ldrb	r3, [r7, #7]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d105      	bne.n	800bb3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	4907      	ldr	r1, [pc, #28]	@ (800bb50 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb32:	4808      	ldr	r0, [pc, #32]	@ (800bb54 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb34:	f7ff fe28 	bl	800b788 <USBD_GetString>
 800bb38:	e004      	b.n	800bb44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	4904      	ldr	r1, [pc, #16]	@ (800bb50 <USBD_FS_ProductStrDescriptor+0x34>)
 800bb3e:	4805      	ldr	r0, [pc, #20]	@ (800bb54 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb40:	f7ff fe22 	bl	800b788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb44:	4b02      	ldr	r3, [pc, #8]	@ (800bb50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20003958 	.word	0x20003958
 800bb54:	0800f220 	.word	0x0800f220

0800bb58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	6039      	str	r1, [r7, #0]
 800bb62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb64:	683a      	ldr	r2, [r7, #0]
 800bb66:	4904      	ldr	r1, [pc, #16]	@ (800bb78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb68:	4804      	ldr	r0, [pc, #16]	@ (800bb7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb6a:	f7ff fe0d 	bl	800b788 <USBD_GetString>
  return USBD_StrDesc;
 800bb6e:	4b02      	ldr	r3, [pc, #8]	@ (800bb78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3708      	adds	r7, #8
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20003958 	.word	0x20003958
 800bb7c:	0800f234 	.word	0x0800f234

0800bb80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	4603      	mov	r3, r0
 800bb88:	6039      	str	r1, [r7, #0]
 800bb8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	221a      	movs	r2, #26
 800bb90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb92:	f000 f855 	bl	800bc40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb96:	4b02      	ldr	r3, [pc, #8]	@ (800bba0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20000128 	.word	0x20000128

0800bba4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	6039      	str	r1, [r7, #0]
 800bbae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbb0:	79fb      	ldrb	r3, [r7, #7]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d105      	bne.n	800bbc2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	4907      	ldr	r1, [pc, #28]	@ (800bbd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbba:	4808      	ldr	r0, [pc, #32]	@ (800bbdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbbc:	f7ff fde4 	bl	800b788 <USBD_GetString>
 800bbc0:	e004      	b.n	800bbcc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	4904      	ldr	r1, [pc, #16]	@ (800bbd8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbc6:	4805      	ldr	r0, [pc, #20]	@ (800bbdc <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbc8:	f7ff fdde 	bl	800b788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbcc:	4b02      	ldr	r3, [pc, #8]	@ (800bbd8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	20003958 	.word	0x20003958
 800bbdc:	0800f248 	.word	0x0800f248

0800bbe0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbec:	79fb      	ldrb	r3, [r7, #7]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4907      	ldr	r1, [pc, #28]	@ (800bc14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbf6:	4808      	ldr	r0, [pc, #32]	@ (800bc18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbf8:	f7ff fdc6 	bl	800b788 <USBD_GetString>
 800bbfc:	e004      	b.n	800bc08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4904      	ldr	r1, [pc, #16]	@ (800bc14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc02:	4805      	ldr	r0, [pc, #20]	@ (800bc18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc04:	f7ff fdc0 	bl	800b788 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc08:	4b02      	ldr	r3, [pc, #8]	@ (800bc14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20003958 	.word	0x20003958
 800bc18:	0800f258 	.word	0x0800f258

0800bc1c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	6039      	str	r1, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	220c      	movs	r2, #12
 800bc2c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bc2e:	4b03      	ldr	r3, [pc, #12]	@ (800bc3c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	20000118 	.word	0x20000118

0800bc40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc46:	4b0f      	ldr	r3, [pc, #60]	@ (800bc84 <Get_SerialNum+0x44>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc4c:	4b0e      	ldr	r3, [pc, #56]	@ (800bc88 <Get_SerialNum+0x48>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc52:	4b0e      	ldr	r3, [pc, #56]	@ (800bc8c <Get_SerialNum+0x4c>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc66:	2208      	movs	r2, #8
 800bc68:	4909      	ldr	r1, [pc, #36]	@ (800bc90 <Get_SerialNum+0x50>)
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 f814 	bl	800bc98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc70:	2204      	movs	r2, #4
 800bc72:	4908      	ldr	r1, [pc, #32]	@ (800bc94 <Get_SerialNum+0x54>)
 800bc74:	68b8      	ldr	r0, [r7, #8]
 800bc76:	f000 f80f 	bl	800bc98 <IntToUnicode>
  }
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	1fff7590 	.word	0x1fff7590
 800bc88:	1fff7594 	.word	0x1fff7594
 800bc8c:	1fff7598 	.word	0x1fff7598
 800bc90:	2000012a 	.word	0x2000012a
 800bc94:	2000013a 	.word	0x2000013a

0800bc98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	4613      	mov	r3, r2
 800bca4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	75fb      	strb	r3, [r7, #23]
 800bcae:	e027      	b.n	800bd00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	0f1b      	lsrs	r3, r3, #28
 800bcb4:	2b09      	cmp	r3, #9
 800bcb6:	d80b      	bhi.n	800bcd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	0f1b      	lsrs	r3, r3, #28
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	440b      	add	r3, r1
 800bcc8:	3230      	adds	r2, #48	@ 0x30
 800bcca:	b2d2      	uxtb	r2, r2
 800bccc:	701a      	strb	r2, [r3, #0]
 800bcce:	e00a      	b.n	800bce6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	0f1b      	lsrs	r3, r3, #28
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	4619      	mov	r1, r3
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	440b      	add	r3, r1
 800bce0:	3237      	adds	r2, #55	@ 0x37
 800bce2:	b2d2      	uxtb	r2, r2
 800bce4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	011b      	lsls	r3, r3, #4
 800bcea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	75fb      	strb	r3, [r7, #23]
 800bd00:	7dfa      	ldrb	r2, [r7, #23]
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d3d3      	bcc.n	800bcb0 <IntToUnicode+0x18>
  }
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop
 800bd0c:	371c      	adds	r7, #28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr
	...

0800bd18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	@ 0x28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd20:	f107 0314 	add.w	r3, r7, #20
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	605a      	str	r2, [r3, #4]
 800bd2a:	609a      	str	r2, [r3, #8]
 800bd2c:	60da      	str	r2, [r3, #12]
 800bd2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd38:	d15c      	bne.n	800bdf4 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd3a:	4b30      	ldr	r3, [pc, #192]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3e:	4a2f      	ldr	r2, [pc, #188]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bd40:	f043 0301 	orr.w	r3, r3, #1
 800bd44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd46:	4b2d      	ldr	r3, [pc, #180]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bd48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd4a:	f003 0301 	and.w	r3, r3, #1
 800bd4e:	613b      	str	r3, [r7, #16]
 800bd50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800bd52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800bd60:	f107 0314 	add.w	r3, r7, #20
 800bd64:	4619      	mov	r1, r3
 800bd66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bd6a:	f7f8 fc7b 	bl	8004664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800bd6e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bd72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd74:	2302      	movs	r3, #2
 800bd76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd80:	230a      	movs	r3, #10
 800bd82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd84:	f107 0314 	add.w	r3, r7, #20
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bd8e:	f7f8 fc69 	bl	8004664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd92:	4b1a      	ldr	r3, [pc, #104]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bd94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd96:	4a19      	ldr	r2, [pc, #100]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bd98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bd9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd9e:	4b17      	ldr	r3, [pc, #92]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bda0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bda2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdaa:	4b14      	ldr	r3, [pc, #80]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bdac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d114      	bne.n	800bde0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdb6:	4b11      	ldr	r3, [pc, #68]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bdb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdba:	4a10      	ldr	r2, [pc, #64]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bdbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdc2:	4b0e      	ldr	r3, [pc, #56]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bdc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdca:	60bb      	str	r3, [r7, #8]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800bdce:	f7fa f96b 	bl	80060a8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bdd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdd6:	4a09      	ldr	r2, [pc, #36]	@ (800bdfc <HAL_PCD_MspInit+0xe4>)
 800bdd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bddc:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdde:	e001      	b.n	800bde4 <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800bde0:	f7fa f962 	bl	80060a8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bde4:	2200      	movs	r2, #0
 800bde6:	2100      	movs	r1, #0
 800bde8:	2043      	movs	r0, #67	@ 0x43
 800bdea:	f7f8 f8d0 	bl	8003f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bdee:	2043      	movs	r0, #67	@ 0x43
 800bdf0:	f7f8 f8e9 	bl	8003fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bdf4:	bf00      	nop
 800bdf6:	3728      	adds	r7, #40	@ 0x28
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	40021000 	.word	0x40021000

0800be00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be14:	4619      	mov	r1, r3
 800be16:	4610      	mov	r0, r2
 800be18:	f7fe fb61 	bl	800a4de <USBD_LL_SetupStage>
}
 800be1c:	bf00      	nop
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	4613      	mov	r3, r2
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	4413      	add	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	440b      	add	r3, r1
 800be44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	78fb      	ldrb	r3, [r7, #3]
 800be4c:	4619      	mov	r1, r3
 800be4e:	f7fe fb9b 	bl	800a588 <USBD_LL_DataOutStage>
}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b082      	sub	sp, #8
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	460b      	mov	r3, r1
 800be64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800be6c:	78fa      	ldrb	r2, [r7, #3]
 800be6e:	6879      	ldr	r1, [r7, #4]
 800be70:	4613      	mov	r3, r2
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	440b      	add	r3, r1
 800be7a:	3320      	adds	r3, #32
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	78fb      	ldrb	r3, [r7, #3]
 800be80:	4619      	mov	r1, r3
 800be82:	f7fe fc34 	bl	800a6ee <USBD_LL_DataInStage>
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7fe fd6e 	bl	800a97e <USBD_LL_SOF>
}
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b084      	sub	sp, #16
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800beb2:	2301      	movs	r3, #1
 800beb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	79db      	ldrb	r3, [r3, #7]
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d001      	beq.n	800bec2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bebe:	f7f5 fff5 	bl	8001eac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bec8:	7bfa      	ldrb	r2, [r7, #15]
 800beca:	4611      	mov	r1, r2
 800becc:	4618      	mov	r0, r3
 800bece:	f7fe fd12 	bl	800a8f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fe fcba 	bl	800a852 <USBD_LL_Reset>
}
 800bede:	bf00      	nop
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
	...

0800bee8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	6812      	ldr	r2, [r2, #0]
 800befe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf02:	f043 0301 	orr.w	r3, r3, #1
 800bf06:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fd01 	bl	800a916 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	7adb      	ldrb	r3, [r3, #11]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d005      	beq.n	800bf28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf1c:	4b04      	ldr	r3, [pc, #16]	@ (800bf30 <HAL_PCD_SuspendCallback+0x48>)
 800bf1e:	691b      	ldr	r3, [r3, #16]
 800bf20:	4a03      	ldr	r2, [pc, #12]	@ (800bf30 <HAL_PCD_SuspendCallback+0x48>)
 800bf22:	f043 0306 	orr.w	r3, r3, #6
 800bf26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	e000ed00 	.word	0xe000ed00

0800bf34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	6812      	ldr	r2, [r2, #0]
 800bf4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bf4e:	f023 0301 	bic.w	r3, r3, #1
 800bf52:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7adb      	ldrb	r3, [r3, #11]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d007      	beq.n	800bf6c <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf5c:	4b08      	ldr	r3, [pc, #32]	@ (800bf80 <HAL_PCD_ResumeCallback+0x4c>)
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	4a07      	ldr	r2, [pc, #28]	@ (800bf80 <HAL_PCD_ResumeCallback+0x4c>)
 800bf62:	f023 0306 	bic.w	r3, r3, #6
 800bf66:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf68:	f000 faf6 	bl	800c558 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fceb 	bl	800a94e <USBD_LL_Resume>
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	e000ed00 	.word	0xe000ed00

0800bf84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf96:	78fa      	ldrb	r2, [r7, #3]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fd41 	bl	800aa22 <USBD_LL_IsoOUTIncomplete>
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfba:	78fa      	ldrb	r2, [r7, #3]
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fe fcfd 	bl	800a9be <USBD_LL_IsoINIncomplete>
}
 800bfc4:	bf00      	nop
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7fe fd53 	bl	800aa86 <USBD_LL_DevConnected>
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe fd50 	bl	800aa9c <USBD_LL_DevDisconnected>
}
 800bffc:	bf00      	nop
 800bffe:	3708      	adds	r7, #8
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d13c      	bne.n	800c08e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c014:	4a20      	ldr	r2, [pc, #128]	@ (800c098 <USBD_LL_Init+0x94>)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a1e      	ldr	r2, [pc, #120]	@ (800c098 <USBD_LL_Init+0x94>)
 800c020:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c024:	4b1c      	ldr	r3, [pc, #112]	@ (800c098 <USBD_LL_Init+0x94>)
 800c026:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c02a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c02c:	4b1a      	ldr	r3, [pc, #104]	@ (800c098 <USBD_LL_Init+0x94>)
 800c02e:	2206      	movs	r2, #6
 800c030:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c032:	4b19      	ldr	r3, [pc, #100]	@ (800c098 <USBD_LL_Init+0x94>)
 800c034:	2202      	movs	r2, #2
 800c036:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c038:	4b17      	ldr	r3, [pc, #92]	@ (800c098 <USBD_LL_Init+0x94>)
 800c03a:	2202      	movs	r2, #2
 800c03c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c03e:	4b16      	ldr	r3, [pc, #88]	@ (800c098 <USBD_LL_Init+0x94>)
 800c040:	2200      	movs	r2, #0
 800c042:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c044:	4b14      	ldr	r3, [pc, #80]	@ (800c098 <USBD_LL_Init+0x94>)
 800c046:	2200      	movs	r2, #0
 800c048:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c04a:	4b13      	ldr	r3, [pc, #76]	@ (800c098 <USBD_LL_Init+0x94>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800c050:	4b11      	ldr	r3, [pc, #68]	@ (800c098 <USBD_LL_Init+0x94>)
 800c052:	2200      	movs	r2, #0
 800c054:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c056:	4b10      	ldr	r3, [pc, #64]	@ (800c098 <USBD_LL_Init+0x94>)
 800c058:	2200      	movs	r2, #0
 800c05a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c05c:	4b0e      	ldr	r3, [pc, #56]	@ (800c098 <USBD_LL_Init+0x94>)
 800c05e:	2200      	movs	r2, #0
 800c060:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c062:	480d      	ldr	r0, [pc, #52]	@ (800c098 <USBD_LL_Init+0x94>)
 800c064:	f7f8 fe15 	bl	8004c92 <HAL_PCD_Init>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c06e:	f7f5 ff1d 	bl	8001eac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c072:	2180      	movs	r1, #128	@ 0x80
 800c074:	4808      	ldr	r0, [pc, #32]	@ (800c098 <USBD_LL_Init+0x94>)
 800c076:	f7f9 ff6e 	bl	8005f56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c07a:	2240      	movs	r2, #64	@ 0x40
 800c07c:	2100      	movs	r1, #0
 800c07e:	4806      	ldr	r0, [pc, #24]	@ (800c098 <USBD_LL_Init+0x94>)
 800c080:	f7f9 ff22 	bl	8005ec8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c084:	2280      	movs	r2, #128	@ 0x80
 800c086:	2101      	movs	r1, #1
 800c088:	4803      	ldr	r0, [pc, #12]	@ (800c098 <USBD_LL_Init+0x94>)
 800c08a:	f7f9 ff1d 	bl	8005ec8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	20003b58 	.word	0x20003b58

0800c09c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f8 fefc 	bl	8004eb0 <HAL_PCD_Start>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d816      	bhi.n	800c0f0 <USBD_LL_Start+0x54>
 800c0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0c8 <USBD_LL_Start+0x2c>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0d9 	.word	0x0800c0d9
 800c0cc:	0800c0df 	.word	0x0800c0df
 800c0d0:	0800c0e5 	.word	0x0800c0e5
 800c0d4:	0800c0eb 	.word	0x0800c0eb
    case HAL_OK :
      usb_status = USBD_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]
    break;
 800c0dc:	e00b      	b.n	800c0f6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e2:	e008      	b.n	800c0f6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0e8:	e005      	b.n	800c0f6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ee:	e002      	b.n	800c0f6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0f4:	bf00      	nop
  }
  return usb_status;
 800c0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	4608      	mov	r0, r1
 800c10a:	4611      	mov	r1, r2
 800c10c:	461a      	mov	r2, r3
 800c10e:	4603      	mov	r3, r0
 800c110:	70fb      	strb	r3, [r7, #3]
 800c112:	460b      	mov	r3, r1
 800c114:	70bb      	strb	r3, [r7, #2]
 800c116:	4613      	mov	r3, r2
 800c118:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c128:	78bb      	ldrb	r3, [r7, #2]
 800c12a:	883a      	ldrh	r2, [r7, #0]
 800c12c:	78f9      	ldrb	r1, [r7, #3]
 800c12e:	f7f9 fba8 	bl	8005882 <HAL_PCD_EP_Open>
 800c132:	4603      	mov	r3, r0
 800c134:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d817      	bhi.n	800c16c <USBD_LL_OpenEP+0x6c>
 800c13c:	a201      	add	r2, pc, #4	@ (adr r2, 800c144 <USBD_LL_OpenEP+0x44>)
 800c13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c142:	bf00      	nop
 800c144:	0800c155 	.word	0x0800c155
 800c148:	0800c15b 	.word	0x0800c15b
 800c14c:	0800c161 	.word	0x0800c161
 800c150:	0800c167 	.word	0x0800c167
    case HAL_OK :
      usb_status = USBD_OK;
 800c154:	2300      	movs	r3, #0
 800c156:	73fb      	strb	r3, [r7, #15]
    break;
 800c158:	e00b      	b.n	800c172 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c15a:	2303      	movs	r3, #3
 800c15c:	73fb      	strb	r3, [r7, #15]
    break;
 800c15e:	e008      	b.n	800c172 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
    break;
 800c164:	e005      	b.n	800c172 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c166:	2303      	movs	r3, #3
 800c168:	73fb      	strb	r3, [r7, #15]
    break;
 800c16a:	e002      	b.n	800c172 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c16c:	2303      	movs	r3, #3
 800c16e:	73fb      	strb	r3, [r7, #15]
    break;
 800c170:	bf00      	nop
  }
  return usb_status;
 800c172:	7bfb      	ldrb	r3, [r7, #15]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c196:	78fa      	ldrb	r2, [r7, #3]
 800c198:	4611      	mov	r1, r2
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7f9 fbdb 	bl	8005956 <HAL_PCD_EP_Close>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b03      	cmp	r3, #3
 800c1a8:	d816      	bhi.n	800c1d8 <USBD_LL_CloseEP+0x5c>
 800c1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b0 <USBD_LL_CloseEP+0x34>)
 800c1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b0:	0800c1c1 	.word	0x0800c1c1
 800c1b4:	0800c1c7 	.word	0x0800c1c7
 800c1b8:	0800c1cd 	.word	0x0800c1cd
 800c1bc:	0800c1d3 	.word	0x0800c1d3
    case HAL_OK :
      usb_status = USBD_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1c4:	e00b      	b.n	800c1de <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ca:	e008      	b.n	800c1de <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d0:	e005      	b.n	800c1de <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d6:	e002      	b.n	800c1de <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	73fb      	strb	r3, [r7, #15]
    break;
 800c1dc:	bf00      	nop
  }
  return usb_status;
 800c1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c202:	78fa      	ldrb	r2, [r7, #3]
 800c204:	4611      	mov	r1, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7f9 fc6a 	bl	8005ae0 <HAL_PCD_EP_SetStall>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c210:	7bbb      	ldrb	r3, [r7, #14]
 800c212:	2b03      	cmp	r3, #3
 800c214:	d816      	bhi.n	800c244 <USBD_LL_StallEP+0x5c>
 800c216:	a201      	add	r2, pc, #4	@ (adr r2, 800c21c <USBD_LL_StallEP+0x34>)
 800c218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c21c:	0800c22d 	.word	0x0800c22d
 800c220:	0800c233 	.word	0x0800c233
 800c224:	0800c239 	.word	0x0800c239
 800c228:	0800c23f 	.word	0x0800c23f
    case HAL_OK :
      usb_status = USBD_OK;
 800c22c:	2300      	movs	r3, #0
 800c22e:	73fb      	strb	r3, [r7, #15]
    break;
 800c230:	e00b      	b.n	800c24a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c232:	2303      	movs	r3, #3
 800c234:	73fb      	strb	r3, [r7, #15]
    break;
 800c236:	e008      	b.n	800c24a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c238:	2301      	movs	r3, #1
 800c23a:	73fb      	strb	r3, [r7, #15]
    break;
 800c23c:	e005      	b.n	800c24a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c23e:	2303      	movs	r3, #3
 800c240:	73fb      	strb	r3, [r7, #15]
    break;
 800c242:	e002      	b.n	800c24a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	73fb      	strb	r3, [r7, #15]
    break;
 800c248:	bf00      	nop
  }
  return usb_status;
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c26e:	78fa      	ldrb	r2, [r7, #3]
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f9 fc96 	bl	8005ba4 <HAL_PCD_EP_ClrStall>
 800c278:	4603      	mov	r3, r0
 800c27a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d816      	bhi.n	800c2b0 <USBD_LL_ClearStallEP+0x5c>
 800c282:	a201      	add	r2, pc, #4	@ (adr r2, 800c288 <USBD_LL_ClearStallEP+0x34>)
 800c284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c288:	0800c299 	.word	0x0800c299
 800c28c:	0800c29f 	.word	0x0800c29f
 800c290:	0800c2a5 	.word	0x0800c2a5
 800c294:	0800c2ab 	.word	0x0800c2ab
    case HAL_OK :
      usb_status = USBD_OK;
 800c298:	2300      	movs	r3, #0
 800c29a:	73fb      	strb	r3, [r7, #15]
    break;
 800c29c:	e00b      	b.n	800c2b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c29e:	2303      	movs	r3, #3
 800c2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a2:	e008      	b.n	800c2b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2a8:	e005      	b.n	800c2b6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ae:	e002      	b.n	800c2b6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2b4:	bf00      	nop
  }
  return usb_status;
 800c2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	da0b      	bge.n	800c2f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2e2:	68f9      	ldr	r1, [r7, #12]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	4413      	add	r3, r2
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	440b      	add	r3, r1
 800c2ee:	3316      	adds	r3, #22
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	e00b      	b.n	800c30c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2fa:	68f9      	ldr	r1, [r7, #12]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	440b      	add	r3, r1
 800c306:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c30a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c332:	78fa      	ldrb	r2, [r7, #3]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7f9 fa7f 	bl	800583a <HAL_PCD_SetAddress>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	2b03      	cmp	r3, #3
 800c344:	d816      	bhi.n	800c374 <USBD_LL_SetUSBAddress+0x5c>
 800c346:	a201      	add	r2, pc, #4	@ (adr r2, 800c34c <USBD_LL_SetUSBAddress+0x34>)
 800c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34c:	0800c35d 	.word	0x0800c35d
 800c350:	0800c363 	.word	0x0800c363
 800c354:	0800c369 	.word	0x0800c369
 800c358:	0800c36f 	.word	0x0800c36f
    case HAL_OK :
      usb_status = USBD_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73fb      	strb	r3, [r7, #15]
    break;
 800c360:	e00b      	b.n	800c37a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c362:	2303      	movs	r3, #3
 800c364:	73fb      	strb	r3, [r7, #15]
    break;
 800c366:	e008      	b.n	800c37a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c368:	2301      	movs	r3, #1
 800c36a:	73fb      	strb	r3, [r7, #15]
    break;
 800c36c:	e005      	b.n	800c37a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c36e:	2303      	movs	r3, #3
 800c370:	73fb      	strb	r3, [r7, #15]
    break;
 800c372:	e002      	b.n	800c37a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c374:	2303      	movs	r3, #3
 800c376:	73fb      	strb	r3, [r7, #15]
    break;
 800c378:	bf00      	nop
  }
  return usb_status;
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	607a      	str	r2, [r7, #4]
 800c38e:	603b      	str	r3, [r7, #0]
 800c390:	460b      	mov	r3, r1
 800c392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3a2:	7af9      	ldrb	r1, [r7, #11]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	f7f9 fb69 	bl	8005a7e <HAL_PCD_EP_Transmit>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c3b0:	7dbb      	ldrb	r3, [r7, #22]
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d816      	bhi.n	800c3e4 <USBD_LL_Transmit+0x60>
 800c3b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c3bc <USBD_LL_Transmit+0x38>)
 800c3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3bc:	0800c3cd 	.word	0x0800c3cd
 800c3c0:	0800c3d3 	.word	0x0800c3d3
 800c3c4:	0800c3d9 	.word	0x0800c3d9
 800c3c8:	0800c3df 	.word	0x0800c3df
    case HAL_OK :
      usb_status = USBD_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	75fb      	strb	r3, [r7, #23]
    break;
 800c3d0:	e00b      	b.n	800c3ea <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	75fb      	strb	r3, [r7, #23]
    break;
 800c3d6:	e008      	b.n	800c3ea <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	75fb      	strb	r3, [r7, #23]
    break;
 800c3dc:	e005      	b.n	800c3ea <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	75fb      	strb	r3, [r7, #23]
    break;
 800c3e2:	e002      	b.n	800c3ea <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	75fb      	strb	r3, [r7, #23]
    break;
 800c3e8:	bf00      	nop
  }
  return usb_status;
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	460b      	mov	r3, r1
 800c402:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c404:	2300      	movs	r3, #0
 800c406:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c412:	7af9      	ldrb	r1, [r7, #11]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	f7f9 fae7 	bl	80059ea <HAL_PCD_EP_Receive>
 800c41c:	4603      	mov	r3, r0
 800c41e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c420:	7dbb      	ldrb	r3, [r7, #22]
 800c422:	2b03      	cmp	r3, #3
 800c424:	d816      	bhi.n	800c454 <USBD_LL_PrepareReceive+0x60>
 800c426:	a201      	add	r2, pc, #4	@ (adr r2, 800c42c <USBD_LL_PrepareReceive+0x38>)
 800c428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42c:	0800c43d 	.word	0x0800c43d
 800c430:	0800c443 	.word	0x0800c443
 800c434:	0800c449 	.word	0x0800c449
 800c438:	0800c44f 	.word	0x0800c44f
    case HAL_OK :
      usb_status = USBD_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	75fb      	strb	r3, [r7, #23]
    break;
 800c440:	e00b      	b.n	800c45a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c442:	2303      	movs	r3, #3
 800c444:	75fb      	strb	r3, [r7, #23]
    break;
 800c446:	e008      	b.n	800c45a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c448:	2301      	movs	r3, #1
 800c44a:	75fb      	strb	r3, [r7, #23]
    break;
 800c44c:	e005      	b.n	800c45a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c44e:	2303      	movs	r3, #3
 800c450:	75fb      	strb	r3, [r7, #23]
    break;
 800c452:	e002      	b.n	800c45a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c454:	2303      	movs	r3, #3
 800c456:	75fb      	strb	r3, [r7, #23]
    break;
 800c458:	bf00      	nop
  }
  return usb_status;
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	4611      	mov	r1, r2
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f9 fae7 	bl	8005a4e <HAL_PCD_EP_GetRxCount>
 800c480:	4603      	mov	r3, r0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <HAL_PCDEx_LPM_Callback+0x18>
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d01f      	beq.n	800c4e2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c4a2:	e03b      	b.n	800c51c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	7adb      	ldrb	r3, [r3, #11]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d007      	beq.n	800c4bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c4ac:	f000 f854 	bl	800c558 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c524 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c524 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4b6:	f023 0306 	bic.w	r3, r3, #6
 800c4ba:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	6812      	ldr	r2, [r2, #0]
 800c4ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c4ce:	f023 0301 	bic.w	r3, r3, #1
 800c4d2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fe fa37 	bl	800a94e <USBD_LL_Resume>
    break;
 800c4e0:	e01c      	b.n	800c51c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	6812      	ldr	r2, [r2, #0]
 800c4f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c4f4:	f043 0301 	orr.w	r3, r3, #1
 800c4f8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe fa08 	bl	800a916 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7adb      	ldrb	r3, [r3, #11]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d005      	beq.n	800c51a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c50e:	4b05      	ldr	r3, [pc, #20]	@ (800c524 <HAL_PCDEx_LPM_Callback+0x98>)
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	4a04      	ldr	r2, [pc, #16]	@ (800c524 <HAL_PCDEx_LPM_Callback+0x98>)
 800c514:	f043 0306 	orr.w	r3, r3, #6
 800c518:	6113      	str	r3, [r2, #16]
    break;
 800c51a:	bf00      	nop
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed00 	.word	0xe000ed00

0800c528 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 800c530:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <USBD_static_malloc+0x18>)
}
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	2000403c 	.word	0x2000403c

0800c544 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]

}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c55c:	f7f4 ffe8 	bl	8001530 <SystemClock_Config>
}
 800c560:	bf00      	nop
 800c562:	bd80      	pop	{r7, pc}

0800c564 <__cvt>:
 800c564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c568:	ec57 6b10 	vmov	r6, r7, d0
 800c56c:	2f00      	cmp	r7, #0
 800c56e:	460c      	mov	r4, r1
 800c570:	4619      	mov	r1, r3
 800c572:	463b      	mov	r3, r7
 800c574:	bfbb      	ittet	lt
 800c576:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c57a:	461f      	movlt	r7, r3
 800c57c:	2300      	movge	r3, #0
 800c57e:	232d      	movlt	r3, #45	@ 0x2d
 800c580:	700b      	strb	r3, [r1, #0]
 800c582:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c584:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c588:	4691      	mov	r9, r2
 800c58a:	f023 0820 	bic.w	r8, r3, #32
 800c58e:	bfbc      	itt	lt
 800c590:	4632      	movlt	r2, r6
 800c592:	4616      	movlt	r6, r2
 800c594:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c598:	d005      	beq.n	800c5a6 <__cvt+0x42>
 800c59a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c59e:	d100      	bne.n	800c5a2 <__cvt+0x3e>
 800c5a0:	3401      	adds	r4, #1
 800c5a2:	2102      	movs	r1, #2
 800c5a4:	e000      	b.n	800c5a8 <__cvt+0x44>
 800c5a6:	2103      	movs	r1, #3
 800c5a8:	ab03      	add	r3, sp, #12
 800c5aa:	9301      	str	r3, [sp, #4]
 800c5ac:	ab02      	add	r3, sp, #8
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	ec47 6b10 	vmov	d0, r6, r7
 800c5b4:	4653      	mov	r3, sl
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	f000 fe5a 	bl	800d270 <_dtoa_r>
 800c5bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c5c0:	4605      	mov	r5, r0
 800c5c2:	d119      	bne.n	800c5f8 <__cvt+0x94>
 800c5c4:	f019 0f01 	tst.w	r9, #1
 800c5c8:	d00e      	beq.n	800c5e8 <__cvt+0x84>
 800c5ca:	eb00 0904 	add.w	r9, r0, r4
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	4639      	mov	r1, r7
 800c5d6:	f7f4 fa77 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5da:	b108      	cbz	r0, 800c5e0 <__cvt+0x7c>
 800c5dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c5e0:	2230      	movs	r2, #48	@ 0x30
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	454b      	cmp	r3, r9
 800c5e6:	d31e      	bcc.n	800c626 <__cvt+0xc2>
 800c5e8:	9b03      	ldr	r3, [sp, #12]
 800c5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5ec:	1b5b      	subs	r3, r3, r5
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	6013      	str	r3, [r2, #0]
 800c5f2:	b004      	add	sp, #16
 800c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c5fc:	eb00 0904 	add.w	r9, r0, r4
 800c600:	d1e5      	bne.n	800c5ce <__cvt+0x6a>
 800c602:	7803      	ldrb	r3, [r0, #0]
 800c604:	2b30      	cmp	r3, #48	@ 0x30
 800c606:	d10a      	bne.n	800c61e <__cvt+0xba>
 800c608:	2200      	movs	r2, #0
 800c60a:	2300      	movs	r3, #0
 800c60c:	4630      	mov	r0, r6
 800c60e:	4639      	mov	r1, r7
 800c610:	f7f4 fa5a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c614:	b918      	cbnz	r0, 800c61e <__cvt+0xba>
 800c616:	f1c4 0401 	rsb	r4, r4, #1
 800c61a:	f8ca 4000 	str.w	r4, [sl]
 800c61e:	f8da 3000 	ldr.w	r3, [sl]
 800c622:	4499      	add	r9, r3
 800c624:	e7d3      	b.n	800c5ce <__cvt+0x6a>
 800c626:	1c59      	adds	r1, r3, #1
 800c628:	9103      	str	r1, [sp, #12]
 800c62a:	701a      	strb	r2, [r3, #0]
 800c62c:	e7d9      	b.n	800c5e2 <__cvt+0x7e>

0800c62e <__exponent>:
 800c62e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c630:	2900      	cmp	r1, #0
 800c632:	bfba      	itte	lt
 800c634:	4249      	neglt	r1, r1
 800c636:	232d      	movlt	r3, #45	@ 0x2d
 800c638:	232b      	movge	r3, #43	@ 0x2b
 800c63a:	2909      	cmp	r1, #9
 800c63c:	7002      	strb	r2, [r0, #0]
 800c63e:	7043      	strb	r3, [r0, #1]
 800c640:	dd29      	ble.n	800c696 <__exponent+0x68>
 800c642:	f10d 0307 	add.w	r3, sp, #7
 800c646:	461d      	mov	r5, r3
 800c648:	270a      	movs	r7, #10
 800c64a:	461a      	mov	r2, r3
 800c64c:	fbb1 f6f7 	udiv	r6, r1, r7
 800c650:	fb07 1416 	mls	r4, r7, r6, r1
 800c654:	3430      	adds	r4, #48	@ 0x30
 800c656:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c65a:	460c      	mov	r4, r1
 800c65c:	2c63      	cmp	r4, #99	@ 0x63
 800c65e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c662:	4631      	mov	r1, r6
 800c664:	dcf1      	bgt.n	800c64a <__exponent+0x1c>
 800c666:	3130      	adds	r1, #48	@ 0x30
 800c668:	1e94      	subs	r4, r2, #2
 800c66a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c66e:	1c41      	adds	r1, r0, #1
 800c670:	4623      	mov	r3, r4
 800c672:	42ab      	cmp	r3, r5
 800c674:	d30a      	bcc.n	800c68c <__exponent+0x5e>
 800c676:	f10d 0309 	add.w	r3, sp, #9
 800c67a:	1a9b      	subs	r3, r3, r2
 800c67c:	42ac      	cmp	r4, r5
 800c67e:	bf88      	it	hi
 800c680:	2300      	movhi	r3, #0
 800c682:	3302      	adds	r3, #2
 800c684:	4403      	add	r3, r0
 800c686:	1a18      	subs	r0, r3, r0
 800c688:	b003      	add	sp, #12
 800c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c68c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c690:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c694:	e7ed      	b.n	800c672 <__exponent+0x44>
 800c696:	2330      	movs	r3, #48	@ 0x30
 800c698:	3130      	adds	r1, #48	@ 0x30
 800c69a:	7083      	strb	r3, [r0, #2]
 800c69c:	70c1      	strb	r1, [r0, #3]
 800c69e:	1d03      	adds	r3, r0, #4
 800c6a0:	e7f1      	b.n	800c686 <__exponent+0x58>
	...

0800c6a4 <_printf_float>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	b08d      	sub	sp, #52	@ 0x34
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c6b0:	4616      	mov	r6, r2
 800c6b2:	461f      	mov	r7, r3
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	f000 fcdb 	bl	800d070 <_localeconv_r>
 800c6ba:	6803      	ldr	r3, [r0, #0]
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f3 fdd6 	bl	8000270 <strlen>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6cc:	9005      	str	r0, [sp, #20]
 800c6ce:	3307      	adds	r3, #7
 800c6d0:	f023 0307 	bic.w	r3, r3, #7
 800c6d4:	f103 0208 	add.w	r2, r3, #8
 800c6d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6dc:	f8d4 b000 	ldr.w	fp, [r4]
 800c6e0:	f8c8 2000 	str.w	r2, [r8]
 800c6e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c6ec:	9307      	str	r3, [sp, #28]
 800c6ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c6f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6fa:	4b9c      	ldr	r3, [pc, #624]	@ (800c96c <_printf_float+0x2c8>)
 800c6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c700:	f7f4 fa14 	bl	8000b2c <__aeabi_dcmpun>
 800c704:	bb70      	cbnz	r0, 800c764 <_printf_float+0xc0>
 800c706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c70a:	4b98      	ldr	r3, [pc, #608]	@ (800c96c <_printf_float+0x2c8>)
 800c70c:	f04f 32ff 	mov.w	r2, #4294967295
 800c710:	f7f4 f9ee 	bl	8000af0 <__aeabi_dcmple>
 800c714:	bb30      	cbnz	r0, 800c764 <_printf_float+0xc0>
 800c716:	2200      	movs	r2, #0
 800c718:	2300      	movs	r3, #0
 800c71a:	4640      	mov	r0, r8
 800c71c:	4649      	mov	r1, r9
 800c71e:	f7f4 f9dd 	bl	8000adc <__aeabi_dcmplt>
 800c722:	b110      	cbz	r0, 800c72a <_printf_float+0x86>
 800c724:	232d      	movs	r3, #45	@ 0x2d
 800c726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c72a:	4a91      	ldr	r2, [pc, #580]	@ (800c970 <_printf_float+0x2cc>)
 800c72c:	4b91      	ldr	r3, [pc, #580]	@ (800c974 <_printf_float+0x2d0>)
 800c72e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c732:	bf94      	ite	ls
 800c734:	4690      	movls	r8, r2
 800c736:	4698      	movhi	r8, r3
 800c738:	2303      	movs	r3, #3
 800c73a:	6123      	str	r3, [r4, #16]
 800c73c:	f02b 0304 	bic.w	r3, fp, #4
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	f04f 0900 	mov.w	r9, #0
 800c746:	9700      	str	r7, [sp, #0]
 800c748:	4633      	mov	r3, r6
 800c74a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c74c:	4621      	mov	r1, r4
 800c74e:	4628      	mov	r0, r5
 800c750:	f000 f9d2 	bl	800caf8 <_printf_common>
 800c754:	3001      	adds	r0, #1
 800c756:	f040 808d 	bne.w	800c874 <_printf_float+0x1d0>
 800c75a:	f04f 30ff 	mov.w	r0, #4294967295
 800c75e:	b00d      	add	sp, #52	@ 0x34
 800c760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c764:	4642      	mov	r2, r8
 800c766:	464b      	mov	r3, r9
 800c768:	4640      	mov	r0, r8
 800c76a:	4649      	mov	r1, r9
 800c76c:	f7f4 f9de 	bl	8000b2c <__aeabi_dcmpun>
 800c770:	b140      	cbz	r0, 800c784 <_printf_float+0xe0>
 800c772:	464b      	mov	r3, r9
 800c774:	2b00      	cmp	r3, #0
 800c776:	bfbc      	itt	lt
 800c778:	232d      	movlt	r3, #45	@ 0x2d
 800c77a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c77e:	4a7e      	ldr	r2, [pc, #504]	@ (800c978 <_printf_float+0x2d4>)
 800c780:	4b7e      	ldr	r3, [pc, #504]	@ (800c97c <_printf_float+0x2d8>)
 800c782:	e7d4      	b.n	800c72e <_printf_float+0x8a>
 800c784:	6863      	ldr	r3, [r4, #4]
 800c786:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c78a:	9206      	str	r2, [sp, #24]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	d13b      	bne.n	800c808 <_printf_float+0x164>
 800c790:	2306      	movs	r3, #6
 800c792:	6063      	str	r3, [r4, #4]
 800c794:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c798:	2300      	movs	r3, #0
 800c79a:	6022      	str	r2, [r4, #0]
 800c79c:	9303      	str	r3, [sp, #12]
 800c79e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c7a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c7a4:	ab09      	add	r3, sp, #36	@ 0x24
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	6861      	ldr	r1, [r4, #4]
 800c7aa:	ec49 8b10 	vmov	d0, r8, r9
 800c7ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	f7ff fed6 	bl	800c564 <__cvt>
 800c7b8:	9b06      	ldr	r3, [sp, #24]
 800c7ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7bc:	2b47      	cmp	r3, #71	@ 0x47
 800c7be:	4680      	mov	r8, r0
 800c7c0:	d129      	bne.n	800c816 <_printf_float+0x172>
 800c7c2:	1cc8      	adds	r0, r1, #3
 800c7c4:	db02      	blt.n	800c7cc <_printf_float+0x128>
 800c7c6:	6863      	ldr	r3, [r4, #4]
 800c7c8:	4299      	cmp	r1, r3
 800c7ca:	dd41      	ble.n	800c850 <_printf_float+0x1ac>
 800c7cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7d0:	fa5f fa8a 	uxtb.w	sl, sl
 800c7d4:	3901      	subs	r1, #1
 800c7d6:	4652      	mov	r2, sl
 800c7d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c7dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800c7de:	f7ff ff26 	bl	800c62e <__exponent>
 800c7e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7e4:	1813      	adds	r3, r2, r0
 800c7e6:	2a01      	cmp	r2, #1
 800c7e8:	4681      	mov	r9, r0
 800c7ea:	6123      	str	r3, [r4, #16]
 800c7ec:	dc02      	bgt.n	800c7f4 <_printf_float+0x150>
 800c7ee:	6822      	ldr	r2, [r4, #0]
 800c7f0:	07d2      	lsls	r2, r2, #31
 800c7f2:	d501      	bpl.n	800c7f8 <_printf_float+0x154>
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	6123      	str	r3, [r4, #16]
 800c7f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d0a2      	beq.n	800c746 <_printf_float+0xa2>
 800c800:	232d      	movs	r3, #45	@ 0x2d
 800c802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c806:	e79e      	b.n	800c746 <_printf_float+0xa2>
 800c808:	9a06      	ldr	r2, [sp, #24]
 800c80a:	2a47      	cmp	r2, #71	@ 0x47
 800c80c:	d1c2      	bne.n	800c794 <_printf_float+0xf0>
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1c0      	bne.n	800c794 <_printf_float+0xf0>
 800c812:	2301      	movs	r3, #1
 800c814:	e7bd      	b.n	800c792 <_printf_float+0xee>
 800c816:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c81a:	d9db      	bls.n	800c7d4 <_printf_float+0x130>
 800c81c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c820:	d118      	bne.n	800c854 <_printf_float+0x1b0>
 800c822:	2900      	cmp	r1, #0
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	dd0b      	ble.n	800c840 <_printf_float+0x19c>
 800c828:	6121      	str	r1, [r4, #16]
 800c82a:	b913      	cbnz	r3, 800c832 <_printf_float+0x18e>
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	07d0      	lsls	r0, r2, #31
 800c830:	d502      	bpl.n	800c838 <_printf_float+0x194>
 800c832:	3301      	adds	r3, #1
 800c834:	440b      	add	r3, r1
 800c836:	6123      	str	r3, [r4, #16]
 800c838:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c83a:	f04f 0900 	mov.w	r9, #0
 800c83e:	e7db      	b.n	800c7f8 <_printf_float+0x154>
 800c840:	b913      	cbnz	r3, 800c848 <_printf_float+0x1a4>
 800c842:	6822      	ldr	r2, [r4, #0]
 800c844:	07d2      	lsls	r2, r2, #31
 800c846:	d501      	bpl.n	800c84c <_printf_float+0x1a8>
 800c848:	3302      	adds	r3, #2
 800c84a:	e7f4      	b.n	800c836 <_printf_float+0x192>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e7f2      	b.n	800c836 <_printf_float+0x192>
 800c850:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c854:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c856:	4299      	cmp	r1, r3
 800c858:	db05      	blt.n	800c866 <_printf_float+0x1c2>
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	6121      	str	r1, [r4, #16]
 800c85e:	07d8      	lsls	r0, r3, #31
 800c860:	d5ea      	bpl.n	800c838 <_printf_float+0x194>
 800c862:	1c4b      	adds	r3, r1, #1
 800c864:	e7e7      	b.n	800c836 <_printf_float+0x192>
 800c866:	2900      	cmp	r1, #0
 800c868:	bfd4      	ite	le
 800c86a:	f1c1 0202 	rsble	r2, r1, #2
 800c86e:	2201      	movgt	r2, #1
 800c870:	4413      	add	r3, r2
 800c872:	e7e0      	b.n	800c836 <_printf_float+0x192>
 800c874:	6823      	ldr	r3, [r4, #0]
 800c876:	055a      	lsls	r2, r3, #21
 800c878:	d407      	bmi.n	800c88a <_printf_float+0x1e6>
 800c87a:	6923      	ldr	r3, [r4, #16]
 800c87c:	4642      	mov	r2, r8
 800c87e:	4631      	mov	r1, r6
 800c880:	4628      	mov	r0, r5
 800c882:	47b8      	blx	r7
 800c884:	3001      	adds	r0, #1
 800c886:	d12b      	bne.n	800c8e0 <_printf_float+0x23c>
 800c888:	e767      	b.n	800c75a <_printf_float+0xb6>
 800c88a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c88e:	f240 80dd 	bls.w	800ca4c <_printf_float+0x3a8>
 800c892:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c896:	2200      	movs	r2, #0
 800c898:	2300      	movs	r3, #0
 800c89a:	f7f4 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d033      	beq.n	800c90a <_printf_float+0x266>
 800c8a2:	4a37      	ldr	r2, [pc, #220]	@ (800c980 <_printf_float+0x2dc>)
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	47b8      	blx	r7
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	f43f af54 	beq.w	800c75a <_printf_float+0xb6>
 800c8b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c8b6:	4543      	cmp	r3, r8
 800c8b8:	db02      	blt.n	800c8c0 <_printf_float+0x21c>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	07d8      	lsls	r0, r3, #31
 800c8be:	d50f      	bpl.n	800c8e0 <_printf_float+0x23c>
 800c8c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c4:	4631      	mov	r1, r6
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	47b8      	blx	r7
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f43f af45 	beq.w	800c75a <_printf_float+0xb6>
 800c8d0:	f04f 0900 	mov.w	r9, #0
 800c8d4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8d8:	f104 0a1a 	add.w	sl, r4, #26
 800c8dc:	45c8      	cmp	r8, r9
 800c8de:	dc09      	bgt.n	800c8f4 <_printf_float+0x250>
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	079b      	lsls	r3, r3, #30
 800c8e4:	f100 8103 	bmi.w	800caee <_printf_float+0x44a>
 800c8e8:	68e0      	ldr	r0, [r4, #12]
 800c8ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8ec:	4298      	cmp	r0, r3
 800c8ee:	bfb8      	it	lt
 800c8f0:	4618      	movlt	r0, r3
 800c8f2:	e734      	b.n	800c75e <_printf_float+0xba>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	47b8      	blx	r7
 800c8fe:	3001      	adds	r0, #1
 800c900:	f43f af2b 	beq.w	800c75a <_printf_float+0xb6>
 800c904:	f109 0901 	add.w	r9, r9, #1
 800c908:	e7e8      	b.n	800c8dc <_printf_float+0x238>
 800c90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	dc39      	bgt.n	800c984 <_printf_float+0x2e0>
 800c910:	4a1b      	ldr	r2, [pc, #108]	@ (800c980 <_printf_float+0x2dc>)
 800c912:	2301      	movs	r3, #1
 800c914:	4631      	mov	r1, r6
 800c916:	4628      	mov	r0, r5
 800c918:	47b8      	blx	r7
 800c91a:	3001      	adds	r0, #1
 800c91c:	f43f af1d 	beq.w	800c75a <_printf_float+0xb6>
 800c920:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c924:	ea59 0303 	orrs.w	r3, r9, r3
 800c928:	d102      	bne.n	800c930 <_printf_float+0x28c>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	07d9      	lsls	r1, r3, #31
 800c92e:	d5d7      	bpl.n	800c8e0 <_printf_float+0x23c>
 800c930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c934:	4631      	mov	r1, r6
 800c936:	4628      	mov	r0, r5
 800c938:	47b8      	blx	r7
 800c93a:	3001      	adds	r0, #1
 800c93c:	f43f af0d 	beq.w	800c75a <_printf_float+0xb6>
 800c940:	f04f 0a00 	mov.w	sl, #0
 800c944:	f104 0b1a 	add.w	fp, r4, #26
 800c948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c94a:	425b      	negs	r3, r3
 800c94c:	4553      	cmp	r3, sl
 800c94e:	dc01      	bgt.n	800c954 <_printf_float+0x2b0>
 800c950:	464b      	mov	r3, r9
 800c952:	e793      	b.n	800c87c <_printf_float+0x1d8>
 800c954:	2301      	movs	r3, #1
 800c956:	465a      	mov	r2, fp
 800c958:	4631      	mov	r1, r6
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b8      	blx	r7
 800c95e:	3001      	adds	r0, #1
 800c960:	f43f aefb 	beq.w	800c75a <_printf_float+0xb6>
 800c964:	f10a 0a01 	add.w	sl, sl, #1
 800c968:	e7ee      	b.n	800c948 <_printf_float+0x2a4>
 800c96a:	bf00      	nop
 800c96c:	7fefffff 	.word	0x7fefffff
 800c970:	0800f2b0 	.word	0x0800f2b0
 800c974:	0800f2b4 	.word	0x0800f2b4
 800c978:	0800f2b8 	.word	0x0800f2b8
 800c97c:	0800f2bc 	.word	0x0800f2bc
 800c980:	0800f2c0 	.word	0x0800f2c0
 800c984:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c986:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c98a:	4553      	cmp	r3, sl
 800c98c:	bfa8      	it	ge
 800c98e:	4653      	movge	r3, sl
 800c990:	2b00      	cmp	r3, #0
 800c992:	4699      	mov	r9, r3
 800c994:	dc36      	bgt.n	800ca04 <_printf_float+0x360>
 800c996:	f04f 0b00 	mov.w	fp, #0
 800c99a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c99e:	f104 021a 	add.w	r2, r4, #26
 800c9a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9a4:	9306      	str	r3, [sp, #24]
 800c9a6:	eba3 0309 	sub.w	r3, r3, r9
 800c9aa:	455b      	cmp	r3, fp
 800c9ac:	dc31      	bgt.n	800ca12 <_printf_float+0x36e>
 800c9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9b0:	459a      	cmp	sl, r3
 800c9b2:	dc3a      	bgt.n	800ca2a <_printf_float+0x386>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	07da      	lsls	r2, r3, #31
 800c9b8:	d437      	bmi.n	800ca2a <_printf_float+0x386>
 800c9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9bc:	ebaa 0903 	sub.w	r9, sl, r3
 800c9c0:	9b06      	ldr	r3, [sp, #24]
 800c9c2:	ebaa 0303 	sub.w	r3, sl, r3
 800c9c6:	4599      	cmp	r9, r3
 800c9c8:	bfa8      	it	ge
 800c9ca:	4699      	movge	r9, r3
 800c9cc:	f1b9 0f00 	cmp.w	r9, #0
 800c9d0:	dc33      	bgt.n	800ca3a <_printf_float+0x396>
 800c9d2:	f04f 0800 	mov.w	r8, #0
 800c9d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c9da:	f104 0b1a 	add.w	fp, r4, #26
 800c9de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e0:	ebaa 0303 	sub.w	r3, sl, r3
 800c9e4:	eba3 0309 	sub.w	r3, r3, r9
 800c9e8:	4543      	cmp	r3, r8
 800c9ea:	f77f af79 	ble.w	800c8e0 <_printf_float+0x23c>
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	465a      	mov	r2, fp
 800c9f2:	4631      	mov	r1, r6
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	47b8      	blx	r7
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f43f aeae 	beq.w	800c75a <_printf_float+0xb6>
 800c9fe:	f108 0801 	add.w	r8, r8, #1
 800ca02:	e7ec      	b.n	800c9de <_printf_float+0x33a>
 800ca04:	4642      	mov	r2, r8
 800ca06:	4631      	mov	r1, r6
 800ca08:	4628      	mov	r0, r5
 800ca0a:	47b8      	blx	r7
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d1c2      	bne.n	800c996 <_printf_float+0x2f2>
 800ca10:	e6a3      	b.n	800c75a <_printf_float+0xb6>
 800ca12:	2301      	movs	r3, #1
 800ca14:	4631      	mov	r1, r6
 800ca16:	4628      	mov	r0, r5
 800ca18:	9206      	str	r2, [sp, #24]
 800ca1a:	47b8      	blx	r7
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	f43f ae9c 	beq.w	800c75a <_printf_float+0xb6>
 800ca22:	9a06      	ldr	r2, [sp, #24]
 800ca24:	f10b 0b01 	add.w	fp, fp, #1
 800ca28:	e7bb      	b.n	800c9a2 <_printf_float+0x2fe>
 800ca2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4628      	mov	r0, r5
 800ca32:	47b8      	blx	r7
 800ca34:	3001      	adds	r0, #1
 800ca36:	d1c0      	bne.n	800c9ba <_printf_float+0x316>
 800ca38:	e68f      	b.n	800c75a <_printf_float+0xb6>
 800ca3a:	9a06      	ldr	r2, [sp, #24]
 800ca3c:	464b      	mov	r3, r9
 800ca3e:	4442      	add	r2, r8
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	47b8      	blx	r7
 800ca46:	3001      	adds	r0, #1
 800ca48:	d1c3      	bne.n	800c9d2 <_printf_float+0x32e>
 800ca4a:	e686      	b.n	800c75a <_printf_float+0xb6>
 800ca4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca50:	f1ba 0f01 	cmp.w	sl, #1
 800ca54:	dc01      	bgt.n	800ca5a <_printf_float+0x3b6>
 800ca56:	07db      	lsls	r3, r3, #31
 800ca58:	d536      	bpl.n	800cac8 <_printf_float+0x424>
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	4642      	mov	r2, r8
 800ca5e:	4631      	mov	r1, r6
 800ca60:	4628      	mov	r0, r5
 800ca62:	47b8      	blx	r7
 800ca64:	3001      	adds	r0, #1
 800ca66:	f43f ae78 	beq.w	800c75a <_printf_float+0xb6>
 800ca6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca6e:	4631      	mov	r1, r6
 800ca70:	4628      	mov	r0, r5
 800ca72:	47b8      	blx	r7
 800ca74:	3001      	adds	r0, #1
 800ca76:	f43f ae70 	beq.w	800c75a <_printf_float+0xb6>
 800ca7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ca7e:	2200      	movs	r2, #0
 800ca80:	2300      	movs	r3, #0
 800ca82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ca86:	f7f4 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca8a:	b9c0      	cbnz	r0, 800cabe <_printf_float+0x41a>
 800ca8c:	4653      	mov	r3, sl
 800ca8e:	f108 0201 	add.w	r2, r8, #1
 800ca92:	4631      	mov	r1, r6
 800ca94:	4628      	mov	r0, r5
 800ca96:	47b8      	blx	r7
 800ca98:	3001      	adds	r0, #1
 800ca9a:	d10c      	bne.n	800cab6 <_printf_float+0x412>
 800ca9c:	e65d      	b.n	800c75a <_printf_float+0xb6>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	465a      	mov	r2, fp
 800caa2:	4631      	mov	r1, r6
 800caa4:	4628      	mov	r0, r5
 800caa6:	47b8      	blx	r7
 800caa8:	3001      	adds	r0, #1
 800caaa:	f43f ae56 	beq.w	800c75a <_printf_float+0xb6>
 800caae:	f108 0801 	add.w	r8, r8, #1
 800cab2:	45d0      	cmp	r8, sl
 800cab4:	dbf3      	blt.n	800ca9e <_printf_float+0x3fa>
 800cab6:	464b      	mov	r3, r9
 800cab8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cabc:	e6df      	b.n	800c87e <_printf_float+0x1da>
 800cabe:	f04f 0800 	mov.w	r8, #0
 800cac2:	f104 0b1a 	add.w	fp, r4, #26
 800cac6:	e7f4      	b.n	800cab2 <_printf_float+0x40e>
 800cac8:	2301      	movs	r3, #1
 800caca:	4642      	mov	r2, r8
 800cacc:	e7e1      	b.n	800ca92 <_printf_float+0x3ee>
 800cace:	2301      	movs	r3, #1
 800cad0:	464a      	mov	r2, r9
 800cad2:	4631      	mov	r1, r6
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b8      	blx	r7
 800cad8:	3001      	adds	r0, #1
 800cada:	f43f ae3e 	beq.w	800c75a <_printf_float+0xb6>
 800cade:	f108 0801 	add.w	r8, r8, #1
 800cae2:	68e3      	ldr	r3, [r4, #12]
 800cae4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cae6:	1a5b      	subs	r3, r3, r1
 800cae8:	4543      	cmp	r3, r8
 800caea:	dcf0      	bgt.n	800cace <_printf_float+0x42a>
 800caec:	e6fc      	b.n	800c8e8 <_printf_float+0x244>
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	f104 0919 	add.w	r9, r4, #25
 800caf6:	e7f4      	b.n	800cae2 <_printf_float+0x43e>

0800caf8 <_printf_common>:
 800caf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cafc:	4616      	mov	r6, r2
 800cafe:	4698      	mov	r8, r3
 800cb00:	688a      	ldr	r2, [r1, #8]
 800cb02:	690b      	ldr	r3, [r1, #16]
 800cb04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	bfb8      	it	lt
 800cb0c:	4613      	movlt	r3, r2
 800cb0e:	6033      	str	r3, [r6, #0]
 800cb10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cb14:	4607      	mov	r7, r0
 800cb16:	460c      	mov	r4, r1
 800cb18:	b10a      	cbz	r2, 800cb1e <_printf_common+0x26>
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	6033      	str	r3, [r6, #0]
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	0699      	lsls	r1, r3, #26
 800cb22:	bf42      	ittt	mi
 800cb24:	6833      	ldrmi	r3, [r6, #0]
 800cb26:	3302      	addmi	r3, #2
 800cb28:	6033      	strmi	r3, [r6, #0]
 800cb2a:	6825      	ldr	r5, [r4, #0]
 800cb2c:	f015 0506 	ands.w	r5, r5, #6
 800cb30:	d106      	bne.n	800cb40 <_printf_common+0x48>
 800cb32:	f104 0a19 	add.w	sl, r4, #25
 800cb36:	68e3      	ldr	r3, [r4, #12]
 800cb38:	6832      	ldr	r2, [r6, #0]
 800cb3a:	1a9b      	subs	r3, r3, r2
 800cb3c:	42ab      	cmp	r3, r5
 800cb3e:	dc26      	bgt.n	800cb8e <_printf_common+0x96>
 800cb40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cb44:	6822      	ldr	r2, [r4, #0]
 800cb46:	3b00      	subs	r3, #0
 800cb48:	bf18      	it	ne
 800cb4a:	2301      	movne	r3, #1
 800cb4c:	0692      	lsls	r2, r2, #26
 800cb4e:	d42b      	bmi.n	800cba8 <_printf_common+0xb0>
 800cb50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cb54:	4641      	mov	r1, r8
 800cb56:	4638      	mov	r0, r7
 800cb58:	47c8      	blx	r9
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	d01e      	beq.n	800cb9c <_printf_common+0xa4>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	6922      	ldr	r2, [r4, #16]
 800cb62:	f003 0306 	and.w	r3, r3, #6
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	bf02      	ittt	eq
 800cb6a:	68e5      	ldreq	r5, [r4, #12]
 800cb6c:	6833      	ldreq	r3, [r6, #0]
 800cb6e:	1aed      	subeq	r5, r5, r3
 800cb70:	68a3      	ldr	r3, [r4, #8]
 800cb72:	bf0c      	ite	eq
 800cb74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb78:	2500      	movne	r5, #0
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	bfc4      	itt	gt
 800cb7e:	1a9b      	subgt	r3, r3, r2
 800cb80:	18ed      	addgt	r5, r5, r3
 800cb82:	2600      	movs	r6, #0
 800cb84:	341a      	adds	r4, #26
 800cb86:	42b5      	cmp	r5, r6
 800cb88:	d11a      	bne.n	800cbc0 <_printf_common+0xc8>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	e008      	b.n	800cba0 <_printf_common+0xa8>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	4652      	mov	r2, sl
 800cb92:	4641      	mov	r1, r8
 800cb94:	4638      	mov	r0, r7
 800cb96:	47c8      	blx	r9
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d103      	bne.n	800cba4 <_printf_common+0xac>
 800cb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba4:	3501      	adds	r5, #1
 800cba6:	e7c6      	b.n	800cb36 <_printf_common+0x3e>
 800cba8:	18e1      	adds	r1, r4, r3
 800cbaa:	1c5a      	adds	r2, r3, #1
 800cbac:	2030      	movs	r0, #48	@ 0x30
 800cbae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cbb2:	4422      	add	r2, r4
 800cbb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cbb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cbbc:	3302      	adds	r3, #2
 800cbbe:	e7c7      	b.n	800cb50 <_printf_common+0x58>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	4641      	mov	r1, r8
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	47c8      	blx	r9
 800cbca:	3001      	adds	r0, #1
 800cbcc:	d0e6      	beq.n	800cb9c <_printf_common+0xa4>
 800cbce:	3601      	adds	r6, #1
 800cbd0:	e7d9      	b.n	800cb86 <_printf_common+0x8e>
	...

0800cbd4 <_printf_i>:
 800cbd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd8:	7e0f      	ldrb	r7, [r1, #24]
 800cbda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cbdc:	2f78      	cmp	r7, #120	@ 0x78
 800cbde:	4691      	mov	r9, r2
 800cbe0:	4680      	mov	r8, r0
 800cbe2:	460c      	mov	r4, r1
 800cbe4:	469a      	mov	sl, r3
 800cbe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cbea:	d807      	bhi.n	800cbfc <_printf_i+0x28>
 800cbec:	2f62      	cmp	r7, #98	@ 0x62
 800cbee:	d80a      	bhi.n	800cc06 <_printf_i+0x32>
 800cbf0:	2f00      	cmp	r7, #0
 800cbf2:	f000 80d2 	beq.w	800cd9a <_printf_i+0x1c6>
 800cbf6:	2f58      	cmp	r7, #88	@ 0x58
 800cbf8:	f000 80b9 	beq.w	800cd6e <_printf_i+0x19a>
 800cbfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cc04:	e03a      	b.n	800cc7c <_printf_i+0xa8>
 800cc06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cc0a:	2b15      	cmp	r3, #21
 800cc0c:	d8f6      	bhi.n	800cbfc <_printf_i+0x28>
 800cc0e:	a101      	add	r1, pc, #4	@ (adr r1, 800cc14 <_printf_i+0x40>)
 800cc10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc14:	0800cc6d 	.word	0x0800cc6d
 800cc18:	0800cc81 	.word	0x0800cc81
 800cc1c:	0800cbfd 	.word	0x0800cbfd
 800cc20:	0800cbfd 	.word	0x0800cbfd
 800cc24:	0800cbfd 	.word	0x0800cbfd
 800cc28:	0800cbfd 	.word	0x0800cbfd
 800cc2c:	0800cc81 	.word	0x0800cc81
 800cc30:	0800cbfd 	.word	0x0800cbfd
 800cc34:	0800cbfd 	.word	0x0800cbfd
 800cc38:	0800cbfd 	.word	0x0800cbfd
 800cc3c:	0800cbfd 	.word	0x0800cbfd
 800cc40:	0800cd81 	.word	0x0800cd81
 800cc44:	0800ccab 	.word	0x0800ccab
 800cc48:	0800cd3b 	.word	0x0800cd3b
 800cc4c:	0800cbfd 	.word	0x0800cbfd
 800cc50:	0800cbfd 	.word	0x0800cbfd
 800cc54:	0800cda3 	.word	0x0800cda3
 800cc58:	0800cbfd 	.word	0x0800cbfd
 800cc5c:	0800ccab 	.word	0x0800ccab
 800cc60:	0800cbfd 	.word	0x0800cbfd
 800cc64:	0800cbfd 	.word	0x0800cbfd
 800cc68:	0800cd43 	.word	0x0800cd43
 800cc6c:	6833      	ldr	r3, [r6, #0]
 800cc6e:	1d1a      	adds	r2, r3, #4
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	6032      	str	r2, [r6, #0]
 800cc74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cc78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e09d      	b.n	800cdbc <_printf_i+0x1e8>
 800cc80:	6833      	ldr	r3, [r6, #0]
 800cc82:	6820      	ldr	r0, [r4, #0]
 800cc84:	1d19      	adds	r1, r3, #4
 800cc86:	6031      	str	r1, [r6, #0]
 800cc88:	0606      	lsls	r6, r0, #24
 800cc8a:	d501      	bpl.n	800cc90 <_printf_i+0xbc>
 800cc8c:	681d      	ldr	r5, [r3, #0]
 800cc8e:	e003      	b.n	800cc98 <_printf_i+0xc4>
 800cc90:	0645      	lsls	r5, r0, #25
 800cc92:	d5fb      	bpl.n	800cc8c <_printf_i+0xb8>
 800cc94:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cc98:	2d00      	cmp	r5, #0
 800cc9a:	da03      	bge.n	800cca4 <_printf_i+0xd0>
 800cc9c:	232d      	movs	r3, #45	@ 0x2d
 800cc9e:	426d      	negs	r5, r5
 800cca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cca4:	4859      	ldr	r0, [pc, #356]	@ (800ce0c <_printf_i+0x238>)
 800cca6:	230a      	movs	r3, #10
 800cca8:	e011      	b.n	800ccce <_printf_i+0xfa>
 800ccaa:	6821      	ldr	r1, [r4, #0]
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	0608      	lsls	r0, r1, #24
 800ccb0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ccb4:	d402      	bmi.n	800ccbc <_printf_i+0xe8>
 800ccb6:	0649      	lsls	r1, r1, #25
 800ccb8:	bf48      	it	mi
 800ccba:	b2ad      	uxthmi	r5, r5
 800ccbc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ccbe:	4853      	ldr	r0, [pc, #332]	@ (800ce0c <_printf_i+0x238>)
 800ccc0:	6033      	str	r3, [r6, #0]
 800ccc2:	bf14      	ite	ne
 800ccc4:	230a      	movne	r3, #10
 800ccc6:	2308      	moveq	r3, #8
 800ccc8:	2100      	movs	r1, #0
 800ccca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ccce:	6866      	ldr	r6, [r4, #4]
 800ccd0:	60a6      	str	r6, [r4, #8]
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	bfa2      	ittt	ge
 800ccd6:	6821      	ldrge	r1, [r4, #0]
 800ccd8:	f021 0104 	bicge.w	r1, r1, #4
 800ccdc:	6021      	strge	r1, [r4, #0]
 800ccde:	b90d      	cbnz	r5, 800cce4 <_printf_i+0x110>
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	d04b      	beq.n	800cd7c <_printf_i+0x1a8>
 800cce4:	4616      	mov	r6, r2
 800cce6:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccea:	fb03 5711 	mls	r7, r3, r1, r5
 800ccee:	5dc7      	ldrb	r7, [r0, r7]
 800ccf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccf4:	462f      	mov	r7, r5
 800ccf6:	42bb      	cmp	r3, r7
 800ccf8:	460d      	mov	r5, r1
 800ccfa:	d9f4      	bls.n	800cce6 <_printf_i+0x112>
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d10b      	bne.n	800cd18 <_printf_i+0x144>
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	07df      	lsls	r7, r3, #31
 800cd04:	d508      	bpl.n	800cd18 <_printf_i+0x144>
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	6861      	ldr	r1, [r4, #4]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	bfde      	ittt	le
 800cd0e:	2330      	movle	r3, #48	@ 0x30
 800cd10:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cd14:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd18:	1b92      	subs	r2, r2, r6
 800cd1a:	6122      	str	r2, [r4, #16]
 800cd1c:	f8cd a000 	str.w	sl, [sp]
 800cd20:	464b      	mov	r3, r9
 800cd22:	aa03      	add	r2, sp, #12
 800cd24:	4621      	mov	r1, r4
 800cd26:	4640      	mov	r0, r8
 800cd28:	f7ff fee6 	bl	800caf8 <_printf_common>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	d14a      	bne.n	800cdc6 <_printf_i+0x1f2>
 800cd30:	f04f 30ff 	mov.w	r0, #4294967295
 800cd34:	b004      	add	sp, #16
 800cd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	f043 0320 	orr.w	r3, r3, #32
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	4833      	ldr	r0, [pc, #204]	@ (800ce10 <_printf_i+0x23c>)
 800cd44:	2778      	movs	r7, #120	@ 0x78
 800cd46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cd4a:	6823      	ldr	r3, [r4, #0]
 800cd4c:	6831      	ldr	r1, [r6, #0]
 800cd4e:	061f      	lsls	r7, r3, #24
 800cd50:	f851 5b04 	ldr.w	r5, [r1], #4
 800cd54:	d402      	bmi.n	800cd5c <_printf_i+0x188>
 800cd56:	065f      	lsls	r7, r3, #25
 800cd58:	bf48      	it	mi
 800cd5a:	b2ad      	uxthmi	r5, r5
 800cd5c:	6031      	str	r1, [r6, #0]
 800cd5e:	07d9      	lsls	r1, r3, #31
 800cd60:	bf44      	itt	mi
 800cd62:	f043 0320 	orrmi.w	r3, r3, #32
 800cd66:	6023      	strmi	r3, [r4, #0]
 800cd68:	b11d      	cbz	r5, 800cd72 <_printf_i+0x19e>
 800cd6a:	2310      	movs	r3, #16
 800cd6c:	e7ac      	b.n	800ccc8 <_printf_i+0xf4>
 800cd6e:	4827      	ldr	r0, [pc, #156]	@ (800ce0c <_printf_i+0x238>)
 800cd70:	e7e9      	b.n	800cd46 <_printf_i+0x172>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	f023 0320 	bic.w	r3, r3, #32
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	e7f6      	b.n	800cd6a <_printf_i+0x196>
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	e7bd      	b.n	800ccfc <_printf_i+0x128>
 800cd80:	6833      	ldr	r3, [r6, #0]
 800cd82:	6825      	ldr	r5, [r4, #0]
 800cd84:	6961      	ldr	r1, [r4, #20]
 800cd86:	1d18      	adds	r0, r3, #4
 800cd88:	6030      	str	r0, [r6, #0]
 800cd8a:	062e      	lsls	r6, r5, #24
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	d501      	bpl.n	800cd94 <_printf_i+0x1c0>
 800cd90:	6019      	str	r1, [r3, #0]
 800cd92:	e002      	b.n	800cd9a <_printf_i+0x1c6>
 800cd94:	0668      	lsls	r0, r5, #25
 800cd96:	d5fb      	bpl.n	800cd90 <_printf_i+0x1bc>
 800cd98:	8019      	strh	r1, [r3, #0]
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	6123      	str	r3, [r4, #16]
 800cd9e:	4616      	mov	r6, r2
 800cda0:	e7bc      	b.n	800cd1c <_printf_i+0x148>
 800cda2:	6833      	ldr	r3, [r6, #0]
 800cda4:	1d1a      	adds	r2, r3, #4
 800cda6:	6032      	str	r2, [r6, #0]
 800cda8:	681e      	ldr	r6, [r3, #0]
 800cdaa:	6862      	ldr	r2, [r4, #4]
 800cdac:	2100      	movs	r1, #0
 800cdae:	4630      	mov	r0, r6
 800cdb0:	f7f3 fa0e 	bl	80001d0 <memchr>
 800cdb4:	b108      	cbz	r0, 800cdba <_printf_i+0x1e6>
 800cdb6:	1b80      	subs	r0, r0, r6
 800cdb8:	6060      	str	r0, [r4, #4]
 800cdba:	6863      	ldr	r3, [r4, #4]
 800cdbc:	6123      	str	r3, [r4, #16]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdc4:	e7aa      	b.n	800cd1c <_printf_i+0x148>
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	4632      	mov	r2, r6
 800cdca:	4649      	mov	r1, r9
 800cdcc:	4640      	mov	r0, r8
 800cdce:	47d0      	blx	sl
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d0ad      	beq.n	800cd30 <_printf_i+0x15c>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	079b      	lsls	r3, r3, #30
 800cdd8:	d413      	bmi.n	800ce02 <_printf_i+0x22e>
 800cdda:	68e0      	ldr	r0, [r4, #12]
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	4298      	cmp	r0, r3
 800cde0:	bfb8      	it	lt
 800cde2:	4618      	movlt	r0, r3
 800cde4:	e7a6      	b.n	800cd34 <_printf_i+0x160>
 800cde6:	2301      	movs	r3, #1
 800cde8:	4632      	mov	r2, r6
 800cdea:	4649      	mov	r1, r9
 800cdec:	4640      	mov	r0, r8
 800cdee:	47d0      	blx	sl
 800cdf0:	3001      	adds	r0, #1
 800cdf2:	d09d      	beq.n	800cd30 <_printf_i+0x15c>
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	68e3      	ldr	r3, [r4, #12]
 800cdf8:	9903      	ldr	r1, [sp, #12]
 800cdfa:	1a5b      	subs	r3, r3, r1
 800cdfc:	42ab      	cmp	r3, r5
 800cdfe:	dcf2      	bgt.n	800cde6 <_printf_i+0x212>
 800ce00:	e7eb      	b.n	800cdda <_printf_i+0x206>
 800ce02:	2500      	movs	r5, #0
 800ce04:	f104 0619 	add.w	r6, r4, #25
 800ce08:	e7f5      	b.n	800cdf6 <_printf_i+0x222>
 800ce0a:	bf00      	nop
 800ce0c:	0800f2c2 	.word	0x0800f2c2
 800ce10:	0800f2d3 	.word	0x0800f2d3

0800ce14 <std>:
 800ce14:	2300      	movs	r3, #0
 800ce16:	b510      	push	{r4, lr}
 800ce18:	4604      	mov	r4, r0
 800ce1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ce1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce22:	6083      	str	r3, [r0, #8]
 800ce24:	8181      	strh	r1, [r0, #12]
 800ce26:	6643      	str	r3, [r0, #100]	@ 0x64
 800ce28:	81c2      	strh	r2, [r0, #14]
 800ce2a:	6183      	str	r3, [r0, #24]
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	2208      	movs	r2, #8
 800ce30:	305c      	adds	r0, #92	@ 0x5c
 800ce32:	f000 f914 	bl	800d05e <memset>
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <std+0x58>)
 800ce38:	6263      	str	r3, [r4, #36]	@ 0x24
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce70 <std+0x5c>)
 800ce3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ce74 <std+0x60>)
 800ce40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce42:	4b0d      	ldr	r3, [pc, #52]	@ (800ce78 <std+0x64>)
 800ce44:	6323      	str	r3, [r4, #48]	@ 0x30
 800ce46:	4b0d      	ldr	r3, [pc, #52]	@ (800ce7c <std+0x68>)
 800ce48:	6224      	str	r4, [r4, #32]
 800ce4a:	429c      	cmp	r4, r3
 800ce4c:	d006      	beq.n	800ce5c <std+0x48>
 800ce4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ce52:	4294      	cmp	r4, r2
 800ce54:	d002      	beq.n	800ce5c <std+0x48>
 800ce56:	33d0      	adds	r3, #208	@ 0xd0
 800ce58:	429c      	cmp	r4, r3
 800ce5a:	d105      	bne.n	800ce68 <std+0x54>
 800ce5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ce60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce64:	f000 b978 	b.w	800d158 <__retarget_lock_init_recursive>
 800ce68:	bd10      	pop	{r4, pc}
 800ce6a:	bf00      	nop
 800ce6c:	0800cfd9 	.word	0x0800cfd9
 800ce70:	0800cffb 	.word	0x0800cffb
 800ce74:	0800d033 	.word	0x0800d033
 800ce78:	0800d057 	.word	0x0800d057
 800ce7c:	20004f8c 	.word	0x20004f8c

0800ce80 <stdio_exit_handler>:
 800ce80:	4a02      	ldr	r2, [pc, #8]	@ (800ce8c <stdio_exit_handler+0xc>)
 800ce82:	4903      	ldr	r1, [pc, #12]	@ (800ce90 <stdio_exit_handler+0x10>)
 800ce84:	4803      	ldr	r0, [pc, #12]	@ (800ce94 <stdio_exit_handler+0x14>)
 800ce86:	f000 b869 	b.w	800cf5c <_fwalk_sglue>
 800ce8a:	bf00      	nop
 800ce8c:	20000144 	.word	0x20000144
 800ce90:	0800eab5 	.word	0x0800eab5
 800ce94:	20000154 	.word	0x20000154

0800ce98 <cleanup_stdio>:
 800ce98:	6841      	ldr	r1, [r0, #4]
 800ce9a:	4b0c      	ldr	r3, [pc, #48]	@ (800cecc <cleanup_stdio+0x34>)
 800ce9c:	4299      	cmp	r1, r3
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	4604      	mov	r4, r0
 800cea2:	d001      	beq.n	800cea8 <cleanup_stdio+0x10>
 800cea4:	f001 fe06 	bl	800eab4 <_fflush_r>
 800cea8:	68a1      	ldr	r1, [r4, #8]
 800ceaa:	4b09      	ldr	r3, [pc, #36]	@ (800ced0 <cleanup_stdio+0x38>)
 800ceac:	4299      	cmp	r1, r3
 800ceae:	d002      	beq.n	800ceb6 <cleanup_stdio+0x1e>
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	f001 fdff 	bl	800eab4 <_fflush_r>
 800ceb6:	68e1      	ldr	r1, [r4, #12]
 800ceb8:	4b06      	ldr	r3, [pc, #24]	@ (800ced4 <cleanup_stdio+0x3c>)
 800ceba:	4299      	cmp	r1, r3
 800cebc:	d004      	beq.n	800cec8 <cleanup_stdio+0x30>
 800cebe:	4620      	mov	r0, r4
 800cec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cec4:	f001 bdf6 	b.w	800eab4 <_fflush_r>
 800cec8:	bd10      	pop	{r4, pc}
 800ceca:	bf00      	nop
 800cecc:	20004f8c 	.word	0x20004f8c
 800ced0:	20004ff4 	.word	0x20004ff4
 800ced4:	2000505c 	.word	0x2000505c

0800ced8 <global_stdio_init.part.0>:
 800ced8:	b510      	push	{r4, lr}
 800ceda:	4b0b      	ldr	r3, [pc, #44]	@ (800cf08 <global_stdio_init.part.0+0x30>)
 800cedc:	4c0b      	ldr	r4, [pc, #44]	@ (800cf0c <global_stdio_init.part.0+0x34>)
 800cede:	4a0c      	ldr	r2, [pc, #48]	@ (800cf10 <global_stdio_init.part.0+0x38>)
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	4620      	mov	r0, r4
 800cee4:	2200      	movs	r2, #0
 800cee6:	2104      	movs	r1, #4
 800cee8:	f7ff ff94 	bl	800ce14 <std>
 800ceec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cef0:	2201      	movs	r2, #1
 800cef2:	2109      	movs	r1, #9
 800cef4:	f7ff ff8e 	bl	800ce14 <std>
 800cef8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cefc:	2202      	movs	r2, #2
 800cefe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf02:	2112      	movs	r1, #18
 800cf04:	f7ff bf86 	b.w	800ce14 <std>
 800cf08:	200050c4 	.word	0x200050c4
 800cf0c:	20004f8c 	.word	0x20004f8c
 800cf10:	0800ce81 	.word	0x0800ce81

0800cf14 <__sfp_lock_acquire>:
 800cf14:	4801      	ldr	r0, [pc, #4]	@ (800cf1c <__sfp_lock_acquire+0x8>)
 800cf16:	f000 b920 	b.w	800d15a <__retarget_lock_acquire_recursive>
 800cf1a:	bf00      	nop
 800cf1c:	200050cd 	.word	0x200050cd

0800cf20 <__sfp_lock_release>:
 800cf20:	4801      	ldr	r0, [pc, #4]	@ (800cf28 <__sfp_lock_release+0x8>)
 800cf22:	f000 b91b 	b.w	800d15c <__retarget_lock_release_recursive>
 800cf26:	bf00      	nop
 800cf28:	200050cd 	.word	0x200050cd

0800cf2c <__sinit>:
 800cf2c:	b510      	push	{r4, lr}
 800cf2e:	4604      	mov	r4, r0
 800cf30:	f7ff fff0 	bl	800cf14 <__sfp_lock_acquire>
 800cf34:	6a23      	ldr	r3, [r4, #32]
 800cf36:	b11b      	cbz	r3, 800cf40 <__sinit+0x14>
 800cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf3c:	f7ff bff0 	b.w	800cf20 <__sfp_lock_release>
 800cf40:	4b04      	ldr	r3, [pc, #16]	@ (800cf54 <__sinit+0x28>)
 800cf42:	6223      	str	r3, [r4, #32]
 800cf44:	4b04      	ldr	r3, [pc, #16]	@ (800cf58 <__sinit+0x2c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f5      	bne.n	800cf38 <__sinit+0xc>
 800cf4c:	f7ff ffc4 	bl	800ced8 <global_stdio_init.part.0>
 800cf50:	e7f2      	b.n	800cf38 <__sinit+0xc>
 800cf52:	bf00      	nop
 800cf54:	0800ce99 	.word	0x0800ce99
 800cf58:	200050c4 	.word	0x200050c4

0800cf5c <_fwalk_sglue>:
 800cf5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf60:	4607      	mov	r7, r0
 800cf62:	4688      	mov	r8, r1
 800cf64:	4614      	mov	r4, r2
 800cf66:	2600      	movs	r6, #0
 800cf68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf6c:	f1b9 0901 	subs.w	r9, r9, #1
 800cf70:	d505      	bpl.n	800cf7e <_fwalk_sglue+0x22>
 800cf72:	6824      	ldr	r4, [r4, #0]
 800cf74:	2c00      	cmp	r4, #0
 800cf76:	d1f7      	bne.n	800cf68 <_fwalk_sglue+0xc>
 800cf78:	4630      	mov	r0, r6
 800cf7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf7e:	89ab      	ldrh	r3, [r5, #12]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d907      	bls.n	800cf94 <_fwalk_sglue+0x38>
 800cf84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	d003      	beq.n	800cf94 <_fwalk_sglue+0x38>
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	4638      	mov	r0, r7
 800cf90:	47c0      	blx	r8
 800cf92:	4306      	orrs	r6, r0
 800cf94:	3568      	adds	r5, #104	@ 0x68
 800cf96:	e7e9      	b.n	800cf6c <_fwalk_sglue+0x10>

0800cf98 <siprintf>:
 800cf98:	b40e      	push	{r1, r2, r3}
 800cf9a:	b500      	push	{lr}
 800cf9c:	b09c      	sub	sp, #112	@ 0x70
 800cf9e:	ab1d      	add	r3, sp, #116	@ 0x74
 800cfa0:	9002      	str	r0, [sp, #8]
 800cfa2:	9006      	str	r0, [sp, #24]
 800cfa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cfa8:	4809      	ldr	r0, [pc, #36]	@ (800cfd0 <siprintf+0x38>)
 800cfaa:	9107      	str	r1, [sp, #28]
 800cfac:	9104      	str	r1, [sp, #16]
 800cfae:	4909      	ldr	r1, [pc, #36]	@ (800cfd4 <siprintf+0x3c>)
 800cfb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfb4:	9105      	str	r1, [sp, #20]
 800cfb6:	6800      	ldr	r0, [r0, #0]
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	a902      	add	r1, sp, #8
 800cfbc:	f001 fbfa 	bl	800e7b4 <_svfiprintf_r>
 800cfc0:	9b02      	ldr	r3, [sp, #8]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	701a      	strb	r2, [r3, #0]
 800cfc6:	b01c      	add	sp, #112	@ 0x70
 800cfc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfcc:	b003      	add	sp, #12
 800cfce:	4770      	bx	lr
 800cfd0:	20000150 	.word	0x20000150
 800cfd4:	ffff0208 	.word	0xffff0208

0800cfd8 <__sread>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	460c      	mov	r4, r1
 800cfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe0:	f000 f86c 	bl	800d0bc <_read_r>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	bfab      	itete	ge
 800cfe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cfea:	89a3      	ldrhlt	r3, [r4, #12]
 800cfec:	181b      	addge	r3, r3, r0
 800cfee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cff2:	bfac      	ite	ge
 800cff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cff6:	81a3      	strhlt	r3, [r4, #12]
 800cff8:	bd10      	pop	{r4, pc}

0800cffa <__swrite>:
 800cffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffe:	461f      	mov	r7, r3
 800d000:	898b      	ldrh	r3, [r1, #12]
 800d002:	05db      	lsls	r3, r3, #23
 800d004:	4605      	mov	r5, r0
 800d006:	460c      	mov	r4, r1
 800d008:	4616      	mov	r6, r2
 800d00a:	d505      	bpl.n	800d018 <__swrite+0x1e>
 800d00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d010:	2302      	movs	r3, #2
 800d012:	2200      	movs	r2, #0
 800d014:	f000 f840 	bl	800d098 <_lseek_r>
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d01e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	4632      	mov	r2, r6
 800d026:	463b      	mov	r3, r7
 800d028:	4628      	mov	r0, r5
 800d02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02e:	f000 b857 	b.w	800d0e0 <_write_r>

0800d032 <__sseek>:
 800d032:	b510      	push	{r4, lr}
 800d034:	460c      	mov	r4, r1
 800d036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03a:	f000 f82d 	bl	800d098 <_lseek_r>
 800d03e:	1c43      	adds	r3, r0, #1
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	bf15      	itete	ne
 800d044:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d04a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d04e:	81a3      	strheq	r3, [r4, #12]
 800d050:	bf18      	it	ne
 800d052:	81a3      	strhne	r3, [r4, #12]
 800d054:	bd10      	pop	{r4, pc}

0800d056 <__sclose>:
 800d056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d05a:	f000 b80d 	b.w	800d078 <_close_r>

0800d05e <memset>:
 800d05e:	4402      	add	r2, r0
 800d060:	4603      	mov	r3, r0
 800d062:	4293      	cmp	r3, r2
 800d064:	d100      	bne.n	800d068 <memset+0xa>
 800d066:	4770      	bx	lr
 800d068:	f803 1b01 	strb.w	r1, [r3], #1
 800d06c:	e7f9      	b.n	800d062 <memset+0x4>
	...

0800d070 <_localeconv_r>:
 800d070:	4800      	ldr	r0, [pc, #0]	@ (800d074 <_localeconv_r+0x4>)
 800d072:	4770      	bx	lr
 800d074:	20000290 	.word	0x20000290

0800d078 <_close_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4d06      	ldr	r5, [pc, #24]	@ (800d094 <_close_r+0x1c>)
 800d07c:	2300      	movs	r3, #0
 800d07e:	4604      	mov	r4, r0
 800d080:	4608      	mov	r0, r1
 800d082:	602b      	str	r3, [r5, #0]
 800d084:	f7f5 fb48 	bl	8002718 <_close>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_close_r+0x1a>
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_close_r+0x1a>
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	200050c8 	.word	0x200050c8

0800d098 <_lseek_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d07      	ldr	r5, [pc, #28]	@ (800d0b8 <_lseek_r+0x20>)
 800d09c:	4604      	mov	r4, r0
 800d09e:	4608      	mov	r0, r1
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	602a      	str	r2, [r5, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	f7f5 fb5d 	bl	8002766 <_lseek>
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	d102      	bne.n	800d0b6 <_lseek_r+0x1e>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	b103      	cbz	r3, 800d0b6 <_lseek_r+0x1e>
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	200050c8 	.word	0x200050c8

0800d0bc <_read_r>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4d07      	ldr	r5, [pc, #28]	@ (800d0dc <_read_r+0x20>)
 800d0c0:	4604      	mov	r4, r0
 800d0c2:	4608      	mov	r0, r1
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	602a      	str	r2, [r5, #0]
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	f7f5 faeb 	bl	80026a6 <_read>
 800d0d0:	1c43      	adds	r3, r0, #1
 800d0d2:	d102      	bne.n	800d0da <_read_r+0x1e>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	b103      	cbz	r3, 800d0da <_read_r+0x1e>
 800d0d8:	6023      	str	r3, [r4, #0]
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	200050c8 	.word	0x200050c8

0800d0e0 <_write_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4d07      	ldr	r5, [pc, #28]	@ (800d100 <_write_r+0x20>)
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	4608      	mov	r0, r1
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	602a      	str	r2, [r5, #0]
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	f7f5 faf6 	bl	80026e0 <_write>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_write_r+0x1e>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_write_r+0x1e>
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	200050c8 	.word	0x200050c8

0800d104 <__errno>:
 800d104:	4b01      	ldr	r3, [pc, #4]	@ (800d10c <__errno+0x8>)
 800d106:	6818      	ldr	r0, [r3, #0]
 800d108:	4770      	bx	lr
 800d10a:	bf00      	nop
 800d10c:	20000150 	.word	0x20000150

0800d110 <__libc_init_array>:
 800d110:	b570      	push	{r4, r5, r6, lr}
 800d112:	4d0d      	ldr	r5, [pc, #52]	@ (800d148 <__libc_init_array+0x38>)
 800d114:	4c0d      	ldr	r4, [pc, #52]	@ (800d14c <__libc_init_array+0x3c>)
 800d116:	1b64      	subs	r4, r4, r5
 800d118:	10a4      	asrs	r4, r4, #2
 800d11a:	2600      	movs	r6, #0
 800d11c:	42a6      	cmp	r6, r4
 800d11e:	d109      	bne.n	800d134 <__libc_init_array+0x24>
 800d120:	4d0b      	ldr	r5, [pc, #44]	@ (800d150 <__libc_init_array+0x40>)
 800d122:	4c0c      	ldr	r4, [pc, #48]	@ (800d154 <__libc_init_array+0x44>)
 800d124:	f002 f864 	bl	800f1f0 <_init>
 800d128:	1b64      	subs	r4, r4, r5
 800d12a:	10a4      	asrs	r4, r4, #2
 800d12c:	2600      	movs	r6, #0
 800d12e:	42a6      	cmp	r6, r4
 800d130:	d105      	bne.n	800d13e <__libc_init_array+0x2e>
 800d132:	bd70      	pop	{r4, r5, r6, pc}
 800d134:	f855 3b04 	ldr.w	r3, [r5], #4
 800d138:	4798      	blx	r3
 800d13a:	3601      	adds	r6, #1
 800d13c:	e7ee      	b.n	800d11c <__libc_init_array+0xc>
 800d13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d142:	4798      	blx	r3
 800d144:	3601      	adds	r6, #1
 800d146:	e7f2      	b.n	800d12e <__libc_init_array+0x1e>
 800d148:	0800f628 	.word	0x0800f628
 800d14c:	0800f628 	.word	0x0800f628
 800d150:	0800f628 	.word	0x0800f628
 800d154:	0800f62c 	.word	0x0800f62c

0800d158 <__retarget_lock_init_recursive>:
 800d158:	4770      	bx	lr

0800d15a <__retarget_lock_acquire_recursive>:
 800d15a:	4770      	bx	lr

0800d15c <__retarget_lock_release_recursive>:
 800d15c:	4770      	bx	lr

0800d15e <quorem>:
 800d15e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d162:	6903      	ldr	r3, [r0, #16]
 800d164:	690c      	ldr	r4, [r1, #16]
 800d166:	42a3      	cmp	r3, r4
 800d168:	4607      	mov	r7, r0
 800d16a:	db7e      	blt.n	800d26a <quorem+0x10c>
 800d16c:	3c01      	subs	r4, #1
 800d16e:	f101 0814 	add.w	r8, r1, #20
 800d172:	00a3      	lsls	r3, r4, #2
 800d174:	f100 0514 	add.w	r5, r0, #20
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d17e:	9301      	str	r3, [sp, #4]
 800d180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d188:	3301      	adds	r3, #1
 800d18a:	429a      	cmp	r2, r3
 800d18c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d190:	fbb2 f6f3 	udiv	r6, r2, r3
 800d194:	d32e      	bcc.n	800d1f4 <quorem+0x96>
 800d196:	f04f 0a00 	mov.w	sl, #0
 800d19a:	46c4      	mov	ip, r8
 800d19c:	46ae      	mov	lr, r5
 800d19e:	46d3      	mov	fp, sl
 800d1a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d1a4:	b298      	uxth	r0, r3
 800d1a6:	fb06 a000 	mla	r0, r6, r0, sl
 800d1aa:	0c02      	lsrs	r2, r0, #16
 800d1ac:	0c1b      	lsrs	r3, r3, #16
 800d1ae:	fb06 2303 	mla	r3, r6, r3, r2
 800d1b2:	f8de 2000 	ldr.w	r2, [lr]
 800d1b6:	b280      	uxth	r0, r0
 800d1b8:	b292      	uxth	r2, r2
 800d1ba:	1a12      	subs	r2, r2, r0
 800d1bc:	445a      	add	r2, fp
 800d1be:	f8de 0000 	ldr.w	r0, [lr]
 800d1c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1d0:	b292      	uxth	r2, r2
 800d1d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1d6:	45e1      	cmp	r9, ip
 800d1d8:	f84e 2b04 	str.w	r2, [lr], #4
 800d1dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1e0:	d2de      	bcs.n	800d1a0 <quorem+0x42>
 800d1e2:	9b00      	ldr	r3, [sp, #0]
 800d1e4:	58eb      	ldr	r3, [r5, r3]
 800d1e6:	b92b      	cbnz	r3, 800d1f4 <quorem+0x96>
 800d1e8:	9b01      	ldr	r3, [sp, #4]
 800d1ea:	3b04      	subs	r3, #4
 800d1ec:	429d      	cmp	r5, r3
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	d32f      	bcc.n	800d252 <quorem+0xf4>
 800d1f2:	613c      	str	r4, [r7, #16]
 800d1f4:	4638      	mov	r0, r7
 800d1f6:	f001 f979 	bl	800e4ec <__mcmp>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	db25      	blt.n	800d24a <quorem+0xec>
 800d1fe:	4629      	mov	r1, r5
 800d200:	2000      	movs	r0, #0
 800d202:	f858 2b04 	ldr.w	r2, [r8], #4
 800d206:	f8d1 c000 	ldr.w	ip, [r1]
 800d20a:	fa1f fe82 	uxth.w	lr, r2
 800d20e:	fa1f f38c 	uxth.w	r3, ip
 800d212:	eba3 030e 	sub.w	r3, r3, lr
 800d216:	4403      	add	r3, r0
 800d218:	0c12      	lsrs	r2, r2, #16
 800d21a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d21e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d222:	b29b      	uxth	r3, r3
 800d224:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d228:	45c1      	cmp	r9, r8
 800d22a:	f841 3b04 	str.w	r3, [r1], #4
 800d22e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d232:	d2e6      	bcs.n	800d202 <quorem+0xa4>
 800d234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d23c:	b922      	cbnz	r2, 800d248 <quorem+0xea>
 800d23e:	3b04      	subs	r3, #4
 800d240:	429d      	cmp	r5, r3
 800d242:	461a      	mov	r2, r3
 800d244:	d30b      	bcc.n	800d25e <quorem+0x100>
 800d246:	613c      	str	r4, [r7, #16]
 800d248:	3601      	adds	r6, #1
 800d24a:	4630      	mov	r0, r6
 800d24c:	b003      	add	sp, #12
 800d24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d252:	6812      	ldr	r2, [r2, #0]
 800d254:	3b04      	subs	r3, #4
 800d256:	2a00      	cmp	r2, #0
 800d258:	d1cb      	bne.n	800d1f2 <quorem+0x94>
 800d25a:	3c01      	subs	r4, #1
 800d25c:	e7c6      	b.n	800d1ec <quorem+0x8e>
 800d25e:	6812      	ldr	r2, [r2, #0]
 800d260:	3b04      	subs	r3, #4
 800d262:	2a00      	cmp	r2, #0
 800d264:	d1ef      	bne.n	800d246 <quorem+0xe8>
 800d266:	3c01      	subs	r4, #1
 800d268:	e7ea      	b.n	800d240 <quorem+0xe2>
 800d26a:	2000      	movs	r0, #0
 800d26c:	e7ee      	b.n	800d24c <quorem+0xee>
	...

0800d270 <_dtoa_r>:
 800d270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d274:	69c7      	ldr	r7, [r0, #28]
 800d276:	b099      	sub	sp, #100	@ 0x64
 800d278:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d27c:	ec55 4b10 	vmov	r4, r5, d0
 800d280:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d282:	9109      	str	r1, [sp, #36]	@ 0x24
 800d284:	4683      	mov	fp, r0
 800d286:	920e      	str	r2, [sp, #56]	@ 0x38
 800d288:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d28a:	b97f      	cbnz	r7, 800d2ac <_dtoa_r+0x3c>
 800d28c:	2010      	movs	r0, #16
 800d28e:	f000 fdfd 	bl	800de8c <malloc>
 800d292:	4602      	mov	r2, r0
 800d294:	f8cb 001c 	str.w	r0, [fp, #28]
 800d298:	b920      	cbnz	r0, 800d2a4 <_dtoa_r+0x34>
 800d29a:	4ba7      	ldr	r3, [pc, #668]	@ (800d538 <_dtoa_r+0x2c8>)
 800d29c:	21ef      	movs	r1, #239	@ 0xef
 800d29e:	48a7      	ldr	r0, [pc, #668]	@ (800d53c <_dtoa_r+0x2cc>)
 800d2a0:	f001 fc68 	bl	800eb74 <__assert_func>
 800d2a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d2a8:	6007      	str	r7, [r0, #0]
 800d2aa:	60c7      	str	r7, [r0, #12]
 800d2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2b0:	6819      	ldr	r1, [r3, #0]
 800d2b2:	b159      	cbz	r1, 800d2cc <_dtoa_r+0x5c>
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	604a      	str	r2, [r1, #4]
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	4093      	lsls	r3, r2
 800d2bc:	608b      	str	r3, [r1, #8]
 800d2be:	4658      	mov	r0, fp
 800d2c0:	f000 feda 	bl	800e078 <_Bfree>
 800d2c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	601a      	str	r2, [r3, #0]
 800d2cc:	1e2b      	subs	r3, r5, #0
 800d2ce:	bfb9      	ittee	lt
 800d2d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2d4:	9303      	strlt	r3, [sp, #12]
 800d2d6:	2300      	movge	r3, #0
 800d2d8:	6033      	strge	r3, [r6, #0]
 800d2da:	9f03      	ldr	r7, [sp, #12]
 800d2dc:	4b98      	ldr	r3, [pc, #608]	@ (800d540 <_dtoa_r+0x2d0>)
 800d2de:	bfbc      	itt	lt
 800d2e0:	2201      	movlt	r2, #1
 800d2e2:	6032      	strlt	r2, [r6, #0]
 800d2e4:	43bb      	bics	r3, r7
 800d2e6:	d112      	bne.n	800d30e <_dtoa_r+0x9e>
 800d2e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d2ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2ee:	6013      	str	r3, [r2, #0]
 800d2f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2f4:	4323      	orrs	r3, r4
 800d2f6:	f000 854d 	beq.w	800dd94 <_dtoa_r+0xb24>
 800d2fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d2fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d554 <_dtoa_r+0x2e4>
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 854f 	beq.w	800dda4 <_dtoa_r+0xb34>
 800d306:	f10a 0303 	add.w	r3, sl, #3
 800d30a:	f000 bd49 	b.w	800dda0 <_dtoa_r+0xb30>
 800d30e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d312:	2200      	movs	r2, #0
 800d314:	ec51 0b17 	vmov	r0, r1, d7
 800d318:	2300      	movs	r3, #0
 800d31a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d31e:	f7f3 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d322:	4680      	mov	r8, r0
 800d324:	b158      	cbz	r0, 800d33e <_dtoa_r+0xce>
 800d326:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d328:	2301      	movs	r3, #1
 800d32a:	6013      	str	r3, [r2, #0]
 800d32c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d32e:	b113      	cbz	r3, 800d336 <_dtoa_r+0xc6>
 800d330:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d332:	4b84      	ldr	r3, [pc, #528]	@ (800d544 <_dtoa_r+0x2d4>)
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d558 <_dtoa_r+0x2e8>
 800d33a:	f000 bd33 	b.w	800dda4 <_dtoa_r+0xb34>
 800d33e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d342:	aa16      	add	r2, sp, #88	@ 0x58
 800d344:	a917      	add	r1, sp, #92	@ 0x5c
 800d346:	4658      	mov	r0, fp
 800d348:	f001 f980 	bl	800e64c <__d2b>
 800d34c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d350:	4681      	mov	r9, r0
 800d352:	2e00      	cmp	r6, #0
 800d354:	d077      	beq.n	800d446 <_dtoa_r+0x1d6>
 800d356:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d358:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d364:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d368:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d36c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d370:	4619      	mov	r1, r3
 800d372:	2200      	movs	r2, #0
 800d374:	4b74      	ldr	r3, [pc, #464]	@ (800d548 <_dtoa_r+0x2d8>)
 800d376:	f7f2 ff87 	bl	8000288 <__aeabi_dsub>
 800d37a:	a369      	add	r3, pc, #420	@ (adr r3, 800d520 <_dtoa_r+0x2b0>)
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	a368      	add	r3, pc, #416	@ (adr r3, 800d528 <_dtoa_r+0x2b8>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	f7f2 ff7f 	bl	800028c <__adddf3>
 800d38e:	4604      	mov	r4, r0
 800d390:	4630      	mov	r0, r6
 800d392:	460d      	mov	r5, r1
 800d394:	f7f3 f8c6 	bl	8000524 <__aeabi_i2d>
 800d398:	a365      	add	r3, pc, #404	@ (adr r3, 800d530 <_dtoa_r+0x2c0>)
 800d39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39e:	f7f3 f92b 	bl	80005f8 <__aeabi_dmul>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	f7f2 ff6f 	bl	800028c <__adddf3>
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	460d      	mov	r5, r1
 800d3b2:	f7f3 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	4607      	mov	r7, r0
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	4620      	mov	r0, r4
 800d3be:	4629      	mov	r1, r5
 800d3c0:	f7f3 fb8c 	bl	8000adc <__aeabi_dcmplt>
 800d3c4:	b140      	cbz	r0, 800d3d8 <_dtoa_r+0x168>
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	f7f3 f8ac 	bl	8000524 <__aeabi_i2d>
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	462b      	mov	r3, r5
 800d3d0:	f7f3 fb7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3d4:	b900      	cbnz	r0, 800d3d8 <_dtoa_r+0x168>
 800d3d6:	3f01      	subs	r7, #1
 800d3d8:	2f16      	cmp	r7, #22
 800d3da:	d851      	bhi.n	800d480 <_dtoa_r+0x210>
 800d3dc:	4b5b      	ldr	r3, [pc, #364]	@ (800d54c <_dtoa_r+0x2dc>)
 800d3de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3ea:	f7f3 fb77 	bl	8000adc <__aeabi_dcmplt>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d048      	beq.n	800d484 <_dtoa_r+0x214>
 800d3f2:	3f01      	subs	r7, #1
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d3f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d3fa:	1b9b      	subs	r3, r3, r6
 800d3fc:	1e5a      	subs	r2, r3, #1
 800d3fe:	bf44      	itt	mi
 800d400:	f1c3 0801 	rsbmi	r8, r3, #1
 800d404:	2300      	movmi	r3, #0
 800d406:	9208      	str	r2, [sp, #32]
 800d408:	bf54      	ite	pl
 800d40a:	f04f 0800 	movpl.w	r8, #0
 800d40e:	9308      	strmi	r3, [sp, #32]
 800d410:	2f00      	cmp	r7, #0
 800d412:	db39      	blt.n	800d488 <_dtoa_r+0x218>
 800d414:	9b08      	ldr	r3, [sp, #32]
 800d416:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d418:	443b      	add	r3, r7
 800d41a:	9308      	str	r3, [sp, #32]
 800d41c:	2300      	movs	r3, #0
 800d41e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d422:	2b09      	cmp	r3, #9
 800d424:	d864      	bhi.n	800d4f0 <_dtoa_r+0x280>
 800d426:	2b05      	cmp	r3, #5
 800d428:	bfc4      	itt	gt
 800d42a:	3b04      	subgt	r3, #4
 800d42c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d430:	f1a3 0302 	sub.w	r3, r3, #2
 800d434:	bfcc      	ite	gt
 800d436:	2400      	movgt	r4, #0
 800d438:	2401      	movle	r4, #1
 800d43a:	2b03      	cmp	r3, #3
 800d43c:	d863      	bhi.n	800d506 <_dtoa_r+0x296>
 800d43e:	e8df f003 	tbb	[pc, r3]
 800d442:	372a      	.short	0x372a
 800d444:	5535      	.short	0x5535
 800d446:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d44a:	441e      	add	r6, r3
 800d44c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d450:	2b20      	cmp	r3, #32
 800d452:	bfc1      	itttt	gt
 800d454:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d458:	409f      	lslgt	r7, r3
 800d45a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d45e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d462:	bfd6      	itet	le
 800d464:	f1c3 0320 	rsble	r3, r3, #32
 800d468:	ea47 0003 	orrgt.w	r0, r7, r3
 800d46c:	fa04 f003 	lslle.w	r0, r4, r3
 800d470:	f7f3 f848 	bl	8000504 <__aeabi_ui2d>
 800d474:	2201      	movs	r2, #1
 800d476:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d47a:	3e01      	subs	r6, #1
 800d47c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d47e:	e777      	b.n	800d370 <_dtoa_r+0x100>
 800d480:	2301      	movs	r3, #1
 800d482:	e7b8      	b.n	800d3f6 <_dtoa_r+0x186>
 800d484:	9012      	str	r0, [sp, #72]	@ 0x48
 800d486:	e7b7      	b.n	800d3f8 <_dtoa_r+0x188>
 800d488:	427b      	negs	r3, r7
 800d48a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d48c:	2300      	movs	r3, #0
 800d48e:	eba8 0807 	sub.w	r8, r8, r7
 800d492:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d494:	e7c4      	b.n	800d420 <_dtoa_r+0x1b0>
 800d496:	2300      	movs	r3, #0
 800d498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	dc35      	bgt.n	800d50c <_dtoa_r+0x29c>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	9300      	str	r3, [sp, #0]
 800d4a4:	9307      	str	r3, [sp, #28]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4aa:	e00b      	b.n	800d4c4 <_dtoa_r+0x254>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e7f3      	b.n	800d498 <_dtoa_r+0x228>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b6:	18fb      	adds	r3, r7, r3
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	9307      	str	r3, [sp, #28]
 800d4c0:	bfb8      	it	lt
 800d4c2:	2301      	movlt	r3, #1
 800d4c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	2204      	movs	r2, #4
 800d4cc:	f102 0514 	add.w	r5, r2, #20
 800d4d0:	429d      	cmp	r5, r3
 800d4d2:	d91f      	bls.n	800d514 <_dtoa_r+0x2a4>
 800d4d4:	6041      	str	r1, [r0, #4]
 800d4d6:	4658      	mov	r0, fp
 800d4d8:	f000 fd8e 	bl	800dff8 <_Balloc>
 800d4dc:	4682      	mov	sl, r0
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d13c      	bne.n	800d55c <_dtoa_r+0x2ec>
 800d4e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d550 <_dtoa_r+0x2e0>)
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4ea:	e6d8      	b.n	800d29e <_dtoa_r+0x2e>
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e7e0      	b.n	800d4b2 <_dtoa_r+0x242>
 800d4f0:	2401      	movs	r4, #1
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	9307      	str	r3, [sp, #28]
 800d500:	2200      	movs	r2, #0
 800d502:	2312      	movs	r3, #18
 800d504:	e7d0      	b.n	800d4a8 <_dtoa_r+0x238>
 800d506:	2301      	movs	r3, #1
 800d508:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d50a:	e7f5      	b.n	800d4f8 <_dtoa_r+0x288>
 800d50c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	9307      	str	r3, [sp, #28]
 800d512:	e7d7      	b.n	800d4c4 <_dtoa_r+0x254>
 800d514:	3101      	adds	r1, #1
 800d516:	0052      	lsls	r2, r2, #1
 800d518:	e7d8      	b.n	800d4cc <_dtoa_r+0x25c>
 800d51a:	bf00      	nop
 800d51c:	f3af 8000 	nop.w
 800d520:	636f4361 	.word	0x636f4361
 800d524:	3fd287a7 	.word	0x3fd287a7
 800d528:	8b60c8b3 	.word	0x8b60c8b3
 800d52c:	3fc68a28 	.word	0x3fc68a28
 800d530:	509f79fb 	.word	0x509f79fb
 800d534:	3fd34413 	.word	0x3fd34413
 800d538:	0800f2f1 	.word	0x0800f2f1
 800d53c:	0800f308 	.word	0x0800f308
 800d540:	7ff00000 	.word	0x7ff00000
 800d544:	0800f2c1 	.word	0x0800f2c1
 800d548:	3ff80000 	.word	0x3ff80000
 800d54c:	0800f400 	.word	0x0800f400
 800d550:	0800f360 	.word	0x0800f360
 800d554:	0800f2ed 	.word	0x0800f2ed
 800d558:	0800f2c0 	.word	0x0800f2c0
 800d55c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d560:	6018      	str	r0, [r3, #0]
 800d562:	9b07      	ldr	r3, [sp, #28]
 800d564:	2b0e      	cmp	r3, #14
 800d566:	f200 80a4 	bhi.w	800d6b2 <_dtoa_r+0x442>
 800d56a:	2c00      	cmp	r4, #0
 800d56c:	f000 80a1 	beq.w	800d6b2 <_dtoa_r+0x442>
 800d570:	2f00      	cmp	r7, #0
 800d572:	dd33      	ble.n	800d5dc <_dtoa_r+0x36c>
 800d574:	4bad      	ldr	r3, [pc, #692]	@ (800d82c <_dtoa_r+0x5bc>)
 800d576:	f007 020f 	and.w	r2, r7, #15
 800d57a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d57e:	ed93 7b00 	vldr	d7, [r3]
 800d582:	05f8      	lsls	r0, r7, #23
 800d584:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d588:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d58c:	d516      	bpl.n	800d5bc <_dtoa_r+0x34c>
 800d58e:	4ba8      	ldr	r3, [pc, #672]	@ (800d830 <_dtoa_r+0x5c0>)
 800d590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d598:	f7f3 f958 	bl	800084c <__aeabi_ddiv>
 800d59c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5a0:	f004 040f 	and.w	r4, r4, #15
 800d5a4:	2603      	movs	r6, #3
 800d5a6:	4da2      	ldr	r5, [pc, #648]	@ (800d830 <_dtoa_r+0x5c0>)
 800d5a8:	b954      	cbnz	r4, 800d5c0 <_dtoa_r+0x350>
 800d5aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b2:	f7f3 f94b 	bl	800084c <__aeabi_ddiv>
 800d5b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5ba:	e028      	b.n	800d60e <_dtoa_r+0x39e>
 800d5bc:	2602      	movs	r6, #2
 800d5be:	e7f2      	b.n	800d5a6 <_dtoa_r+0x336>
 800d5c0:	07e1      	lsls	r1, r4, #31
 800d5c2:	d508      	bpl.n	800d5d6 <_dtoa_r+0x366>
 800d5c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5cc:	f7f3 f814 	bl	80005f8 <__aeabi_dmul>
 800d5d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5d4:	3601      	adds	r6, #1
 800d5d6:	1064      	asrs	r4, r4, #1
 800d5d8:	3508      	adds	r5, #8
 800d5da:	e7e5      	b.n	800d5a8 <_dtoa_r+0x338>
 800d5dc:	f000 80d2 	beq.w	800d784 <_dtoa_r+0x514>
 800d5e0:	427c      	negs	r4, r7
 800d5e2:	4b92      	ldr	r3, [pc, #584]	@ (800d82c <_dtoa_r+0x5bc>)
 800d5e4:	4d92      	ldr	r5, [pc, #584]	@ (800d830 <_dtoa_r+0x5c0>)
 800d5e6:	f004 020f 	and.w	r2, r4, #15
 800d5ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5f6:	f7f2 ffff 	bl	80005f8 <__aeabi_dmul>
 800d5fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5fe:	1124      	asrs	r4, r4, #4
 800d600:	2300      	movs	r3, #0
 800d602:	2602      	movs	r6, #2
 800d604:	2c00      	cmp	r4, #0
 800d606:	f040 80b2 	bne.w	800d76e <_dtoa_r+0x4fe>
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1d3      	bne.n	800d5b6 <_dtoa_r+0x346>
 800d60e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d610:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 80b7 	beq.w	800d788 <_dtoa_r+0x518>
 800d61a:	4b86      	ldr	r3, [pc, #536]	@ (800d834 <_dtoa_r+0x5c4>)
 800d61c:	2200      	movs	r2, #0
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	f7f3 fa5b 	bl	8000adc <__aeabi_dcmplt>
 800d626:	2800      	cmp	r0, #0
 800d628:	f000 80ae 	beq.w	800d788 <_dtoa_r+0x518>
 800d62c:	9b07      	ldr	r3, [sp, #28]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f000 80aa 	beq.w	800d788 <_dtoa_r+0x518>
 800d634:	9b00      	ldr	r3, [sp, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	dd37      	ble.n	800d6aa <_dtoa_r+0x43a>
 800d63a:	1e7b      	subs	r3, r7, #1
 800d63c:	9304      	str	r3, [sp, #16]
 800d63e:	4620      	mov	r0, r4
 800d640:	4b7d      	ldr	r3, [pc, #500]	@ (800d838 <_dtoa_r+0x5c8>)
 800d642:	2200      	movs	r2, #0
 800d644:	4629      	mov	r1, r5
 800d646:	f7f2 ffd7 	bl	80005f8 <__aeabi_dmul>
 800d64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d64e:	9c00      	ldr	r4, [sp, #0]
 800d650:	3601      	adds	r6, #1
 800d652:	4630      	mov	r0, r6
 800d654:	f7f2 ff66 	bl	8000524 <__aeabi_i2d>
 800d658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d65c:	f7f2 ffcc 	bl	80005f8 <__aeabi_dmul>
 800d660:	4b76      	ldr	r3, [pc, #472]	@ (800d83c <_dtoa_r+0x5cc>)
 800d662:	2200      	movs	r2, #0
 800d664:	f7f2 fe12 	bl	800028c <__adddf3>
 800d668:	4605      	mov	r5, r0
 800d66a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d66e:	2c00      	cmp	r4, #0
 800d670:	f040 808d 	bne.w	800d78e <_dtoa_r+0x51e>
 800d674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d678:	4b71      	ldr	r3, [pc, #452]	@ (800d840 <_dtoa_r+0x5d0>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	f7f2 fe04 	bl	8000288 <__aeabi_dsub>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d688:	462a      	mov	r2, r5
 800d68a:	4633      	mov	r3, r6
 800d68c:	f7f3 fa44 	bl	8000b18 <__aeabi_dcmpgt>
 800d690:	2800      	cmp	r0, #0
 800d692:	f040 828b 	bne.w	800dbac <_dtoa_r+0x93c>
 800d696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d69a:	462a      	mov	r2, r5
 800d69c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d6a0:	f7f3 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	f040 8128 	bne.w	800d8fa <_dtoa_r+0x68a>
 800d6aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d6ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d6b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f2c0 815a 	blt.w	800d96e <_dtoa_r+0x6fe>
 800d6ba:	2f0e      	cmp	r7, #14
 800d6bc:	f300 8157 	bgt.w	800d96e <_dtoa_r+0x6fe>
 800d6c0:	4b5a      	ldr	r3, [pc, #360]	@ (800d82c <_dtoa_r+0x5bc>)
 800d6c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6c6:	ed93 7b00 	vldr	d7, [r3]
 800d6ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	ed8d 7b00 	vstr	d7, [sp]
 800d6d2:	da03      	bge.n	800d6dc <_dtoa_r+0x46c>
 800d6d4:	9b07      	ldr	r3, [sp, #28]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	f340 8101 	ble.w	800d8de <_dtoa_r+0x66e>
 800d6dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d6e0:	4656      	mov	r6, sl
 800d6e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	4629      	mov	r1, r5
 800d6ea:	f7f3 f8af 	bl	800084c <__aeabi_ddiv>
 800d6ee:	f7f3 fa33 	bl	8000b58 <__aeabi_d2iz>
 800d6f2:	4680      	mov	r8, r0
 800d6f4:	f7f2 ff16 	bl	8000524 <__aeabi_i2d>
 800d6f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6fc:	f7f2 ff7c 	bl	80005f8 <__aeabi_dmul>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d70c:	f7f2 fdbc 	bl	8000288 <__aeabi_dsub>
 800d710:	f806 4b01 	strb.w	r4, [r6], #1
 800d714:	9d07      	ldr	r5, [sp, #28]
 800d716:	eba6 040a 	sub.w	r4, r6, sl
 800d71a:	42a5      	cmp	r5, r4
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	f040 8117 	bne.w	800d952 <_dtoa_r+0x6e2>
 800d724:	f7f2 fdb2 	bl	800028c <__adddf3>
 800d728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d72c:	4604      	mov	r4, r0
 800d72e:	460d      	mov	r5, r1
 800d730:	f7f3 f9f2 	bl	8000b18 <__aeabi_dcmpgt>
 800d734:	2800      	cmp	r0, #0
 800d736:	f040 80f9 	bne.w	800d92c <_dtoa_r+0x6bc>
 800d73a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d73e:	4620      	mov	r0, r4
 800d740:	4629      	mov	r1, r5
 800d742:	f7f3 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d746:	b118      	cbz	r0, 800d750 <_dtoa_r+0x4e0>
 800d748:	f018 0f01 	tst.w	r8, #1
 800d74c:	f040 80ee 	bne.w	800d92c <_dtoa_r+0x6bc>
 800d750:	4649      	mov	r1, r9
 800d752:	4658      	mov	r0, fp
 800d754:	f000 fc90 	bl	800e078 <_Bfree>
 800d758:	2300      	movs	r3, #0
 800d75a:	7033      	strb	r3, [r6, #0]
 800d75c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d75e:	3701      	adds	r7, #1
 800d760:	601f      	str	r7, [r3, #0]
 800d762:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 831d 	beq.w	800dda4 <_dtoa_r+0xb34>
 800d76a:	601e      	str	r6, [r3, #0]
 800d76c:	e31a      	b.n	800dda4 <_dtoa_r+0xb34>
 800d76e:	07e2      	lsls	r2, r4, #31
 800d770:	d505      	bpl.n	800d77e <_dtoa_r+0x50e>
 800d772:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d776:	f7f2 ff3f 	bl	80005f8 <__aeabi_dmul>
 800d77a:	3601      	adds	r6, #1
 800d77c:	2301      	movs	r3, #1
 800d77e:	1064      	asrs	r4, r4, #1
 800d780:	3508      	adds	r5, #8
 800d782:	e73f      	b.n	800d604 <_dtoa_r+0x394>
 800d784:	2602      	movs	r6, #2
 800d786:	e742      	b.n	800d60e <_dtoa_r+0x39e>
 800d788:	9c07      	ldr	r4, [sp, #28]
 800d78a:	9704      	str	r7, [sp, #16]
 800d78c:	e761      	b.n	800d652 <_dtoa_r+0x3e2>
 800d78e:	4b27      	ldr	r3, [pc, #156]	@ (800d82c <_dtoa_r+0x5bc>)
 800d790:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d792:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d796:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d79a:	4454      	add	r4, sl
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d053      	beq.n	800d848 <_dtoa_r+0x5d8>
 800d7a0:	4928      	ldr	r1, [pc, #160]	@ (800d844 <_dtoa_r+0x5d4>)
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	f7f3 f852 	bl	800084c <__aeabi_ddiv>
 800d7a8:	4633      	mov	r3, r6
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	f7f2 fd6c 	bl	8000288 <__aeabi_dsub>
 800d7b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7b4:	4656      	mov	r6, sl
 800d7b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ba:	f7f3 f9cd 	bl	8000b58 <__aeabi_d2iz>
 800d7be:	4605      	mov	r5, r0
 800d7c0:	f7f2 feb0 	bl	8000524 <__aeabi_i2d>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7cc:	f7f2 fd5c 	bl	8000288 <__aeabi_dsub>
 800d7d0:	3530      	adds	r5, #48	@ 0x30
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7da:	f806 5b01 	strb.w	r5, [r6], #1
 800d7de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7e2:	f7f3 f97b 	bl	8000adc <__aeabi_dcmplt>
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d171      	bne.n	800d8ce <_dtoa_r+0x65e>
 800d7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ee:	4911      	ldr	r1, [pc, #68]	@ (800d834 <_dtoa_r+0x5c4>)
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	f7f2 fd49 	bl	8000288 <__aeabi_dsub>
 800d7f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7fa:	f7f3 f96f 	bl	8000adc <__aeabi_dcmplt>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f040 8095 	bne.w	800d92e <_dtoa_r+0x6be>
 800d804:	42a6      	cmp	r6, r4
 800d806:	f43f af50 	beq.w	800d6aa <_dtoa_r+0x43a>
 800d80a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d80e:	4b0a      	ldr	r3, [pc, #40]	@ (800d838 <_dtoa_r+0x5c8>)
 800d810:	2200      	movs	r2, #0
 800d812:	f7f2 fef1 	bl	80005f8 <__aeabi_dmul>
 800d816:	4b08      	ldr	r3, [pc, #32]	@ (800d838 <_dtoa_r+0x5c8>)
 800d818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d81c:	2200      	movs	r2, #0
 800d81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d822:	f7f2 fee9 	bl	80005f8 <__aeabi_dmul>
 800d826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d82a:	e7c4      	b.n	800d7b6 <_dtoa_r+0x546>
 800d82c:	0800f400 	.word	0x0800f400
 800d830:	0800f3d8 	.word	0x0800f3d8
 800d834:	3ff00000 	.word	0x3ff00000
 800d838:	40240000 	.word	0x40240000
 800d83c:	401c0000 	.word	0x401c0000
 800d840:	40140000 	.word	0x40140000
 800d844:	3fe00000 	.word	0x3fe00000
 800d848:	4631      	mov	r1, r6
 800d84a:	4628      	mov	r0, r5
 800d84c:	f7f2 fed4 	bl	80005f8 <__aeabi_dmul>
 800d850:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d854:	9415      	str	r4, [sp, #84]	@ 0x54
 800d856:	4656      	mov	r6, sl
 800d858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d85c:	f7f3 f97c 	bl	8000b58 <__aeabi_d2iz>
 800d860:	4605      	mov	r5, r0
 800d862:	f7f2 fe5f 	bl	8000524 <__aeabi_i2d>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d86e:	f7f2 fd0b 	bl	8000288 <__aeabi_dsub>
 800d872:	3530      	adds	r5, #48	@ 0x30
 800d874:	f806 5b01 	strb.w	r5, [r6], #1
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	42a6      	cmp	r6, r4
 800d87e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d882:	f04f 0200 	mov.w	r2, #0
 800d886:	d124      	bne.n	800d8d2 <_dtoa_r+0x662>
 800d888:	4bac      	ldr	r3, [pc, #688]	@ (800db3c <_dtoa_r+0x8cc>)
 800d88a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d88e:	f7f2 fcfd 	bl	800028c <__adddf3>
 800d892:	4602      	mov	r2, r0
 800d894:	460b      	mov	r3, r1
 800d896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d89a:	f7f3 f93d 	bl	8000b18 <__aeabi_dcmpgt>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d145      	bne.n	800d92e <_dtoa_r+0x6be>
 800d8a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8a6:	49a5      	ldr	r1, [pc, #660]	@ (800db3c <_dtoa_r+0x8cc>)
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	f7f2 fced 	bl	8000288 <__aeabi_dsub>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8b6:	f7f3 f911 	bl	8000adc <__aeabi_dcmplt>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f43f aef5 	beq.w	800d6aa <_dtoa_r+0x43a>
 800d8c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d8c2:	1e73      	subs	r3, r6, #1
 800d8c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d8c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8ca:	2b30      	cmp	r3, #48	@ 0x30
 800d8cc:	d0f8      	beq.n	800d8c0 <_dtoa_r+0x650>
 800d8ce:	9f04      	ldr	r7, [sp, #16]
 800d8d0:	e73e      	b.n	800d750 <_dtoa_r+0x4e0>
 800d8d2:	4b9b      	ldr	r3, [pc, #620]	@ (800db40 <_dtoa_r+0x8d0>)
 800d8d4:	f7f2 fe90 	bl	80005f8 <__aeabi_dmul>
 800d8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8dc:	e7bc      	b.n	800d858 <_dtoa_r+0x5e8>
 800d8de:	d10c      	bne.n	800d8fa <_dtoa_r+0x68a>
 800d8e0:	4b98      	ldr	r3, [pc, #608]	@ (800db44 <_dtoa_r+0x8d4>)
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8e8:	f7f2 fe86 	bl	80005f8 <__aeabi_dmul>
 800d8ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8f0:	f7f3 f908 	bl	8000b04 <__aeabi_dcmpge>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f000 8157 	beq.w	800dba8 <_dtoa_r+0x938>
 800d8fa:	2400      	movs	r4, #0
 800d8fc:	4625      	mov	r5, r4
 800d8fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d900:	43db      	mvns	r3, r3
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	4656      	mov	r6, sl
 800d906:	2700      	movs	r7, #0
 800d908:	4621      	mov	r1, r4
 800d90a:	4658      	mov	r0, fp
 800d90c:	f000 fbb4 	bl	800e078 <_Bfree>
 800d910:	2d00      	cmp	r5, #0
 800d912:	d0dc      	beq.n	800d8ce <_dtoa_r+0x65e>
 800d914:	b12f      	cbz	r7, 800d922 <_dtoa_r+0x6b2>
 800d916:	42af      	cmp	r7, r5
 800d918:	d003      	beq.n	800d922 <_dtoa_r+0x6b2>
 800d91a:	4639      	mov	r1, r7
 800d91c:	4658      	mov	r0, fp
 800d91e:	f000 fbab 	bl	800e078 <_Bfree>
 800d922:	4629      	mov	r1, r5
 800d924:	4658      	mov	r0, fp
 800d926:	f000 fba7 	bl	800e078 <_Bfree>
 800d92a:	e7d0      	b.n	800d8ce <_dtoa_r+0x65e>
 800d92c:	9704      	str	r7, [sp, #16]
 800d92e:	4633      	mov	r3, r6
 800d930:	461e      	mov	r6, r3
 800d932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d936:	2a39      	cmp	r2, #57	@ 0x39
 800d938:	d107      	bne.n	800d94a <_dtoa_r+0x6da>
 800d93a:	459a      	cmp	sl, r3
 800d93c:	d1f8      	bne.n	800d930 <_dtoa_r+0x6c0>
 800d93e:	9a04      	ldr	r2, [sp, #16]
 800d940:	3201      	adds	r2, #1
 800d942:	9204      	str	r2, [sp, #16]
 800d944:	2230      	movs	r2, #48	@ 0x30
 800d946:	f88a 2000 	strb.w	r2, [sl]
 800d94a:	781a      	ldrb	r2, [r3, #0]
 800d94c:	3201      	adds	r2, #1
 800d94e:	701a      	strb	r2, [r3, #0]
 800d950:	e7bd      	b.n	800d8ce <_dtoa_r+0x65e>
 800d952:	4b7b      	ldr	r3, [pc, #492]	@ (800db40 <_dtoa_r+0x8d0>)
 800d954:	2200      	movs	r2, #0
 800d956:	f7f2 fe4f 	bl	80005f8 <__aeabi_dmul>
 800d95a:	2200      	movs	r2, #0
 800d95c:	2300      	movs	r3, #0
 800d95e:	4604      	mov	r4, r0
 800d960:	460d      	mov	r5, r1
 800d962:	f7f3 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d966:	2800      	cmp	r0, #0
 800d968:	f43f aebb 	beq.w	800d6e2 <_dtoa_r+0x472>
 800d96c:	e6f0      	b.n	800d750 <_dtoa_r+0x4e0>
 800d96e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d970:	2a00      	cmp	r2, #0
 800d972:	f000 80db 	beq.w	800db2c <_dtoa_r+0x8bc>
 800d976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d978:	2a01      	cmp	r2, #1
 800d97a:	f300 80bf 	bgt.w	800dafc <_dtoa_r+0x88c>
 800d97e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d980:	2a00      	cmp	r2, #0
 800d982:	f000 80b7 	beq.w	800daf4 <_dtoa_r+0x884>
 800d986:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d98a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d98c:	4646      	mov	r6, r8
 800d98e:	9a08      	ldr	r2, [sp, #32]
 800d990:	2101      	movs	r1, #1
 800d992:	441a      	add	r2, r3
 800d994:	4658      	mov	r0, fp
 800d996:	4498      	add	r8, r3
 800d998:	9208      	str	r2, [sp, #32]
 800d99a:	f000 fc21 	bl	800e1e0 <__i2b>
 800d99e:	4605      	mov	r5, r0
 800d9a0:	b15e      	cbz	r6, 800d9ba <_dtoa_r+0x74a>
 800d9a2:	9b08      	ldr	r3, [sp, #32]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	dd08      	ble.n	800d9ba <_dtoa_r+0x74a>
 800d9a8:	42b3      	cmp	r3, r6
 800d9aa:	9a08      	ldr	r2, [sp, #32]
 800d9ac:	bfa8      	it	ge
 800d9ae:	4633      	movge	r3, r6
 800d9b0:	eba8 0803 	sub.w	r8, r8, r3
 800d9b4:	1af6      	subs	r6, r6, r3
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	9308      	str	r3, [sp, #32]
 800d9ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9bc:	b1f3      	cbz	r3, 800d9fc <_dtoa_r+0x78c>
 800d9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	f000 80b7 	beq.w	800db34 <_dtoa_r+0x8c4>
 800d9c6:	b18c      	cbz	r4, 800d9ec <_dtoa_r+0x77c>
 800d9c8:	4629      	mov	r1, r5
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	f000 fcc7 	bl	800e360 <__pow5mult>
 800d9d2:	464a      	mov	r2, r9
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	4658      	mov	r0, fp
 800d9da:	f000 fc17 	bl	800e20c <__multiply>
 800d9de:	4649      	mov	r1, r9
 800d9e0:	9004      	str	r0, [sp, #16]
 800d9e2:	4658      	mov	r0, fp
 800d9e4:	f000 fb48 	bl	800e078 <_Bfree>
 800d9e8:	9b04      	ldr	r3, [sp, #16]
 800d9ea:	4699      	mov	r9, r3
 800d9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d9ee:	1b1a      	subs	r2, r3, r4
 800d9f0:	d004      	beq.n	800d9fc <_dtoa_r+0x78c>
 800d9f2:	4649      	mov	r1, r9
 800d9f4:	4658      	mov	r0, fp
 800d9f6:	f000 fcb3 	bl	800e360 <__pow5mult>
 800d9fa:	4681      	mov	r9, r0
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	4658      	mov	r0, fp
 800da00:	f000 fbee 	bl	800e1e0 <__i2b>
 800da04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da06:	4604      	mov	r4, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f000 81cf 	beq.w	800ddac <_dtoa_r+0xb3c>
 800da0e:	461a      	mov	r2, r3
 800da10:	4601      	mov	r1, r0
 800da12:	4658      	mov	r0, fp
 800da14:	f000 fca4 	bl	800e360 <__pow5mult>
 800da18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	4604      	mov	r4, r0
 800da1e:	f300 8095 	bgt.w	800db4c <_dtoa_r+0x8dc>
 800da22:	9b02      	ldr	r3, [sp, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	f040 8087 	bne.w	800db38 <_dtoa_r+0x8c8>
 800da2a:	9b03      	ldr	r3, [sp, #12]
 800da2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da30:	2b00      	cmp	r3, #0
 800da32:	f040 8089 	bne.w	800db48 <_dtoa_r+0x8d8>
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da3c:	0d1b      	lsrs	r3, r3, #20
 800da3e:	051b      	lsls	r3, r3, #20
 800da40:	b12b      	cbz	r3, 800da4e <_dtoa_r+0x7de>
 800da42:	9b08      	ldr	r3, [sp, #32]
 800da44:	3301      	adds	r3, #1
 800da46:	9308      	str	r3, [sp, #32]
 800da48:	f108 0801 	add.w	r8, r8, #1
 800da4c:	2301      	movs	r3, #1
 800da4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 81b0 	beq.w	800ddb8 <_dtoa_r+0xb48>
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da5e:	6918      	ldr	r0, [r3, #16]
 800da60:	f000 fb72 	bl	800e148 <__hi0bits>
 800da64:	f1c0 0020 	rsb	r0, r0, #32
 800da68:	9b08      	ldr	r3, [sp, #32]
 800da6a:	4418      	add	r0, r3
 800da6c:	f010 001f 	ands.w	r0, r0, #31
 800da70:	d077      	beq.n	800db62 <_dtoa_r+0x8f2>
 800da72:	f1c0 0320 	rsb	r3, r0, #32
 800da76:	2b04      	cmp	r3, #4
 800da78:	dd6b      	ble.n	800db52 <_dtoa_r+0x8e2>
 800da7a:	9b08      	ldr	r3, [sp, #32]
 800da7c:	f1c0 001c 	rsb	r0, r0, #28
 800da80:	4403      	add	r3, r0
 800da82:	4480      	add	r8, r0
 800da84:	4406      	add	r6, r0
 800da86:	9308      	str	r3, [sp, #32]
 800da88:	f1b8 0f00 	cmp.w	r8, #0
 800da8c:	dd05      	ble.n	800da9a <_dtoa_r+0x82a>
 800da8e:	4649      	mov	r1, r9
 800da90:	4642      	mov	r2, r8
 800da92:	4658      	mov	r0, fp
 800da94:	f000 fcbe 	bl	800e414 <__lshift>
 800da98:	4681      	mov	r9, r0
 800da9a:	9b08      	ldr	r3, [sp, #32]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd05      	ble.n	800daac <_dtoa_r+0x83c>
 800daa0:	4621      	mov	r1, r4
 800daa2:	461a      	mov	r2, r3
 800daa4:	4658      	mov	r0, fp
 800daa6:	f000 fcb5 	bl	800e414 <__lshift>
 800daaa:	4604      	mov	r4, r0
 800daac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d059      	beq.n	800db66 <_dtoa_r+0x8f6>
 800dab2:	4621      	mov	r1, r4
 800dab4:	4648      	mov	r0, r9
 800dab6:	f000 fd19 	bl	800e4ec <__mcmp>
 800daba:	2800      	cmp	r0, #0
 800dabc:	da53      	bge.n	800db66 <_dtoa_r+0x8f6>
 800dabe:	1e7b      	subs	r3, r7, #1
 800dac0:	9304      	str	r3, [sp, #16]
 800dac2:	4649      	mov	r1, r9
 800dac4:	2300      	movs	r3, #0
 800dac6:	220a      	movs	r2, #10
 800dac8:	4658      	mov	r0, fp
 800daca:	f000 faf7 	bl	800e0bc <__multadd>
 800dace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dad0:	4681      	mov	r9, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f000 8172 	beq.w	800ddbc <_dtoa_r+0xb4c>
 800dad8:	2300      	movs	r3, #0
 800dada:	4629      	mov	r1, r5
 800dadc:	220a      	movs	r2, #10
 800dade:	4658      	mov	r0, fp
 800dae0:	f000 faec 	bl	800e0bc <__multadd>
 800dae4:	9b00      	ldr	r3, [sp, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	4605      	mov	r5, r0
 800daea:	dc67      	bgt.n	800dbbc <_dtoa_r+0x94c>
 800daec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daee:	2b02      	cmp	r3, #2
 800daf0:	dc41      	bgt.n	800db76 <_dtoa_r+0x906>
 800daf2:	e063      	b.n	800dbbc <_dtoa_r+0x94c>
 800daf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800daf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dafa:	e746      	b.n	800d98a <_dtoa_r+0x71a>
 800dafc:	9b07      	ldr	r3, [sp, #28]
 800dafe:	1e5c      	subs	r4, r3, #1
 800db00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db02:	42a3      	cmp	r3, r4
 800db04:	bfbf      	itttt	lt
 800db06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800db08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800db0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800db0c:	1ae3      	sublt	r3, r4, r3
 800db0e:	bfb4      	ite	lt
 800db10:	18d2      	addlt	r2, r2, r3
 800db12:	1b1c      	subge	r4, r3, r4
 800db14:	9b07      	ldr	r3, [sp, #28]
 800db16:	bfbc      	itt	lt
 800db18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800db1a:	2400      	movlt	r4, #0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	bfb5      	itete	lt
 800db20:	eba8 0603 	sublt.w	r6, r8, r3
 800db24:	9b07      	ldrge	r3, [sp, #28]
 800db26:	2300      	movlt	r3, #0
 800db28:	4646      	movge	r6, r8
 800db2a:	e730      	b.n	800d98e <_dtoa_r+0x71e>
 800db2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800db2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800db30:	4646      	mov	r6, r8
 800db32:	e735      	b.n	800d9a0 <_dtoa_r+0x730>
 800db34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800db36:	e75c      	b.n	800d9f2 <_dtoa_r+0x782>
 800db38:	2300      	movs	r3, #0
 800db3a:	e788      	b.n	800da4e <_dtoa_r+0x7de>
 800db3c:	3fe00000 	.word	0x3fe00000
 800db40:	40240000 	.word	0x40240000
 800db44:	40140000 	.word	0x40140000
 800db48:	9b02      	ldr	r3, [sp, #8]
 800db4a:	e780      	b.n	800da4e <_dtoa_r+0x7de>
 800db4c:	2300      	movs	r3, #0
 800db4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800db50:	e782      	b.n	800da58 <_dtoa_r+0x7e8>
 800db52:	d099      	beq.n	800da88 <_dtoa_r+0x818>
 800db54:	9a08      	ldr	r2, [sp, #32]
 800db56:	331c      	adds	r3, #28
 800db58:	441a      	add	r2, r3
 800db5a:	4498      	add	r8, r3
 800db5c:	441e      	add	r6, r3
 800db5e:	9208      	str	r2, [sp, #32]
 800db60:	e792      	b.n	800da88 <_dtoa_r+0x818>
 800db62:	4603      	mov	r3, r0
 800db64:	e7f6      	b.n	800db54 <_dtoa_r+0x8e4>
 800db66:	9b07      	ldr	r3, [sp, #28]
 800db68:	9704      	str	r7, [sp, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	dc20      	bgt.n	800dbb0 <_dtoa_r+0x940>
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db72:	2b02      	cmp	r3, #2
 800db74:	dd1e      	ble.n	800dbb4 <_dtoa_r+0x944>
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f47f aec0 	bne.w	800d8fe <_dtoa_r+0x68e>
 800db7e:	4621      	mov	r1, r4
 800db80:	2205      	movs	r2, #5
 800db82:	4658      	mov	r0, fp
 800db84:	f000 fa9a 	bl	800e0bc <__multadd>
 800db88:	4601      	mov	r1, r0
 800db8a:	4604      	mov	r4, r0
 800db8c:	4648      	mov	r0, r9
 800db8e:	f000 fcad 	bl	800e4ec <__mcmp>
 800db92:	2800      	cmp	r0, #0
 800db94:	f77f aeb3 	ble.w	800d8fe <_dtoa_r+0x68e>
 800db98:	4656      	mov	r6, sl
 800db9a:	2331      	movs	r3, #49	@ 0x31
 800db9c:	f806 3b01 	strb.w	r3, [r6], #1
 800dba0:	9b04      	ldr	r3, [sp, #16]
 800dba2:	3301      	adds	r3, #1
 800dba4:	9304      	str	r3, [sp, #16]
 800dba6:	e6ae      	b.n	800d906 <_dtoa_r+0x696>
 800dba8:	9c07      	ldr	r4, [sp, #28]
 800dbaa:	9704      	str	r7, [sp, #16]
 800dbac:	4625      	mov	r5, r4
 800dbae:	e7f3      	b.n	800db98 <_dtoa_r+0x928>
 800dbb0:	9b07      	ldr	r3, [sp, #28]
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f000 8104 	beq.w	800ddc4 <_dtoa_r+0xb54>
 800dbbc:	2e00      	cmp	r6, #0
 800dbbe:	dd05      	ble.n	800dbcc <_dtoa_r+0x95c>
 800dbc0:	4629      	mov	r1, r5
 800dbc2:	4632      	mov	r2, r6
 800dbc4:	4658      	mov	r0, fp
 800dbc6:	f000 fc25 	bl	800e414 <__lshift>
 800dbca:	4605      	mov	r5, r0
 800dbcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d05a      	beq.n	800dc88 <_dtoa_r+0xa18>
 800dbd2:	6869      	ldr	r1, [r5, #4]
 800dbd4:	4658      	mov	r0, fp
 800dbd6:	f000 fa0f 	bl	800dff8 <_Balloc>
 800dbda:	4606      	mov	r6, r0
 800dbdc:	b928      	cbnz	r0, 800dbea <_dtoa_r+0x97a>
 800dbde:	4b84      	ldr	r3, [pc, #528]	@ (800ddf0 <_dtoa_r+0xb80>)
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbe6:	f7ff bb5a 	b.w	800d29e <_dtoa_r+0x2e>
 800dbea:	692a      	ldr	r2, [r5, #16]
 800dbec:	3202      	adds	r2, #2
 800dbee:	0092      	lsls	r2, r2, #2
 800dbf0:	f105 010c 	add.w	r1, r5, #12
 800dbf4:	300c      	adds	r0, #12
 800dbf6:	f000 ffaf 	bl	800eb58 <memcpy>
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	4631      	mov	r1, r6
 800dbfe:	4658      	mov	r0, fp
 800dc00:	f000 fc08 	bl	800e414 <__lshift>
 800dc04:	f10a 0301 	add.w	r3, sl, #1
 800dc08:	9307      	str	r3, [sp, #28]
 800dc0a:	9b00      	ldr	r3, [sp, #0]
 800dc0c:	4453      	add	r3, sl
 800dc0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc10:	9b02      	ldr	r3, [sp, #8]
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	462f      	mov	r7, r5
 800dc18:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	9b07      	ldr	r3, [sp, #28]
 800dc1e:	4621      	mov	r1, r4
 800dc20:	3b01      	subs	r3, #1
 800dc22:	4648      	mov	r0, r9
 800dc24:	9300      	str	r3, [sp, #0]
 800dc26:	f7ff fa9a 	bl	800d15e <quorem>
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	9002      	str	r0, [sp, #8]
 800dc2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dc32:	4648      	mov	r0, r9
 800dc34:	f000 fc5a 	bl	800e4ec <__mcmp>
 800dc38:	462a      	mov	r2, r5
 800dc3a:	9008      	str	r0, [sp, #32]
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	4658      	mov	r0, fp
 800dc40:	f000 fc70 	bl	800e524 <__mdiff>
 800dc44:	68c2      	ldr	r2, [r0, #12]
 800dc46:	4606      	mov	r6, r0
 800dc48:	bb02      	cbnz	r2, 800dc8c <_dtoa_r+0xa1c>
 800dc4a:	4601      	mov	r1, r0
 800dc4c:	4648      	mov	r0, r9
 800dc4e:	f000 fc4d 	bl	800e4ec <__mcmp>
 800dc52:	4602      	mov	r2, r0
 800dc54:	4631      	mov	r1, r6
 800dc56:	4658      	mov	r0, fp
 800dc58:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc5a:	f000 fa0d 	bl	800e078 <_Bfree>
 800dc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc62:	9e07      	ldr	r6, [sp, #28]
 800dc64:	ea43 0102 	orr.w	r1, r3, r2
 800dc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc6a:	4319      	orrs	r1, r3
 800dc6c:	d110      	bne.n	800dc90 <_dtoa_r+0xa20>
 800dc6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc72:	d029      	beq.n	800dcc8 <_dtoa_r+0xa58>
 800dc74:	9b08      	ldr	r3, [sp, #32]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	dd02      	ble.n	800dc80 <_dtoa_r+0xa10>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dc80:	9b00      	ldr	r3, [sp, #0]
 800dc82:	f883 8000 	strb.w	r8, [r3]
 800dc86:	e63f      	b.n	800d908 <_dtoa_r+0x698>
 800dc88:	4628      	mov	r0, r5
 800dc8a:	e7bb      	b.n	800dc04 <_dtoa_r+0x994>
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	e7e1      	b.n	800dc54 <_dtoa_r+0x9e4>
 800dc90:	9b08      	ldr	r3, [sp, #32]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	db04      	blt.n	800dca0 <_dtoa_r+0xa30>
 800dc96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dc98:	430b      	orrs	r3, r1
 800dc9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc9c:	430b      	orrs	r3, r1
 800dc9e:	d120      	bne.n	800dce2 <_dtoa_r+0xa72>
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	dded      	ble.n	800dc80 <_dtoa_r+0xa10>
 800dca4:	4649      	mov	r1, r9
 800dca6:	2201      	movs	r2, #1
 800dca8:	4658      	mov	r0, fp
 800dcaa:	f000 fbb3 	bl	800e414 <__lshift>
 800dcae:	4621      	mov	r1, r4
 800dcb0:	4681      	mov	r9, r0
 800dcb2:	f000 fc1b 	bl	800e4ec <__mcmp>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	dc03      	bgt.n	800dcc2 <_dtoa_r+0xa52>
 800dcba:	d1e1      	bne.n	800dc80 <_dtoa_r+0xa10>
 800dcbc:	f018 0f01 	tst.w	r8, #1
 800dcc0:	d0de      	beq.n	800dc80 <_dtoa_r+0xa10>
 800dcc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcc6:	d1d8      	bne.n	800dc7a <_dtoa_r+0xa0a>
 800dcc8:	9a00      	ldr	r2, [sp, #0]
 800dcca:	2339      	movs	r3, #57	@ 0x39
 800dccc:	7013      	strb	r3, [r2, #0]
 800dcce:	4633      	mov	r3, r6
 800dcd0:	461e      	mov	r6, r3
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcd8:	2a39      	cmp	r2, #57	@ 0x39
 800dcda:	d052      	beq.n	800dd82 <_dtoa_r+0xb12>
 800dcdc:	3201      	adds	r2, #1
 800dcde:	701a      	strb	r2, [r3, #0]
 800dce0:	e612      	b.n	800d908 <_dtoa_r+0x698>
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	dd07      	ble.n	800dcf6 <_dtoa_r+0xa86>
 800dce6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dcea:	d0ed      	beq.n	800dcc8 <_dtoa_r+0xa58>
 800dcec:	9a00      	ldr	r2, [sp, #0]
 800dcee:	f108 0301 	add.w	r3, r8, #1
 800dcf2:	7013      	strb	r3, [r2, #0]
 800dcf4:	e608      	b.n	800d908 <_dtoa_r+0x698>
 800dcf6:	9b07      	ldr	r3, [sp, #28]
 800dcf8:	9a07      	ldr	r2, [sp, #28]
 800dcfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dcfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d028      	beq.n	800dd56 <_dtoa_r+0xae6>
 800dd04:	4649      	mov	r1, r9
 800dd06:	2300      	movs	r3, #0
 800dd08:	220a      	movs	r2, #10
 800dd0a:	4658      	mov	r0, fp
 800dd0c:	f000 f9d6 	bl	800e0bc <__multadd>
 800dd10:	42af      	cmp	r7, r5
 800dd12:	4681      	mov	r9, r0
 800dd14:	f04f 0300 	mov.w	r3, #0
 800dd18:	f04f 020a 	mov.w	r2, #10
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	4658      	mov	r0, fp
 800dd20:	d107      	bne.n	800dd32 <_dtoa_r+0xac2>
 800dd22:	f000 f9cb 	bl	800e0bc <__multadd>
 800dd26:	4607      	mov	r7, r0
 800dd28:	4605      	mov	r5, r0
 800dd2a:	9b07      	ldr	r3, [sp, #28]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	9307      	str	r3, [sp, #28]
 800dd30:	e774      	b.n	800dc1c <_dtoa_r+0x9ac>
 800dd32:	f000 f9c3 	bl	800e0bc <__multadd>
 800dd36:	4629      	mov	r1, r5
 800dd38:	4607      	mov	r7, r0
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	220a      	movs	r2, #10
 800dd3e:	4658      	mov	r0, fp
 800dd40:	f000 f9bc 	bl	800e0bc <__multadd>
 800dd44:	4605      	mov	r5, r0
 800dd46:	e7f0      	b.n	800dd2a <_dtoa_r+0xaba>
 800dd48:	9b00      	ldr	r3, [sp, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	bfcc      	ite	gt
 800dd4e:	461e      	movgt	r6, r3
 800dd50:	2601      	movle	r6, #1
 800dd52:	4456      	add	r6, sl
 800dd54:	2700      	movs	r7, #0
 800dd56:	4649      	mov	r1, r9
 800dd58:	2201      	movs	r2, #1
 800dd5a:	4658      	mov	r0, fp
 800dd5c:	f000 fb5a 	bl	800e414 <__lshift>
 800dd60:	4621      	mov	r1, r4
 800dd62:	4681      	mov	r9, r0
 800dd64:	f000 fbc2 	bl	800e4ec <__mcmp>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	dcb0      	bgt.n	800dcce <_dtoa_r+0xa5e>
 800dd6c:	d102      	bne.n	800dd74 <_dtoa_r+0xb04>
 800dd6e:	f018 0f01 	tst.w	r8, #1
 800dd72:	d1ac      	bne.n	800dcce <_dtoa_r+0xa5e>
 800dd74:	4633      	mov	r3, r6
 800dd76:	461e      	mov	r6, r3
 800dd78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd7c:	2a30      	cmp	r2, #48	@ 0x30
 800dd7e:	d0fa      	beq.n	800dd76 <_dtoa_r+0xb06>
 800dd80:	e5c2      	b.n	800d908 <_dtoa_r+0x698>
 800dd82:	459a      	cmp	sl, r3
 800dd84:	d1a4      	bne.n	800dcd0 <_dtoa_r+0xa60>
 800dd86:	9b04      	ldr	r3, [sp, #16]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	9304      	str	r3, [sp, #16]
 800dd8c:	2331      	movs	r3, #49	@ 0x31
 800dd8e:	f88a 3000 	strb.w	r3, [sl]
 800dd92:	e5b9      	b.n	800d908 <_dtoa_r+0x698>
 800dd94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ddf4 <_dtoa_r+0xb84>
 800dd9a:	b11b      	cbz	r3, 800dda4 <_dtoa_r+0xb34>
 800dd9c:	f10a 0308 	add.w	r3, sl, #8
 800dda0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dda2:	6013      	str	r3, [r2, #0]
 800dda4:	4650      	mov	r0, sl
 800dda6:	b019      	add	sp, #100	@ 0x64
 800dda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	f77f ae37 	ble.w	800da22 <_dtoa_r+0x7b2>
 800ddb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddb8:	2001      	movs	r0, #1
 800ddba:	e655      	b.n	800da68 <_dtoa_r+0x7f8>
 800ddbc:	9b00      	ldr	r3, [sp, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f77f aed6 	ble.w	800db70 <_dtoa_r+0x900>
 800ddc4:	4656      	mov	r6, sl
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	4648      	mov	r0, r9
 800ddca:	f7ff f9c8 	bl	800d15e <quorem>
 800ddce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ddd2:	f806 8b01 	strb.w	r8, [r6], #1
 800ddd6:	9b00      	ldr	r3, [sp, #0]
 800ddd8:	eba6 020a 	sub.w	r2, r6, sl
 800dddc:	4293      	cmp	r3, r2
 800ddde:	ddb3      	ble.n	800dd48 <_dtoa_r+0xad8>
 800dde0:	4649      	mov	r1, r9
 800dde2:	2300      	movs	r3, #0
 800dde4:	220a      	movs	r2, #10
 800dde6:	4658      	mov	r0, fp
 800dde8:	f000 f968 	bl	800e0bc <__multadd>
 800ddec:	4681      	mov	r9, r0
 800ddee:	e7ea      	b.n	800ddc6 <_dtoa_r+0xb56>
 800ddf0:	0800f360 	.word	0x0800f360
 800ddf4:	0800f2e4 	.word	0x0800f2e4

0800ddf8 <_free_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	2900      	cmp	r1, #0
 800ddfe:	d041      	beq.n	800de84 <_free_r+0x8c>
 800de00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de04:	1f0c      	subs	r4, r1, #4
 800de06:	2b00      	cmp	r3, #0
 800de08:	bfb8      	it	lt
 800de0a:	18e4      	addlt	r4, r4, r3
 800de0c:	f000 f8e8 	bl	800dfe0 <__malloc_lock>
 800de10:	4a1d      	ldr	r2, [pc, #116]	@ (800de88 <_free_r+0x90>)
 800de12:	6813      	ldr	r3, [r2, #0]
 800de14:	b933      	cbnz	r3, 800de24 <_free_r+0x2c>
 800de16:	6063      	str	r3, [r4, #4]
 800de18:	6014      	str	r4, [r2, #0]
 800de1a:	4628      	mov	r0, r5
 800de1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de20:	f000 b8e4 	b.w	800dfec <__malloc_unlock>
 800de24:	42a3      	cmp	r3, r4
 800de26:	d908      	bls.n	800de3a <_free_r+0x42>
 800de28:	6820      	ldr	r0, [r4, #0]
 800de2a:	1821      	adds	r1, r4, r0
 800de2c:	428b      	cmp	r3, r1
 800de2e:	bf01      	itttt	eq
 800de30:	6819      	ldreq	r1, [r3, #0]
 800de32:	685b      	ldreq	r3, [r3, #4]
 800de34:	1809      	addeq	r1, r1, r0
 800de36:	6021      	streq	r1, [r4, #0]
 800de38:	e7ed      	b.n	800de16 <_free_r+0x1e>
 800de3a:	461a      	mov	r2, r3
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	b10b      	cbz	r3, 800de44 <_free_r+0x4c>
 800de40:	42a3      	cmp	r3, r4
 800de42:	d9fa      	bls.n	800de3a <_free_r+0x42>
 800de44:	6811      	ldr	r1, [r2, #0]
 800de46:	1850      	adds	r0, r2, r1
 800de48:	42a0      	cmp	r0, r4
 800de4a:	d10b      	bne.n	800de64 <_free_r+0x6c>
 800de4c:	6820      	ldr	r0, [r4, #0]
 800de4e:	4401      	add	r1, r0
 800de50:	1850      	adds	r0, r2, r1
 800de52:	4283      	cmp	r3, r0
 800de54:	6011      	str	r1, [r2, #0]
 800de56:	d1e0      	bne.n	800de1a <_free_r+0x22>
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	6053      	str	r3, [r2, #4]
 800de5e:	4408      	add	r0, r1
 800de60:	6010      	str	r0, [r2, #0]
 800de62:	e7da      	b.n	800de1a <_free_r+0x22>
 800de64:	d902      	bls.n	800de6c <_free_r+0x74>
 800de66:	230c      	movs	r3, #12
 800de68:	602b      	str	r3, [r5, #0]
 800de6a:	e7d6      	b.n	800de1a <_free_r+0x22>
 800de6c:	6820      	ldr	r0, [r4, #0]
 800de6e:	1821      	adds	r1, r4, r0
 800de70:	428b      	cmp	r3, r1
 800de72:	bf04      	itt	eq
 800de74:	6819      	ldreq	r1, [r3, #0]
 800de76:	685b      	ldreq	r3, [r3, #4]
 800de78:	6063      	str	r3, [r4, #4]
 800de7a:	bf04      	itt	eq
 800de7c:	1809      	addeq	r1, r1, r0
 800de7e:	6021      	streq	r1, [r4, #0]
 800de80:	6054      	str	r4, [r2, #4]
 800de82:	e7ca      	b.n	800de1a <_free_r+0x22>
 800de84:	bd38      	pop	{r3, r4, r5, pc}
 800de86:	bf00      	nop
 800de88:	200050d4 	.word	0x200050d4

0800de8c <malloc>:
 800de8c:	4b02      	ldr	r3, [pc, #8]	@ (800de98 <malloc+0xc>)
 800de8e:	4601      	mov	r1, r0
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	f000 b825 	b.w	800dee0 <_malloc_r>
 800de96:	bf00      	nop
 800de98:	20000150 	.word	0x20000150

0800de9c <sbrk_aligned>:
 800de9c:	b570      	push	{r4, r5, r6, lr}
 800de9e:	4e0f      	ldr	r6, [pc, #60]	@ (800dedc <sbrk_aligned+0x40>)
 800dea0:	460c      	mov	r4, r1
 800dea2:	6831      	ldr	r1, [r6, #0]
 800dea4:	4605      	mov	r5, r0
 800dea6:	b911      	cbnz	r1, 800deae <sbrk_aligned+0x12>
 800dea8:	f000 fe46 	bl	800eb38 <_sbrk_r>
 800deac:	6030      	str	r0, [r6, #0]
 800deae:	4621      	mov	r1, r4
 800deb0:	4628      	mov	r0, r5
 800deb2:	f000 fe41 	bl	800eb38 <_sbrk_r>
 800deb6:	1c43      	adds	r3, r0, #1
 800deb8:	d103      	bne.n	800dec2 <sbrk_aligned+0x26>
 800deba:	f04f 34ff 	mov.w	r4, #4294967295
 800debe:	4620      	mov	r0, r4
 800dec0:	bd70      	pop	{r4, r5, r6, pc}
 800dec2:	1cc4      	adds	r4, r0, #3
 800dec4:	f024 0403 	bic.w	r4, r4, #3
 800dec8:	42a0      	cmp	r0, r4
 800deca:	d0f8      	beq.n	800debe <sbrk_aligned+0x22>
 800decc:	1a21      	subs	r1, r4, r0
 800dece:	4628      	mov	r0, r5
 800ded0:	f000 fe32 	bl	800eb38 <_sbrk_r>
 800ded4:	3001      	adds	r0, #1
 800ded6:	d1f2      	bne.n	800debe <sbrk_aligned+0x22>
 800ded8:	e7ef      	b.n	800deba <sbrk_aligned+0x1e>
 800deda:	bf00      	nop
 800dedc:	200050d0 	.word	0x200050d0

0800dee0 <_malloc_r>:
 800dee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee4:	1ccd      	adds	r5, r1, #3
 800dee6:	f025 0503 	bic.w	r5, r5, #3
 800deea:	3508      	adds	r5, #8
 800deec:	2d0c      	cmp	r5, #12
 800deee:	bf38      	it	cc
 800def0:	250c      	movcc	r5, #12
 800def2:	2d00      	cmp	r5, #0
 800def4:	4606      	mov	r6, r0
 800def6:	db01      	blt.n	800defc <_malloc_r+0x1c>
 800def8:	42a9      	cmp	r1, r5
 800defa:	d904      	bls.n	800df06 <_malloc_r+0x26>
 800defc:	230c      	movs	r3, #12
 800defe:	6033      	str	r3, [r6, #0]
 800df00:	2000      	movs	r0, #0
 800df02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfdc <_malloc_r+0xfc>
 800df0a:	f000 f869 	bl	800dfe0 <__malloc_lock>
 800df0e:	f8d8 3000 	ldr.w	r3, [r8]
 800df12:	461c      	mov	r4, r3
 800df14:	bb44      	cbnz	r4, 800df68 <_malloc_r+0x88>
 800df16:	4629      	mov	r1, r5
 800df18:	4630      	mov	r0, r6
 800df1a:	f7ff ffbf 	bl	800de9c <sbrk_aligned>
 800df1e:	1c43      	adds	r3, r0, #1
 800df20:	4604      	mov	r4, r0
 800df22:	d158      	bne.n	800dfd6 <_malloc_r+0xf6>
 800df24:	f8d8 4000 	ldr.w	r4, [r8]
 800df28:	4627      	mov	r7, r4
 800df2a:	2f00      	cmp	r7, #0
 800df2c:	d143      	bne.n	800dfb6 <_malloc_r+0xd6>
 800df2e:	2c00      	cmp	r4, #0
 800df30:	d04b      	beq.n	800dfca <_malloc_r+0xea>
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	4639      	mov	r1, r7
 800df36:	4630      	mov	r0, r6
 800df38:	eb04 0903 	add.w	r9, r4, r3
 800df3c:	f000 fdfc 	bl	800eb38 <_sbrk_r>
 800df40:	4581      	cmp	r9, r0
 800df42:	d142      	bne.n	800dfca <_malloc_r+0xea>
 800df44:	6821      	ldr	r1, [r4, #0]
 800df46:	1a6d      	subs	r5, r5, r1
 800df48:	4629      	mov	r1, r5
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7ff ffa6 	bl	800de9c <sbrk_aligned>
 800df50:	3001      	adds	r0, #1
 800df52:	d03a      	beq.n	800dfca <_malloc_r+0xea>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	442b      	add	r3, r5
 800df58:	6023      	str	r3, [r4, #0]
 800df5a:	f8d8 3000 	ldr.w	r3, [r8]
 800df5e:	685a      	ldr	r2, [r3, #4]
 800df60:	bb62      	cbnz	r2, 800dfbc <_malloc_r+0xdc>
 800df62:	f8c8 7000 	str.w	r7, [r8]
 800df66:	e00f      	b.n	800df88 <_malloc_r+0xa8>
 800df68:	6822      	ldr	r2, [r4, #0]
 800df6a:	1b52      	subs	r2, r2, r5
 800df6c:	d420      	bmi.n	800dfb0 <_malloc_r+0xd0>
 800df6e:	2a0b      	cmp	r2, #11
 800df70:	d917      	bls.n	800dfa2 <_malloc_r+0xc2>
 800df72:	1961      	adds	r1, r4, r5
 800df74:	42a3      	cmp	r3, r4
 800df76:	6025      	str	r5, [r4, #0]
 800df78:	bf18      	it	ne
 800df7a:	6059      	strne	r1, [r3, #4]
 800df7c:	6863      	ldr	r3, [r4, #4]
 800df7e:	bf08      	it	eq
 800df80:	f8c8 1000 	streq.w	r1, [r8]
 800df84:	5162      	str	r2, [r4, r5]
 800df86:	604b      	str	r3, [r1, #4]
 800df88:	4630      	mov	r0, r6
 800df8a:	f000 f82f 	bl	800dfec <__malloc_unlock>
 800df8e:	f104 000b 	add.w	r0, r4, #11
 800df92:	1d23      	adds	r3, r4, #4
 800df94:	f020 0007 	bic.w	r0, r0, #7
 800df98:	1ac2      	subs	r2, r0, r3
 800df9a:	bf1c      	itt	ne
 800df9c:	1a1b      	subne	r3, r3, r0
 800df9e:	50a3      	strne	r3, [r4, r2]
 800dfa0:	e7af      	b.n	800df02 <_malloc_r+0x22>
 800dfa2:	6862      	ldr	r2, [r4, #4]
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	bf0c      	ite	eq
 800dfa8:	f8c8 2000 	streq.w	r2, [r8]
 800dfac:	605a      	strne	r2, [r3, #4]
 800dfae:	e7eb      	b.n	800df88 <_malloc_r+0xa8>
 800dfb0:	4623      	mov	r3, r4
 800dfb2:	6864      	ldr	r4, [r4, #4]
 800dfb4:	e7ae      	b.n	800df14 <_malloc_r+0x34>
 800dfb6:	463c      	mov	r4, r7
 800dfb8:	687f      	ldr	r7, [r7, #4]
 800dfba:	e7b6      	b.n	800df2a <_malloc_r+0x4a>
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	685b      	ldr	r3, [r3, #4]
 800dfc0:	42a3      	cmp	r3, r4
 800dfc2:	d1fb      	bne.n	800dfbc <_malloc_r+0xdc>
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	6053      	str	r3, [r2, #4]
 800dfc8:	e7de      	b.n	800df88 <_malloc_r+0xa8>
 800dfca:	230c      	movs	r3, #12
 800dfcc:	6033      	str	r3, [r6, #0]
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f000 f80c 	bl	800dfec <__malloc_unlock>
 800dfd4:	e794      	b.n	800df00 <_malloc_r+0x20>
 800dfd6:	6005      	str	r5, [r0, #0]
 800dfd8:	e7d6      	b.n	800df88 <_malloc_r+0xa8>
 800dfda:	bf00      	nop
 800dfdc:	200050d4 	.word	0x200050d4

0800dfe0 <__malloc_lock>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	@ (800dfe8 <__malloc_lock+0x8>)
 800dfe2:	f7ff b8ba 	b.w	800d15a <__retarget_lock_acquire_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	200050cc 	.word	0x200050cc

0800dfec <__malloc_unlock>:
 800dfec:	4801      	ldr	r0, [pc, #4]	@ (800dff4 <__malloc_unlock+0x8>)
 800dfee:	f7ff b8b5 	b.w	800d15c <__retarget_lock_release_recursive>
 800dff2:	bf00      	nop
 800dff4:	200050cc 	.word	0x200050cc

0800dff8 <_Balloc>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	69c6      	ldr	r6, [r0, #28]
 800dffc:	4604      	mov	r4, r0
 800dffe:	460d      	mov	r5, r1
 800e000:	b976      	cbnz	r6, 800e020 <_Balloc+0x28>
 800e002:	2010      	movs	r0, #16
 800e004:	f7ff ff42 	bl	800de8c <malloc>
 800e008:	4602      	mov	r2, r0
 800e00a:	61e0      	str	r0, [r4, #28]
 800e00c:	b920      	cbnz	r0, 800e018 <_Balloc+0x20>
 800e00e:	4b18      	ldr	r3, [pc, #96]	@ (800e070 <_Balloc+0x78>)
 800e010:	4818      	ldr	r0, [pc, #96]	@ (800e074 <_Balloc+0x7c>)
 800e012:	216b      	movs	r1, #107	@ 0x6b
 800e014:	f000 fdae 	bl	800eb74 <__assert_func>
 800e018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e01c:	6006      	str	r6, [r0, #0]
 800e01e:	60c6      	str	r6, [r0, #12]
 800e020:	69e6      	ldr	r6, [r4, #28]
 800e022:	68f3      	ldr	r3, [r6, #12]
 800e024:	b183      	cbz	r3, 800e048 <_Balloc+0x50>
 800e026:	69e3      	ldr	r3, [r4, #28]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e02e:	b9b8      	cbnz	r0, 800e060 <_Balloc+0x68>
 800e030:	2101      	movs	r1, #1
 800e032:	fa01 f605 	lsl.w	r6, r1, r5
 800e036:	1d72      	adds	r2, r6, #5
 800e038:	0092      	lsls	r2, r2, #2
 800e03a:	4620      	mov	r0, r4
 800e03c:	f000 fdb8 	bl	800ebb0 <_calloc_r>
 800e040:	b160      	cbz	r0, 800e05c <_Balloc+0x64>
 800e042:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e046:	e00e      	b.n	800e066 <_Balloc+0x6e>
 800e048:	2221      	movs	r2, #33	@ 0x21
 800e04a:	2104      	movs	r1, #4
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 fdaf 	bl	800ebb0 <_calloc_r>
 800e052:	69e3      	ldr	r3, [r4, #28]
 800e054:	60f0      	str	r0, [r6, #12]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1e4      	bne.n	800e026 <_Balloc+0x2e>
 800e05c:	2000      	movs	r0, #0
 800e05e:	bd70      	pop	{r4, r5, r6, pc}
 800e060:	6802      	ldr	r2, [r0, #0]
 800e062:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e066:	2300      	movs	r3, #0
 800e068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e06c:	e7f7      	b.n	800e05e <_Balloc+0x66>
 800e06e:	bf00      	nop
 800e070:	0800f2f1 	.word	0x0800f2f1
 800e074:	0800f371 	.word	0x0800f371

0800e078 <_Bfree>:
 800e078:	b570      	push	{r4, r5, r6, lr}
 800e07a:	69c6      	ldr	r6, [r0, #28]
 800e07c:	4605      	mov	r5, r0
 800e07e:	460c      	mov	r4, r1
 800e080:	b976      	cbnz	r6, 800e0a0 <_Bfree+0x28>
 800e082:	2010      	movs	r0, #16
 800e084:	f7ff ff02 	bl	800de8c <malloc>
 800e088:	4602      	mov	r2, r0
 800e08a:	61e8      	str	r0, [r5, #28]
 800e08c:	b920      	cbnz	r0, 800e098 <_Bfree+0x20>
 800e08e:	4b09      	ldr	r3, [pc, #36]	@ (800e0b4 <_Bfree+0x3c>)
 800e090:	4809      	ldr	r0, [pc, #36]	@ (800e0b8 <_Bfree+0x40>)
 800e092:	218f      	movs	r1, #143	@ 0x8f
 800e094:	f000 fd6e 	bl	800eb74 <__assert_func>
 800e098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e09c:	6006      	str	r6, [r0, #0]
 800e09e:	60c6      	str	r6, [r0, #12]
 800e0a0:	b13c      	cbz	r4, 800e0b2 <_Bfree+0x3a>
 800e0a2:	69eb      	ldr	r3, [r5, #28]
 800e0a4:	6862      	ldr	r2, [r4, #4]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0ac:	6021      	str	r1, [r4, #0]
 800e0ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	0800f2f1 	.word	0x0800f2f1
 800e0b8:	0800f371 	.word	0x0800f371

0800e0bc <__multadd>:
 800e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c0:	690d      	ldr	r5, [r1, #16]
 800e0c2:	4607      	mov	r7, r0
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	461e      	mov	r6, r3
 800e0c8:	f101 0c14 	add.w	ip, r1, #20
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	f8dc 3000 	ldr.w	r3, [ip]
 800e0d2:	b299      	uxth	r1, r3
 800e0d4:	fb02 6101 	mla	r1, r2, r1, r6
 800e0d8:	0c1e      	lsrs	r6, r3, #16
 800e0da:	0c0b      	lsrs	r3, r1, #16
 800e0dc:	fb02 3306 	mla	r3, r2, r6, r3
 800e0e0:	b289      	uxth	r1, r1
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0e8:	4285      	cmp	r5, r0
 800e0ea:	f84c 1b04 	str.w	r1, [ip], #4
 800e0ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0f2:	dcec      	bgt.n	800e0ce <__multadd+0x12>
 800e0f4:	b30e      	cbz	r6, 800e13a <__multadd+0x7e>
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	42ab      	cmp	r3, r5
 800e0fa:	dc19      	bgt.n	800e130 <__multadd+0x74>
 800e0fc:	6861      	ldr	r1, [r4, #4]
 800e0fe:	4638      	mov	r0, r7
 800e100:	3101      	adds	r1, #1
 800e102:	f7ff ff79 	bl	800dff8 <_Balloc>
 800e106:	4680      	mov	r8, r0
 800e108:	b928      	cbnz	r0, 800e116 <__multadd+0x5a>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4b0c      	ldr	r3, [pc, #48]	@ (800e140 <__multadd+0x84>)
 800e10e:	480d      	ldr	r0, [pc, #52]	@ (800e144 <__multadd+0x88>)
 800e110:	21ba      	movs	r1, #186	@ 0xba
 800e112:	f000 fd2f 	bl	800eb74 <__assert_func>
 800e116:	6922      	ldr	r2, [r4, #16]
 800e118:	3202      	adds	r2, #2
 800e11a:	f104 010c 	add.w	r1, r4, #12
 800e11e:	0092      	lsls	r2, r2, #2
 800e120:	300c      	adds	r0, #12
 800e122:	f000 fd19 	bl	800eb58 <memcpy>
 800e126:	4621      	mov	r1, r4
 800e128:	4638      	mov	r0, r7
 800e12a:	f7ff ffa5 	bl	800e078 <_Bfree>
 800e12e:	4644      	mov	r4, r8
 800e130:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e134:	3501      	adds	r5, #1
 800e136:	615e      	str	r6, [r3, #20]
 800e138:	6125      	str	r5, [r4, #16]
 800e13a:	4620      	mov	r0, r4
 800e13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e140:	0800f360 	.word	0x0800f360
 800e144:	0800f371 	.word	0x0800f371

0800e148 <__hi0bits>:
 800e148:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e14c:	4603      	mov	r3, r0
 800e14e:	bf36      	itet	cc
 800e150:	0403      	lslcc	r3, r0, #16
 800e152:	2000      	movcs	r0, #0
 800e154:	2010      	movcc	r0, #16
 800e156:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e15a:	bf3c      	itt	cc
 800e15c:	021b      	lslcc	r3, r3, #8
 800e15e:	3008      	addcc	r0, #8
 800e160:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e164:	bf3c      	itt	cc
 800e166:	011b      	lslcc	r3, r3, #4
 800e168:	3004      	addcc	r0, #4
 800e16a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e16e:	bf3c      	itt	cc
 800e170:	009b      	lslcc	r3, r3, #2
 800e172:	3002      	addcc	r0, #2
 800e174:	2b00      	cmp	r3, #0
 800e176:	db05      	blt.n	800e184 <__hi0bits+0x3c>
 800e178:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e17c:	f100 0001 	add.w	r0, r0, #1
 800e180:	bf08      	it	eq
 800e182:	2020      	moveq	r0, #32
 800e184:	4770      	bx	lr

0800e186 <__lo0bits>:
 800e186:	6803      	ldr	r3, [r0, #0]
 800e188:	4602      	mov	r2, r0
 800e18a:	f013 0007 	ands.w	r0, r3, #7
 800e18e:	d00b      	beq.n	800e1a8 <__lo0bits+0x22>
 800e190:	07d9      	lsls	r1, r3, #31
 800e192:	d421      	bmi.n	800e1d8 <__lo0bits+0x52>
 800e194:	0798      	lsls	r0, r3, #30
 800e196:	bf49      	itett	mi
 800e198:	085b      	lsrmi	r3, r3, #1
 800e19a:	089b      	lsrpl	r3, r3, #2
 800e19c:	2001      	movmi	r0, #1
 800e19e:	6013      	strmi	r3, [r2, #0]
 800e1a0:	bf5c      	itt	pl
 800e1a2:	6013      	strpl	r3, [r2, #0]
 800e1a4:	2002      	movpl	r0, #2
 800e1a6:	4770      	bx	lr
 800e1a8:	b299      	uxth	r1, r3
 800e1aa:	b909      	cbnz	r1, 800e1b0 <__lo0bits+0x2a>
 800e1ac:	0c1b      	lsrs	r3, r3, #16
 800e1ae:	2010      	movs	r0, #16
 800e1b0:	b2d9      	uxtb	r1, r3
 800e1b2:	b909      	cbnz	r1, 800e1b8 <__lo0bits+0x32>
 800e1b4:	3008      	adds	r0, #8
 800e1b6:	0a1b      	lsrs	r3, r3, #8
 800e1b8:	0719      	lsls	r1, r3, #28
 800e1ba:	bf04      	itt	eq
 800e1bc:	091b      	lsreq	r3, r3, #4
 800e1be:	3004      	addeq	r0, #4
 800e1c0:	0799      	lsls	r1, r3, #30
 800e1c2:	bf04      	itt	eq
 800e1c4:	089b      	lsreq	r3, r3, #2
 800e1c6:	3002      	addeq	r0, #2
 800e1c8:	07d9      	lsls	r1, r3, #31
 800e1ca:	d403      	bmi.n	800e1d4 <__lo0bits+0x4e>
 800e1cc:	085b      	lsrs	r3, r3, #1
 800e1ce:	f100 0001 	add.w	r0, r0, #1
 800e1d2:	d003      	beq.n	800e1dc <__lo0bits+0x56>
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	4770      	bx	lr
 800e1d8:	2000      	movs	r0, #0
 800e1da:	4770      	bx	lr
 800e1dc:	2020      	movs	r0, #32
 800e1de:	4770      	bx	lr

0800e1e0 <__i2b>:
 800e1e0:	b510      	push	{r4, lr}
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	2101      	movs	r1, #1
 800e1e6:	f7ff ff07 	bl	800dff8 <_Balloc>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	b928      	cbnz	r0, 800e1fa <__i2b+0x1a>
 800e1ee:	4b05      	ldr	r3, [pc, #20]	@ (800e204 <__i2b+0x24>)
 800e1f0:	4805      	ldr	r0, [pc, #20]	@ (800e208 <__i2b+0x28>)
 800e1f2:	f240 1145 	movw	r1, #325	@ 0x145
 800e1f6:	f000 fcbd 	bl	800eb74 <__assert_func>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	6144      	str	r4, [r0, #20]
 800e1fe:	6103      	str	r3, [r0, #16]
 800e200:	bd10      	pop	{r4, pc}
 800e202:	bf00      	nop
 800e204:	0800f360 	.word	0x0800f360
 800e208:	0800f371 	.word	0x0800f371

0800e20c <__multiply>:
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	4614      	mov	r4, r2
 800e212:	690a      	ldr	r2, [r1, #16]
 800e214:	6923      	ldr	r3, [r4, #16]
 800e216:	429a      	cmp	r2, r3
 800e218:	bfa8      	it	ge
 800e21a:	4623      	movge	r3, r4
 800e21c:	460f      	mov	r7, r1
 800e21e:	bfa4      	itt	ge
 800e220:	460c      	movge	r4, r1
 800e222:	461f      	movge	r7, r3
 800e224:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e228:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e22c:	68a3      	ldr	r3, [r4, #8]
 800e22e:	6861      	ldr	r1, [r4, #4]
 800e230:	eb0a 0609 	add.w	r6, sl, r9
 800e234:	42b3      	cmp	r3, r6
 800e236:	b085      	sub	sp, #20
 800e238:	bfb8      	it	lt
 800e23a:	3101      	addlt	r1, #1
 800e23c:	f7ff fedc 	bl	800dff8 <_Balloc>
 800e240:	b930      	cbnz	r0, 800e250 <__multiply+0x44>
 800e242:	4602      	mov	r2, r0
 800e244:	4b44      	ldr	r3, [pc, #272]	@ (800e358 <__multiply+0x14c>)
 800e246:	4845      	ldr	r0, [pc, #276]	@ (800e35c <__multiply+0x150>)
 800e248:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e24c:	f000 fc92 	bl	800eb74 <__assert_func>
 800e250:	f100 0514 	add.w	r5, r0, #20
 800e254:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e258:	462b      	mov	r3, r5
 800e25a:	2200      	movs	r2, #0
 800e25c:	4543      	cmp	r3, r8
 800e25e:	d321      	bcc.n	800e2a4 <__multiply+0x98>
 800e260:	f107 0114 	add.w	r1, r7, #20
 800e264:	f104 0214 	add.w	r2, r4, #20
 800e268:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e26c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e270:	9302      	str	r3, [sp, #8]
 800e272:	1b13      	subs	r3, r2, r4
 800e274:	3b15      	subs	r3, #21
 800e276:	f023 0303 	bic.w	r3, r3, #3
 800e27a:	3304      	adds	r3, #4
 800e27c:	f104 0715 	add.w	r7, r4, #21
 800e280:	42ba      	cmp	r2, r7
 800e282:	bf38      	it	cc
 800e284:	2304      	movcc	r3, #4
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	9b02      	ldr	r3, [sp, #8]
 800e28a:	9103      	str	r1, [sp, #12]
 800e28c:	428b      	cmp	r3, r1
 800e28e:	d80c      	bhi.n	800e2aa <__multiply+0x9e>
 800e290:	2e00      	cmp	r6, #0
 800e292:	dd03      	ble.n	800e29c <__multiply+0x90>
 800e294:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d05b      	beq.n	800e354 <__multiply+0x148>
 800e29c:	6106      	str	r6, [r0, #16]
 800e29e:	b005      	add	sp, #20
 800e2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a4:	f843 2b04 	str.w	r2, [r3], #4
 800e2a8:	e7d8      	b.n	800e25c <__multiply+0x50>
 800e2aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800e2ae:	f1ba 0f00 	cmp.w	sl, #0
 800e2b2:	d024      	beq.n	800e2fe <__multiply+0xf2>
 800e2b4:	f104 0e14 	add.w	lr, r4, #20
 800e2b8:	46a9      	mov	r9, r5
 800e2ba:	f04f 0c00 	mov.w	ip, #0
 800e2be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2c2:	f8d9 3000 	ldr.w	r3, [r9]
 800e2c6:	fa1f fb87 	uxth.w	fp, r7
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e2d4:	f8d9 7000 	ldr.w	r7, [r9]
 800e2d8:	4463      	add	r3, ip
 800e2da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2de:	fb0a c70b 	mla	r7, sl, fp, ip
 800e2e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2ec:	4572      	cmp	r2, lr
 800e2ee:	f849 3b04 	str.w	r3, [r9], #4
 800e2f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2f6:	d8e2      	bhi.n	800e2be <__multiply+0xb2>
 800e2f8:	9b01      	ldr	r3, [sp, #4]
 800e2fa:	f845 c003 	str.w	ip, [r5, r3]
 800e2fe:	9b03      	ldr	r3, [sp, #12]
 800e300:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e304:	3104      	adds	r1, #4
 800e306:	f1b9 0f00 	cmp.w	r9, #0
 800e30a:	d021      	beq.n	800e350 <__multiply+0x144>
 800e30c:	682b      	ldr	r3, [r5, #0]
 800e30e:	f104 0c14 	add.w	ip, r4, #20
 800e312:	46ae      	mov	lr, r5
 800e314:	f04f 0a00 	mov.w	sl, #0
 800e318:	f8bc b000 	ldrh.w	fp, [ip]
 800e31c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e320:	fb09 770b 	mla	r7, r9, fp, r7
 800e324:	4457      	add	r7, sl
 800e326:	b29b      	uxth	r3, r3
 800e328:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e32c:	f84e 3b04 	str.w	r3, [lr], #4
 800e330:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e338:	f8be 3000 	ldrh.w	r3, [lr]
 800e33c:	fb09 330a 	mla	r3, r9, sl, r3
 800e340:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e344:	4562      	cmp	r2, ip
 800e346:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e34a:	d8e5      	bhi.n	800e318 <__multiply+0x10c>
 800e34c:	9f01      	ldr	r7, [sp, #4]
 800e34e:	51eb      	str	r3, [r5, r7]
 800e350:	3504      	adds	r5, #4
 800e352:	e799      	b.n	800e288 <__multiply+0x7c>
 800e354:	3e01      	subs	r6, #1
 800e356:	e79b      	b.n	800e290 <__multiply+0x84>
 800e358:	0800f360 	.word	0x0800f360
 800e35c:	0800f371 	.word	0x0800f371

0800e360 <__pow5mult>:
 800e360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e364:	4615      	mov	r5, r2
 800e366:	f012 0203 	ands.w	r2, r2, #3
 800e36a:	4607      	mov	r7, r0
 800e36c:	460e      	mov	r6, r1
 800e36e:	d007      	beq.n	800e380 <__pow5mult+0x20>
 800e370:	4c25      	ldr	r4, [pc, #148]	@ (800e408 <__pow5mult+0xa8>)
 800e372:	3a01      	subs	r2, #1
 800e374:	2300      	movs	r3, #0
 800e376:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e37a:	f7ff fe9f 	bl	800e0bc <__multadd>
 800e37e:	4606      	mov	r6, r0
 800e380:	10ad      	asrs	r5, r5, #2
 800e382:	d03d      	beq.n	800e400 <__pow5mult+0xa0>
 800e384:	69fc      	ldr	r4, [r7, #28]
 800e386:	b97c      	cbnz	r4, 800e3a8 <__pow5mult+0x48>
 800e388:	2010      	movs	r0, #16
 800e38a:	f7ff fd7f 	bl	800de8c <malloc>
 800e38e:	4602      	mov	r2, r0
 800e390:	61f8      	str	r0, [r7, #28]
 800e392:	b928      	cbnz	r0, 800e3a0 <__pow5mult+0x40>
 800e394:	4b1d      	ldr	r3, [pc, #116]	@ (800e40c <__pow5mult+0xac>)
 800e396:	481e      	ldr	r0, [pc, #120]	@ (800e410 <__pow5mult+0xb0>)
 800e398:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e39c:	f000 fbea 	bl	800eb74 <__assert_func>
 800e3a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e3a4:	6004      	str	r4, [r0, #0]
 800e3a6:	60c4      	str	r4, [r0, #12]
 800e3a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e3ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e3b0:	b94c      	cbnz	r4, 800e3c6 <__pow5mult+0x66>
 800e3b2:	f240 2171 	movw	r1, #625	@ 0x271
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	f7ff ff12 	bl	800e1e0 <__i2b>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3c2:	4604      	mov	r4, r0
 800e3c4:	6003      	str	r3, [r0, #0]
 800e3c6:	f04f 0900 	mov.w	r9, #0
 800e3ca:	07eb      	lsls	r3, r5, #31
 800e3cc:	d50a      	bpl.n	800e3e4 <__pow5mult+0x84>
 800e3ce:	4631      	mov	r1, r6
 800e3d0:	4622      	mov	r2, r4
 800e3d2:	4638      	mov	r0, r7
 800e3d4:	f7ff ff1a 	bl	800e20c <__multiply>
 800e3d8:	4631      	mov	r1, r6
 800e3da:	4680      	mov	r8, r0
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f7ff fe4b 	bl	800e078 <_Bfree>
 800e3e2:	4646      	mov	r6, r8
 800e3e4:	106d      	asrs	r5, r5, #1
 800e3e6:	d00b      	beq.n	800e400 <__pow5mult+0xa0>
 800e3e8:	6820      	ldr	r0, [r4, #0]
 800e3ea:	b938      	cbnz	r0, 800e3fc <__pow5mult+0x9c>
 800e3ec:	4622      	mov	r2, r4
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4638      	mov	r0, r7
 800e3f2:	f7ff ff0b 	bl	800e20c <__multiply>
 800e3f6:	6020      	str	r0, [r4, #0]
 800e3f8:	f8c0 9000 	str.w	r9, [r0]
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	e7e4      	b.n	800e3ca <__pow5mult+0x6a>
 800e400:	4630      	mov	r0, r6
 800e402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e406:	bf00      	nop
 800e408:	0800f3cc 	.word	0x0800f3cc
 800e40c:	0800f2f1 	.word	0x0800f2f1
 800e410:	0800f371 	.word	0x0800f371

0800e414 <__lshift>:
 800e414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e418:	460c      	mov	r4, r1
 800e41a:	6849      	ldr	r1, [r1, #4]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e422:	68a3      	ldr	r3, [r4, #8]
 800e424:	4607      	mov	r7, r0
 800e426:	4691      	mov	r9, r2
 800e428:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e42c:	f108 0601 	add.w	r6, r8, #1
 800e430:	42b3      	cmp	r3, r6
 800e432:	db0b      	blt.n	800e44c <__lshift+0x38>
 800e434:	4638      	mov	r0, r7
 800e436:	f7ff fddf 	bl	800dff8 <_Balloc>
 800e43a:	4605      	mov	r5, r0
 800e43c:	b948      	cbnz	r0, 800e452 <__lshift+0x3e>
 800e43e:	4602      	mov	r2, r0
 800e440:	4b28      	ldr	r3, [pc, #160]	@ (800e4e4 <__lshift+0xd0>)
 800e442:	4829      	ldr	r0, [pc, #164]	@ (800e4e8 <__lshift+0xd4>)
 800e444:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e448:	f000 fb94 	bl	800eb74 <__assert_func>
 800e44c:	3101      	adds	r1, #1
 800e44e:	005b      	lsls	r3, r3, #1
 800e450:	e7ee      	b.n	800e430 <__lshift+0x1c>
 800e452:	2300      	movs	r3, #0
 800e454:	f100 0114 	add.w	r1, r0, #20
 800e458:	f100 0210 	add.w	r2, r0, #16
 800e45c:	4618      	mov	r0, r3
 800e45e:	4553      	cmp	r3, sl
 800e460:	db33      	blt.n	800e4ca <__lshift+0xb6>
 800e462:	6920      	ldr	r0, [r4, #16]
 800e464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e468:	f104 0314 	add.w	r3, r4, #20
 800e46c:	f019 091f 	ands.w	r9, r9, #31
 800e470:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e474:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e478:	d02b      	beq.n	800e4d2 <__lshift+0xbe>
 800e47a:	f1c9 0e20 	rsb	lr, r9, #32
 800e47e:	468a      	mov	sl, r1
 800e480:	2200      	movs	r2, #0
 800e482:	6818      	ldr	r0, [r3, #0]
 800e484:	fa00 f009 	lsl.w	r0, r0, r9
 800e488:	4310      	orrs	r0, r2
 800e48a:	f84a 0b04 	str.w	r0, [sl], #4
 800e48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e492:	459c      	cmp	ip, r3
 800e494:	fa22 f20e 	lsr.w	r2, r2, lr
 800e498:	d8f3      	bhi.n	800e482 <__lshift+0x6e>
 800e49a:	ebac 0304 	sub.w	r3, ip, r4
 800e49e:	3b15      	subs	r3, #21
 800e4a0:	f023 0303 	bic.w	r3, r3, #3
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	f104 0015 	add.w	r0, r4, #21
 800e4aa:	4584      	cmp	ip, r0
 800e4ac:	bf38      	it	cc
 800e4ae:	2304      	movcc	r3, #4
 800e4b0:	50ca      	str	r2, [r1, r3]
 800e4b2:	b10a      	cbz	r2, 800e4b8 <__lshift+0xa4>
 800e4b4:	f108 0602 	add.w	r6, r8, #2
 800e4b8:	3e01      	subs	r6, #1
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	612e      	str	r6, [r5, #16]
 800e4be:	4621      	mov	r1, r4
 800e4c0:	f7ff fdda 	bl	800e078 <_Bfree>
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	e7c5      	b.n	800e45e <__lshift+0x4a>
 800e4d2:	3904      	subs	r1, #4
 800e4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4dc:	459c      	cmp	ip, r3
 800e4de:	d8f9      	bhi.n	800e4d4 <__lshift+0xc0>
 800e4e0:	e7ea      	b.n	800e4b8 <__lshift+0xa4>
 800e4e2:	bf00      	nop
 800e4e4:	0800f360 	.word	0x0800f360
 800e4e8:	0800f371 	.word	0x0800f371

0800e4ec <__mcmp>:
 800e4ec:	690a      	ldr	r2, [r1, #16]
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	6900      	ldr	r0, [r0, #16]
 800e4f2:	1a80      	subs	r0, r0, r2
 800e4f4:	b530      	push	{r4, r5, lr}
 800e4f6:	d10e      	bne.n	800e516 <__mcmp+0x2a>
 800e4f8:	3314      	adds	r3, #20
 800e4fa:	3114      	adds	r1, #20
 800e4fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e500:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e504:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e508:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e50c:	4295      	cmp	r5, r2
 800e50e:	d003      	beq.n	800e518 <__mcmp+0x2c>
 800e510:	d205      	bcs.n	800e51e <__mcmp+0x32>
 800e512:	f04f 30ff 	mov.w	r0, #4294967295
 800e516:	bd30      	pop	{r4, r5, pc}
 800e518:	42a3      	cmp	r3, r4
 800e51a:	d3f3      	bcc.n	800e504 <__mcmp+0x18>
 800e51c:	e7fb      	b.n	800e516 <__mcmp+0x2a>
 800e51e:	2001      	movs	r0, #1
 800e520:	e7f9      	b.n	800e516 <__mcmp+0x2a>
	...

0800e524 <__mdiff>:
 800e524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	4689      	mov	r9, r1
 800e52a:	4606      	mov	r6, r0
 800e52c:	4611      	mov	r1, r2
 800e52e:	4648      	mov	r0, r9
 800e530:	4614      	mov	r4, r2
 800e532:	f7ff ffdb 	bl	800e4ec <__mcmp>
 800e536:	1e05      	subs	r5, r0, #0
 800e538:	d112      	bne.n	800e560 <__mdiff+0x3c>
 800e53a:	4629      	mov	r1, r5
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7ff fd5b 	bl	800dff8 <_Balloc>
 800e542:	4602      	mov	r2, r0
 800e544:	b928      	cbnz	r0, 800e552 <__mdiff+0x2e>
 800e546:	4b3f      	ldr	r3, [pc, #252]	@ (800e644 <__mdiff+0x120>)
 800e548:	f240 2137 	movw	r1, #567	@ 0x237
 800e54c:	483e      	ldr	r0, [pc, #248]	@ (800e648 <__mdiff+0x124>)
 800e54e:	f000 fb11 	bl	800eb74 <__assert_func>
 800e552:	2301      	movs	r3, #1
 800e554:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e558:	4610      	mov	r0, r2
 800e55a:	b003      	add	sp, #12
 800e55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e560:	bfbc      	itt	lt
 800e562:	464b      	movlt	r3, r9
 800e564:	46a1      	movlt	r9, r4
 800e566:	4630      	mov	r0, r6
 800e568:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e56c:	bfba      	itte	lt
 800e56e:	461c      	movlt	r4, r3
 800e570:	2501      	movlt	r5, #1
 800e572:	2500      	movge	r5, #0
 800e574:	f7ff fd40 	bl	800dff8 <_Balloc>
 800e578:	4602      	mov	r2, r0
 800e57a:	b918      	cbnz	r0, 800e584 <__mdiff+0x60>
 800e57c:	4b31      	ldr	r3, [pc, #196]	@ (800e644 <__mdiff+0x120>)
 800e57e:	f240 2145 	movw	r1, #581	@ 0x245
 800e582:	e7e3      	b.n	800e54c <__mdiff+0x28>
 800e584:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e588:	6926      	ldr	r6, [r4, #16]
 800e58a:	60c5      	str	r5, [r0, #12]
 800e58c:	f109 0310 	add.w	r3, r9, #16
 800e590:	f109 0514 	add.w	r5, r9, #20
 800e594:	f104 0e14 	add.w	lr, r4, #20
 800e598:	f100 0b14 	add.w	fp, r0, #20
 800e59c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e5a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e5a4:	9301      	str	r3, [sp, #4]
 800e5a6:	46d9      	mov	r9, fp
 800e5a8:	f04f 0c00 	mov.w	ip, #0
 800e5ac:	9b01      	ldr	r3, [sp, #4]
 800e5ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e5b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	fa1f f38a 	uxth.w	r3, sl
 800e5bc:	4619      	mov	r1, r3
 800e5be:	b283      	uxth	r3, r0
 800e5c0:	1acb      	subs	r3, r1, r3
 800e5c2:	0c00      	lsrs	r0, r0, #16
 800e5c4:	4463      	add	r3, ip
 800e5c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5d4:	4576      	cmp	r6, lr
 800e5d6:	f849 3b04 	str.w	r3, [r9], #4
 800e5da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5de:	d8e5      	bhi.n	800e5ac <__mdiff+0x88>
 800e5e0:	1b33      	subs	r3, r6, r4
 800e5e2:	3b15      	subs	r3, #21
 800e5e4:	f023 0303 	bic.w	r3, r3, #3
 800e5e8:	3415      	adds	r4, #21
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	42a6      	cmp	r6, r4
 800e5ee:	bf38      	it	cc
 800e5f0:	2304      	movcc	r3, #4
 800e5f2:	441d      	add	r5, r3
 800e5f4:	445b      	add	r3, fp
 800e5f6:	461e      	mov	r6, r3
 800e5f8:	462c      	mov	r4, r5
 800e5fa:	4544      	cmp	r4, r8
 800e5fc:	d30e      	bcc.n	800e61c <__mdiff+0xf8>
 800e5fe:	f108 0103 	add.w	r1, r8, #3
 800e602:	1b49      	subs	r1, r1, r5
 800e604:	f021 0103 	bic.w	r1, r1, #3
 800e608:	3d03      	subs	r5, #3
 800e60a:	45a8      	cmp	r8, r5
 800e60c:	bf38      	it	cc
 800e60e:	2100      	movcc	r1, #0
 800e610:	440b      	add	r3, r1
 800e612:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e616:	b191      	cbz	r1, 800e63e <__mdiff+0x11a>
 800e618:	6117      	str	r7, [r2, #16]
 800e61a:	e79d      	b.n	800e558 <__mdiff+0x34>
 800e61c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e620:	46e6      	mov	lr, ip
 800e622:	0c08      	lsrs	r0, r1, #16
 800e624:	fa1c fc81 	uxtah	ip, ip, r1
 800e628:	4471      	add	r1, lr
 800e62a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e62e:	b289      	uxth	r1, r1
 800e630:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e634:	f846 1b04 	str.w	r1, [r6], #4
 800e638:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e63c:	e7dd      	b.n	800e5fa <__mdiff+0xd6>
 800e63e:	3f01      	subs	r7, #1
 800e640:	e7e7      	b.n	800e612 <__mdiff+0xee>
 800e642:	bf00      	nop
 800e644:	0800f360 	.word	0x0800f360
 800e648:	0800f371 	.word	0x0800f371

0800e64c <__d2b>:
 800e64c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e650:	460f      	mov	r7, r1
 800e652:	2101      	movs	r1, #1
 800e654:	ec59 8b10 	vmov	r8, r9, d0
 800e658:	4616      	mov	r6, r2
 800e65a:	f7ff fccd 	bl	800dff8 <_Balloc>
 800e65e:	4604      	mov	r4, r0
 800e660:	b930      	cbnz	r0, 800e670 <__d2b+0x24>
 800e662:	4602      	mov	r2, r0
 800e664:	4b23      	ldr	r3, [pc, #140]	@ (800e6f4 <__d2b+0xa8>)
 800e666:	4824      	ldr	r0, [pc, #144]	@ (800e6f8 <__d2b+0xac>)
 800e668:	f240 310f 	movw	r1, #783	@ 0x30f
 800e66c:	f000 fa82 	bl	800eb74 <__assert_func>
 800e670:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e674:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e678:	b10d      	cbz	r5, 800e67e <__d2b+0x32>
 800e67a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e67e:	9301      	str	r3, [sp, #4]
 800e680:	f1b8 0300 	subs.w	r3, r8, #0
 800e684:	d023      	beq.n	800e6ce <__d2b+0x82>
 800e686:	4668      	mov	r0, sp
 800e688:	9300      	str	r3, [sp, #0]
 800e68a:	f7ff fd7c 	bl	800e186 <__lo0bits>
 800e68e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e692:	b1d0      	cbz	r0, 800e6ca <__d2b+0x7e>
 800e694:	f1c0 0320 	rsb	r3, r0, #32
 800e698:	fa02 f303 	lsl.w	r3, r2, r3
 800e69c:	430b      	orrs	r3, r1
 800e69e:	40c2      	lsrs	r2, r0
 800e6a0:	6163      	str	r3, [r4, #20]
 800e6a2:	9201      	str	r2, [sp, #4]
 800e6a4:	9b01      	ldr	r3, [sp, #4]
 800e6a6:	61a3      	str	r3, [r4, #24]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	bf0c      	ite	eq
 800e6ac:	2201      	moveq	r2, #1
 800e6ae:	2202      	movne	r2, #2
 800e6b0:	6122      	str	r2, [r4, #16]
 800e6b2:	b1a5      	cbz	r5, 800e6de <__d2b+0x92>
 800e6b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e6b8:	4405      	add	r5, r0
 800e6ba:	603d      	str	r5, [r7, #0]
 800e6bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e6c0:	6030      	str	r0, [r6, #0]
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	b003      	add	sp, #12
 800e6c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ca:	6161      	str	r1, [r4, #20]
 800e6cc:	e7ea      	b.n	800e6a4 <__d2b+0x58>
 800e6ce:	a801      	add	r0, sp, #4
 800e6d0:	f7ff fd59 	bl	800e186 <__lo0bits>
 800e6d4:	9b01      	ldr	r3, [sp, #4]
 800e6d6:	6163      	str	r3, [r4, #20]
 800e6d8:	3020      	adds	r0, #32
 800e6da:	2201      	movs	r2, #1
 800e6dc:	e7e8      	b.n	800e6b0 <__d2b+0x64>
 800e6de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e6e6:	6038      	str	r0, [r7, #0]
 800e6e8:	6918      	ldr	r0, [r3, #16]
 800e6ea:	f7ff fd2d 	bl	800e148 <__hi0bits>
 800e6ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6f2:	e7e5      	b.n	800e6c0 <__d2b+0x74>
 800e6f4:	0800f360 	.word	0x0800f360
 800e6f8:	0800f371 	.word	0x0800f371

0800e6fc <__ssputs_r>:
 800e6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	688e      	ldr	r6, [r1, #8]
 800e702:	461f      	mov	r7, r3
 800e704:	42be      	cmp	r6, r7
 800e706:	680b      	ldr	r3, [r1, #0]
 800e708:	4682      	mov	sl, r0
 800e70a:	460c      	mov	r4, r1
 800e70c:	4690      	mov	r8, r2
 800e70e:	d82d      	bhi.n	800e76c <__ssputs_r+0x70>
 800e710:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e714:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e718:	d026      	beq.n	800e768 <__ssputs_r+0x6c>
 800e71a:	6965      	ldr	r5, [r4, #20]
 800e71c:	6909      	ldr	r1, [r1, #16]
 800e71e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e722:	eba3 0901 	sub.w	r9, r3, r1
 800e726:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e72a:	1c7b      	adds	r3, r7, #1
 800e72c:	444b      	add	r3, r9
 800e72e:	106d      	asrs	r5, r5, #1
 800e730:	429d      	cmp	r5, r3
 800e732:	bf38      	it	cc
 800e734:	461d      	movcc	r5, r3
 800e736:	0553      	lsls	r3, r2, #21
 800e738:	d527      	bpl.n	800e78a <__ssputs_r+0x8e>
 800e73a:	4629      	mov	r1, r5
 800e73c:	f7ff fbd0 	bl	800dee0 <_malloc_r>
 800e740:	4606      	mov	r6, r0
 800e742:	b360      	cbz	r0, 800e79e <__ssputs_r+0xa2>
 800e744:	6921      	ldr	r1, [r4, #16]
 800e746:	464a      	mov	r2, r9
 800e748:	f000 fa06 	bl	800eb58 <memcpy>
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e756:	81a3      	strh	r3, [r4, #12]
 800e758:	6126      	str	r6, [r4, #16]
 800e75a:	6165      	str	r5, [r4, #20]
 800e75c:	444e      	add	r6, r9
 800e75e:	eba5 0509 	sub.w	r5, r5, r9
 800e762:	6026      	str	r6, [r4, #0]
 800e764:	60a5      	str	r5, [r4, #8]
 800e766:	463e      	mov	r6, r7
 800e768:	42be      	cmp	r6, r7
 800e76a:	d900      	bls.n	800e76e <__ssputs_r+0x72>
 800e76c:	463e      	mov	r6, r7
 800e76e:	6820      	ldr	r0, [r4, #0]
 800e770:	4632      	mov	r2, r6
 800e772:	4641      	mov	r1, r8
 800e774:	f000 f9c6 	bl	800eb04 <memmove>
 800e778:	68a3      	ldr	r3, [r4, #8]
 800e77a:	1b9b      	subs	r3, r3, r6
 800e77c:	60a3      	str	r3, [r4, #8]
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	4433      	add	r3, r6
 800e782:	6023      	str	r3, [r4, #0]
 800e784:	2000      	movs	r0, #0
 800e786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e78a:	462a      	mov	r2, r5
 800e78c:	f000 fa36 	bl	800ebfc <_realloc_r>
 800e790:	4606      	mov	r6, r0
 800e792:	2800      	cmp	r0, #0
 800e794:	d1e0      	bne.n	800e758 <__ssputs_r+0x5c>
 800e796:	6921      	ldr	r1, [r4, #16]
 800e798:	4650      	mov	r0, sl
 800e79a:	f7ff fb2d 	bl	800ddf8 <_free_r>
 800e79e:	230c      	movs	r3, #12
 800e7a0:	f8ca 3000 	str.w	r3, [sl]
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7aa:	81a3      	strh	r3, [r4, #12]
 800e7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b0:	e7e9      	b.n	800e786 <__ssputs_r+0x8a>
	...

0800e7b4 <_svfiprintf_r>:
 800e7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b8:	4698      	mov	r8, r3
 800e7ba:	898b      	ldrh	r3, [r1, #12]
 800e7bc:	061b      	lsls	r3, r3, #24
 800e7be:	b09d      	sub	sp, #116	@ 0x74
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	d510      	bpl.n	800e7ea <_svfiprintf_r+0x36>
 800e7c8:	690b      	ldr	r3, [r1, #16]
 800e7ca:	b973      	cbnz	r3, 800e7ea <_svfiprintf_r+0x36>
 800e7cc:	2140      	movs	r1, #64	@ 0x40
 800e7ce:	f7ff fb87 	bl	800dee0 <_malloc_r>
 800e7d2:	6028      	str	r0, [r5, #0]
 800e7d4:	6128      	str	r0, [r5, #16]
 800e7d6:	b930      	cbnz	r0, 800e7e6 <_svfiprintf_r+0x32>
 800e7d8:	230c      	movs	r3, #12
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	b01d      	add	sp, #116	@ 0x74
 800e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e6:	2340      	movs	r3, #64	@ 0x40
 800e7e8:	616b      	str	r3, [r5, #20]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7ee:	2320      	movs	r3, #32
 800e7f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e7f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e7f8:	2330      	movs	r3, #48	@ 0x30
 800e7fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e998 <_svfiprintf_r+0x1e4>
 800e7fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e802:	f04f 0901 	mov.w	r9, #1
 800e806:	4623      	mov	r3, r4
 800e808:	469a      	mov	sl, r3
 800e80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e80e:	b10a      	cbz	r2, 800e814 <_svfiprintf_r+0x60>
 800e810:	2a25      	cmp	r2, #37	@ 0x25
 800e812:	d1f9      	bne.n	800e808 <_svfiprintf_r+0x54>
 800e814:	ebba 0b04 	subs.w	fp, sl, r4
 800e818:	d00b      	beq.n	800e832 <_svfiprintf_r+0x7e>
 800e81a:	465b      	mov	r3, fp
 800e81c:	4622      	mov	r2, r4
 800e81e:	4629      	mov	r1, r5
 800e820:	4638      	mov	r0, r7
 800e822:	f7ff ff6b 	bl	800e6fc <__ssputs_r>
 800e826:	3001      	adds	r0, #1
 800e828:	f000 80a7 	beq.w	800e97a <_svfiprintf_r+0x1c6>
 800e82c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e82e:	445a      	add	r2, fp
 800e830:	9209      	str	r2, [sp, #36]	@ 0x24
 800e832:	f89a 3000 	ldrb.w	r3, [sl]
 800e836:	2b00      	cmp	r3, #0
 800e838:	f000 809f 	beq.w	800e97a <_svfiprintf_r+0x1c6>
 800e83c:	2300      	movs	r3, #0
 800e83e:	f04f 32ff 	mov.w	r2, #4294967295
 800e842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e846:	f10a 0a01 	add.w	sl, sl, #1
 800e84a:	9304      	str	r3, [sp, #16]
 800e84c:	9307      	str	r3, [sp, #28]
 800e84e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e852:	931a      	str	r3, [sp, #104]	@ 0x68
 800e854:	4654      	mov	r4, sl
 800e856:	2205      	movs	r2, #5
 800e858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e85c:	484e      	ldr	r0, [pc, #312]	@ (800e998 <_svfiprintf_r+0x1e4>)
 800e85e:	f7f1 fcb7 	bl	80001d0 <memchr>
 800e862:	9a04      	ldr	r2, [sp, #16]
 800e864:	b9d8      	cbnz	r0, 800e89e <_svfiprintf_r+0xea>
 800e866:	06d0      	lsls	r0, r2, #27
 800e868:	bf44      	itt	mi
 800e86a:	2320      	movmi	r3, #32
 800e86c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e870:	0711      	lsls	r1, r2, #28
 800e872:	bf44      	itt	mi
 800e874:	232b      	movmi	r3, #43	@ 0x2b
 800e876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e87a:	f89a 3000 	ldrb.w	r3, [sl]
 800e87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e880:	d015      	beq.n	800e8ae <_svfiprintf_r+0xfa>
 800e882:	9a07      	ldr	r2, [sp, #28]
 800e884:	4654      	mov	r4, sl
 800e886:	2000      	movs	r0, #0
 800e888:	f04f 0c0a 	mov.w	ip, #10
 800e88c:	4621      	mov	r1, r4
 800e88e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e892:	3b30      	subs	r3, #48	@ 0x30
 800e894:	2b09      	cmp	r3, #9
 800e896:	d94b      	bls.n	800e930 <_svfiprintf_r+0x17c>
 800e898:	b1b0      	cbz	r0, 800e8c8 <_svfiprintf_r+0x114>
 800e89a:	9207      	str	r2, [sp, #28]
 800e89c:	e014      	b.n	800e8c8 <_svfiprintf_r+0x114>
 800e89e:	eba0 0308 	sub.w	r3, r0, r8
 800e8a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	9304      	str	r3, [sp, #16]
 800e8aa:	46a2      	mov	sl, r4
 800e8ac:	e7d2      	b.n	800e854 <_svfiprintf_r+0xa0>
 800e8ae:	9b03      	ldr	r3, [sp, #12]
 800e8b0:	1d19      	adds	r1, r3, #4
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	9103      	str	r1, [sp, #12]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	bfbb      	ittet	lt
 800e8ba:	425b      	neglt	r3, r3
 800e8bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e8c0:	9307      	strge	r3, [sp, #28]
 800e8c2:	9307      	strlt	r3, [sp, #28]
 800e8c4:	bfb8      	it	lt
 800e8c6:	9204      	strlt	r2, [sp, #16]
 800e8c8:	7823      	ldrb	r3, [r4, #0]
 800e8ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8cc:	d10a      	bne.n	800e8e4 <_svfiprintf_r+0x130>
 800e8ce:	7863      	ldrb	r3, [r4, #1]
 800e8d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8d2:	d132      	bne.n	800e93a <_svfiprintf_r+0x186>
 800e8d4:	9b03      	ldr	r3, [sp, #12]
 800e8d6:	1d1a      	adds	r2, r3, #4
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	9203      	str	r2, [sp, #12]
 800e8dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8e0:	3402      	adds	r4, #2
 800e8e2:	9305      	str	r3, [sp, #20]
 800e8e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9a8 <_svfiprintf_r+0x1f4>
 800e8e8:	7821      	ldrb	r1, [r4, #0]
 800e8ea:	2203      	movs	r2, #3
 800e8ec:	4650      	mov	r0, sl
 800e8ee:	f7f1 fc6f 	bl	80001d0 <memchr>
 800e8f2:	b138      	cbz	r0, 800e904 <_svfiprintf_r+0x150>
 800e8f4:	9b04      	ldr	r3, [sp, #16]
 800e8f6:	eba0 000a 	sub.w	r0, r0, sl
 800e8fa:	2240      	movs	r2, #64	@ 0x40
 800e8fc:	4082      	lsls	r2, r0
 800e8fe:	4313      	orrs	r3, r2
 800e900:	3401      	adds	r4, #1
 800e902:	9304      	str	r3, [sp, #16]
 800e904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e908:	4824      	ldr	r0, [pc, #144]	@ (800e99c <_svfiprintf_r+0x1e8>)
 800e90a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e90e:	2206      	movs	r2, #6
 800e910:	f7f1 fc5e 	bl	80001d0 <memchr>
 800e914:	2800      	cmp	r0, #0
 800e916:	d036      	beq.n	800e986 <_svfiprintf_r+0x1d2>
 800e918:	4b21      	ldr	r3, [pc, #132]	@ (800e9a0 <_svfiprintf_r+0x1ec>)
 800e91a:	bb1b      	cbnz	r3, 800e964 <_svfiprintf_r+0x1b0>
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	3307      	adds	r3, #7
 800e920:	f023 0307 	bic.w	r3, r3, #7
 800e924:	3308      	adds	r3, #8
 800e926:	9303      	str	r3, [sp, #12]
 800e928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e92a:	4433      	add	r3, r6
 800e92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e92e:	e76a      	b.n	800e806 <_svfiprintf_r+0x52>
 800e930:	fb0c 3202 	mla	r2, ip, r2, r3
 800e934:	460c      	mov	r4, r1
 800e936:	2001      	movs	r0, #1
 800e938:	e7a8      	b.n	800e88c <_svfiprintf_r+0xd8>
 800e93a:	2300      	movs	r3, #0
 800e93c:	3401      	adds	r4, #1
 800e93e:	9305      	str	r3, [sp, #20]
 800e940:	4619      	mov	r1, r3
 800e942:	f04f 0c0a 	mov.w	ip, #10
 800e946:	4620      	mov	r0, r4
 800e948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e94c:	3a30      	subs	r2, #48	@ 0x30
 800e94e:	2a09      	cmp	r2, #9
 800e950:	d903      	bls.n	800e95a <_svfiprintf_r+0x1a6>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d0c6      	beq.n	800e8e4 <_svfiprintf_r+0x130>
 800e956:	9105      	str	r1, [sp, #20]
 800e958:	e7c4      	b.n	800e8e4 <_svfiprintf_r+0x130>
 800e95a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e95e:	4604      	mov	r4, r0
 800e960:	2301      	movs	r3, #1
 800e962:	e7f0      	b.n	800e946 <_svfiprintf_r+0x192>
 800e964:	ab03      	add	r3, sp, #12
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	462a      	mov	r2, r5
 800e96a:	4b0e      	ldr	r3, [pc, #56]	@ (800e9a4 <_svfiprintf_r+0x1f0>)
 800e96c:	a904      	add	r1, sp, #16
 800e96e:	4638      	mov	r0, r7
 800e970:	f7fd fe98 	bl	800c6a4 <_printf_float>
 800e974:	1c42      	adds	r2, r0, #1
 800e976:	4606      	mov	r6, r0
 800e978:	d1d6      	bne.n	800e928 <_svfiprintf_r+0x174>
 800e97a:	89ab      	ldrh	r3, [r5, #12]
 800e97c:	065b      	lsls	r3, r3, #25
 800e97e:	f53f af2d 	bmi.w	800e7dc <_svfiprintf_r+0x28>
 800e982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e984:	e72c      	b.n	800e7e0 <_svfiprintf_r+0x2c>
 800e986:	ab03      	add	r3, sp, #12
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	462a      	mov	r2, r5
 800e98c:	4b05      	ldr	r3, [pc, #20]	@ (800e9a4 <_svfiprintf_r+0x1f0>)
 800e98e:	a904      	add	r1, sp, #16
 800e990:	4638      	mov	r0, r7
 800e992:	f7fe f91f 	bl	800cbd4 <_printf_i>
 800e996:	e7ed      	b.n	800e974 <_svfiprintf_r+0x1c0>
 800e998:	0800f4c8 	.word	0x0800f4c8
 800e99c:	0800f4d2 	.word	0x0800f4d2
 800e9a0:	0800c6a5 	.word	0x0800c6a5
 800e9a4:	0800e6fd 	.word	0x0800e6fd
 800e9a8:	0800f4ce 	.word	0x0800f4ce

0800e9ac <__sflush_r>:
 800e9ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b4:	0716      	lsls	r6, r2, #28
 800e9b6:	4605      	mov	r5, r0
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	d454      	bmi.n	800ea66 <__sflush_r+0xba>
 800e9bc:	684b      	ldr	r3, [r1, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	dc02      	bgt.n	800e9c8 <__sflush_r+0x1c>
 800e9c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	dd48      	ble.n	800ea5a <__sflush_r+0xae>
 800e9c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9ca:	2e00      	cmp	r6, #0
 800e9cc:	d045      	beq.n	800ea5a <__sflush_r+0xae>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9d4:	682f      	ldr	r7, [r5, #0]
 800e9d6:	6a21      	ldr	r1, [r4, #32]
 800e9d8:	602b      	str	r3, [r5, #0]
 800e9da:	d030      	beq.n	800ea3e <__sflush_r+0x92>
 800e9dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9de:	89a3      	ldrh	r3, [r4, #12]
 800e9e0:	0759      	lsls	r1, r3, #29
 800e9e2:	d505      	bpl.n	800e9f0 <__sflush_r+0x44>
 800e9e4:	6863      	ldr	r3, [r4, #4]
 800e9e6:	1ad2      	subs	r2, r2, r3
 800e9e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e9ea:	b10b      	cbz	r3, 800e9f0 <__sflush_r+0x44>
 800e9ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9f4:	6a21      	ldr	r1, [r4, #32]
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	47b0      	blx	r6
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	d106      	bne.n	800ea0e <__sflush_r+0x62>
 800ea00:	6829      	ldr	r1, [r5, #0]
 800ea02:	291d      	cmp	r1, #29
 800ea04:	d82b      	bhi.n	800ea5e <__sflush_r+0xb2>
 800ea06:	4a2a      	ldr	r2, [pc, #168]	@ (800eab0 <__sflush_r+0x104>)
 800ea08:	410a      	asrs	r2, r1
 800ea0a:	07d6      	lsls	r6, r2, #31
 800ea0c:	d427      	bmi.n	800ea5e <__sflush_r+0xb2>
 800ea0e:	2200      	movs	r2, #0
 800ea10:	6062      	str	r2, [r4, #4]
 800ea12:	04d9      	lsls	r1, r3, #19
 800ea14:	6922      	ldr	r2, [r4, #16]
 800ea16:	6022      	str	r2, [r4, #0]
 800ea18:	d504      	bpl.n	800ea24 <__sflush_r+0x78>
 800ea1a:	1c42      	adds	r2, r0, #1
 800ea1c:	d101      	bne.n	800ea22 <__sflush_r+0x76>
 800ea1e:	682b      	ldr	r3, [r5, #0]
 800ea20:	b903      	cbnz	r3, 800ea24 <__sflush_r+0x78>
 800ea22:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea26:	602f      	str	r7, [r5, #0]
 800ea28:	b1b9      	cbz	r1, 800ea5a <__sflush_r+0xae>
 800ea2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea2e:	4299      	cmp	r1, r3
 800ea30:	d002      	beq.n	800ea38 <__sflush_r+0x8c>
 800ea32:	4628      	mov	r0, r5
 800ea34:	f7ff f9e0 	bl	800ddf8 <_free_r>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea3c:	e00d      	b.n	800ea5a <__sflush_r+0xae>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b0      	blx	r6
 800ea44:	4602      	mov	r2, r0
 800ea46:	1c50      	adds	r0, r2, #1
 800ea48:	d1c9      	bne.n	800e9de <__sflush_r+0x32>
 800ea4a:	682b      	ldr	r3, [r5, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d0c6      	beq.n	800e9de <__sflush_r+0x32>
 800ea50:	2b1d      	cmp	r3, #29
 800ea52:	d001      	beq.n	800ea58 <__sflush_r+0xac>
 800ea54:	2b16      	cmp	r3, #22
 800ea56:	d11e      	bne.n	800ea96 <__sflush_r+0xea>
 800ea58:	602f      	str	r7, [r5, #0]
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	e022      	b.n	800eaa4 <__sflush_r+0xf8>
 800ea5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea62:	b21b      	sxth	r3, r3
 800ea64:	e01b      	b.n	800ea9e <__sflush_r+0xf2>
 800ea66:	690f      	ldr	r7, [r1, #16]
 800ea68:	2f00      	cmp	r7, #0
 800ea6a:	d0f6      	beq.n	800ea5a <__sflush_r+0xae>
 800ea6c:	0793      	lsls	r3, r2, #30
 800ea6e:	680e      	ldr	r6, [r1, #0]
 800ea70:	bf08      	it	eq
 800ea72:	694b      	ldreq	r3, [r1, #20]
 800ea74:	600f      	str	r7, [r1, #0]
 800ea76:	bf18      	it	ne
 800ea78:	2300      	movne	r3, #0
 800ea7a:	eba6 0807 	sub.w	r8, r6, r7
 800ea7e:	608b      	str	r3, [r1, #8]
 800ea80:	f1b8 0f00 	cmp.w	r8, #0
 800ea84:	dde9      	ble.n	800ea5a <__sflush_r+0xae>
 800ea86:	6a21      	ldr	r1, [r4, #32]
 800ea88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ea8a:	4643      	mov	r3, r8
 800ea8c:	463a      	mov	r2, r7
 800ea8e:	4628      	mov	r0, r5
 800ea90:	47b0      	blx	r6
 800ea92:	2800      	cmp	r0, #0
 800ea94:	dc08      	bgt.n	800eaa8 <__sflush_r+0xfc>
 800ea96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea9e:	81a3      	strh	r3, [r4, #12]
 800eaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa8:	4407      	add	r7, r0
 800eaaa:	eba8 0800 	sub.w	r8, r8, r0
 800eaae:	e7e7      	b.n	800ea80 <__sflush_r+0xd4>
 800eab0:	dfbffffe 	.word	0xdfbffffe

0800eab4 <_fflush_r>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	690b      	ldr	r3, [r1, #16]
 800eab8:	4605      	mov	r5, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	b913      	cbnz	r3, 800eac4 <_fflush_r+0x10>
 800eabe:	2500      	movs	r5, #0
 800eac0:	4628      	mov	r0, r5
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	b118      	cbz	r0, 800eace <_fflush_r+0x1a>
 800eac6:	6a03      	ldr	r3, [r0, #32]
 800eac8:	b90b      	cbnz	r3, 800eace <_fflush_r+0x1a>
 800eaca:	f7fe fa2f 	bl	800cf2c <__sinit>
 800eace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d0f3      	beq.n	800eabe <_fflush_r+0xa>
 800ead6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ead8:	07d0      	lsls	r0, r2, #31
 800eada:	d404      	bmi.n	800eae6 <_fflush_r+0x32>
 800eadc:	0599      	lsls	r1, r3, #22
 800eade:	d402      	bmi.n	800eae6 <_fflush_r+0x32>
 800eae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eae2:	f7fe fb3a 	bl	800d15a <__retarget_lock_acquire_recursive>
 800eae6:	4628      	mov	r0, r5
 800eae8:	4621      	mov	r1, r4
 800eaea:	f7ff ff5f 	bl	800e9ac <__sflush_r>
 800eaee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eaf0:	07da      	lsls	r2, r3, #31
 800eaf2:	4605      	mov	r5, r0
 800eaf4:	d4e4      	bmi.n	800eac0 <_fflush_r+0xc>
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	059b      	lsls	r3, r3, #22
 800eafa:	d4e1      	bmi.n	800eac0 <_fflush_r+0xc>
 800eafc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eafe:	f7fe fb2d 	bl	800d15c <__retarget_lock_release_recursive>
 800eb02:	e7dd      	b.n	800eac0 <_fflush_r+0xc>

0800eb04 <memmove>:
 800eb04:	4288      	cmp	r0, r1
 800eb06:	b510      	push	{r4, lr}
 800eb08:	eb01 0402 	add.w	r4, r1, r2
 800eb0c:	d902      	bls.n	800eb14 <memmove+0x10>
 800eb0e:	4284      	cmp	r4, r0
 800eb10:	4623      	mov	r3, r4
 800eb12:	d807      	bhi.n	800eb24 <memmove+0x20>
 800eb14:	1e43      	subs	r3, r0, #1
 800eb16:	42a1      	cmp	r1, r4
 800eb18:	d008      	beq.n	800eb2c <memmove+0x28>
 800eb1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb22:	e7f8      	b.n	800eb16 <memmove+0x12>
 800eb24:	4402      	add	r2, r0
 800eb26:	4601      	mov	r1, r0
 800eb28:	428a      	cmp	r2, r1
 800eb2a:	d100      	bne.n	800eb2e <memmove+0x2a>
 800eb2c:	bd10      	pop	{r4, pc}
 800eb2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb36:	e7f7      	b.n	800eb28 <memmove+0x24>

0800eb38 <_sbrk_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4d06      	ldr	r5, [pc, #24]	@ (800eb54 <_sbrk_r+0x1c>)
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	4604      	mov	r4, r0
 800eb40:	4608      	mov	r0, r1
 800eb42:	602b      	str	r3, [r5, #0]
 800eb44:	f7f3 fe1c 	bl	8002780 <_sbrk>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d102      	bne.n	800eb52 <_sbrk_r+0x1a>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	b103      	cbz	r3, 800eb52 <_sbrk_r+0x1a>
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	bd38      	pop	{r3, r4, r5, pc}
 800eb54:	200050c8 	.word	0x200050c8

0800eb58 <memcpy>:
 800eb58:	440a      	add	r2, r1
 800eb5a:	4291      	cmp	r1, r2
 800eb5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb60:	d100      	bne.n	800eb64 <memcpy+0xc>
 800eb62:	4770      	bx	lr
 800eb64:	b510      	push	{r4, lr}
 800eb66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb6e:	4291      	cmp	r1, r2
 800eb70:	d1f9      	bne.n	800eb66 <memcpy+0xe>
 800eb72:	bd10      	pop	{r4, pc}

0800eb74 <__assert_func>:
 800eb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb76:	4614      	mov	r4, r2
 800eb78:	461a      	mov	r2, r3
 800eb7a:	4b09      	ldr	r3, [pc, #36]	@ (800eba0 <__assert_func+0x2c>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4605      	mov	r5, r0
 800eb80:	68d8      	ldr	r0, [r3, #12]
 800eb82:	b954      	cbnz	r4, 800eb9a <__assert_func+0x26>
 800eb84:	4b07      	ldr	r3, [pc, #28]	@ (800eba4 <__assert_func+0x30>)
 800eb86:	461c      	mov	r4, r3
 800eb88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb8c:	9100      	str	r1, [sp, #0]
 800eb8e:	462b      	mov	r3, r5
 800eb90:	4905      	ldr	r1, [pc, #20]	@ (800eba8 <__assert_func+0x34>)
 800eb92:	f000 f86f 	bl	800ec74 <fiprintf>
 800eb96:	f000 f87f 	bl	800ec98 <abort>
 800eb9a:	4b04      	ldr	r3, [pc, #16]	@ (800ebac <__assert_func+0x38>)
 800eb9c:	e7f4      	b.n	800eb88 <__assert_func+0x14>
 800eb9e:	bf00      	nop
 800eba0:	20000150 	.word	0x20000150
 800eba4:	0800f51e 	.word	0x0800f51e
 800eba8:	0800f4f0 	.word	0x0800f4f0
 800ebac:	0800f4e3 	.word	0x0800f4e3

0800ebb0 <_calloc_r>:
 800ebb0:	b570      	push	{r4, r5, r6, lr}
 800ebb2:	fba1 5402 	umull	r5, r4, r1, r2
 800ebb6:	b93c      	cbnz	r4, 800ebc8 <_calloc_r+0x18>
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7ff f991 	bl	800dee0 <_malloc_r>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	b928      	cbnz	r0, 800ebce <_calloc_r+0x1e>
 800ebc2:	2600      	movs	r6, #0
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
 800ebc8:	220c      	movs	r2, #12
 800ebca:	6002      	str	r2, [r0, #0]
 800ebcc:	e7f9      	b.n	800ebc2 <_calloc_r+0x12>
 800ebce:	462a      	mov	r2, r5
 800ebd0:	4621      	mov	r1, r4
 800ebd2:	f7fe fa44 	bl	800d05e <memset>
 800ebd6:	e7f5      	b.n	800ebc4 <_calloc_r+0x14>

0800ebd8 <__ascii_mbtowc>:
 800ebd8:	b082      	sub	sp, #8
 800ebda:	b901      	cbnz	r1, 800ebde <__ascii_mbtowc+0x6>
 800ebdc:	a901      	add	r1, sp, #4
 800ebde:	b142      	cbz	r2, 800ebf2 <__ascii_mbtowc+0x1a>
 800ebe0:	b14b      	cbz	r3, 800ebf6 <__ascii_mbtowc+0x1e>
 800ebe2:	7813      	ldrb	r3, [r2, #0]
 800ebe4:	600b      	str	r3, [r1, #0]
 800ebe6:	7812      	ldrb	r2, [r2, #0]
 800ebe8:	1e10      	subs	r0, r2, #0
 800ebea:	bf18      	it	ne
 800ebec:	2001      	movne	r0, #1
 800ebee:	b002      	add	sp, #8
 800ebf0:	4770      	bx	lr
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	e7fb      	b.n	800ebee <__ascii_mbtowc+0x16>
 800ebf6:	f06f 0001 	mvn.w	r0, #1
 800ebfa:	e7f8      	b.n	800ebee <__ascii_mbtowc+0x16>

0800ebfc <_realloc_r>:
 800ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec00:	4680      	mov	r8, r0
 800ec02:	4615      	mov	r5, r2
 800ec04:	460c      	mov	r4, r1
 800ec06:	b921      	cbnz	r1, 800ec12 <_realloc_r+0x16>
 800ec08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0c:	4611      	mov	r1, r2
 800ec0e:	f7ff b967 	b.w	800dee0 <_malloc_r>
 800ec12:	b92a      	cbnz	r2, 800ec20 <_realloc_r+0x24>
 800ec14:	f7ff f8f0 	bl	800ddf8 <_free_r>
 800ec18:	2400      	movs	r4, #0
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec20:	f000 f841 	bl	800eca6 <_malloc_usable_size_r>
 800ec24:	4285      	cmp	r5, r0
 800ec26:	4606      	mov	r6, r0
 800ec28:	d802      	bhi.n	800ec30 <_realloc_r+0x34>
 800ec2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec2e:	d8f4      	bhi.n	800ec1a <_realloc_r+0x1e>
 800ec30:	4629      	mov	r1, r5
 800ec32:	4640      	mov	r0, r8
 800ec34:	f7ff f954 	bl	800dee0 <_malloc_r>
 800ec38:	4607      	mov	r7, r0
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d0ec      	beq.n	800ec18 <_realloc_r+0x1c>
 800ec3e:	42b5      	cmp	r5, r6
 800ec40:	462a      	mov	r2, r5
 800ec42:	4621      	mov	r1, r4
 800ec44:	bf28      	it	cs
 800ec46:	4632      	movcs	r2, r6
 800ec48:	f7ff ff86 	bl	800eb58 <memcpy>
 800ec4c:	4621      	mov	r1, r4
 800ec4e:	4640      	mov	r0, r8
 800ec50:	f7ff f8d2 	bl	800ddf8 <_free_r>
 800ec54:	463c      	mov	r4, r7
 800ec56:	e7e0      	b.n	800ec1a <_realloc_r+0x1e>

0800ec58 <__ascii_wctomb>:
 800ec58:	4603      	mov	r3, r0
 800ec5a:	4608      	mov	r0, r1
 800ec5c:	b141      	cbz	r1, 800ec70 <__ascii_wctomb+0x18>
 800ec5e:	2aff      	cmp	r2, #255	@ 0xff
 800ec60:	d904      	bls.n	800ec6c <__ascii_wctomb+0x14>
 800ec62:	228a      	movs	r2, #138	@ 0x8a
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295
 800ec6a:	4770      	bx	lr
 800ec6c:	700a      	strb	r2, [r1, #0]
 800ec6e:	2001      	movs	r0, #1
 800ec70:	4770      	bx	lr
	...

0800ec74 <fiprintf>:
 800ec74:	b40e      	push	{r1, r2, r3}
 800ec76:	b503      	push	{r0, r1, lr}
 800ec78:	4601      	mov	r1, r0
 800ec7a:	ab03      	add	r3, sp, #12
 800ec7c:	4805      	ldr	r0, [pc, #20]	@ (800ec94 <fiprintf+0x20>)
 800ec7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec82:	6800      	ldr	r0, [r0, #0]
 800ec84:	9301      	str	r3, [sp, #4]
 800ec86:	f000 f83f 	bl	800ed08 <_vfiprintf_r>
 800ec8a:	b002      	add	sp, #8
 800ec8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec90:	b003      	add	sp, #12
 800ec92:	4770      	bx	lr
 800ec94:	20000150 	.word	0x20000150

0800ec98 <abort>:
 800ec98:	b508      	push	{r3, lr}
 800ec9a:	2006      	movs	r0, #6
 800ec9c:	f000 fa08 	bl	800f0b0 <raise>
 800eca0:	2001      	movs	r0, #1
 800eca2:	f7f3 fcf5 	bl	8002690 <_exit>

0800eca6 <_malloc_usable_size_r>:
 800eca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecaa:	1f18      	subs	r0, r3, #4
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	bfbc      	itt	lt
 800ecb0:	580b      	ldrlt	r3, [r1, r0]
 800ecb2:	18c0      	addlt	r0, r0, r3
 800ecb4:	4770      	bx	lr

0800ecb6 <__sfputc_r>:
 800ecb6:	6893      	ldr	r3, [r2, #8]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	b410      	push	{r4}
 800ecbe:	6093      	str	r3, [r2, #8]
 800ecc0:	da08      	bge.n	800ecd4 <__sfputc_r+0x1e>
 800ecc2:	6994      	ldr	r4, [r2, #24]
 800ecc4:	42a3      	cmp	r3, r4
 800ecc6:	db01      	blt.n	800eccc <__sfputc_r+0x16>
 800ecc8:	290a      	cmp	r1, #10
 800ecca:	d103      	bne.n	800ecd4 <__sfputc_r+0x1e>
 800eccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecd0:	f000 b932 	b.w	800ef38 <__swbuf_r>
 800ecd4:	6813      	ldr	r3, [r2, #0]
 800ecd6:	1c58      	adds	r0, r3, #1
 800ecd8:	6010      	str	r0, [r2, #0]
 800ecda:	7019      	strb	r1, [r3, #0]
 800ecdc:	4608      	mov	r0, r1
 800ecde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <__sfputs_r>:
 800ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece6:	4606      	mov	r6, r0
 800ece8:	460f      	mov	r7, r1
 800ecea:	4614      	mov	r4, r2
 800ecec:	18d5      	adds	r5, r2, r3
 800ecee:	42ac      	cmp	r4, r5
 800ecf0:	d101      	bne.n	800ecf6 <__sfputs_r+0x12>
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	e007      	b.n	800ed06 <__sfputs_r+0x22>
 800ecf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecfa:	463a      	mov	r2, r7
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	f7ff ffda 	bl	800ecb6 <__sfputc_r>
 800ed02:	1c43      	adds	r3, r0, #1
 800ed04:	d1f3      	bne.n	800ecee <__sfputs_r+0xa>
 800ed06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed08 <_vfiprintf_r>:
 800ed08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0c:	460d      	mov	r5, r1
 800ed0e:	b09d      	sub	sp, #116	@ 0x74
 800ed10:	4614      	mov	r4, r2
 800ed12:	4698      	mov	r8, r3
 800ed14:	4606      	mov	r6, r0
 800ed16:	b118      	cbz	r0, 800ed20 <_vfiprintf_r+0x18>
 800ed18:	6a03      	ldr	r3, [r0, #32]
 800ed1a:	b90b      	cbnz	r3, 800ed20 <_vfiprintf_r+0x18>
 800ed1c:	f7fe f906 	bl	800cf2c <__sinit>
 800ed20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed22:	07d9      	lsls	r1, r3, #31
 800ed24:	d405      	bmi.n	800ed32 <_vfiprintf_r+0x2a>
 800ed26:	89ab      	ldrh	r3, [r5, #12]
 800ed28:	059a      	lsls	r2, r3, #22
 800ed2a:	d402      	bmi.n	800ed32 <_vfiprintf_r+0x2a>
 800ed2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed2e:	f7fe fa14 	bl	800d15a <__retarget_lock_acquire_recursive>
 800ed32:	89ab      	ldrh	r3, [r5, #12]
 800ed34:	071b      	lsls	r3, r3, #28
 800ed36:	d501      	bpl.n	800ed3c <_vfiprintf_r+0x34>
 800ed38:	692b      	ldr	r3, [r5, #16]
 800ed3a:	b99b      	cbnz	r3, 800ed64 <_vfiprintf_r+0x5c>
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f000 f938 	bl	800efb4 <__swsetup_r>
 800ed44:	b170      	cbz	r0, 800ed64 <_vfiprintf_r+0x5c>
 800ed46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed48:	07dc      	lsls	r4, r3, #31
 800ed4a:	d504      	bpl.n	800ed56 <_vfiprintf_r+0x4e>
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed50:	b01d      	add	sp, #116	@ 0x74
 800ed52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	0598      	lsls	r0, r3, #22
 800ed5a:	d4f7      	bmi.n	800ed4c <_vfiprintf_r+0x44>
 800ed5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed5e:	f7fe f9fd 	bl	800d15c <__retarget_lock_release_recursive>
 800ed62:	e7f3      	b.n	800ed4c <_vfiprintf_r+0x44>
 800ed64:	2300      	movs	r3, #0
 800ed66:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed68:	2320      	movs	r3, #32
 800ed6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed72:	2330      	movs	r3, #48	@ 0x30
 800ed74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef24 <_vfiprintf_r+0x21c>
 800ed78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed7c:	f04f 0901 	mov.w	r9, #1
 800ed80:	4623      	mov	r3, r4
 800ed82:	469a      	mov	sl, r3
 800ed84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed88:	b10a      	cbz	r2, 800ed8e <_vfiprintf_r+0x86>
 800ed8a:	2a25      	cmp	r2, #37	@ 0x25
 800ed8c:	d1f9      	bne.n	800ed82 <_vfiprintf_r+0x7a>
 800ed8e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed92:	d00b      	beq.n	800edac <_vfiprintf_r+0xa4>
 800ed94:	465b      	mov	r3, fp
 800ed96:	4622      	mov	r2, r4
 800ed98:	4629      	mov	r1, r5
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f7ff ffa2 	bl	800ece4 <__sfputs_r>
 800eda0:	3001      	adds	r0, #1
 800eda2:	f000 80a7 	beq.w	800eef4 <_vfiprintf_r+0x1ec>
 800eda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eda8:	445a      	add	r2, fp
 800edaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800edac:	f89a 3000 	ldrb.w	r3, [sl]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 809f 	beq.w	800eef4 <_vfiprintf_r+0x1ec>
 800edb6:	2300      	movs	r3, #0
 800edb8:	f04f 32ff 	mov.w	r2, #4294967295
 800edbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edc0:	f10a 0a01 	add.w	sl, sl, #1
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	9307      	str	r3, [sp, #28]
 800edc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edcc:	931a      	str	r3, [sp, #104]	@ 0x68
 800edce:	4654      	mov	r4, sl
 800edd0:	2205      	movs	r2, #5
 800edd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd6:	4853      	ldr	r0, [pc, #332]	@ (800ef24 <_vfiprintf_r+0x21c>)
 800edd8:	f7f1 f9fa 	bl	80001d0 <memchr>
 800eddc:	9a04      	ldr	r2, [sp, #16]
 800edde:	b9d8      	cbnz	r0, 800ee18 <_vfiprintf_r+0x110>
 800ede0:	06d1      	lsls	r1, r2, #27
 800ede2:	bf44      	itt	mi
 800ede4:	2320      	movmi	r3, #32
 800ede6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edea:	0713      	lsls	r3, r2, #28
 800edec:	bf44      	itt	mi
 800edee:	232b      	movmi	r3, #43	@ 0x2b
 800edf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edf4:	f89a 3000 	ldrb.w	r3, [sl]
 800edf8:	2b2a      	cmp	r3, #42	@ 0x2a
 800edfa:	d015      	beq.n	800ee28 <_vfiprintf_r+0x120>
 800edfc:	9a07      	ldr	r2, [sp, #28]
 800edfe:	4654      	mov	r4, sl
 800ee00:	2000      	movs	r0, #0
 800ee02:	f04f 0c0a 	mov.w	ip, #10
 800ee06:	4621      	mov	r1, r4
 800ee08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee0c:	3b30      	subs	r3, #48	@ 0x30
 800ee0e:	2b09      	cmp	r3, #9
 800ee10:	d94b      	bls.n	800eeaa <_vfiprintf_r+0x1a2>
 800ee12:	b1b0      	cbz	r0, 800ee42 <_vfiprintf_r+0x13a>
 800ee14:	9207      	str	r2, [sp, #28]
 800ee16:	e014      	b.n	800ee42 <_vfiprintf_r+0x13a>
 800ee18:	eba0 0308 	sub.w	r3, r0, r8
 800ee1c:	fa09 f303 	lsl.w	r3, r9, r3
 800ee20:	4313      	orrs	r3, r2
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	46a2      	mov	sl, r4
 800ee26:	e7d2      	b.n	800edce <_vfiprintf_r+0xc6>
 800ee28:	9b03      	ldr	r3, [sp, #12]
 800ee2a:	1d19      	adds	r1, r3, #4
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	9103      	str	r1, [sp, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	bfbb      	ittet	lt
 800ee34:	425b      	neglt	r3, r3
 800ee36:	f042 0202 	orrlt.w	r2, r2, #2
 800ee3a:	9307      	strge	r3, [sp, #28]
 800ee3c:	9307      	strlt	r3, [sp, #28]
 800ee3e:	bfb8      	it	lt
 800ee40:	9204      	strlt	r2, [sp, #16]
 800ee42:	7823      	ldrb	r3, [r4, #0]
 800ee44:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee46:	d10a      	bne.n	800ee5e <_vfiprintf_r+0x156>
 800ee48:	7863      	ldrb	r3, [r4, #1]
 800ee4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee4c:	d132      	bne.n	800eeb4 <_vfiprintf_r+0x1ac>
 800ee4e:	9b03      	ldr	r3, [sp, #12]
 800ee50:	1d1a      	adds	r2, r3, #4
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	9203      	str	r2, [sp, #12]
 800ee56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee5a:	3402      	adds	r4, #2
 800ee5c:	9305      	str	r3, [sp, #20]
 800ee5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef34 <_vfiprintf_r+0x22c>
 800ee62:	7821      	ldrb	r1, [r4, #0]
 800ee64:	2203      	movs	r2, #3
 800ee66:	4650      	mov	r0, sl
 800ee68:	f7f1 f9b2 	bl	80001d0 <memchr>
 800ee6c:	b138      	cbz	r0, 800ee7e <_vfiprintf_r+0x176>
 800ee6e:	9b04      	ldr	r3, [sp, #16]
 800ee70:	eba0 000a 	sub.w	r0, r0, sl
 800ee74:	2240      	movs	r2, #64	@ 0x40
 800ee76:	4082      	lsls	r2, r0
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	3401      	adds	r4, #1
 800ee7c:	9304      	str	r3, [sp, #16]
 800ee7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee82:	4829      	ldr	r0, [pc, #164]	@ (800ef28 <_vfiprintf_r+0x220>)
 800ee84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee88:	2206      	movs	r2, #6
 800ee8a:	f7f1 f9a1 	bl	80001d0 <memchr>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d03f      	beq.n	800ef12 <_vfiprintf_r+0x20a>
 800ee92:	4b26      	ldr	r3, [pc, #152]	@ (800ef2c <_vfiprintf_r+0x224>)
 800ee94:	bb1b      	cbnz	r3, 800eede <_vfiprintf_r+0x1d6>
 800ee96:	9b03      	ldr	r3, [sp, #12]
 800ee98:	3307      	adds	r3, #7
 800ee9a:	f023 0307 	bic.w	r3, r3, #7
 800ee9e:	3308      	adds	r3, #8
 800eea0:	9303      	str	r3, [sp, #12]
 800eea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eea4:	443b      	add	r3, r7
 800eea6:	9309      	str	r3, [sp, #36]	@ 0x24
 800eea8:	e76a      	b.n	800ed80 <_vfiprintf_r+0x78>
 800eeaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800eeae:	460c      	mov	r4, r1
 800eeb0:	2001      	movs	r0, #1
 800eeb2:	e7a8      	b.n	800ee06 <_vfiprintf_r+0xfe>
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	3401      	adds	r4, #1
 800eeb8:	9305      	str	r3, [sp, #20]
 800eeba:	4619      	mov	r1, r3
 800eebc:	f04f 0c0a 	mov.w	ip, #10
 800eec0:	4620      	mov	r0, r4
 800eec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eec6:	3a30      	subs	r2, #48	@ 0x30
 800eec8:	2a09      	cmp	r2, #9
 800eeca:	d903      	bls.n	800eed4 <_vfiprintf_r+0x1cc>
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d0c6      	beq.n	800ee5e <_vfiprintf_r+0x156>
 800eed0:	9105      	str	r1, [sp, #20]
 800eed2:	e7c4      	b.n	800ee5e <_vfiprintf_r+0x156>
 800eed4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eed8:	4604      	mov	r4, r0
 800eeda:	2301      	movs	r3, #1
 800eedc:	e7f0      	b.n	800eec0 <_vfiprintf_r+0x1b8>
 800eede:	ab03      	add	r3, sp, #12
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	462a      	mov	r2, r5
 800eee4:	4b12      	ldr	r3, [pc, #72]	@ (800ef30 <_vfiprintf_r+0x228>)
 800eee6:	a904      	add	r1, sp, #16
 800eee8:	4630      	mov	r0, r6
 800eeea:	f7fd fbdb 	bl	800c6a4 <_printf_float>
 800eeee:	4607      	mov	r7, r0
 800eef0:	1c78      	adds	r0, r7, #1
 800eef2:	d1d6      	bne.n	800eea2 <_vfiprintf_r+0x19a>
 800eef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eef6:	07d9      	lsls	r1, r3, #31
 800eef8:	d405      	bmi.n	800ef06 <_vfiprintf_r+0x1fe>
 800eefa:	89ab      	ldrh	r3, [r5, #12]
 800eefc:	059a      	lsls	r2, r3, #22
 800eefe:	d402      	bmi.n	800ef06 <_vfiprintf_r+0x1fe>
 800ef00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef02:	f7fe f92b 	bl	800d15c <__retarget_lock_release_recursive>
 800ef06:	89ab      	ldrh	r3, [r5, #12]
 800ef08:	065b      	lsls	r3, r3, #25
 800ef0a:	f53f af1f 	bmi.w	800ed4c <_vfiprintf_r+0x44>
 800ef0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef10:	e71e      	b.n	800ed50 <_vfiprintf_r+0x48>
 800ef12:	ab03      	add	r3, sp, #12
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	462a      	mov	r2, r5
 800ef18:	4b05      	ldr	r3, [pc, #20]	@ (800ef30 <_vfiprintf_r+0x228>)
 800ef1a:	a904      	add	r1, sp, #16
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	f7fd fe59 	bl	800cbd4 <_printf_i>
 800ef22:	e7e4      	b.n	800eeee <_vfiprintf_r+0x1e6>
 800ef24:	0800f4c8 	.word	0x0800f4c8
 800ef28:	0800f4d2 	.word	0x0800f4d2
 800ef2c:	0800c6a5 	.word	0x0800c6a5
 800ef30:	0800ece5 	.word	0x0800ece5
 800ef34:	0800f4ce 	.word	0x0800f4ce

0800ef38 <__swbuf_r>:
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3a:	460e      	mov	r6, r1
 800ef3c:	4614      	mov	r4, r2
 800ef3e:	4605      	mov	r5, r0
 800ef40:	b118      	cbz	r0, 800ef4a <__swbuf_r+0x12>
 800ef42:	6a03      	ldr	r3, [r0, #32]
 800ef44:	b90b      	cbnz	r3, 800ef4a <__swbuf_r+0x12>
 800ef46:	f7fd fff1 	bl	800cf2c <__sinit>
 800ef4a:	69a3      	ldr	r3, [r4, #24]
 800ef4c:	60a3      	str	r3, [r4, #8]
 800ef4e:	89a3      	ldrh	r3, [r4, #12]
 800ef50:	071a      	lsls	r2, r3, #28
 800ef52:	d501      	bpl.n	800ef58 <__swbuf_r+0x20>
 800ef54:	6923      	ldr	r3, [r4, #16]
 800ef56:	b943      	cbnz	r3, 800ef6a <__swbuf_r+0x32>
 800ef58:	4621      	mov	r1, r4
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f000 f82a 	bl	800efb4 <__swsetup_r>
 800ef60:	b118      	cbz	r0, 800ef6a <__swbuf_r+0x32>
 800ef62:	f04f 37ff 	mov.w	r7, #4294967295
 800ef66:	4638      	mov	r0, r7
 800ef68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	6922      	ldr	r2, [r4, #16]
 800ef6e:	1a98      	subs	r0, r3, r2
 800ef70:	6963      	ldr	r3, [r4, #20]
 800ef72:	b2f6      	uxtb	r6, r6
 800ef74:	4283      	cmp	r3, r0
 800ef76:	4637      	mov	r7, r6
 800ef78:	dc05      	bgt.n	800ef86 <__swbuf_r+0x4e>
 800ef7a:	4621      	mov	r1, r4
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f7ff fd99 	bl	800eab4 <_fflush_r>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	d1ed      	bne.n	800ef62 <__swbuf_r+0x2a>
 800ef86:	68a3      	ldr	r3, [r4, #8]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	60a3      	str	r3, [r4, #8]
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	1c5a      	adds	r2, r3, #1
 800ef90:	6022      	str	r2, [r4, #0]
 800ef92:	701e      	strb	r6, [r3, #0]
 800ef94:	6962      	ldr	r2, [r4, #20]
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d004      	beq.n	800efa6 <__swbuf_r+0x6e>
 800ef9c:	89a3      	ldrh	r3, [r4, #12]
 800ef9e:	07db      	lsls	r3, r3, #31
 800efa0:	d5e1      	bpl.n	800ef66 <__swbuf_r+0x2e>
 800efa2:	2e0a      	cmp	r6, #10
 800efa4:	d1df      	bne.n	800ef66 <__swbuf_r+0x2e>
 800efa6:	4621      	mov	r1, r4
 800efa8:	4628      	mov	r0, r5
 800efaa:	f7ff fd83 	bl	800eab4 <_fflush_r>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0d9      	beq.n	800ef66 <__swbuf_r+0x2e>
 800efb2:	e7d6      	b.n	800ef62 <__swbuf_r+0x2a>

0800efb4 <__swsetup_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4b29      	ldr	r3, [pc, #164]	@ (800f05c <__swsetup_r+0xa8>)
 800efb8:	4605      	mov	r5, r0
 800efba:	6818      	ldr	r0, [r3, #0]
 800efbc:	460c      	mov	r4, r1
 800efbe:	b118      	cbz	r0, 800efc8 <__swsetup_r+0x14>
 800efc0:	6a03      	ldr	r3, [r0, #32]
 800efc2:	b90b      	cbnz	r3, 800efc8 <__swsetup_r+0x14>
 800efc4:	f7fd ffb2 	bl	800cf2c <__sinit>
 800efc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efcc:	0719      	lsls	r1, r3, #28
 800efce:	d422      	bmi.n	800f016 <__swsetup_r+0x62>
 800efd0:	06da      	lsls	r2, r3, #27
 800efd2:	d407      	bmi.n	800efe4 <__swsetup_r+0x30>
 800efd4:	2209      	movs	r2, #9
 800efd6:	602a      	str	r2, [r5, #0]
 800efd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	f04f 30ff 	mov.w	r0, #4294967295
 800efe2:	e033      	b.n	800f04c <__swsetup_r+0x98>
 800efe4:	0758      	lsls	r0, r3, #29
 800efe6:	d512      	bpl.n	800f00e <__swsetup_r+0x5a>
 800efe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800efea:	b141      	cbz	r1, 800effe <__swsetup_r+0x4a>
 800efec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eff0:	4299      	cmp	r1, r3
 800eff2:	d002      	beq.n	800effa <__swsetup_r+0x46>
 800eff4:	4628      	mov	r0, r5
 800eff6:	f7fe feff 	bl	800ddf8 <_free_r>
 800effa:	2300      	movs	r3, #0
 800effc:	6363      	str	r3, [r4, #52]	@ 0x34
 800effe:	89a3      	ldrh	r3, [r4, #12]
 800f000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f004:	81a3      	strh	r3, [r4, #12]
 800f006:	2300      	movs	r3, #0
 800f008:	6063      	str	r3, [r4, #4]
 800f00a:	6923      	ldr	r3, [r4, #16]
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	f043 0308 	orr.w	r3, r3, #8
 800f014:	81a3      	strh	r3, [r4, #12]
 800f016:	6923      	ldr	r3, [r4, #16]
 800f018:	b94b      	cbnz	r3, 800f02e <__swsetup_r+0x7a>
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f024:	d003      	beq.n	800f02e <__swsetup_r+0x7a>
 800f026:	4621      	mov	r1, r4
 800f028:	4628      	mov	r0, r5
 800f02a:	f000 f883 	bl	800f134 <__smakebuf_r>
 800f02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f032:	f013 0201 	ands.w	r2, r3, #1
 800f036:	d00a      	beq.n	800f04e <__swsetup_r+0x9a>
 800f038:	2200      	movs	r2, #0
 800f03a:	60a2      	str	r2, [r4, #8]
 800f03c:	6962      	ldr	r2, [r4, #20]
 800f03e:	4252      	negs	r2, r2
 800f040:	61a2      	str	r2, [r4, #24]
 800f042:	6922      	ldr	r2, [r4, #16]
 800f044:	b942      	cbnz	r2, 800f058 <__swsetup_r+0xa4>
 800f046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f04a:	d1c5      	bne.n	800efd8 <__swsetup_r+0x24>
 800f04c:	bd38      	pop	{r3, r4, r5, pc}
 800f04e:	0799      	lsls	r1, r3, #30
 800f050:	bf58      	it	pl
 800f052:	6962      	ldrpl	r2, [r4, #20]
 800f054:	60a2      	str	r2, [r4, #8]
 800f056:	e7f4      	b.n	800f042 <__swsetup_r+0x8e>
 800f058:	2000      	movs	r0, #0
 800f05a:	e7f7      	b.n	800f04c <__swsetup_r+0x98>
 800f05c:	20000150 	.word	0x20000150

0800f060 <_raise_r>:
 800f060:	291f      	cmp	r1, #31
 800f062:	b538      	push	{r3, r4, r5, lr}
 800f064:	4605      	mov	r5, r0
 800f066:	460c      	mov	r4, r1
 800f068:	d904      	bls.n	800f074 <_raise_r+0x14>
 800f06a:	2316      	movs	r3, #22
 800f06c:	6003      	str	r3, [r0, #0]
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f076:	b112      	cbz	r2, 800f07e <_raise_r+0x1e>
 800f078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f07c:	b94b      	cbnz	r3, 800f092 <_raise_r+0x32>
 800f07e:	4628      	mov	r0, r5
 800f080:	f000 f830 	bl	800f0e4 <_getpid_r>
 800f084:	4622      	mov	r2, r4
 800f086:	4601      	mov	r1, r0
 800f088:	4628      	mov	r0, r5
 800f08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f08e:	f000 b817 	b.w	800f0c0 <_kill_r>
 800f092:	2b01      	cmp	r3, #1
 800f094:	d00a      	beq.n	800f0ac <_raise_r+0x4c>
 800f096:	1c59      	adds	r1, r3, #1
 800f098:	d103      	bne.n	800f0a2 <_raise_r+0x42>
 800f09a:	2316      	movs	r3, #22
 800f09c:	6003      	str	r3, [r0, #0]
 800f09e:	2001      	movs	r0, #1
 800f0a0:	e7e7      	b.n	800f072 <_raise_r+0x12>
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	4798      	blx	r3
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	e7e0      	b.n	800f072 <_raise_r+0x12>

0800f0b0 <raise>:
 800f0b0:	4b02      	ldr	r3, [pc, #8]	@ (800f0bc <raise+0xc>)
 800f0b2:	4601      	mov	r1, r0
 800f0b4:	6818      	ldr	r0, [r3, #0]
 800f0b6:	f7ff bfd3 	b.w	800f060 <_raise_r>
 800f0ba:	bf00      	nop
 800f0bc:	20000150 	.word	0x20000150

0800f0c0 <_kill_r>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	4d07      	ldr	r5, [pc, #28]	@ (800f0e0 <_kill_r+0x20>)
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	4608      	mov	r0, r1
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	602b      	str	r3, [r5, #0]
 800f0ce:	f7f3 facf 	bl	8002670 <_kill>
 800f0d2:	1c43      	adds	r3, r0, #1
 800f0d4:	d102      	bne.n	800f0dc <_kill_r+0x1c>
 800f0d6:	682b      	ldr	r3, [r5, #0]
 800f0d8:	b103      	cbz	r3, 800f0dc <_kill_r+0x1c>
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	bd38      	pop	{r3, r4, r5, pc}
 800f0de:	bf00      	nop
 800f0e0:	200050c8 	.word	0x200050c8

0800f0e4 <_getpid_r>:
 800f0e4:	f7f3 babc 	b.w	8002660 <_getpid>

0800f0e8 <__swhatbuf_r>:
 800f0e8:	b570      	push	{r4, r5, r6, lr}
 800f0ea:	460c      	mov	r4, r1
 800f0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0f0:	2900      	cmp	r1, #0
 800f0f2:	b096      	sub	sp, #88	@ 0x58
 800f0f4:	4615      	mov	r5, r2
 800f0f6:	461e      	mov	r6, r3
 800f0f8:	da0d      	bge.n	800f116 <__swhatbuf_r+0x2e>
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f100:	f04f 0100 	mov.w	r1, #0
 800f104:	bf14      	ite	ne
 800f106:	2340      	movne	r3, #64	@ 0x40
 800f108:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f10c:	2000      	movs	r0, #0
 800f10e:	6031      	str	r1, [r6, #0]
 800f110:	602b      	str	r3, [r5, #0]
 800f112:	b016      	add	sp, #88	@ 0x58
 800f114:	bd70      	pop	{r4, r5, r6, pc}
 800f116:	466a      	mov	r2, sp
 800f118:	f000 f848 	bl	800f1ac <_fstat_r>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	dbec      	blt.n	800f0fa <__swhatbuf_r+0x12>
 800f120:	9901      	ldr	r1, [sp, #4]
 800f122:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f126:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f12a:	4259      	negs	r1, r3
 800f12c:	4159      	adcs	r1, r3
 800f12e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f132:	e7eb      	b.n	800f10c <__swhatbuf_r+0x24>

0800f134 <__smakebuf_r>:
 800f134:	898b      	ldrh	r3, [r1, #12]
 800f136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f138:	079d      	lsls	r5, r3, #30
 800f13a:	4606      	mov	r6, r0
 800f13c:	460c      	mov	r4, r1
 800f13e:	d507      	bpl.n	800f150 <__smakebuf_r+0x1c>
 800f140:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	6123      	str	r3, [r4, #16]
 800f148:	2301      	movs	r3, #1
 800f14a:	6163      	str	r3, [r4, #20]
 800f14c:	b003      	add	sp, #12
 800f14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f150:	ab01      	add	r3, sp, #4
 800f152:	466a      	mov	r2, sp
 800f154:	f7ff ffc8 	bl	800f0e8 <__swhatbuf_r>
 800f158:	9f00      	ldr	r7, [sp, #0]
 800f15a:	4605      	mov	r5, r0
 800f15c:	4639      	mov	r1, r7
 800f15e:	4630      	mov	r0, r6
 800f160:	f7fe febe 	bl	800dee0 <_malloc_r>
 800f164:	b948      	cbnz	r0, 800f17a <__smakebuf_r+0x46>
 800f166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f16a:	059a      	lsls	r2, r3, #22
 800f16c:	d4ee      	bmi.n	800f14c <__smakebuf_r+0x18>
 800f16e:	f023 0303 	bic.w	r3, r3, #3
 800f172:	f043 0302 	orr.w	r3, r3, #2
 800f176:	81a3      	strh	r3, [r4, #12]
 800f178:	e7e2      	b.n	800f140 <__smakebuf_r+0xc>
 800f17a:	89a3      	ldrh	r3, [r4, #12]
 800f17c:	6020      	str	r0, [r4, #0]
 800f17e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f182:	81a3      	strh	r3, [r4, #12]
 800f184:	9b01      	ldr	r3, [sp, #4]
 800f186:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f18a:	b15b      	cbz	r3, 800f1a4 <__smakebuf_r+0x70>
 800f18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f190:	4630      	mov	r0, r6
 800f192:	f000 f81d 	bl	800f1d0 <_isatty_r>
 800f196:	b128      	cbz	r0, 800f1a4 <__smakebuf_r+0x70>
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	f023 0303 	bic.w	r3, r3, #3
 800f19e:	f043 0301 	orr.w	r3, r3, #1
 800f1a2:	81a3      	strh	r3, [r4, #12]
 800f1a4:	89a3      	ldrh	r3, [r4, #12]
 800f1a6:	431d      	orrs	r5, r3
 800f1a8:	81a5      	strh	r5, [r4, #12]
 800f1aa:	e7cf      	b.n	800f14c <__smakebuf_r+0x18>

0800f1ac <_fstat_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4d07      	ldr	r5, [pc, #28]	@ (800f1cc <_fstat_r+0x20>)
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	4608      	mov	r0, r1
 800f1b6:	4611      	mov	r1, r2
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	f7f3 fab9 	bl	8002730 <_fstat>
 800f1be:	1c43      	adds	r3, r0, #1
 800f1c0:	d102      	bne.n	800f1c8 <_fstat_r+0x1c>
 800f1c2:	682b      	ldr	r3, [r5, #0]
 800f1c4:	b103      	cbz	r3, 800f1c8 <_fstat_r+0x1c>
 800f1c6:	6023      	str	r3, [r4, #0]
 800f1c8:	bd38      	pop	{r3, r4, r5, pc}
 800f1ca:	bf00      	nop
 800f1cc:	200050c8 	.word	0x200050c8

0800f1d0 <_isatty_r>:
 800f1d0:	b538      	push	{r3, r4, r5, lr}
 800f1d2:	4d06      	ldr	r5, [pc, #24]	@ (800f1ec <_isatty_r+0x1c>)
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4608      	mov	r0, r1
 800f1da:	602b      	str	r3, [r5, #0]
 800f1dc:	f7f3 fab8 	bl	8002750 <_isatty>
 800f1e0:	1c43      	adds	r3, r0, #1
 800f1e2:	d102      	bne.n	800f1ea <_isatty_r+0x1a>
 800f1e4:	682b      	ldr	r3, [r5, #0]
 800f1e6:	b103      	cbz	r3, 800f1ea <_isatty_r+0x1a>
 800f1e8:	6023      	str	r3, [r4, #0]
 800f1ea:	bd38      	pop	{r3, r4, r5, pc}
 800f1ec:	200050c8 	.word	0x200050c8

0800f1f0 <_init>:
 800f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1f2:	bf00      	nop
 800f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1f6:	bc08      	pop	{r3}
 800f1f8:	469e      	mov	lr, r3
 800f1fa:	4770      	bx	lr

0800f1fc <_fini>:
 800f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fe:	bf00      	nop
 800f200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f202:	bc08      	pop	{r3}
 800f204:	469e      	mov	lr, r3
 800f206:	4770      	bx	lr
